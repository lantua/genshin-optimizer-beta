{"version":3,"file":"static/js/393.87cc6f51.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  equalStr(input.hit.move, \"burst\", input.charEle),\r\n  input.infusion,\r\n  input.team.infusion,\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, prod, greaterEq, naught } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n        [i,\r\n        prod(i, datamine.constellation2.blossomDmgInc)]\r\n        )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1EnemyHp,\r\n          path: condP1EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: {\r\n            belowHp: {\r\n              fields: [{\r\n                node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condSkillInField,\r\n          path: condSkillInFieldPath,\r\n          name: st(\"activeCharField\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            skillInField: {\r\n              fields: [{\r\n                node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6Crystallize,\r\n          path: condC6CrystallizePath,\r\n          name: st(\"protectedByShieldCrystal\"),\r\n          canShow: greaterEq(input.constellation, 6, equal(condSkillInField, \"skillInField\", 1)),\r\n          teamBuff: true,\r\n          states: {\r\n            c6Crystallize: {\r\n              fields: [{\r\n                node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\"}),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condBurstUsed,\r\n          path: condBurstUsedPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            burstUsed: {\r\n              fields: [{\r\n                node: p2Burst_eleMas\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2Stacks,\r\n          path: condC2StacksPath,\r\n          name: trm(\"c2Stacks\"),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n            [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{\r\n                node: c2_burst_dmgInc\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\nconst afterRushingIce = equalStr(\"rush\", condCoil, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease, { key: \"_\" })\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n  infusion: afterRushingIce,\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n            textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => (datamine.skill.atkDecrease[data.get(input.total.skillIndex).value] * 100).toFixed(1),\r\n        unit: \"%\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.atkDecreaseDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.7\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: atk_\r\n      }, {\r\n        canShow: (data) => data.get(condCoil).value !== undefined && data.get(input.asc).value >= 1,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, equal(\"rush\", condCoil, 1)),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: customDmgNode(prod(sum(subscript(input.total.skillIndex, datamine.skill.dmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.manualDetionationDmg)), input.total.atk), \"skill\")\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"critRateBonus\"),\r\n        value: datamine.passive1.critRateInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"aoeRangeBonus\"),\r\n        value: datamine.passive1.aoeInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        node: burst_critRate_\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: nodeC6CritDMG\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }], undefined,\r\n        data => data.get(input.constellation).value >= 1 && data.get(condBurst).value === \"on\",\r\n        false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }], undefined,\r\n        data => data.get(input.constellation).value >= 2 && data.get(condBurst).value === \"on\",\r\n        false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          name: trm(\"c4.name\"),\r\n          teamBuff: true,\r\n          value: condC4,\r\n          path: condC4Path,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(`skill.skillParams.3`),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(`skill.skillParams.4`),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n      },]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_`})\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n      atk: activeInAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(activeInAreaAtkDisp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }], undefined,\r\n        data => data.get(input.asc).value >= 4 && data.get(condInArea).value === \"activeInArea\",\r\n        false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1Atk\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }], undefined,\r\n        data => data.get(input.constellation).value >= 6 && data.get(condInArea).value === \"activeInArea\",\r\n        true, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: skillDmg\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc1 = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    team: {\r\n      infusion: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.fieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            name: \"Frost Field\",\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeAsc1\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.enerCost,\r\n          }, {\r\n            text: \"Spirit Blades Summoned\",\r\n            value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` })\r\n      }], {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        description: tr(\"passive2.description\"),\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      }\r\n      ),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, datamine.passive2.pyroInc)\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n          },\r\n          {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n          },],\r\n          conditional: {\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6C.name\"),\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6DmgBonus,\r\n                }, {\r\n                  node: nodeC6SpdBonus\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C.name\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }\r\n          ]))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6below`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6above`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condA4,\r\n          path: condA4Path,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n            fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 1, \r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6, \r\n  equal(condAfterSkillBurst, \"afterSkillBurst\", \r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_skill_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\r\n        }], undefined, data => data.get(input.constellation).value >=4 && data.get(tally[\"geo\"]).value >= 2, true, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condAfterBurst,\r\n          path: condAfterBurstPath,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          name: st(\"afterUse.burst\"),\r\n          teamBuff: true,\r\n          states: {\r\n            afterBurst: {\r\n              fields: [{\r\n                node: afterBurst_def_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_burst_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          name: trm(\"c1CondName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: trm(\"c1PullSpeed\")\r\n              }, {\r\n                node: skill_dmg_\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: anemo_enemyRes_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          value: condC6,\r\n          path: condC6Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgRed_disp, {key: \"dmgRed_\" })\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: (data) => data.get(input.asc).value >= 4,\r\n        text: st(\"energyRegen\"),\r\n        value: datamine.passive2.energyRegen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        {\r\n          ...sectionTemplate(\"skill\", tr, skill, [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]),\r\n          fieldsHeader: { ...conditionalHeader(\"skill\", tr, skill), title: trm(\"skillPlunge\") }\r\n        },\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          value: condC2,\r\n          path: condC2Path,\r\n          name: trm(\"c2\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2: {\r\n              fields: [{\r\n                node: c2EleMas\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation2\", tr, c2, undefined, { // C2 Party\r\n          canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n          value: condC2P,\r\n          path: condC2PPath,\r\n          teamBuff: true,\r\n          description: tr(\"constellation2.description\"),\r\n          name: st(\"activeCharField\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2p: {\r\n              fields: [{\r\n                node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, undefined, absorbableEle.map(eleKey =>\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          // Only show the description once. Can't be truly blank or it will be filled in with a default.\r\n          description: eleKey === \"hydro\" ? tr(\"passive2.description\") : \" \",\r\n          name: trm(`a4.name_${eleKey}`),\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            swirl: {\r\n              fields: [{\r\n                node: asc4[`${eleKey}_dmg_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      )),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined, [\r\n        sectionTemplate(\"passive3\", tr, passive3, [{\r\n          node: passive\r\n        }], undefined, undefined, true, true),\r\n      ]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region:Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: { \r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n        {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, \r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        { \r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal`, variant:\"success\" }), \r\n        },\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        teamBuff: false,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        //Duration\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.constellation4.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        //Cooldown\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.constellation4.cooldown,\r\n        unit: \"s\"\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: afterRecastInfusion,\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n            }, {\r\n              text: tr(\"auto.skillParams.4\"),\r\n              value: datamine.charged.stamina\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }\r\n      ]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, constant(0.2)))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n              textSuffix: st(\"brHits\", { count: 2 })\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.skill.duration,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed) :\r\n          datamine.skill.pressCd,\r\n        unit: 's'\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed) :\r\n          datamine.skill.holdCd,\r\n        unit: 's'\r\n      }], { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        header: conditionalHeader(\"skill\", tr, skill),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.0\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.1\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.2\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.3\")\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }], undefined, undefined, false, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n      }, {\r\n        text: trm(\"electroSigilPerProc\"),\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        value: datamine.constellation6.electroSigilGenerated\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        text: st(\"cooldown\"),\r\n        value: datamine.constellation6.cd,\r\n        unit: \"s\"\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, min } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonus = equal(condA4, \"on\", greaterEq(input.asc, 4, min(prod(datamine.passive2.crBonus, input.premod.critRate_), datamine.passive2.maxBonus)))\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n    physical_enemyRes_: nodeC6PhysShred\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }],\r\n          conditional: {\r\n            name: tr(\"constellation6.name\"),\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            value: condC6,\r\n            path: condC6Path,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6PhysShred\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.constellation6.duration,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4.name\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4CritBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, lookup, naught, sum, min, subscript } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas)))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n        unit: \"s\",\r\n      }], {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }], {\r\n          value: condC2SkillStack,\r\n          path: condC2SkillStackPath,\r\n          name: trm(\"c2Cond\"),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n            name: st(\"seconds\", { count: stack * 0.5 }),\r\n            fields: [{\r\n              node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n            }]\r\n          }]))\r\n        }, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: trm(\"burstHits\"),\r\n        value: datamine.burst.darumaHits,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"success\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1Text\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: infoMut(c6_daruma_dmg_inc,\r\n            { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc,\r\n            { key: `char_${key}:c6DarumaHealInc`, variant: \"success\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4)\r\n      ]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6)\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"pressDuration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"pressQuota\"),\r\n        value: datamine.skill.trigger,\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: trm(\"holdDuration\"),\r\n        value: datamine.skill.durationHold,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"holdQuota\"),\r\n        value: datamine.skill.triggerHold,\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }], {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          value: condAsc4,\r\n          path: condAsc4Path,\r\n          teamBuff: true,\r\n          name: trm(\"asc4Cond\"),\r\n          states: {\r\n            press: {\r\n              name: \"Press\",\r\n              fields: [{\r\n                node: nodeAsc4Press_skill_dmg_\r\n              }, {\r\n                node: nodeAsc4Press_burst_dmg_\r\n              }]\r\n            },\r\n            hold: {\r\n              name: \"Hold\",\r\n              fields: [{\r\n                node: nodeAsc4Hold_normal_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_charged_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_plunging_dmg_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n            name: i.toString(),\r\n            fields: [{ node: c4Inc }]\r\n          }))\r\n        }), {\r\n        ...sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: tr(\"constellation6.description\")\r\n        }], undefined, data => data.get(input.constellation).value >= 6, true, true),\r\n        fieldsDescription: \"\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n    equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condAbsorption,\r\n          path: condAbsorptionPath,\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6Bonus[`${eleKey}_dmg_`],\r\n            }],\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, key, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.riptide\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n              textSuffix: st(\"brHits\", { count: 3 })\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.10\"),\r\n              value: (data) => data.get(input.asc).value >= 1 ? datamine.passive1.durationExt + datamine.riptideDuration : datamine.riptideDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.10\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.11\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.preemptiveCd1 -\r\n          (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)} - ${datamine.skill.preemptiveCd2 -\r\n          (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}` : `${datamine.skill.preemptiveCd1} -\r\n          ${datamine.skill.preemptiveCd2}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.12\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.maxCd - (datamine.skill.maxCd *\r\n          datamine.constellation1.cdRed)}` : `${datamine.skill.maxCd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerReturned}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined,\r\n        [sectionTemplate(\"passive3\", tr, passive3, [{ node: nodePassive }], undefined, undefined, true, true)]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minPyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n          { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.shieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.shieldDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n          : datamine.burst.scorchingDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1BarrierStacks,\r\n          path: condP1BarrierStacksPath,\r\n          name: trm(\"a1\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n            stacks,\r\n            {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{\r\n                node: p1_shield_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }, {\r\n                text: st(\"triggerCD\"),\r\n                value: datamine.passive1.cd,\r\n                unit: \"s\",\r\n                fixed: 1\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4AfterBurst,\r\n          path: condC4AfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: st(\"energyRegen\"),\r\n                value: datamine.c4.energyRestore,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6AfterBarrier,\r\n          path: condC6AfterBarrierPath,\r\n          name: trm(\"c6\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c6_normal_dmg_,\r\n              }, {\r\n                node: c6_charged_dmg_,\r\n              }, {\r\n                node: c6_plunging_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"skill.skillParams.5\"),\r\n      value: datamine.skill.maxCd,\r\n      unit: \"s\"\r\n    }, {\r\n      canShow: data => data.get(input.constellation).value >= 4,\r\n      text: trm(\"c1\"),\r\n      value: 10,\r\n      unit: \"%\"\r\n    }]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"burst.skillParams.2\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.3\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.4\"),\r\n      value: datamine.burst.enerCost,\r\n    }], {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }, [\r\n      // C6 anemo\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        description: tr(\"constellation6.description.0\"),\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      // C6 elemental self-display\r\n      sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n          { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        undefined,\r\n        data => data.get(input.constellation).value >= 6\r\n          && data.get(condBurstAbsorption).value !== undefined\r\n          && data.get(equal(target.charKey, key, 1)).value === 1,\r\n        false,\r\n        true\r\n      ),\r\n      // C6 elemental team-display\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        description: tr(\"constellation6.description.1\"),\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: nodesC6[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n      node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n    }]),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, talentTemplate, sectionTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { range } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n        : datamine.skill.duration,\r\n      unit: \"s\",\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: data => data.get(input.asc).value >= 1\r\n        ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n        : datamine.skill.cd,\r\n      unit: \"s\",\r\n    }], undefined, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg,\r\n        { key: `sheet_gen:skillDMG` }\r\n      ),\r\n      textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n    }, {\r\n      text: tr(\"burst.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n        : datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1BurstArea,\r\n        path: condC1BurstAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n            }, {\r\n              text: st(\"incInterRes\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4BurstHit,\r\n        path: condC4BurstHitPath,\r\n        name: st(\"hitOp.burst\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n          stack,\r\n          {\r\n            name: st(\"hits\", { count: stack }),\r\n            fields: [{\r\n              node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n            }]\r\n          }\r\n        ]))\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n    }, {\r\n      text: trm(\"skill.amuletGenAmt\"),\r\n      value: data => data.get(input.constellation).value >= 1\r\n        ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n        : datamine.skill.amulets\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.amuletDuration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }], {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: tr(\"passive1.description\")\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.pressDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n      )\r\n    }, {\r\n      node: infoMut(dmgFormulas.burst.thunderDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n      )\r\n    }, {\r\n      text: trm(\"burst.thunderCd\"),\r\n      value: datamine.burst.thunderCd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }, {\r\n      node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n    }, {\r\n      text: sgt(\"duration\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2Thunder,\r\n        path: condC2ThunderPath,\r\n        name: trm(\"c2.thunderHit\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2Thunder_electro_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6After2Thunder,\r\n        path: condC6After2ThunderPath,\r\n        name: trm(\"c6.fallingThunder3\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c6_thunder_dmg_,\r\n                { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n              )\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.constellation6.energyRestore\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import card from './Traveler_Female_Card.jpg'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport geo, { data as geoData } from './geo'\r\nimport electro, { data as electroData} from './electro'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts';\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport data_gen_src from './data_gen.json'\r\nimport { CharacterData } from 'pipeline'\r\nimport { trans } from '../../SheetUtil'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n});\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport {  customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }})),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [{\r\n        // Custom burst formula\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }], undefined, data => data.get(condBurstAbsorption).value !== undefined, undefined, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n        }, sectionTemplate(\"passive2\", tr, passive2, [{\r\n            text: trm(\"regenEner\"),\r\n          }, {\r\n            text: trm(\"q\"),\r\n          }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), \r\n        // C6 anemo team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), \r\n        // C6 elemental self-display\r\n        sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6\r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ),\r\n        // C6 elemental team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion,\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, equal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: c6_staminaChargedDec_\r\n      }], {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n              node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                { key: type === \"norm\" // And change the key to match\r\n                  ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                  : `char_${key}:skill.pyroShield.${lvl}`\r\n                }\r\n              )},\r\n            ])), {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\",\r\n            },\r\n            // Level 3 damage\r\n            ...lvl === 3 ? [{node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` })}] : [],\r\n          ]}\r\n        ]))\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"p1.desc\"),\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2Shield,\r\n          path: condP2ShieldPath,\r\n          name: trm(\"p2.activeShield\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4SkillHit,\r\n          path: condC4SkillHitPath,\r\n          name: trm(\"c4.swingHit\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c4SkillHit_physical_enemyRes_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.c4.duration,\r\n                unit: \"s\",\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      },\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1Seals,\r\n          path: condP1SealsPath,\r\n          name: trm(\"passive1.sealsConsumed\"),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          // TODO: Should be changing number of seals shown based on C6\r\n          states: Object.fromEntries(range(1, 4).map(seals => [\r\n            seals, {\r\n              name: trm(`seals.${seals}`),\r\n              fields: [{\r\n                node: p1_pyro_dmg_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2ChargedCrit,\r\n          path: condP2ChargedCritPath,\r\n          name: trm(\"passive2.chargedCrit\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2EnemyHp,\r\n          path: condC2EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c2EnemyHp_critRate_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"burst.grantMax\")\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4, false, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === 'skill'\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, prod(percent(datamine.constellation6.dmg_), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: charTr(\"skillState\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]))\r\n      }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        teamBuff: true,\r\n        canShow: atk_,\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","critRate_","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","undefined","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","trans","tr","trm","auto","normalSrc","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","skillDmg","blossomDmg","duration","cd","blossomCd","burst","burstDmg","blossomAmt","enerCost","passive1","blossomDmgInc","hpThresh","passive2","eleMasInc","constellation1","blossomEner","constellation2","maxStacks","stackDuration","constellation4","plunging_dmg_","constellation6","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","lookup","fromEntries","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","talentTemplate","sectionTemplate","_","node","text","textSuffix","sgt","path","st","canShow","states","belowHp","fields","c1","fixed","get","c4","skillInField","c6","c6Crystallize","isoOnField","count","burstUsed","c2","passive3","constellation3","c3","constellation5","c5","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","atk_","unequal","afterRushingIce","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","infusion","toFixed","color","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","charged_dmg_","electro_enemyRes_","img","sections","header","conditionalHeader","description","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","c1AddlAtk","activeInAreaAtkDisp","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc1","nodeAsc4","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","conditional","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","lightSwordAdditional","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","fieldsHeader","eleKey","c2p","swirl","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","devotionShield","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","cdRed","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","heal_","nBonus_","cBonus_","sBonus_","p","heal_ratio_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","normal_dmgInc","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressDmg","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","burstC3","skillC5","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1Disp","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","fieldsDescription","field","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","energyRestore","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","stacks","p2Collapse_dmgInc","condC4AfterBurstPath","condC4AfterBurst","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","talents","anemo","geo","electro","anemoData","geoData","electroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","full7","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","staminaChargedDec_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","dmgArr","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","norm_shield","characterKey","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","allElements","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","YunJin","Zhongli","customStringRead","subKey","typeKey","crystallizeMulti1","crystallizeLevelMultipliers","crystallizeElemas","frac","crystallizeHit","transMulti1","transformativeReactionLevelMultipliers","transMulti2","transformativeReactions","multi","variants","electroSwirl","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}