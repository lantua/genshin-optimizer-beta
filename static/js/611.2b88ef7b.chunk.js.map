{"version":3,"file":"static/js/611.2b88ef7b.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/InfoComponent.tsx","Components/SortByButton.tsx","Components/StatFilterCard.tsx","Components/TextButton.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","GlobalSettings.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx","Components/Artifact/ArtifactMainStatMultipleSelectChip.tsx","Components/Artifact/ArtifactSetMultipleSelectChip.tsx","Components/Artifact/ArtifactSubStatMultipleSelectChip.tsx","PageArtifact/ArtifactFilter.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/ProbabilityFilter.tsx","PageArtifact/ArtifactDisplay.tsx","ReactHooks/useDBState.tsx","Util/SortByFilters.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean,\r\n  disabled?: boolean,\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: 100, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={\"Level: \"}\r\n      disabled={disabled}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n      disabled={disabled}\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      disabled={disabled}\r\n    />\r\n  </Card>\r\n}\r\n","import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n        <ListItemIcon>\r\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {artifactSheets?.[setKey]?.name}\r\n        </ListItemText>\r\n      </MenuItem >)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useState } from \"react\"\r\nimport useDBState from \"../ReactHooks/useDBState\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CloseButton from \"./CloseButton\"\r\nimport ModalWrapper from \"./ModalWrapper\"\r\nimport { Translate } from \"./Translate\"\r\nexport function initialInfoShownState() {\r\n  return {\r\n    artifactPage: true,\r\n    buildPage: true,\r\n    characterPage: true,\r\n  }\r\n}\r\ntype StateInfoShown = ReturnType<typeof initialInfoShownState>\r\ntype InfoShownPageKey = keyof StateInfoShown\r\n\r\nexport default function InfoComponent({ pageKey, text = \"\", modalTitle = \"\", children }: { pageKey: InfoShownPageKey, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [stateInfoShown, setStateInfoShown] = useDBState(\"InfoShown\", initialInfoShownState)\r\n  const showInfoModal = stateInfoShown[pageKey]\r\n  const setshowInfoModal = useCallback((value: boolean) => setStateInfoShown({ [pageKey]: value }), [setStateInfoShown, pageKey])\r\n\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => setshowInfoModal(false)\r\n\r\n  return <CardDark >\r\n    <Grid container>\r\n      <Grid item flexGrow={1}>\r\n        <Typography variant=\"caption\" pl={1} >\r\n          {displayText}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\r\n          <Translate ns=\"ui\" key18=\"info\" />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\r\n      <CardDark >\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{modalTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={closeModal} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\r\n            {children}\r\n          </Suspense>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <CloseButton large onClick={closeModal} />\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper >\r\n  </CardDark>\r\n}\r\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Minimum Final Stat Filter</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(statFilters).map(([statKey, min]) => {\r\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Grid>\r\n        })}\r\n        <Grid item xs={12}>\r\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet,\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\"\r\nimport { input } from \"../../Formula\"\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  get defIcon() { return <ImgIcon src={this.defIconSrc} sx={{ fontSize: \"1.5em\" }} /> }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      case \"PrayersForDestiny\":\r\n      case \"PrayersForIllumination\":\r\n      case \"PrayersForWisdom\":\r\n      case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\r\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\r\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\r\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\r\n      if (setNums.length) artifactSetEffect[setKey] = setNums\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(\"setName\"),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">4-set</SqBadge>\r\n  }\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <BootstrapTooltip placement=\"top\" title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>}>\r\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\r\n        </BootstrapTooltip>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.get(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.get(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val,i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString, valueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = KeyMap.unit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{cacheValueString(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{cacheValueString(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{cacheValueString(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact, validateArtifact } from '../Database/validation';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: { artifactIdToEdit?: string, cancelEdit: () => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [uploadFiles])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact || !artifactIdToEdit) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <Grid container spacing={1} sx={{ mb: 1 }}>\r\n          {/* Left column */}\r\n          <Grid item xs={12} md={6} lg={6} sx={{\r\n            // select all excluding last\r\n            \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n          }}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined} title={<b>{artifact ? KeyMap.get(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\r\n                    <ListItemText>{KeyMap.get(mainStatK)}</ListItemText>\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unitStr(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                        setModalShow(true)\r\n                        ReactGA.modalview('/artifact/how-to-upload')\r\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allMainStatKeys, MainStatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactMainStatMultipleSelectChip({ mainStatKeys, setMainStatKeys }:\r\n  { mainStatKeys: MainStatKey[], setMainStatKeys: (keys: MainStatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof mainStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setMainStatKeys((typeof value === 'string' ? value.split(',') : value) as MainStatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"main-stat-multiple-chip-label\">Main Stats</InputLabel>\r\n        <Select\r\n          labelId=\"main-stat-multiple-chip-label\"\r\n          id=\"main-stat-multiple-chip\"\r\n          multiple\r\n          value={mainStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"main-stat-select-multiple-chip\" label=\"Main Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allMainStatKeys.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, mainStatKeys, theme) }}>\r\n              {KeyMap.get(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { Divider, ListItemIcon, ListItemText, Typography } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport { useMemo } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { ArtifactSetKey, Rarity } from '../../Types/consts';\r\nimport { Stars } from '../StarDisplay';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSetMultipleSelectChip({ artSetKeys, setArtSetKeys }:\r\n  { artSetKeys: ArtifactSetKey[], setArtSetKeys: (keys: ArtifactSetKey[]) => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof artSetKeys>) => {\r\n    const { target: { value }, } = event\r\n    setArtSetKeys((typeof value === 'string' ? value.split(',') : value) as ArtifactSetKey[]);// On autofill we get a stringified value.\r\n  };\r\n  const displaySets = useMemo(() => {\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets])\r\n  if (!artifactSheets) return null\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"artifact-set-multiple-chip-label\">Artifact Sets</InputLabel>\r\n        <Select\r\n          labelId=\"artifact-set-multiple-chip-label\"\r\n          id=\"artifact-set-multiple-chip\"\r\n          multiple\r\n          value={artSetKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"artifact-set-select-multiple-chip\" label=\"Artifact Sets\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={artifactSheets[value]?.defIcon} label={artifactSheets[value].name} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n            ...((i > 0) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n            ...(sets.length ? [<MenuItem key={`${star}header`} style={{ pointerEvents: 'none' }} >\r\n              <Typography>\r\n                <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n              </Typography>\r\n            </MenuItem>] : []),\r\n            ...sets.map(setKey => <MenuItem key={setKey} value={setKey}>\r\n              <ListItemIcon>{artifactSheets[setKey]?.defIcon}</ListItemIcon>\r\n              <ListItemText primaryTypographyProps={{ style: getStyles(setKey, artSetKeys, theme) }}>\r\n                {artifactSheets[setKey]?.name}\r\n              </ListItemText>\r\n            </MenuItem >)\r\n          ])}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allSubstats, SubstatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSubStatMultipleSelectChip({ subStatKeys, setSubStatKeys }:\r\n  { subStatKeys: SubstatKey[], setSubStatKeys: (keys: SubstatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof subStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setSubStatKeys((typeof value === 'string' ? value.split(',') : value) as SubstatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"sub-stat-multiple-chip-label\">Sub Stats</InputLabel>\r\n        <Select\r\n          labelId=\"sub-stat-multiple-chip-label\"\r\n          id=\"sub-stat-multiple-chip\"\r\n          multiple\r\n          value={subStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"sub-stat-select-multiple-chip\" label=\"Sub Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allSubstats.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, subStatKeys, theme) }}>\r\n              {KeyMap.get(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { faBan, faChartLine, faTrash, faUserShield, faUserSlash } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { BusinessCenter, Lock, LockOpen, Replay } from \"@mui/icons-material\"\r\nimport { Button, CardContent, Divider, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, ToggleButton, Typography } from \"@mui/material\"\r\nimport { Box } from \"@mui/system\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport ArtifactLevelSlider from \"../Components/Artifact/ArtifactLevelSlider\"\r\nimport ArtifactMainStatMultipleSelectChip from \"../Components/Artifact/ArtifactMainStatMultipleSelectChip\"\r\nimport ArtifactSetMultipleSelectChip from \"../Components/Artifact/ArtifactSetMultipleSelectChip\"\r\nimport ArtifactSubStatMultipleSelectChip from \"../Components/Artifact/ArtifactSubStatMultipleSelectChip\"\r\nimport { artifactSlotIcon } from \"../Components/Artifact/SlotNameWIthIcon\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport { CharacterMenuItemArray } from \"../Components/Character/CharacterDropdownButton\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport SolidToggleButtonGroup from \"../Components/SolidToggleButtonGroup\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { ICachedArtifact } from \"../Types/artifact\"\r\nimport { allArtifactRarities, allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { FilterOption } from \"./ArtifactSort\"\r\n\r\nexport default function ArtifactFilter({ filterOption, filterOptionDispatch, filterDispatch, numShowing, total, }:\r\n  { filterOption: FilterOption, filterOptionDispatch: (any) => void, filterDispatch: (any) => void, numShowing: number, total: number }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", excluded = \"\" } = filterOption\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(location as CharacterKey), [location])\r\n\r\n  let locationDisplay\r\n  if (!location) locationDisplay = t(\"filterLocation.any\")\r\n  else if (location === \"Inventory\") locationDisplay = <span><BusinessCenter /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (location === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (excluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (excluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n    <CardDark  >\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item >\r\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></Typography>\r\n          </Grid>\r\n          <Grid item flexGrow={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            {numShowing !== total && <Typography>Filtered {numShowing} / {total}</Typography>}\r\n          </Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => filterDispatch({ type: \"reset\" })} startIcon={<Replay />}>\r\n              <Trans t={t} i18nKey=\"ui:reset\" />\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} mt={1}>\r\n          {/* left */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact stars filter */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\r\n              {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artifact Slot */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ slotKeys: newVal })} value={slotKeys} size=\"small\">\r\n              {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artiface level filter */}\r\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\r\n              setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n              setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n              setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n            <Box display=\"flex\" gap={1}>\r\n              {/* location */}\r\n              <LocationDropdown dropdownProps={{ color: location ? \"success\" : \"primary\" }} title={locationDisplay} onChange={location => filterOptionDispatch({ location })} selectedCharacterKey={location} />\r\n              {/* exclusion state */}\r\n              <DropdownButton fullWidth title={excludedDisplay} color={excluded ? (excluded === \"included\" ? \"success\" : \"error\") : \"primary\"}>\r\n                <MenuItem selected={excluded === \"\"} disabled={excluded === \"\"} onClick={() => filterOptionDispatch({ excluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></MenuItem>\r\n                <MenuItem selected={excluded === \"excluded\"} disabled={excluded === \"excluded\"} onClick={() => filterOptionDispatch({ excluded: \"excluded\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faBan} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n                <MenuItem selected={excluded === \"included\"} disabled={excluded === \"included\"} onClick={() => filterOptionDispatch({ excluded: \"included\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faChartLine} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n              </DropdownButton>\r\n            </Box>\r\n          </Grid>\r\n          {/* right */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact Set */}\r\n            <ArtifactSetMultipleSelectChip artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n            <ArtifactMainStatMultipleSelectChip mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n            <ArtifactSubStatMultipleSelectChip subStatKeys={substats} setSubStatKeys={substats => filterOptionDispatch({ substats })} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </Suspense>\r\n}\r\n\r\n\r\nfunction LocationDropdown({ title, onChange, selectedCharacterKey, dropdownProps }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  return <DropdownButton fullWidth {...dropdownProps} title={title}>\r\n    <MenuItem key=\"unselect\" selected={selectedCharacterKey === \"\"} disabled={selectedCharacterKey === \"\"} onClick={() => onChange(\"\")}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"inventory\" selected={selectedCharacterKey === \"Inventory\"} disabled={selectedCharacterKey === \"Inventory\"} onClick={() => onChange(\"Inventory\")}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"equipped\" selected={selectedCharacterKey === \"Equipped\"} disabled={selectedCharacterKey === \"Equipped\"} onClick={() => onChange(\"Equipped\")}>\r\n      <ListItemIcon>\r\n        <FontAwesomeIcon icon={faUserShield} />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <Divider />\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, database._getCharKeys().sort(), onChange, selectedCharacterKey)}\r\n  </DropdownButton>\r\n}\r\n\r\nexport function ArtifactRedButtons({ artifactIds, filterOption }:\r\n  { artifactIds: string[], filterOption: FilterOption }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock } = useMemo(() => {\r\n    const artifacts = artifactIds.map(id => database._getArt(id)) as ICachedArtifact[]\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 0 : 1), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n    const numDelete = numUnlock\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock }\r\n  }, [artifactIds, database])\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifactIds.map(id => database.setArtLocation(id, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${numDelete} artifacts?`) &&\r\n    artifactIds.map(id => !database._getArt(id)?.lock && database.removeArt(id))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: true }, id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: false }, id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numUnlock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: true }, id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numLock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: false }, id))\r\n\r\n  return <Grid container spacing={1} alignItems=\"center\">\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnequip} onClick={unequipArtifacts} startIcon={<FontAwesomeIcon icon={faUserSlash} />}>\r\n        <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnequip ? \"success\" : \"secondary\"}>{numUnequip}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numDelete} onClick={deleteArtifacts} startIcon={<FontAwesomeIcon icon={faTrash} />}>\r\n        <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numDelete ? \"success\" : \"secondary\"}>{numDelete}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numInclude} onClick={excludeArtifacts} startIcon={<FontAwesomeIcon icon={faBan} />}>\r\n        <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Exclude Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numInclude ? \"success\" : \"secondary\"}>{numInclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numExclude} onClick={includeArtifacts} startIcon={<FontAwesomeIcon icon={faChartLine} />}>\r\n        <Trans t={t} i18nKey=\"button.includeArtifacts\" >Include Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numExclude ? \"success\" : \"secondary\"}>{numExclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numLock} onClick={unlockArtifacts} startIcon={<LockOpen />}>\r\n        <Trans t={t} i18nKey=\"button.unlockrtifacts\" >Unlock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numLock ? \"success\" : \"secondary\"}>{numLock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnlock} onClick={lockArtifacts} startIcon={<Lock />}>\r\n        <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnlock ? \"success\" : \"secondary\"}>{numUnlock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={12} md={6} display=\"flex\" justifyContent=\"space-around\">\r\n      <Typography variant=\"caption\" color=\"text.secondary\"><Trans t={t} i18nKey=\"buttonHint\">Note: the red buttons above only applies to <b>currently filtered artifacts</b></Trans></Typography>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\r\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\r\nimport Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { probability } from \"./RollProbability\";\r\nimport { SubstatKey } from \"../Types/artifact\";\r\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\r\nexport const artifactSortKeysTC = [\"probability\"] as const\r\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\r\nexport type FilterOption = {\r\n  artSetKeys: ArtifactSetKey[],\r\n  rarity: ArtifactRarity[],\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  slotKeys: SlotKey[],\r\n  mainStatKeys: MainStatKey[],\r\n  substats: SubstatKey[]\r\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\r\n  excluded: \"excluded\" | \"included\" | \"\",\r\n}\r\n\r\ntype ArtifactSortFilter = {\r\n  filterOption: FilterOption\r\n  ascending: boolean\r\n  sortType: ArtifactSortKey\r\n}\r\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\r\n  filterOption: {\r\n    artSetKeys: [],\r\n    rarity: [...allArtifactRarities],\r\n    levelLow: 0,\r\n    levelHigh: 20,\r\n    slotKeys: [...allSlotKeys],\r\n    mainStatKeys: [],\r\n    substats: [],\r\n    location: \"\",\r\n    excluded: \"\",\r\n  },\r\n  ascending: false,\r\n  sortType: artifactSortKeys[0],\r\n})\r\n\r\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\r\n  return {\r\n    rarity: {\r\n      getValue: art => art.rarity ?? 0,\r\n      tieBreaker: \"level\"\r\n    },\r\n    level: {\r\n      getValue: art => art.level ?? 0,\r\n      tieBreaker: \"artsetkey\"\r\n    },\r\n    artsetkey: {\r\n      getValue: art => art.setKey ?? \"\",\r\n      tieBreaker: \"level\"\r\n    },\r\n    efficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\r\n    },\r\n    mefficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\r\n    },\r\n    probability: {\r\n      getValue: art => {\r\n        if (!Object.keys(probabilityFilter).length) return 0\r\n        const prob = (art as any).probability\r\n        if (prob === undefined) return probability(art, probabilityFilter);\r\n        return prob\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\r\n  return {\r\n    excluded: (art, filter) => {\r\n      if (filter === \"excluded\" && !art.exclude) return false\r\n      if (filter === \"included\" && art.exclude) return false\r\n      return true\r\n    },\r\n    location: (art, filter) => {\r\n      if (!filter) return true\r\n      if (filter === \"Inventory\" && !art.location) return true\r\n      if (filter === \"Equipped\" && art.location) return true\r\n      if (filter === art.location) return true\r\n      return false\r\n    },\r\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\r\n    slotKeys: (art, filter) => filter.length ? filter.includes(art.slotKey) : true,\r\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\r\n    levelLow: (art, filter) => filter <= art.level,\r\n    levelHigh: (art, filter) => filter >= art.level,\r\n    rarity: (art, filter) => filter.includes(art.rarity),\r\n    substats: (art, filter) => {\r\n      for (const filterKey of filter)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useCallback } from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { StatFilterItem } from \"../Components/StatFilterCard\"\r\nimport { allSubstats, SubstatKey } from \"../Types/artifact\"\r\n\r\nexport default function ProbabilityFilter({ probabilityFilter: statFilters = {}, setProbabilityFilter: setStatFilters, disabled = false }: {\r\n  probabilityFilter: Dict<SubstatKey, number>,\r\n  setProbabilityFilter: (object: Dict<SubstatKey, number>) => void,\r\n  disabled?: boolean\r\n}) {\r\n  const remainingKeys = allSubstats.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],\r\n  )\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"h6\">\r\n        Roll Probability Calculator <SqBadge color=\"success\">TC Feature</SqBadge>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={6}>\r\n          <CardLight>\r\n            <CardContent>\r\n              <Typography>\r\n                This UI only pops up when \"Sort by\" <strong>Probability</strong>.\r\n                In conjunction with the Artifact Filters above, this UI allows you to set a criteria for substats values, and it will sort the artifacts by those with the highest probability to roll into those criteria values.\r\n                <ColorText color=\"warning\"> Artifacts that already reach the criteria(100%) or are at 0% are hidden.</ColorText>\r\n              </Typography>\r\n\r\n            </CardContent>\r\n          </CardLight>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} container spacing={1}>\r\n          {Object.entries(statFilters).map(([statKey, min]) => {\r\n            return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n              delete statFilters[statKey]\r\n              setStatFilters({ ...statFilters })\r\n            }} /></Grid>\r\n          })}\r\n          <Grid item xs={12}>\r\n            <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark >\r\n}\r\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Replay } from '@mui/icons-material';\r\nimport { Alert, Box, Button, CardContent, Grid, Link, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { initGlobalSettings } from '../GlobalSettings';\r\nimport KeyMap from '../KeyMap';\r\nimport useDBState from '../ReactHooks/useDBState';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport { allSubstats, SubstatKey } from '../Types/artifact';\r\nimport { ArtifactDisplayLocationState } from '../Types/LocationState';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { clamp } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ArtifactFilter, { ArtifactRedButtons } from './ArtifactFilter';\r\nimport { artifactFilterConfigs, artifactSortConfigs, artifactSortKeys, artifactSortKeysTC, initialArtifactSortFilter } from './ArtifactSort';\r\nimport ProbabilityFilter from './ProbabilityFilter';\r\nimport { probability } from './RollProbability';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nfunction initialState() {\r\n  return {\r\n    ...initialArtifactSortFilter(),\r\n    maxNumArtifactsToDisplay: 50,\r\n    effFilter: [...allSubstats] as SubstatKey[],\r\n    probabilityFilter: {} as Dict<SubstatKey, number>,\r\n  }\r\n}\r\nexport default function ArtifactDisplay() {\r\n  const [{ tcMode }] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { state: locationState } = useLocation<ArtifactDisplayLocationState | undefined>()\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useDBState(\"ArtifactDisplay\", initialState)\r\n  const stateDispatch = useCallback(\r\n    action => {\r\n      if (action.type === \"reset\") setState(initialArtifactSortFilter())\r\n      else setState(action)\r\n    },\r\n    [setState],\r\n  )\r\n\r\n  const { effFilter, filterOption, ascending, probabilityFilter, maxNumArtifactsToDisplay } = state\r\n  let { sortType } = state\r\n  const showProbability = tcMode && sortType === \"probability\"\r\n  //force the sortType back to a normal value after exiting TC mode\r\n  if (sortType === \"probability\" && !tcMode) stateDispatch({ sortType: artifactSortKeys[0] })\r\n\r\n  const [artToEditId, setartToEditId] = useState(locationState?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback((id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(id => setartToEditId(id), [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(undefined), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  const filterOptionDispatch = useCallback((action) => {\r\n    stateDispatch({\r\n      filterOption: {\r\n        ...filterOption,\r\n        ...action\r\n      }\r\n    })\r\n  }, [stateDispatch, filterOption])\r\n\r\n  const setProbabilityFilter = useCallback(probabilityFilter => stateDispatch({ probabilityFilter }), [stateDispatch],)\r\n\r\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\r\n  const sortConfigs = useMemo(() => artifactSortConfigs(effFilterSet, probabilityFilter), [effFilterSet, probabilityFilter])\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const { artifactIds, totalArtNum } = useMemo(() => {\r\n    const { sortType = artifactSortKeys[0], ascending = false, filterOption } = state\r\n    let allArtifacts = database._getArts()\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    const sortFunc = sortFunction(sortType, ascending, sortConfigs)\r\n    //in probability mode, filter out the artifacts that already reach criteria\r\n    if (showProbability) {\r\n      allArtifacts.forEach(art => (art as any).probability = probability(art, probabilityFilter))\r\n      allArtifacts = allArtifacts.filter(art => (art as any).probability && (art as any).probability !== 1)\r\n    }\r\n    const artifactIds = allArtifacts.filter(filterFunc).sort(sortFunc).map(art => art.id)\r\n    return { artifactIds, totalArtNum: allArtifacts.length, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [state, dbDirty, database, sortConfigs, filterConfigs, probabilityFilter, showProbability])\r\n\r\n\r\n  const { artifactsToShow: artifactIdsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifactIds.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifactIds.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifactIds, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  //for pagination\r\n  const totalShowing = artifactIds.length !== totalArtNum ? `${artifactIds.length}/${totalArtNum}` : `${totalArtNum}`\r\n  const setPage = useCallback(\r\n    (e, value) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      setpageIdex(value - 1);\r\n    },\r\n    [setpageIdex, invScrollRef],\r\n  )\r\n\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} my={1}>\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n\r\n    {noArtifact && <Alert severity=\"info\" variant=\"filled\">Looks like you haven't added any artifacts yet. If you want, there are <Link color=\"warning.main\" component={RouterLink} to=\"/scanner\">automatic scanners</Link> that can speed up the import process!</Alert>}\r\n\r\n    <ArtifactEditor\r\n      artifactIdToEdit={artToEditId}\r\n      cancelEdit={cancelEditArtifact}\r\n    />\r\n    <ArtifactFilter filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filterDispatch={stateDispatch}\r\n      numShowing={artifactIds.length} total={totalArtNum} />\r\n    {showProbability && <ProbabilityFilter probabilityFilter={probabilityFilter} setProbabilityFilter={setProbabilityFilter} />}\r\n    <CardDark ref={invScrollRef}>\r\n      <CardContent>\r\n        <Grid container sx={{ mb: 1 }}>\r\n          <Grid item flexGrow={1}><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Substats to use in efficiency calculation</Trans></span></Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => stateDispatch({ effFilter: [...allSubstats] })} startIcon={<Replay />}><Trans t={t} i18nKey=\"ui:reset\" /></Button>\r\n          </Grid>\r\n        </Grid>\r\n        <EfficiencyFilter selectedKeys={effFilter} onChange={n => stateDispatch({ effFilter: n })} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <CardDark ><CardContent>\r\n      <Grid container alignItems=\"center\" sx={{ pb: 2 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <SortByButton fullWidth sortKeys={[...artifactSortKeys.filter(key => (artifactSortKeysTC as unknown as string[]).includes(key) ? tcMode : true)]}\r\n            value={sortType} onChange={sortType => stateDispatch({ sortType })}\r\n            ascending={ascending} onChangeAsc={ascending => stateDispatch({ ascending })}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <ArtifactRedButtons artifactIds={artifactIds} filterOption={filterOption} />\r\n    </CardContent></CardDark>\r\n\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\r\n      <Grid container spacing={1} >\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <CardDark sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\r\n            <CardContent>\r\n              <Typography sx={{ textAlign: \"center\" }}>Add New Artifact</Typography>\r\n            </CardContent>\r\n            <Box sx={{\r\n              flexGrow: 1,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n            >\r\n              <Button onClick={() => editArtifact(\"new\")} sx={{\r\n                borderRadius: \"1em\"\r\n              }}>\r\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\r\n              </Button>\r\n            </Box>\r\n          </CardDark>\r\n        </Grid>\r\n        {artifactIdsToShow.map(artId =>\r\n          <Grid item key={artId} xs={12} sm={6} md={4} lg={4} xl={3} >\r\n            <ArtifactCard\r\n              artifactId={artId}\r\n              effFilter={effFilterSet}\r\n              onDelete={deleteArtifact}\r\n              onEdit={editArtifact}\r\n              probabilityFilter={showProbability ? probabilityFilter : undefined}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark ><CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box >\r\n}\r\n\r\nfunction ShowingArt({ count, page, onChange, numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Artifacts\r\n    </Trans>\r\n  </Typography>\r\n}\r\n\r\nfunction EfficiencyFilter({ selectedKeys, onChange }) {\r\n  const keys1 = allSubstats.slice(0, 6)\r\n  const keys2 = allSubstats.slice(6)\r\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\r\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\r\n            {StatIcon[key]}\r\n            {KeyMap.get(key)}\r\n          </Box>\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\r\n            {StatIcon[key]}\r\n            {KeyMap.get(key)}\r\n          </Box>\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\r\n}\r\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","disabled","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","BootstrapTooltip","styled","className","arrow","classes","popper","theme","tooltipClasses","palette","common","black","backgroundColor","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","database","useContext","DatabaseContext","characterSheets","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","thumbImg","thumbImgSide","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","characterKey","ThumbSide","height","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","primary","main","transition","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","number","setNumber","focused","setFocus","parseFunc","parseFloat","onBlur","onFocus","onInputChange","target","onKeyDOwn","key","type","onKeyDown","initialInfoShownState","artifactPage","buildPage","characterPage","InfoComponent","pageKey","text","modalTitle","useDBState","stateInfoShown","setStateInfoShown","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","container","item","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","large","SortByButton","sortKeys","ascending","onChangeAsc","faSortAmountDownAlt","faSortAmountUp","StatFilterCard","statFilters","setStatFilters","data","DataContext","statKeys","get","input","push","charEle","remainingKeys","some","k","setFilter","sKey","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","placeholder","faTrashAlt","DisabledButton","secondary","TextButton","createContext","then","imp","default","tr","strKey","allData","as","mergeData","values","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","this","slots","slotIcons","rarity","allSlotKeys","icons","set","a","sheets","grouped","forEach","Math","artifactSetEffect","setNums","sn","conditionalHeader","img","m","action","initGlobalSettings","tcMode","ArtifactRarityDropdown","DropdownButton","MenuItem","ArtifactSlotDropdown","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","CustomNumberTextField","state","setState","sendChange","toString","TextField","SubstatEfficiencyDisplayCard","efficiency","valid","eff","CardLight","Grid","placement","Typography","Trans","Box","component","FontAwesomeIcon","cursor","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","ButtonGroup","StatIcon","whiteSpace","allSubstats","v","newValue","cacheValueString","artifactSubstatRollCorrection","p","SqBadge","count","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","Snippet","gutterBottom","href","rel","scan_art_main","BorrowManager","init","deinit","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","image","canvas","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","findIndex","mainStatVal","mainStatValScore","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","processingCurrent","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","Skeleton","CardHeader","pt","mb","lg","id","label","mr","my","margin","ImgIcon","mainStatK","flexDirection","gap","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","CircularProgress","ArtifactCard","artifactObj","Add","updateArt","createArt","confirm","process","Update","getStyles","personName","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMainStatMultipleSelectChip","setMainStatKeys","useTheme","FormControl","fullWidth","InputLabel","Select","labelId","event","split","OutlinedInput","renderValue","flexWrap","Chip","primaryTypographyProps","style","ArtifactSetMultipleSelectChip","artSetKeys","setArtSetKeys","defIcon","pointerEvents","ArtifactSubStatMultipleSelectChip","subStatKeys","setSubStatKeys","ArtifactFilter","locationDisplay","excludedDisplay","filterOption","filterOptionDispatch","filterDispatch","numShowing","total","excluded","locationCharacterSheet","BusinessCenter","faUserShield","nameWIthIcon","faBan","faChartLine","SolidToggleButtonGroup","newVal","ToggleButton","LocationDropdown","dropdownProps","ArtifactRedButtons","artifactIds","artifacts","numUnlock","art","numLock","numDelete","numUnequip","numExclude","numInclude","sm","setArtLocation","faUserSlash","removeArt","faTrash","LockOpen","Lock","artifactSortKeys","artifactSortKeysTC","initialArtifactSortFilter","sortType","ProbabilityFilter","probabilityFilter","setProbabilityFilter","InfoDisplay","React","initialState","maxNumArtifactsToDisplay","effFilter","ArtifactDisplay","locationState","useLocation","stateDispatch","showProbability","artToEditId","setartToEditId","pageIdex","setpageIdex","invScrollRef","useRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","editArtifact","cancelEditArtifact","noArtifact","_getArts","sortConfigs","getValue","tieBreaker","artsetkey","mefficiency","probability","prob","artifactSortConfigs","filterConfigs","filterKey","allArtifacts","filterFunc","filterFunction","sortFunc","sortFunction","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","artifactIdsToShow","totalShowing","setPage","scrollIntoView","behavior","returnObjects","Link","RouterLink","to","ref","EfficiencyFilter","selectedKeys","n","pb","Pagination","page","ShowingArt","xl","minHeight","borderRadius","faPlus","artId","artifactId","onDelete","onEdit","keys1","keys2","selKeys1","selKeys2","arr","_getState","followState","updateState","sortby","configs","Sort","config","aV","bV","localeCompare","diff","filterOptions","obj","optionKey","optionVal"],"sourceRoot":""}