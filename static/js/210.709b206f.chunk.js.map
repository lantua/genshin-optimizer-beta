{"version":3,"file":"static/js/210.709b206f.chunk.js","mappings":"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","sources":["Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/ArchaicPetra/icons.tsx","Data/Artifacts/ArchaicPetra/index.tsx","Data/Artifacts/BlizzardStrayer/icons.tsx","Data/Artifacts/BlizzardStrayer/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/GladiatorsFinale/icons.tsx","Data/Artifacts/GladiatorsFinale/index.tsx","Data/Artifacts/LuckyDog/icons.tsx","Data/Artifacts/LuckyDog/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/index.ts","Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx"],"sourcesContent":["import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { ArtifactSetKey } from \"../../Types/consts\";\r\n\r\nexport function dataObjForArtifactSheet(\r\n  key: ArtifactSetKey,\r\n  data: Data = {},\r\n  displayArtifact: DisplaySub = {},\r\n): Data {\r\n  return mergeData([inferInfoMut(data, key), {\r\n    display: {\r\n      [`artifact:${key}`]: displayArtifact\r\n    },\r\n  }])\r\n}\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, percent, prod, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"Adventurer\"\r\nconst set2 = threshold_add(input.artSet.Adventurer, 2, 1000)\r\nconst heal = threshold_add(input.artSet.Adventurer, 4,\r\n  prod(percent(0.3), input.total.hp))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hp: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Adventurer\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import ImgIcon from '../../../Components/Image/ImgIcon'\r\nimport SqBadge from '../../../Components/SqBadge'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { match, percent, threshold_add } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { IFieldDisplay } from '../../../Types/IFieldDisplay_WR'\r\nimport { absorbableEle } from '../../Characters/dataUtil'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"ArchaicPetra\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst set2 = threshold_add(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\r\nconst [condPath, condNode] = cond(key, \"element\")\r\nconst set4Nodes = Object.fromEntries(absorbableEle.map(e => [`${e}_dmg_`,\r\nthreshold_add(input.artSet.EmblemOfSeveredFate, 4,\r\n  match(e, condNode, percent(0.35))\r\n)\r\n]))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    geo_dmg_: set2,\r\n  },\r\n  teamBuff: {\r\n    premod: set4Nodes\r\n  }\r\n}, undefined)\r\nconst durationfield: IFieldDisplay = {\r\n  text: sgt(\"duration\"),\r\n  value: 10,\r\n  unit: \"s\"\r\n}\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Archaic Petra\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          teamBuff: true,\r\n          header: {\r\n            title: tr(\"setName\"),\r\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\r\n            action: <SqBadge color=\"success\">4-set</SqBadge>\r\n          },\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: Object.fromEntries(absorbableEle.map(e => [e, {\r\n            name: sgt(`element.${e}`),\r\n            fields: [{\r\n              node: set4Nodes[`${e}_dmg_`]\r\n            }, durationfield]\r\n          }])),\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"BlizzardStrayer\"\r\n\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = threshold_add(input.artSet.BlizzardStrayer, 2, percent(0.15))\r\nconst set4 = threshold_add(input.artSet.BlizzardStrayer, 4, lookup(condState, { \"cryo\": percent(0.20), \"frozen\": percent(0.40) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    cryo_dmg_: set2,\r\n    critRate_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {//Icebreaker\r\n  name: \"Blizzard Strayer\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n      },\r\n      {\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            cryo: {\r\n              name: trm(\"condCryo\"),\r\n              fields: [{ node: set4 }]\r\n            },\r\n            frozen: {\r\n              name: trm(\"condFrozen\"),\r\n              fields: [{ node: set4 }]\r\n            }\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { min, percent, prod, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\r\n\r\nconst set2 = threshold_add(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\r\n\r\nconst burstBonus = threshold_add(input.artSet.EmblemOfSeveredFate, 4,\r\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2,\r\n    burst_dmg_: burstBonus,\r\n  },\r\n}, {\r\n  burstBonus,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: burstBonus,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"GladiatorsFinale\"\r\n\r\nconst set2 = threshold_add(input.artSet.GladiatorsFinale, 2, percent(0.18))\r\nconst set4 = threshold_add(input.artSet.GladiatorsFinale, 4, lookup(input.weaponType, { \"sword\": percent(0.35), \"polearm\": percent(0.35), \"claymore\": percent(0.35) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmg_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Gladiator's Finale\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"LuckyDog\"\r\nconst set2 = threshold_add(input.artSet.LuckyDog, 2, 100)\r\nconst heal = threshold_add(input.artSet.LuckyDog, 4, 300)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Lucky Dog\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport ImgIcon from '../../../Components/Image/ImgIcon'\r\nimport SqBadge from '../../../Components/SqBadge'\r\nimport { sgt } from '../../Characters/SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { customRead, match, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"NoblesseOblige\"\r\n\r\nconst tr = (strKey: string) => <Translate ns={`artifact_${key}_gen`} key18={strKey} />\r\n\r\nconst set2 = threshold_add(input.artSet.NoblesseOblige, 2, percent(0.2))\r\n\r\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\r\nconst set4TallyWrite = threshold_add(input.artSet.NoblesseOblige, 4, match(condSet4, \"on\", 1))\r\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\r\nconst set4 = threshold_add(set4TallyRead, 1, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    burst_dmg_: set2,\r\n    atk_: set4,\r\n  },\r\n  teamBuff: {\r\n    tally: {\r\n      NO4: set4TallyWrite\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Noblesse Oblige\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condSet4,\r\n          path: condSet4Path,\r\n          header: {\r\n            title: tr(\"setName\"),\r\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\r\n            action: <SqBadge color=\"success\">4-set</SqBadge>\r\n          },\r\n          description: tr(`setEffects.4`),\r\n          name: <Translate ns=\"artifact_NoblesseOblige\" key18=\"condName\" />,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 12,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport ImgIcon from '../../../Components/Image/ImgIcon'\r\nimport SqBadge from '../../../Components/SqBadge'\r\nimport { sgt } from '../../Characters/SheetUtil'\r\nimport { absorbableEle } from '../../Characters/dataUtil'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { Data } from '../../../Formula/type'\r\nimport { match, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport elementalData from '../../ElementalData'\r\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\r\nimport { condReadNode, st, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\r\nconst [tr] = trans(\"artifact\", key)\r\n\r\nconst anemo_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 2, percent(0.15))\r\nconst swirl_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 4, percent(0.6))\r\n\r\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\r\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\r\n\r\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\r\nthreshold_add(input.artSet.ViridescentVenerer, 4,\r\n  match(\"swirl\", condSwirls[e], percent(-0.4))\r\n)])\r\n\r\nconst data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    anemo_dmg_,\r\n    swirl_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...condSwirlNodes\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{ node: anemo_dmg_ }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{ node: swirl_dmg_ }],\r\n      },\r\n      ...absorbableEle.map(eleKey => ({\r\n        conditional: { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          header: {\r\n            title: tr(\"setName\"),\r\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\r\n            action: <SqBadge color=\"success\">4-set</SqBadge>\r\n          },\r\n          description: tr(`setEffects.4`),\r\n          name: st(\"eleSwirled\"),\r\n          states: {\r\n            swirl: {\r\n              name: <ColorText color={eleKey}>{elementalData[eleKey].name}</ColorText>,\r\n              fields: [{\r\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 10,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        },\r\n      }))\r\n      ]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import { ArtifactSetKey } from '../../Types/consts'\r\nimport { ArtifactSheet } from './ArtifactSheet'\r\n\r\nimport Adventurer from './Adventurer'\r\nimport ArchaicPetra from './ArchaicPetra'\r\n// import Berserker from './Berserker'\r\nimport BlizzardStrayer from './BlizzardStrayer'\r\n// import BloodstainedChivalry from './BloodstainedChivalry'\r\n// import BraveHeart from './BraveHeart'\r\n// import CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\r\n// import DefendersWill from './DefendersWill'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\r\n// import Gambler from './Gambler'\r\nimport GladiatorsFinale from './GladiatorsFinale'\r\n// import HeartOfDepth from './HeartOfDepth'\r\n// import HuskOfOpulentDreams from './HuskOfOpulentDreams'\r\n// import Instructor from './Instructor'\r\n// import Lavawalker from './Lavawalker'\r\nimport LuckyDog from './LuckyDog'\r\n// import MaidenBeloved from './MaidenBeloved'\r\n// import MartialArtist from './MartialArtist'\r\nimport NoblesseOblige from './NoblesseOblige'\r\n// import OceanHuedClam from './OceanHuedClam'\r\n// import PaleFlame from './PaleFlame'\r\n// import PrayersForDestiny from './PrayersForDestiny'\r\n// import PrayersForIllumination from './PrayersForIllumination'\r\n// import PrayersForWisdom from './PrayersForWisdom'\r\n// import PrayersToSpringtime from './PrayersToSpringtime'\r\n// import ResolutionOfSojourner from './ResolutionOfSojourner'\r\n// import RetracingBolide from './RetracingBolide'\r\n// import Scholar from './Scholar'\r\n// import ShimenawasReminiscence from './ShimenawasReminiscence'\r\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith'\r\n// import TheExile from './TheExile'\r\n// import ThunderingFury from './ThunderingFury'\r\n// import Thundersoother from './Thundersoother'\r\n// import TinyMiracle from './TinyMiracle'\r\n// import TravelingDoctor from './TravelingDoctor'\r\nimport ViridescentVenerer from './ViridescentVenerer'\r\n// import WanderersTroupe from './WanderersTroupe'\r\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\r\n  Adventurer,\r\n  ArchaicPetra,\r\n  // Berserker,\r\n  BlizzardStrayer,\r\n  // BloodstainedChivalry,\r\n  // BraveHeart,\r\n  // CrimsonWitchOfFlames,\r\n  // DefendersWill,\r\n  EmblemOfSeveredFate,\r\n  // Gambler,\r\n  GladiatorsFinale,\r\n  // HeartOfDepth,\r\n  // HuskOfOpulentDreams,\r\n  // Instructor,\r\n  // Lavawalker,\r\n  LuckyDog,\r\n  // MaidenBeloved,\r\n  // MartialArtist,\r\n  NoblesseOblige,\r\n  // OceanHuedClam,\r\n  // PaleFlame,\r\n  // PrayersForDestiny,\r\n  // PrayersForIllumination,\r\n  // PrayersForWisdom,\r\n  // PrayersToSpringtime,\r\n  // ResolutionOfSojourner,\r\n  // RetracingBolide,\r\n  // Scholar,\r\n  // ShimenawasReminiscence,\r\n  // TenacityOfTheMillelith,\r\n  // TheExile,\r\n  // ThunderingFury,\r\n  // Thundersoother,\r\n  // TinyMiracle,\r\n  // TravelingDoctor,\r\n  ViridescentVenerer,\r\n  // WanderersTroupe,\r\n} as const\r\n\r\nexport default artifacts\r\n","/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      } as IConditional\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, prod, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\nexport function singleDmgNode(base: MainStatKey, multiplier: number, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(input.total[base], multiplier,),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\n\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\r\n  ]\r\n}\r\n"],"names":["flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","key","data","displayArtifact","mergeData","inferInfoMut","display","set2","threshold_add","input","heal","prod","percent","premod","hp","sheet","name","rarity","icons","setEffects","document","fields","node","infoMut","variant","ArtifactSheet","trans","tr","trm","cond","condPath","condNode","set4Nodes","Object","fromEntries","absorbableEle","e","match","geo_dmg_","teamBuff","undefined","durationfield","text","sgt","value","unit","conditional","path","header","title","icon","ImgIcon","size","sx","m","src","action","SqBadge","color","description","states","condStatePath","condState","set4","lookup","naught","cryo_dmg_","critRate_","cryo","frozen","burstBonus","min","enerRech_","burst_dmg_","atk_","normal_dmg_","def","strKey","Translate","ns","key18","condSet4Path","condSet4","set4TallyWrite","set4TallyRead","customRead","tally","NO4","on","anemo_dmg_","swirl_dmg_","condSwirlPaths","objectKeyMap","condSwirls","condReadNode","condSwirlNodes","objectKeyValueMap","eleKey","st","swirl","elementalData","Adventurer","ArchaicPetra","BlizzardStrayer","EmblemOfSeveredFate","GladiatorsFinale","LuckyDog","NoblesseOblige","ViridescentVenerer","Stat","this","Error","printStat","statKey","stats","charCurves","objectMap","_charCurves","values","commonBasic","allSubstats","getTalentType","move","singleDmgNode","base","multiplier","additional","hit","constant","dmgNode","lvlMultiplier","talentType","subscript","dataObjForCharacterSheet","element","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","charEle","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","sum","prefix","asConst","endsWith","info","slice","special","allMainStatKeys","customStringRead","subKey","typeKey"],"sourceRoot":""}