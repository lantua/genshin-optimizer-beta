{"version":3,"file":"static/js/768.574bc45b.chunk.js","mappings":"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","sources":["Data/Characters/Albedo/assets.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/assets.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/assets.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/assets.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/assets.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/assets.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/assets.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/assets.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Collei/assets.tsx","Data/Characters/Collei/index.tsx","Data/Characters/Diluc/assets.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/assets.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Dori/assets.tsx","Data/Characters/Dori/index.tsx","Data/Characters/Eula/assets.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/assets.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/assets.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/assets.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/assets.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/assets.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/assets.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/assets.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/assets.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/assets.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/assets.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/assets.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/assets.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/KukiShinobu/assets.ts","Data/Characters/KukiShinobu/index.tsx","Data/Characters/Lisa/assets.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/assets.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/assets.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/assets.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/assets.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/assets.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/assets.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/assets.ts","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/assets.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/assets.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/assets.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/ShikanoinHeizou/assets.tsx","Data/Characters/ShikanoinHeizou/index.tsx","Data/Characters/Sucrose/assets.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/assets.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/assets.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Tighnari/assets.tsx","Data/Characters/Tighnari/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/TravelerF/index.tsx","Data/Characters/TravelerF/assets.tsx","Data/Characters/TravelerAnemoF/assets.tsx","Data/Characters/TravelerAnemoF/anemo.tsx","Data/Characters/TravelerAnemoF/index.tsx","Data/Characters/TravelerGeoF/assets.tsx","Data/Characters/TravelerGeoF/geo.tsx","Data/Characters/TravelerGeoF/index.tsx","Data/Characters/TravelerElectroF/assets.tsx","Data/Characters/TravelerElectroF/electro.tsx","Data/Characters/TravelerElectroF/index.tsx","Data/Characters/TravelerDendroF/assets.tsx","Data/Characters/TravelerDendroF/dendro.tsx","Data/Characters/TravelerDendroF/index.tsx","Data/Characters/TravelerM/index.tsx","Data/Characters/TravelerM/assets.tsx","Data/Characters/TravelerAnemoM/assets.tsx","Data/Characters/TravelerAnemoM/index.tsx","Data/Characters/TravelerGeoM/assets.tsx","Data/Characters/TravelerGeoM/index.tsx","Data/Characters/TravelerElectroM/assets.tsx","Data/Characters/TravelerElectroM/index.tsx","Data/Characters/TravelerDendroM/assets.tsx","Data/Characters/TravelerDendroM/index.tsx","Data/Characters/Venti/assets.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/assets.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/assets.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/assets.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/assets.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/assets.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/assets.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yelan/assets.tsx","Data/Characters/Yelan/index.tsx","Data/Characters/Yoimiya/assets.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/assets.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/assets.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts"],"sourcesContent":["import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Albedo_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n        [i,\r\n          prod(i, datamine.constellation2.blossomDmgInc)]\r\n      )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condP1EnemyHp,\r\n      path: condP1EnemyHpPath,\r\n      name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n      states: {\r\n        belowHp: {\r\n          fields: [{\r\n            node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: trm(\"enerPerBlossom\"),\r\n        value: datamine.constellation1.blossomEner,\r\n        fixed: 1,\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condSkillInField,\r\n      path: condSkillInFieldPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        skillInField: {\r\n          fields: [{\r\n            node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6Crystallize,\r\n      path: condC6CrystallizePath,\r\n      name: st(\"protectedByShieldCrystal\"),\r\n      canShow: equal(condSkillInField, \"skillInField\", 1),\r\n      teamBuff: true,\r\n      states: {\r\n        c6Crystallize: {\r\n          fields: [{\r\n            node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\" }),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstBlossom,\r\n      path: condBurstBlossomPath,\r\n      name: trm(\"isotomaOnField\"),\r\n      states: {\r\n        isoOnField: {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"passive2\", {\r\n      value: condBurstUsed,\r\n      path: condBurstUsedPath,\r\n      name: st(\"afterUse.burst\"),\r\n      teamBuff: true,\r\n      states: {\r\n        burstUsed: {\r\n          fields: [{\r\n            node: p2Burst_eleMas\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2Stacks,\r\n      path: condC2StacksPath,\r\n      name: trm(\"c2Stacks\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c2_burst_dmgInc\r\n          }]\r\n        }]\r\n      ))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Aloy_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: compareEq(\"rush\", condCoil, elementKey, \"physical\")\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease)\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n        textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.atkDecrease, { key: `char_${key}_gen:skill.skillParams.2_` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.atkDecreaseDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.7\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condCoil,\r\n      path: condCoilPath,\r\n      name: trm(\"skill.coil\"),\r\n      states: {\r\n        \"coil1\": {\r\n          name: trm(\"skill.coil1\"),\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n        \"coil2\": {\r\n          name: trm(\"skill.coil2\"),\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n        \"coil3\": {\r\n          name: trm(\"skill.coil3\"),\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n        \"rush\": {\r\n          name: trm(\"skill.rush\"),\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }, {\r\n            text: trm(\"normCryoInfus\"),\r\n          }, {\r\n            text: tr(\"skill.skillParams.6\"),\r\n            value: datamine.skill.rushingDuration,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"passive1\", {\r\n      value: condA1,\r\n      path: condA1Path,\r\n      canShow: unequal(input.activeCharKey, key, 1),\r\n      teamBuff: true,\r\n      name: trm(\"a1CondName\"),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: infoMut(teamAtk_, { key: \"atk_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n      value: condA4,\r\n      path: condA4Path,\r\n      canShow: equal(\"rush\", condCoil, 1),\r\n      name: trm(\"skill.rushState\"),\r\n      states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: cryo_dmg_ }]\r\n      }]))\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\"),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\"),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Amber_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      })),\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: trm(\"secondArrow\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        textSuffix: trm(\"secondArrow\")\r\n      },],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: trm(\"c6CondName\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: teamAtk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: trm(\"critRateBonus\"),\r\n        value: datamine.passive1.critRateInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        text: trm(\"aoeRangeBonus\"),\r\n        value: datamine.passive1.aoeInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        node: burst_critRate_\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n      value: condA4,\r\n      path: condA4Path,\r\n      name: trm(\"a4CondName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Arataki_Itto_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.ss.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.8\"),\r\n        value: datamine.charged.stam,\r\n      }],\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      name: trm(\"a1.name\"),\r\n      value: condP1,\r\n      path: condP1Path,\r\n      states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n        [i, {\r\n          name: st(\"stack_one\", { count: i }),\r\n          fields: [{\r\n            node: nodeP1AtkSpd\r\n          }]\r\n        }]\r\n      ))\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: nodeC6CritDMG\r\n      }]\r\n    }), {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"heal\" }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      name: st(\"afterUse.burst\"),\r\n      value: condBurst,\r\n      path: condBurstPath,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: st(\"infusion.geo\"),\r\n            variant: \"geo\",\r\n          }, {\r\n            node: nodeBurstAtkSpd,\r\n          },\r\n          ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n          {\r\n            node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: trm(\"c1.initialGain\"),\r\n        value: datamine.constellation1.initialStacks\r\n      }, {\r\n        text: trm(\"c1.timedGain\"),\r\n        value: datamine.constellation1.timedStacks\r\n      }],\r\n      canShow: equal(condBurst, \"on\", 1),\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        text: st(\"burstCDRed\"),\r\n        value: data => data.get(nodeC2BurstRed).value,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }, {\r\n        text: st(\"energyRegen\"),\r\n        value: data => data.get(nodeC2EnergyRegen).value,\r\n      }],\r\n      canShow: equal(condBurst, \"on\", 1)\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      name: trm(\"c4.name\"),\r\n      teamBuff: true,\r\n      value: condC4,\r\n      path: condC4Path,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC4Atk\r\n          }, {\r\n            node: nodeC4Def\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation4.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [{ fields: [{ node: nodeC6CritDMG }] }])\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Barbara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.5\"),\r\n        value: datamine.charged.stamina,\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(`skill.skillParams.3`),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(`skill.skillParams.4`),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n      teamBuff: true,\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      name: trm(\"passive1.cond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      teamBuff: true,\r\n      value: condC2,\r\n      path: condC2Path,\r\n      name: trm(\"constellation2.cond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Beidou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst skillShieldNode = shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")\r\nconst c1ShieldNode = shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    shield: skillShieldNode,\r\n    electroShield: shieldElement(\"electro\", skillShieldNode),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    shield: greaterEq(input.constellation, 1, c1ShieldNode),\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", c1ShieldNode)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.stamina,\r\n        unit: '/s'\r\n      }, {\r\n        text: tr(\"auto.skillParams.8\"),\r\n        value: datamine.charged.duration,\r\n        unit: 's'\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet:dmgAbsorption.none` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.electroShield, { key: `sheet:dmgAbsorption.electro` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive2\", {\r\n      teamBuff: false,\r\n      value: condA4,\r\n      path: condA4Path,\r\n      name: trm(\"tidecallerMaxDmg\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeSkillNormalDmg_,\r\n          }, {\r\n            node: nodeSkillChargeDmg_,\r\n          }, {\r\n            node: nodeSkillAttackSpeed_,\r\n          }, {\r\n            text: trm(\"a4duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"a4charge\"),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.energyCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      teamBuff: true,\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: trm(\"duringBurst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeBurstElectroResRed_,\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation1.shield, { key: `sheet:dmgAbsorption.none` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation1.electroShield, { key: `sheet:dmgAbsorption.electro` })\r\n      }]\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Bennett_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst burstAtkRatio = subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" })\r\nconst burstAddlAtk = prod(burstAtkRatio, input.base.atk)\r\nconst c1AtkRatio = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1AtkRatio, input.base.atk))\r\nconst atkIncRatio = sum(burstAtkRatio, c1AtkRatio)\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\n\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      })),\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n      }],\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condInArea,\r\n      path: condInAreaPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        activeInArea: {\r\n          fields: [{\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(burstAtkRatio).value * 100,\r\n            unit: \"%\",\r\n            fixed: 1\r\n          }, {\r\n            node: infoMut(burstAddlAtk, { key: `sheet:increase.atk` })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n      }],\r\n      canShow: equal(condInArea, \"activeInArea\", 1),\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: trm(\"additionalATKRatio\"),\r\n        node: c1AtkRatio\r\n      }, {\r\n        node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n      }],\r\n      canShow: equal(condInArea, \"activeInArea\", 1),\r\n      teamBuff: true,\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n      }, {\r\n        text: trm(\"c6PyroInfusion\")\r\n      }],\r\n      canShow: equal(condInArea, \"activeInArea\", 1),\r\n      teamBuff: true,\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [\r\n      ct.conditionalTemplate(\"constellation2\", {\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    ]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }],\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Chongyun_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n        unit: '/s'\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.duration,\r\n        unit: 's'\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.fieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      teamBuff: true,\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        activeInArea: {\r\n          fields: [{\r\n            text: trm(\"infusion\"),\r\n            variant: elementKey\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: (data) => data.get(subscript(input.total.skillIndex, datamine.skill.infusionDuration)).value,\r\n            unit: \"s\",\r\n            fixed: 1\r\n          }, {\r\n            node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\r\n          }]\r\n        },\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }, {\r\n        text: trm(\"blades\"),\r\n        value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n      }]\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n      }]\r\n    }), ct.conditionalTemplate(\"passive2\", {\r\n      teamBuff: true,\r\n      value: condAsc4,\r\n      path: condAsc4Path,\r\n      name: trm(\"asc4Cond\"),\r\n      states: {\r\n        hit: {\r\n          fields: [{\r\n            node: nodeAsc4\r\n          }]\r\n        },\r\n      }\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n      }]\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: trm(\"constellation6\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC6\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Collei_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Collei\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    leapDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[p1++][0],\r\n    sproutDmg: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    maxExtension: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    enerRech_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    sproutDmg: skillParam_gen.constellation2[0],\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    anbarDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1_enerRech_ = greaterEq(input.constellation, 1, datamine.constellation1.enerRech_)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst c4AfterBurst_eleMasDisp = greaterEq(input.constellation, 4,\r\n  equal(condAfterBurst, \"on\", datamine.constellation4.eleMas)\r\n)\r\nconst c4AfterBurst_eleMas = unequal(target.charKey, key, c4AfterBurst_eleMasDisp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n    leapDmg: dmgNode(\"atk\", datamine.burst.leapDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(percent(datamine.passive1.sproutDmg), input.total.atk), \"skill\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.anbarDmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } })) // This is possibly burst damage\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  premod: {\r\n    enerRech_: c1_enerRech_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4AfterBurst_eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.leapDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condAfterBurstPath,\r\n        value: condAfterBurst,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c4AfterBurst_eleMasDisp, { key: \"eleMas\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:sproutDmg` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:miniAnbarDmg` })\r\n        }]\r\n      })]),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diluc_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n        unit: 's'\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n      }],\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: st(\"afterUse.skill\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC6DmgBonus,\r\n          }, {\r\n            node: nodeC6SpdBonus\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      name: st(\"afterUse.burst\"),\r\n      value: condBurst,\r\n      path: condBurstPath,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: st(\"infusion.pyro\"),\r\n            variant: \"pyro\",\r\n          }, {\r\n            node: nodeA4Bonus\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1,\r\n      path: condC1Path,\r\n      name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n      canShow: greaterEq(input.constellation, 1, 1),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC1Bonus,\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2,\r\n      path: condC2Path,\r\n      name: st(\"takeDmg\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: nodeC2AtkBonus\r\n          }, {\r\n            node: nodeC2SpdBonus\r\n          }]\r\n        }]\r\n      ))\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diona_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\n// Hold shield bonus is a separate multiplier\r\nconst holdSkillShieldStr_ = percent(1.75)\r\n// C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n// 100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, holdSkillShieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressShield: nodeSkillShieldPress,\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    holdShield: nodeSkillShieldHold,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6, \"lower\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6, \"higher\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.pressShield, { key: `sheet:dmgAbsorption.none` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `sheet:dmgAbsorption.cryo` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdCryoShield` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"skillDuration\"),\r\n        value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n        unit: \"s\",\r\n        fixed: 1,\r\n      }, {\r\n        text: tr(`skill.skillParams.3`),\r\n        value: datamine.skill.cdPress,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(`skill.skillParams.4`),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\",\r\n      }],\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      teamBuff: true,\r\n      value: condA1,\r\n      path: condA1Path,\r\n      name: trm(`a1shielded`),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeA1MoveSpeed,\r\n          }, {\r\n            node: nodeA1Stamina,\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      teamBuff: true,\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        lower: {\r\n          name: st(\"lessEqPercentHP\", { percent: 50 }),\r\n          fields: [{\r\n            node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n          }]\r\n        },\r\n        higher: {\r\n          name: st(\"greaterPercentHP\", { percent: 50 }),\r\n          fields: [{\r\n            node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2skillDmg_ }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Dori_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, min, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Dori\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2.1\r\n      skillParam_gen.auto[a++], // 2.2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    shotDmg: skillParam_gen.skill[s++],\r\n    roundDmg: skillParam_gen.skill[s++],\r\n    numRounds: 2,\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    connectorDmg: skillParam_gen.burst[b++],\r\n    healMult: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    energyRegen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n    cd: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[0][0],\r\n    maxEnergyRegen: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation1: {\r\n    addlRounds: 1\r\n  },\r\n  constellation2: {\r\n    toopDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: 50,\r\n    energyThresh: 50,\r\n    incHeal_: skillParam_gen.constellation4[0],\r\n    enerRech_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    infusionDuration: skillParam_gen.constellation6[0],\r\n    heal_: skillParam_gen.constellation6[1],\r\n    cd: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condC4BelowHpPath, condC4BelowHp] = cond(key, \"c4BelowHp\")\r\nconst [condC4BelowEnerPath, condC4BelowEner] = cond(key, \"c4BelowEner\")\r\nconst c4BelowHp_incHeal_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowHp, \"belowHp\", datamine.constellation4.incHeal_)\r\n)\r\nconst c4BelowHp_incHeal_ = equal(input.activeCharKey, target.charKey, c4BelowHp_incHeal_disp)\r\nconst c4BelowEner_enerRech_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowEner, \"belowEner\", datamine.constellation4.enerRech_)\r\n)\r\nconst c4BelowEner_enerRech_ = equal(input.activeCharKey, target.charKey, c4BelowEner_enerRech_disp)\r\n\r\nconst [condC6AfterSkillPath, condC6AfterSkill] = cond(key, \"c6AfterSkill\")\r\nconst c6AfterSkill_infusion = greaterEqStr(input.constellation, 6, equalStr(condC6AfterSkill, \"on\", elementKey))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    shotDmg: dmgNode(\"atk\", datamine.skill.shotDmg, \"skill\"),\r\n    roundDmg: dmgNode(\"atk\", datamine.skill.roundDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    connectorDmg: dmgNode(\"atk\", datamine.burst.connectorDmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.healMult, datamine.burst.healBase, \"burst\")\r\n  },\r\n  passive2: {\r\n    energyRegen: greaterEq(input.asc, 4, min(prod(constant(datamine.passive2.energyRegen), input.total.enerRech_), constant(datamine.passive2.maxEnergyRegen)))\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        subscript(input.total.skillIndex, datamine.skill.shotDmg, { key: \"_\" }),\r\n        percent(datamine.constellation2.toopDmg, { key: `char_${key}:c2MultiplierKey_` }),\r\n        input.total.atk\r\n      ),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  },\r\n  constellation6: {\r\n    heal: greaterEq(input.constellation, 6, equal(condC6AfterSkill, \"on\",\r\n      customHealNode(prod(\r\n        percent(datamine.constellation6.heal_),\r\n        input.total.hp\r\n      ))\r\n    ))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6AfterSkill_infusion // This might end up being non-overridable, though I doubt it\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      incHeal_: c4BelowHp_incHeal_,\r\n      enerRech_: c4BelowEner_enerRech_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i > 1 ? i - 1 : i}` }),\r\n        textSuffix: i >= 1 && i < 3 ? `(${i})` : undefined\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.5\"),\r\n        value: datamine.charged.stamina,\r\n        unit: '/s'\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.duration,\r\n        unit: 's'\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.shotDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.roundDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]\r\n    }, ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.energyRegen, { key: \"sheet:energyRegen\" }),\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6AfterSkillPath,\r\n      value: condC6AfterSkill,\r\n      name: st(\"afterUse.skill\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: <ColorText color={elementKey}>{st(`infusion.${elementKey}`)}</ColorText>\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation6.infusionDuration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6Heal`, variant: \"heal\" })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: datamine.constellation6.cd,\r\n            unit: \"s\",\r\n            fixed: 1\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.connectorDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"heal\" }),\r\n      }, {\r\n        text: st(\"energyRegen\"),\r\n        value: (data) => data.get(subscript(input.total.burstIndex, datamine.burst.energyRegen)).value,\r\n        fixed: 1\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:c2DmgKey` })\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      teamBuff: true,\r\n      states: {\r\n        belowHp: {\r\n          path: condC4BelowHpPath,\r\n          value: condC4BelowHp,\r\n          name: trm(\"c4ConnectedBelowHp\"),\r\n          fields: [{\r\n            node: infoMut(c4BelowHp_incHeal_disp, { key: \"incHeal_\" }),\r\n          }]\r\n        },\r\n        belowEner: {\r\n          path: condC4BelowEnerPath,\r\n          value: condC4BelowEner,\r\n          name: trm(\"c4ConnectedBelowEner\"),\r\n          fields: [{\r\n            node: infoMut(c4BelowEner_enerRech_disp, { key: \"enerRech_\" }),\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Eula_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.8\"),\r\n          value: `${datamine.skill.pressCd}`,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: `${datamine.skill.holdCd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: 2,\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condGrimheart,\r\n        path: condGrimheartPath,\r\n        name: trm(\"skillC.name\"),\r\n        states: {\r\n          \"stack1\": {\r\n            name: st(\"stack\", { count: 1 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"stack2\": {\r\n            name: st(\"stack\", { count: 2 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"consumed\": {\r\n            name: trm(\"skillC.consumed\"),\r\n            fields: [{\r\n              node: cryo_enemyRes_,\r\n            }, {\r\n              node: physical_enemyRes_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: 7,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 7,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condLightfallSword,\r\n        path: condLightfallSwordPath,\r\n        name: trm(\"burstC.name\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 30), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.start5\"),\r\n            }, {\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.addStacks\"),\r\n            }]\r\n          })),\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c4C.desc\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Fischl_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"normal\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value < 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 6,\r\n          node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"aoeInc\"),\r\n          value: 50,\r\n          unit: \"%\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ganyu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n      }],\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condA1,\r\n      path: condA1Path,\r\n      name: trm(\"a1.condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: trm(\"a1.critRateInc\"),\r\n            value: datamine.passive1.critRateInc * 100,\r\n            unit: \"%\"\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: `${datamine.passive1.duration}s`,\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1,\r\n      path: condC1Path,\r\n      name: trm(\"c1.condName\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cryo_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: `${datamine.constellation1.duration}s`,\r\n          }]\r\n        }\r\n      }\r\n    }), {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }],\r\n    }, ct.conditionalTemplate(\"passive2\", {\r\n      value: condA4,\r\n      path: condA4Path,\r\n      teamBuff: true,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4,\r\n      path: condC4Path,\r\n      teamBuff: true,\r\n      name: st(\"opponentsField\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n        fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n      }]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Gorou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 1,\r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condAfterSkillBurst, \"afterSkillBurst\",\r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }],\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condInField,\r\n      path: condInFieldPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        inField: {\r\n          fields: [{\r\n            node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n          }, {\r\n            canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n            text: st(\"incInterRes\")\r\n          }, {\r\n            node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: p2_skill_dmgInc\r\n      }]\r\n    }), ct.headerTemplate(\"constellation4\", {\r\n      teamBuff: true,\r\n      canShow: greaterEq(tally.geo, 2, 1),\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\" }),\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condAfterBurst,\r\n      path: condAfterBurstPath,\r\n      name: st(\"afterUse.burst\"),\r\n      teamBuff: true,\r\n      states: {\r\n        afterBurst: {\r\n          fields: [{\r\n            node: afterBurst_def_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: p2_burst_dmgInc\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      value: condAfterSkillBurst,\r\n      path: condAfterSkillBurstPath,\r\n      name: st(\"afterUse.skillOrBurst\"),\r\n      teamBuff: true,\r\n      states: {\r\n        afterSkillBurst: {\r\n          fields: [{\r\n            node: c6_geo_critDMG_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation6.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })])\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Hu_Tao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.bloodBlossomDuration,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value > 1,\r\n          text: trm(\"constellation2.applyBloodBlossom\"),\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n              node: critRate_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: 60,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Jean_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: `${datamine.skill.stamina}`,\r\n          unit: \"/s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c1PullSpeed\")\r\n            }, {\r\n              node: skill_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 11,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: anemo_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgRed_disp, { key: \"dmgRed_\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: st(\"energyRegen\"),\r\n          value: datamine.passive2.energyRegen\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kazuha_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(ele, condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  passive2: asc4,\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n        textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.headerTemplate(\"skill\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n      }, {\r\n        text: trm(\"c1\"),\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", { // Burst absorption\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation2\", { // C2 self\r\n      value: condC2,\r\n      path: condC2Path,\r\n      name: trm(\"c2\"),\r\n      states: {\r\n        c2: {\r\n          fields: [{\r\n            node: c2EleMas\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation2\", { // C2 Party\r\n      canShow: unequal(input.activeCharKey, key, 1),\r\n      value: condC2P,\r\n      path: condC2PPath,\r\n      teamBuff: true,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        c2p: {\r\n          fields: [{\r\n            node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n      // Skill Absorption\r\n      value: condSkillAbsorption,\r\n      path: condSkillAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n        }]\r\n      }]))\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", { // Poetics of Fuubutsu\r\n      teamBuff: true,\r\n      states: Object.fromEntries(absorbableEle.map(ele => [ele, {\r\n        value: condSwirls[ele],\r\n        path: condSwirlPaths[ele],\r\n        name: st(`swirlReaction.${ele}`),\r\n        fields: [{\r\n          node: asc4[`${ele}_dmg_`]\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive2.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation2\", { // C2 self, in teambuff panel\r\n      value: condC2,\r\n      path: condC2Path,\r\n      // Show C2 self buff if A4 is enabled\r\n      teamBuff: true,\r\n      canShow: unequal(input.activeCharKey, key,\r\n        greaterEq(input.asc, 4,\r\n          sum(...Object.values(condSwirls).map(val => unequal(val, undefined, 1)))\r\n        )\r\n      ),\r\n      name: trm(\"c2\"),\r\n      states: {\r\n        c2: {\r\n          fields: [{\r\n            node: c2EleMas\r\n          }]\r\n        }\r\n      }\r\n    })\r\n    ]),\r\n    passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n      teamBuff: true,\r\n      fields: [{\r\n        node: passive\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      // Crimson Momiji\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: trm(\"c6.after\"),\r\n      states: {\r\n        c6: {\r\n          fields: [{\r\n            canShow: data => data.get(c6infusion).value === elementKey,\r\n            text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n          }, {\r\n            node: c6NormDmg_\r\n          }, {\r\n            node: c6ChargedDmg_\r\n          }, {\r\n            node: c6PlungingDmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation6.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })])\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kaeya_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    shield: greaterEq(input.constellation, 4, shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    cryoShield: greaterEq(input.constellation, 4, shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0))),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2burstDuration\"),\r\n      }],\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal` }),\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1Cryo,\r\n      path: condC1Path,\r\n      name: trm(\"c1cond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC1NormalCritRate\r\n          }, {\r\n            node: nodeC1ChargeCritRate\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.shield, { key: `sheet:dmgAbsorption.none` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `sheet:dmgAbsorption.cryo` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.constellation4.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.constellation4.cooldown,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayaka_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: st(\"brHits\", { count: 3 })\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condAfterSkillA1,\r\n      path: condAfterSkillA1Path,\r\n      name: trm(\"afterSkill\"),\r\n      states: {\r\n        afterSkill: {\r\n          fields: [{\r\n            node: a1NormDmg_,\r\n          }, {\r\n            node: a1ChargedDmg_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation4\", {\r\n      teamBuff: true,\r\n      value: condAfterBurst,\r\n      path: condAfterBurstPath,\r\n      name: trm(\"dmgBySnowflake\"),\r\n      states: {\r\n        c4: {\r\n          fields: [{\r\n            node: afterBurst\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: \"6s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    sprint: ct.talentTemplate(\"sprint\", [{\r\n      fields: [{\r\n        text: st(\"activationStam\"),\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: st(\"stamDrain\"),\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]\r\n    }, ct.conditionalTemplate(\"sprint\", {\r\n      value: condAfterSprint,\r\n      path: condAfterSprintPath,\r\n      name: trm(\"afterSprint\"),\r\n      states: {\r\n        afterSprint: {\r\n          fields: [{\r\n            canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n            text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.sprint.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"passive2\", {\r\n      value: condAfterApplySprint,\r\n      path: condAfterApplySprintPath,\r\n      name: trm(\"afterSprintCryo\"),\r\n      states: {\r\n        afterApplySprint: {\r\n          fields: [{\r\n            text: trm(\"staminaRestore\"),\r\n            value: datamine.passive2.stamina,\r\n          }, {\r\n            node: afterApplySprintCryo\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      }]\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6,\r\n      path: condC6Path,\r\n      name: trm(\"c6Active\"),\r\n      states: {\r\n        c6: {\r\n          fields: [{\r\n            node: c6ChargedDmg_,\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: datamine.constellation6.cd,\r\n            unit: \"s\"\r\n          },]\r\n        }\r\n      }\r\n    })])\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayato_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr: [\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n        subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n        input.total.atk,\r\n      ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields:\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: datamine.skill.illusionDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...datamine.skill.dmgArr.map((_, i) => ({\r\n                node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n              })), {\r\n                text: st(\"incInterRes\"),\r\n              }, {\r\n                text: trm(\"skill.unableToAuto\"),\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.stateDuration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillStacks,\r\n        path: condSkillStacksPath,\r\n        name: trm(\"skill.namisenStacks\"),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: Object.fromEntries(range(1, 5).map(stacks => [\r\n          stacks, {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n            }, {\r\n              text: st(\"maxStacks\"),\r\n              value: data => data.get(input.constellation).value >= 2\r\n                ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                : datamine.skill.maxStacks\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1OppHp,\r\n        path: condC1OppHpPath,\r\n        name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4_atkSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Keqing_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i],\r\n          { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n        ),\r\n        textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condAfterRecast,\r\n      path: condAfterRecastPath,\r\n      name: trm(\"recast\"),\r\n      states: {\r\n        afterRecast: {\r\n          fields: [{\r\n            canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n            text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive2\", {\r\n      value: condAfterBurst,\r\n      path: condAfterBurstPath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        afterBurst: {\r\n          fields: [{\r\n            node: afterBurstCritRate_\r\n          }, {\r\n            node: afterBurstEnerRech_\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n      value: condAfterReact,\r\n      path: condAfterReactPath,\r\n      name: st(\"elementalReaction.electro\"),\r\n      states: {\r\n        afterReact: {\r\n          fields: [{\r\n            node: afterReactAtk_\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6Stack,\r\n      path: condC6StackPath,\r\n      name: trm(\"effectTriggers\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: c6Electro_dmg_\r\n        }]\r\n      }))\r\n    })]),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Klee_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n      }, {\r\n        text: tr(\"auto.skillParams.4\"),\r\n        value: datamine.charged.stamina\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n      value: condA1,\r\n      path: condA1Path,\r\n      name: trm(\"a1CondName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_\r\n          }, {\r\n            text: trm(\"a1CondName2\")\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2,\r\n      path: condC2Path,\r\n      teamBuff: true,\r\n      name: trm(\"c2CondName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enemyDefRed_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6CondName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 25,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })])\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kujou_Sara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = greaterEq(input.constellation, 6, equal(\"c6\", condC6, percent(datamine.constellation6.atkInc)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen,\r\n          fixed: 2\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kuki_Shinobu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"KukiShinobu\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    ringHealHP_: skillParam_gen.skill[s++],\r\n    ringHealFlat: skillParam_gen.skill[s++],\r\n    ringDmg: skillParam_gen.skill[s++],\r\n    cost: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    singleDmg: skillParam_gen.burst[b++],\r\n    maxDmgBase: skillParam_gen.burst[b++],\r\n    maxDmgExtend: skillParam_gen.burst[b++],\r\n    durationBase: skillParam_gen.burst[b++][0],\r\n    durationExtend: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    hpThresh_: skillParam_gen.passive1[p1++][0],\r\n    heal_: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    emSkillHeal_: skillParam_gen.passive2[p2++][0],\r\n    emSkillDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    aoeInc: 0.5,\r\n  },\r\n  constellation2: {\r\n    skillDurInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    markDmg: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hpThresh_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    em: skillParam_gen.constellation6[2],\r\n    cd: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst a1Heal_ = greaterEq(input.asc, 1, equal(condUnderHP, \"on\", datamine.passive1.heal_))\r\n\r\nconst a4Skill_healInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillHeal_), input.total.eleMas))\r\nconst a4Skill_dmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillDmg_), input.total.eleMas))\r\n\r\nconst [condC6TriggerPath, condC6Trigger] = cond(key, \"c6Trigger\")\r\nconst c6eleMas = greaterEq(input.constellation, 6, equal(condC6Trigger, \"on\", datamine.constellation6.em))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    pressDmg: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    ringHeal: healNodeTalent(\"hp\", datamine.skill.ringHealHP_, datamine.skill.ringHealFlat, \"skill\",\r\n      { premod: { healInc: a4Skill_healInc } }\r\n    ),\r\n    ringDmg: dmgNode(\"atk\", datamine.skill.ringDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    singleDmg: dmgNode(\"hp\", datamine.burst.singleDmg, \"burst\"),\r\n    totalDmg: compareEq(condUnderHP, \"on\",\r\n      dmgNode(\"hp\", datamine.burst.maxDmgExtend, \"burst\"),\r\n      dmgNode(\"hp\", datamine.burst.maxDmgBase, \"burst\")\r\n    )\r\n  },\r\n  constellation4: {\r\n    markDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.markDmg), input.total.hp), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    heal_: a1Heal_,\r\n    skill_dmgInc: a4Skill_dmgInc,\r\n    eleMas: c6eleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringHeal, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringDmg, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cost * 100,\r\n          unit: trm(\"skill.cost\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skillDurInc}s = ${datamine.skill.duration + datamine.constellation2.skillDurInc}`\r\n            : datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(a4Skill_healInc, { key: `char_${key}:a4.heal`, variant: \"heal\" }),\r\n        }, {\r\n          node: a4Skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.skillDurInc,\r\n          unit: \"s\",\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.markDmg, { key: `char_${key}:c4.dmg` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.singleDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.totalDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(condUnderHP).value === \"on\"\r\n            ? `${datamine.burst.durationBase}s + ${datamine.burst.durationExtend - datamine.burst.durationBase}s = ${datamine.burst.durationExtend}`\r\n            : datamine.burst.durationBase,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"durationInc\"),\r\n              value: datamine.burst.durationExtend - datamine.burst.durationBase,\r\n              fixed: 1,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"aoeInc\"),\r\n          value: datamine.constellation1.aoeInc * 100,\r\n          unit: \"%\",\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1Heal_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Trigger,\r\n        path: condC6TriggerPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation6.hpThresh_ * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6eleMas,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Lisa_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Mona_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: trm(\"bubbleDuration\"),\r\n          value: datamine.burst.bubbleDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"phantomDuration\"),\r\n          value: datamine.passive1.phantomDuration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: hydro_dmg_\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })])\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ningguang_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_: skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodesC4 = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_res_`,\r\n  equal(condC4, \"on\", percent(0.10))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_: nodeA4GeoDmgBonus_,\r\n      ...nodesC4,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` })\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        text: trm(\"aoeGems\"),\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n      }, {\r\n        canShow: data => data.get(input.asc).value < 1,\r\n        text: tr(\"auto.skillParams.3\"),\r\n        value: datamine.charged.stamina,\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: tr(\"auto.skillParams.3\"),\r\n        value: trm(\"starJadeStaminaCost\"),\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"skillReset\"),\r\n      }],\r\n    }, ct.conditionalTemplate(\"passive2\", {\r\n      teamBuff: true,\r\n      value: condA4,\r\n      path: condA4Path,\r\n      name: trm(\"a4toggle\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeA4GeoDmgBonus_\r\n          }, {\r\n            text: trm(\"a4duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      teamBuff: true,\r\n      value: condC4,\r\n      path: condC4Path,\r\n      name: trm(\"c4toggle\"),\r\n      states: {\r\n        on: {\r\n          fields: Object.values(nodesC4).map(n => ({ node: n }))\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 6,\r\n        text: trm(\"c6bonus\"),\r\n        value: 7,\r\n      }]\r\n    }]),\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Noelle_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\r\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n    staminaChargedDec_: nodeC2ChargeDec,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n        unit: '/s'\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.duration,\r\n        unit: 's'\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, { //Heal trigger chance\r\n        canShow: data => data.get(input.constellation).value === 0,\r\n        node: nodeSkillHealChanceBase,\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        node: nodeSkillHealChanceC1BurstOff,\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        node: nodeSkillHealChanceC1BurstOn,\r\n      }, { //Shield Duration\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.shieldDuration,\r\n        unit: \"s\"\r\n      }, { //Cooldown\r\n        canShow: data => data.get(input.asc).value < 4,\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: trm(`p4cd`),\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value < 6,\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 6,\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: trm(`c6duration`),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }],\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      name: tr(\"burst.name\"),\r\n      value: condBurst,\r\n      path: condBurstPath,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: st(\"infusion.geo\"),\r\n            variant: \"geo\",\r\n          }, {\r\n            text: trm(\"qlarger\")\r\n          }, {\r\n            node: nodeBurstAtk\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.passive1.cooldown,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: nodeC2ChargeDec\r\n      }, {\r\n        node: nodeC2ChargeDMG\r\n      }]\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Qiqi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, 0.2))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 3) ? st(\"brHits\", { count: 2 }) : undefined\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 2 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        },\r\n        {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Raiden_Shogun_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(constant(datamine.burst.enerCost, { key: \"sheet:energy\" }), subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i, { key: \"sheet:energy\" })), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nconst resolveStackNode = lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0, { key: `char_${key}:burst.resolves` })\r\nconst resolveInitialBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus1, { key: `char_${key}:burst.resolveInitial_` }),\r\n  resolveStackNode\r\n)\r\nconst resolveInfusedBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus2, { key: `char_${key}:burst.resolveInfused_` }),\r\n  resolveStackNode\r\n)\r\nfunction burstResolve(mvArr: number[], initial = false) {\r\n  const resolveBonus = initial ? resolveInitialBonus_ : resolveInfusedBonus_\r\n\r\n  return customDmgNode(\r\n    prod(\r\n      sum(\r\n        subscript(input.total.burstIndex, mvArr, { key: '_' }),\r\n        resolveBonus\r\n      ),\r\n      input.total.atk\r\n    ),\r\n    'burst',\r\n    {\r\n      hit: {\r\n        ele: constant('electro')\r\n      }, enemy: {\r\n        // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n        defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n        textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }],\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillEye,\r\n      path: condSkillEyePath,\r\n      name: trm(\"skill.eye\"),\r\n      states: {\r\n        skillEye: {\r\n          fields: [{\r\n            node: skillEye_\r\n          }]\r\n        }\r\n      }\r\n    },\r\n    ), ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillEyeTeam,\r\n      path: condSkillEyeTeamPath,\r\n      teamBuff: true,\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      name: trm(\"skill.partyCost\"),\r\n      states: Object.fromEntries(energyCosts.map(c => [c, {\r\n        name: `${c}`,\r\n        fields: [{\r\n          node: skillEyeTeamBurstDmgInc,\r\n        }]\r\n      }]))\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }],\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condResolveStack,\r\n      path: condResolveStackPath,\r\n      name: trm(\"burst.resolves\"),\r\n      states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: infoMut(resolveInitialBonus_, { key: `char_${key}:burst.resolveInitial_` }),\r\n        }, {\r\n          node: infoMut(resolveInfusedBonus_, { key: `char_${key}:burst.resolveInfused_` })\r\n        }]\r\n      }]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100),\r\n        unit: \"%\"\r\n      }, {\r\n        node: passive2ElecDmgBonus,\r\n      }]\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4,\r\n      path: condC4Path,\r\n      teamBuff: true,\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      name: trm(\"c4.expires\"),\r\n      states: {\r\n        c4: {\r\n          fields: [{\r\n            node: c4AtkBonus_,\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.constellation4.duration}s`\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Razor_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n        unit: '/s'\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.duration,\r\n        unit: 's'\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: (data) => data.get(input.asc).value >= 1\r\n          ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed)\r\n          : datamine.skill.pressCd,\r\n        unit: 's'\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: (data) => data.get(input.asc).value >= 1\r\n          ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed)\r\n          : datamine.skill.holdCd,\r\n        unit: 's'\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", { // Electro Sigil\r\n      value: condElectroSigil,\r\n      path: condElectroSigilPath,\r\n      name: trm(\"electroSigil\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 3), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: enerRechElectroSigil_\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: datamine.skill.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"electroSigilAbsorbed\"),\r\n            value: datamine.skill.enerRegen * i,\r\n          }]\r\n        })),\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.0\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.1\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.2\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.3\")\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", { // The Wolf Within\r\n      value: condTheWolfWithin,\r\n      path: condTheWolfWithinPath,\r\n      name: tr(\"burst.description.3\"),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: electro_res_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            text: st(\"incInterRes\")\r\n          }]\r\n        }\r\n      }\r\n    }), {\r\n      text: trm(\"fullBurstDMG.description\"),\r\n    }, ct.headerTemplate(\"burst\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n      value: condA4,\r\n      path: condA4Path,\r\n      name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: enerRechA4_\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1,\r\n      path: condC1Path,\r\n      name: trm(\"pickUpElementalOrbParticle\"),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2,\r\n      path: condC2Path,\r\n      name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: critRate_\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4,\r\n      path: condC4Path,\r\n      teamBuff: true,\r\n      name: trm(\"opHitWithClawAndThunder\"),\r\n      states: {\r\n        \"on\": {\r\n          fields: [{\r\n            node: enemyDefRed_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation4.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n      }, {\r\n        text: trm(\"electroSigilPerProc\"),\r\n        value: datamine.constellation6.electroSigilGenerated\r\n      }, {\r\n        text: st(\"cooldown\"),\r\n        value: datamine.constellation6.cd,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Rosaria_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, min, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\r\n    percent(datamine.passive2.maxBonus)\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_enemyRes_: nodeC6PhysShred\r\n    },\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6PhysShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        // Hide for Rosaria\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // A1 conditional in teambuff, if A4 is active\r\n        path: condA1Path,\r\n        value: condA1,\r\n        name: trm(\"a1\"),\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key, equal(condA4, \"on\", 1)),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sangonomiya_Kokomi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp), { variant: \"invalid\" })\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp), { variant: \"invalid\" })\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c2SkillHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.s_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c2BurstHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.nc_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, datamine.c4.atkSPD_)\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.c6.hydro_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    heal: healNodeTalent(\"hp\", datamine.skill.heal_, datamine.skill.heal, \"skill\",\r\n      { premod: { healInc: c2SkillHeal } }\r\n    )\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.heal_, datamine.burst.heal, \"burst\",\r\n      { premod: { healInc: c2BurstHeal } }\r\n    )\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.7\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"heal\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive: ct.talentTemplate(\"passive\", [{\r\n        fields: [{\r\n          node: passiveHeal_\r\n        }, {\r\n          node: passiveCritRate_\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c2SkillHeal, { key: `char_${key}:c2SkillHeal` }),\r\n            }, {\r\n              node: infoMut(c2BurstHeal, { key: `char_${key}:c2BurstHeal` }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [{ fields: [{ node: c4AtkSpd_ }] }]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      })]),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sayu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, equal(condActiveSwirl, \"activeSwirl\",\r\n      customHealNode(\r\n        sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas))\r\n      )\r\n    ))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: `${datamine.charged.stamina}/s`,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillAbsorption,\r\n      path: condSkillAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n        }]\r\n      }]))\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2SkillStack,\r\n      path: condC2SkillStackPath,\r\n      name: trm(\"c2Cond\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n        name: st(\"seconds\", { count: stack * 0.5 }),\r\n        fields: [{\r\n          node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n        }]\r\n      }]))\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3` })\r\n      }, {\r\n        text: trm(\"burstHits\"),\r\n        value: datamine.burst.darumaHits,\r\n      }]\r\n    }, ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"heal\" })\r\n      }, {\r\n        text: trm(\"p2Aoe\")\r\n      }]\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: trm(\"c1Text\")\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: infoMut(c6_daruma_dmg_inc, { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n      }, {\r\n        node: infoMut(c6_daruma_heal_inc, { key: `char_${key}:c6DarumaHealInc`, variant: \"heal\" })\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n      value: condActiveSwirl,\r\n      path: condActiveSwirlPath,\r\n      name: trm(\"p1Swirl\"),\r\n      states: {\r\n        activeSwirl: {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing` })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: datamine.passive1.cd,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n      fields: [{\r\n        text: trm(\"c4Ener\"),\r\n        value: datamine.constellation4.ener,\r\n        fixed: 1\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.constellation4.cd,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\")\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Shenhe_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"pressDuration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"pressQuota\"),\r\n          value: datamine.skill.trigger,\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: trm(\"holdDuration\"),\r\n          value: datamine.skill.durationHold,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"holdQuota\"),\r\n          value: datamine.skill.triggerHold,\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          press: {\r\n            name: st(\"press\"),\r\n            fields: [{\r\n              node: nodeAsc4Press_skill_dmg_\r\n            }, {\r\n              node: nodeAsc4Press_burst_dmg_\r\n            }]\r\n          },\r\n          hold: {\r\n            name: st(\"hold\"),\r\n            fields: [{\r\n              node: nodeAsc4Hold_normal_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_charged_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_plunging_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n          name: i.toString(),\r\n          fields: [{ node: c4Inc }]\r\n        }))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: tr(\"constellation6.description\")\r\n        }],\r\n        teamBuff: true\r\n      }),\r\n      ]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }), ct.headerTemplate(\"constellation2\", {\r\n          fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }],\r\n        teamBuff: true,\r\n       }),\r\n      ]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './banner.png'\r\nimport burst from './burst.png'\r\nimport card from './characterCard.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './icon.png'\r\nimport thumbSide from './iconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"ShikanoinHeizou\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 4.3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    declension_dmg_: skillParam_gen.skill[s++],\r\n    conviction_dmg_: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    declension_duration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    slugger_dmg: skillParam_gen.burst[b++],\r\n    iris_dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    eleMas: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  passive3: {\r\n    staminaSprintDec_: 0.25,\r\n  },\r\n  constellation1: {\r\n    duration: skillParam_gen.constellation1[0],\r\n    atkSpd_: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[2],\r\n  },\r\n  constellation4: {\r\n    baseEnergy: skillParam_gen.constellation4[0],\r\n    addlEnergy: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hsCritRate_: skillParam_gen.constellation6[0],\r\n    hsCritDmg_: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst stacksArr = range(1, 4)\r\nconst [condDeclensionStacksPath, condDeclensionStacks] = cond(key, \"declensionStacks\")\r\nconst declension_dmg_ = lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      subscript(input.total.skillIndex, datamine.skill.declension_dmg_, { key: \"sheet:bonusScaling.skill_\" }),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])), naught, { key: \"sheet:bonusScaling.skill_\" })\r\nconst conviction_dmg_ = equal(condDeclensionStacks, \"4\",\r\n  subscript(input.total.skillIndex, datamine.skill.conviction_dmg_, { key: \"_\" }),\r\n  { key: \"sheet:bonusScaling.skill_\" }\r\n)\r\nconst totalStacks_dmg_ = sum(declension_dmg_, conviction_dmg_)\r\n\r\nconst [condSkillHitPath, condSkillHit] = cond(key, \"skillHit\")\r\nconst a4_eleMasDisp = greaterEq(input.asc, 4,\r\n  equal(condSkillHit, \"on\", datamine.passive2.eleMas)\r\n)\r\nconst a4_eleMas = unequal(target.charKey, key, a4_eleMasDisp)\r\n\r\n// TODO: After non-stacking buffs\r\n// const staminaSprintDec_ = percent(datamine.passive3.staminaSprintDec_)\r\n\r\nconst [condTakeFieldPath, condTakeField] = cond(key, \"takeField\")\r\nconst c1_atkSpd_ = greaterEq(input.constellation, 1, equal(condTakeField, \"on\", percent(datamine.constellation1.atkSpd_)))\r\n\r\nconst c6_skill_critRate_ = greaterEq(input.constellation, 6, lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      percent(datamine.constellation6.hsCritRate_),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])),\r\n  naught\r\n))\r\nconst c6_skill_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condDeclensionStacks, \"4\", percent(datamine.constellation6.hsCritDmg_))\r\n)\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.skillIndex, datamine.skill.dmg, { key: \"_\" }),\r\n          totalStacks_dmg_\r\n        ),\r\n        input.total.atk\r\n      ),\r\n      \"skill\",\r\n      { hit: { ele: constant(\"anemo\") } }\r\n    )\r\n  },\r\n  burst: {\r\n    slugger_dmg: dmgNode(\"atk\", datamine.burst.slugger_dmg, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(ele => [\r\n      `${ele}_iris_dmg`,\r\n      dmgNode(\"atk\", datamine.burst.iris_dmg, \"burst\", { hit: { ele: constant(ele) } })\r\n    ]))\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    atkSPD_: c1_atkSpd_,\r\n    skill_critRate_: c6_skill_critRate_,\r\n    skill_critDMG_: c6_skill_critDMG_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      // TODO: after non-stacking buffs\r\n      // staminaSprintDec_\r\n      eleMas: a4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(\r\n            dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i > 2 ? (i < 6 ? 3 : 4) : i}` }\r\n          ),\r\n          textSuffix: (i > 2 && i < 6) ? `(${i - 2})` : undefined,\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        path: condDeclensionStacksPath,\r\n        value: condDeclensionStacks,\r\n        name: trm(\"declensionStacks\"),\r\n        states: Object.fromEntries(stacksArr.map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(totalStacks_dmg_, { key: \"sheet:bonusScaling.skill_\" })\r\n            }, {\r\n              canShow: (data) => data.get(condDeclensionStacks).value === \"4\",\r\n              text: st(\"aoeInc\"),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.declension_duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        path: condSkillHitPath,\r\n        value: condSkillHit,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(a4_eleMasDisp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_skill_critRate_\r\n        }, {\r\n          node: c6_skill_critDMG_\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slugger_dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, ...absorbableEle.map(ele => ({\r\n          node: infoMut(dmgFormulas.burst[`${ele}_iris_dmg`], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        })), {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"/* TODO: after non-stacking buffs, [{ fields: [{ node: staminaSprintDec_ }] }]*/),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        path: condTakeFieldPath,\r\n        value: condTakeField,\r\n        name: trm(\"takingField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1_atkSpd_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sucrose_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n  equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n  greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.duration}s + 2`\r\n            : datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation6\", { // Absorption teambuff for C6\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: unequal(condAbsorption, undefined, 1),\r\n        fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tartaglia_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1, { key: \"_\" }), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2, { key: \"_\" }), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.riptide\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.10\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.passive1.durationExt + datamine.riptideDuration\r\n            : datamine.riptideDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.10\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.11\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.preemptiveCd1 - (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)}\r\n            - ${datamine.skill.preemptiveCd2 - (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.preemptiveCd1} - ${datamine.skill.preemptiveCd2}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.12\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.maxCd - (datamine.skill.maxCd * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.maxCd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerReturned}`,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{ node: nodePassive }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Thoma_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.5\"),\r\n        value: datamine.charged.stamina,\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minPyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n          { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.shieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.shieldDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n          : datamine.burst.scorchingDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condP1BarrierStacks,\r\n      path: condP1BarrierStacksPath,\r\n      name: trm(\"a1\"),\r\n      teamBuff: true,\r\n      states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n        stacks,\r\n        {\r\n          name: st(\"stack\", { count: stacks }),\r\n          fields: [{\r\n            node: p1_shield_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: st(\"triggerCD\"),\r\n            value: datamine.passive1.cd,\r\n            unit: \"s\",\r\n            fixed: 1\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        text: trm(\"c2\"),\r\n        value: datamine.c2.burstDuration,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4AfterBurst,\r\n      path: condC4AfterBurstPath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: st(\"energyRegen\"),\r\n            value: datamine.c4.energyRestore,\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6AfterBarrier,\r\n      path: condC6AfterBarrierPath,\r\n      name: trm(\"c6\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c6_normal_dmg_,\r\n          }, {\r\n            node: c6_charged_dmg_,\r\n          }, {\r\n            node: c6_plunging_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tighnari_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tighnari\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    wreathArrow: skillParam_gen.auto[a++],\r\n    clusterArrow: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n    penetratorDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    primaryDmg: skillParam_gen.burst[b++],\r\n    secondaryDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    charged_burst_dmg_: skillParam_gen.passive2[p2++][0],\r\n    maxDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    charged_critRate_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    dendro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0],\r\n    dmg: skillParam_gen.constellation6[1],\r\n    chargeTimeRed: 0.9\r\n  }\r\n} as const\r\n\r\nconst [condA1AfterWreathPath, condA1AfterWreath] = cond(key, \"p1AfterWreath\")\r\nconst a1AfterWreath_eleMas = greaterEq(input.asc, 1, equal(condA1AfterWreath, \"on\", datamine.passive1.eleMas))\r\n\r\nconst a4_charged_dmg_ = greaterEq(input.asc, 4, min(\r\n  prod(percent(datamine.passive2.charged_burst_dmg_, { fixed: 2 }), input.total.eleMas),\r\n  percent(datamine.passive2.maxDmg_)\r\n))\r\nconst a4_burst_dmg_ = { ...a4_charged_dmg_ }\r\nconst chargedShaftAddl: Data = {\r\n  hit: { ele: constant(elementKey) },\r\n}\r\n\r\nconst c1_charged_critRate_ = greaterEq(input.constellation, 1, datamine.constellation1.charged_critRate_)\r\n\r\nconst [condC2EnemyFieldPath, condC2EnemyField] = cond(key, \"c2EnemyField\")\r\nconst c2EnemyField_dendro_dmg_ = greaterEq(input.constellation, 2, equal(condC2EnemyField, \"on\", datamine.constellation2.dendro_dmg_))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_eleMas = greaterEq(input.constellation, 4, lookup(condC4, {\r\n  after: constant(datamine.constellation4.eleMas),\r\n  react: constant(datamine.constellation4.eleMas * 2)\r\n}, naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", chargedShaftAddl),\r\n    wreath: dmgNode(\"atk\", datamine.charged.wreathArrow, \"charged\", chargedShaftAddl),\r\n    cluster: dmgNode(\"atk\", datamine.charged.clusterArrow, \"charged\", chargedShaftAddl),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    primaryDmg: dmgNode(\"atk\", datamine.burst.primaryDmg, \"burst\"),\r\n    secondaryDmg: dmgNode(\"atk\", datamine.burst.secondaryDmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n  },\r\n  constellation6: {\r\n    cluster: greaterEq(input.constellation, 6, customDmgNode(\r\n      prod(percent(datamine.constellation6.dmg), input.total.atk),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  }\r\n}\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    eleMas: a1AfterWreath_eleMas,\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n    charged_critRate_: c1_charged_critRate_,\r\n    dendro_dmg_: c2EnemyField_dendro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : undefined,\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.wreath, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.cluster, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        path: condA1AfterWreathPath,\r\n        value: condA1AfterWreath,\r\n        name: trm(\"p1Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1AfterWreath_eleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: c1_charged_critRate_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6WreathRed\"),\r\n          value: datamine.constellation6.chargeTimeRed,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation6.cluster, { key: `char_${key}:c6DmgKey` })\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.penetratorDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2EnemyFieldPath,\r\n        value: condC2EnemyField,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyField_dendro_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.primaryDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.secondaryDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4Path,\r\n        value: condC4,\r\n        teamBuff: true,\r\n        name: \"\",\r\n        states: {\r\n          after: {\r\n            name: st(\"afterUse.burst\"),\r\n            fields: [{\r\n              node: c4_eleMas,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n          react: {\r\n            name: trm(\"c4ReactCond\"),\r\n            fields: [{\r\n              node: c4_eleMas\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: a4_charged_dmg_,\r\n        }, {\r\n          node: a4_burst_dmg_,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { CharacterData } from 'pipeline'\r\nimport { WeaponTypeKey } from '../../../Types/consts'\r\nimport data_gen_src from './data_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nexport default {\r\n  sheet: {\r\n    rarity: data_gen.star,\r\n    weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  },\r\n  data_gen,\r\n} as const\r\n","import { Translate } from '../../../Components/Translate'\r\nimport Traveler from '../Traveler'\r\nconst key = \"TravelerF\"\r\nconst tr = (strKey: string) => <Translate ns={`char_${key}_gen`} key18={strKey} />\r\n\r\nexport default {\r\n  sheet: {\r\n    ...Traveler.sheet,\r\n    name: tr(\"name\"),\r\n    gender: \"F\",\r\n    constellationName: tr(\"constellationName\"),\r\n    title: tr(\"title\"),\r\n  },\r\n  data_gen: Traveler.data_gen\r\n} as const\r\n","\r\nimport card from './Traveler_Female_Card.jpg'\r\nimport thumb from './icon.png'\r\nimport thumbSide from './iconSide.png'\r\n\r\nexport default { card, thumb, thumbSide } as const\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport TravelerF from '../TravelerF/assets'\r\nexport default { ...TravelerF, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import ColorText from '../../../Components/ColoredText'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, CharacterSheetKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyValueMap } from '../../../Util/Util'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport Traveler from '../Traveler'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nexport default function anemo(key: CharacterSheetKey, charKey: CharacterKey) {\r\n  const elementKey: ElementKey = \"anemo\"\r\n  const condCharKey = \"TravelerAnemo\"\r\n  const ct = charTemplates(key, Traveler.data_gen.weaponTypeKey, assets)\r\n\r\n  const tr = (strKey: string) => <Translate ns={`char_${key}_gen`} key18={strKey} />\r\n  const trm = (strKey: string) => <Translate ns={`char_${condCharKey}`} key18={strKey} />\r\n\r\n  let s = 0, b = 0\r\n  const datamine = {\r\n    skill: {\r\n      initial_dmg: skillParam_gen.skill[s++],\r\n      initial_max: skillParam_gen.skill[s++],\r\n      storm_dmg: skillParam_gen.skill[s++],\r\n      storm_max: skillParam_gen.skill[s++],\r\n      cd: skillParam_gen.skill[s++][0],\r\n      maxCd: skillParam_gen.skill[s++][0],\r\n    },\r\n    burst: {\r\n      dmg: skillParam_gen.burst[b++],\r\n      absorbDmg: skillParam_gen.burst[b++],\r\n      duration: skillParam_gen.burst[b++][0],\r\n      cd: skillParam_gen.burst[b++][0],\r\n      enerCost: skillParam_gen.burst[b++][0],\r\n    },\r\n    passive1: {\r\n      dmg: 0.6,\r\n    },\r\n    passive2: {\r\n      heal_: 0.02,\r\n    },\r\n    constellation2: {\r\n      enerRech_: 0.16,\r\n    },\r\n    constellation6: {\r\n      enemyRes_: -0.2\r\n    }\r\n  } as const\r\n\r\n  const [condBurstAbsorptionPath, condBurstAbsorption] = cond(condCharKey, `${elementKey}BurstAbsorption`)\r\n  const nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\n  const [condC6Path, condC6] = cond(condCharKey, `${elementKey}C6Hit`)\r\n  const nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.enemyRes_))\r\n  const nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, greaterEq(input.constellation, 6, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_)))])\r\n  const dmgFormulas = {\r\n    skill: {\r\n      initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n      initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n      storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n      storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n    },\r\n    burst: {\r\n      dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n      absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n    },\r\n    passive1: {\r\n      dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n    },\r\n    passive2: {\r\n      heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n    }\r\n  } as const\r\n\r\n  const nodeC3 = greaterEq(input.constellation, 3, 3)\r\n  const nodeC5 = greaterEq(input.constellation, 5, 3)\r\n  const data = dataObjForCharacterSheet(charKey, elementKey, undefined, Traveler.data_gen, dmgFormulas, {\r\n    bonus: {\r\n      skill: nodeC5,\r\n      burst: nodeC3,\r\n    },\r\n    premod: {\r\n      enerRech_: nodeC2,\r\n    },\r\n    teamBuff: {\r\n      premod: {\r\n        ...nodesC6,\r\n        anemo_enemyRes_: nodeC6,\r\n      }\r\n    }\r\n  })\r\n\r\n  const talent: TalentSheet = {\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.maxCd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: trm(\"c1\"),\r\n        value: 10,\r\n        unit: \"%\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 anemo\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n      canShow: unequal(condBurstAbsorption, undefined, equal(condC6, \"on\", equal(target.charKey, key, 1))),\r\n      fields: absorbableEle.map(eleKey => (\r\n        { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n      ))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      teamBuff: true,\r\n      canShow: equal(condC6, \"on\", unequal(input.activeCharKey, key, 1)),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: nodesC6[`${eleKey}_enemyRes_`]\r\n        }]\r\n      }]))\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${condCharKey}:p1` })\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n  return {\r\n    talent,\r\n    data,\r\n    elementKey\r\n  }\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerF from '../TravelerF'\r\nimport anemo from './anemo'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerF.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerAnemoF\"\r\nconst charKey: CharacterKey = \"TravelerAnemo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = anemo(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerF.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport TravelerF from '../TravelerF/assets'\r\nexport default { ...TravelerF, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport Traveler from '../Traveler'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nexport default function geo(key: CharacterSheetKey, charKey: CharacterKey) {\r\n  const elementKey: ElementKey = \"geo\"\r\n  const condCharKey = \"TravelerGeo\"\r\n  const ct = charTemplates(key, Traveler.data_gen.weaponTypeKey, assets)\r\n\r\n  const tr = (strKey: string) => <Translate ns={`char_${key}_gen`} key18={strKey} />\r\n\r\n  let s = 0, b = 0\r\n  const datamine = {\r\n    skill: {\r\n      dmg: skillParam_gen.skill[s++],\r\n      duration: skillParam_gen.skill[s++][0],\r\n      cd: skillParam_gen.skill[s++][0]\r\n    },\r\n    burst: {\r\n      dmg: skillParam_gen.burst[b++],\r\n      numShockwaves: 4,\r\n      duration: skillParam_gen.burst[b++][0],\r\n      cd: skillParam_gen.burst[b++][0],\r\n      enerCost: skillParam_gen.burst[b++][0],\r\n    },\r\n    passive1: {\r\n      skill_cdRed: 2\r\n    },\r\n    passive2: {\r\n      geoDmg: percent(0.6),\r\n    },\r\n    constellation1: {\r\n      critRate_: percent(0.1),\r\n    },\r\n    constellation4: {\r\n      energyRestore: 5,\r\n      maxTriggers: 5\r\n    },\r\n    constellation6: {\r\n      burstDuration: 5,\r\n      skillDuration: 10\r\n    }\r\n  } as const\r\n\r\n  const [condC1BurstAreaPath, condC1BurstArea] = cond(condCharKey, `${elementKey}C1BurstArea`)\r\n  const c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n    equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n  )\r\n  const c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\n  const [condC4BurstHitPath, condC4BurstHit] = cond(condCharKey, `${elementKey}C4BurstHit`)\r\n  const c4Burst_energyRestore = lookup(condC4BurstHit,\r\n    Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n      stack,\r\n      constant(stack * datamine.constellation4.energyRestore)\r\n    ])),\r\n    naught\r\n  )\r\n\r\n  const dmgFormulas = {\r\n    skill: {\r\n      dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    },\r\n    burst: {\r\n      dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    },\r\n    passive2: {\r\n      dmg: customDmgNode(\r\n        prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n      )\r\n    },\r\n    constellation2: {\r\n      dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    }\r\n  } as const\r\n\r\n  const burstC3 = greaterEq(input.constellation, 3, 3)\r\n  const skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n  const data = dataObjForCharacterSheet(charKey, elementKey, undefined, Traveler.data_gen, dmgFormulas, {\r\n    bonus: {\r\n      skill: skillC5,\r\n      burst: burstC3,\r\n    },\r\n    teamBuff: {\r\n      premod: {\r\n        critRate_: c1BurstArea_critRate_\r\n      }\r\n    }\r\n  })\r\n\r\n  const talent: TalentSheet = {\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n          : datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: data => data.get(input.asc).value >= 1\r\n          ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n          : datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${condCharKey}:c2.key` }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg,\r\n          { key: `sheet_gen:skillDMG` }\r\n        ),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1BurstArea,\r\n      path: condC1BurstAreaPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n          }, {\r\n            text: st(\"incInterRes\"),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4BurstHit,\r\n      path: condC4BurstHitPath,\r\n      name: st(\"hitOp.burst\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"hits\", { count: stack }),\r\n          fields: [{\r\n            node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${condCharKey}:passive2.key` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n  return {\r\n    talent,\r\n    data,\r\n    elementKey\r\n  }\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerF from '../TravelerF'\r\nimport geo from './geo'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerF.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerGeoF\"\r\nconst charKey: CharacterKey = \"TravelerGeo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = geo(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerF.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport TravelerF from '../TravelerF/assets'\r\nexport default { ...TravelerF, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt } from '../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport Traveler from '../Traveler'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nexport default function anemo(key: CharacterSheetKey, charKey: CharacterKey) {\r\n  const elementKey: ElementKey = \"electro\"\r\n  const condCharKey = \"TravelerElectro\"\r\n  const ct = charTemplates(key, Traveler.data_gen.weaponTypeKey, assets)\r\n\r\n  const tr = (strKey: string) => <Translate ns={`char_${key}_gen`} key18={strKey} />\r\n  const trm = (strKey: string) => <Translate ns={`char_${condCharKey}`} key18={strKey} />\r\n\r\n  let s = 0, b = 0\r\n  const datamine = {\r\n    skill: {\r\n      dmg: skillParam_gen.skill[s++],\r\n      energyRestore: skillParam_gen.skill[s++],\r\n      amulets: 2,\r\n      amuletDuration: skillParam_gen.skill[s++][0],\r\n      enerRech_: skillParam_gen.skill[s++][0],\r\n      enerRech_duration: skillParam_gen.skill[s++][0],\r\n      cd: skillParam_gen.skill[s++][0],\r\n    },\r\n    burst: {\r\n      pressDmg: skillParam_gen.burst[b++],\r\n      thunderDmg: skillParam_gen.burst[b++],\r\n      thunderCd: 0.5,\r\n      energyRestore: skillParam_gen.burst[b++],\r\n      duration: skillParam_gen.burst[b++][0],\r\n      cd: skillParam_gen.burst[b++][0],\r\n      enerCost: skillParam_gen.burst[b++][0]\r\n    },\r\n    passive1: {\r\n      cdRed: skillParam_gen.passive1[0][0],\r\n    },\r\n    passive2: {\r\n      enerRech_: skillParam_gen.passive2[0][0],\r\n    },\r\n    constellation1: {\r\n      addlAmulets: 1\r\n    },\r\n    constellation2: {\r\n      duration: skillParam_gen.constellation2[0],\r\n      electro_enemyRes: skillParam_gen.constellation2[1],\r\n    },\r\n    constellation6: {\r\n      numAttacks: skillParam_gen.constellation6[0],\r\n      thunder_dmg_: skillParam_gen.constellation6[0],\r\n      energyRestore: skillParam_gen.constellation6[1]\r\n    }\r\n  } as const\r\n\r\n  const [condSkillAmuletPath, condSkillAmulet] = cond(condCharKey, `${elementKey}SkillAmulet`)\r\n  const p2_enerRech_ = greaterEq(input.asc, 4,\r\n    prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n  )\r\n  const skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n    sum(\r\n      percent(datamine.skill.enerRech_),\r\n      p2_enerRech_\r\n    )\r\n  )\r\n  const skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\n  const burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n    { key: `char_${key}_gen:burst.skillParmas.2` }\r\n  )\r\n\r\n  const [condC2ThunderPath, condC2Thunder] = cond(condCharKey, `${elementKey}C2Thunder`)\r\n  const c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n    equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n  )\r\n\r\n  const [condC6After2ThunderPath, condC6After2Thunder] = cond(condCharKey, `${elementKey}C6After2Thunder`)\r\n  const c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\n  const dmgFormulas = {\r\n    skill: {\r\n      dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    },\r\n    burst: {\r\n      pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n      thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n        { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n    }\r\n  } as const\r\n\r\n  const burstC3 = greaterEq(input.constellation, 3, 3)\r\n  const skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n  const data = dataObjForCharacterSheet(charKey, elementKey, undefined, Traveler.data_gen, dmgFormulas, {\r\n    bonus: {\r\n      skill: skillC5,\r\n      burst: burstC3,\r\n    },\r\n    teamBuff: {\r\n      premod: {\r\n        electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n      },\r\n      total: {\r\n        enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n      }\r\n    }\r\n  })\r\n\r\n  const talent: TalentSheet = {\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: trm(\"skill.amuletGenAmt\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n          : datamine.skill.amulets\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.amuletDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: tr(\"passive1.description\")\r\n      }]\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${condCharKey}:passive2.enerRech_` })\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg,\r\n          { key: `char_${key}_gen:burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.thunderDmg,\r\n          { key: `char_${key}_gen:burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: trm(\"burst.thunderCd\"),\r\n        value: datamine.burst.thunderCd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }, {\r\n        node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2Thunder,\r\n      path: condC2ThunderPath,\r\n      name: trm(\"c2.thunderHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c2Thunder_electro_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6After2Thunder,\r\n      path: condC6After2ThunderPath,\r\n      name: trm(\"c6.fallingThunder3\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_thunder_dmg_,\r\n              { key: `char_${condCharKey}:c6.fallingThunderBonus_`, variant: \"electro\" }\r\n            )\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.constellation6.energyRestore\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n  return {\r\n    talent,\r\n    data,\r\n    elementKey\r\n  }\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerF from '../TravelerF'\r\nimport electro from './electro'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerF.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerElectroF\"\r\nconst charKey: CharacterKey = \"TravelerElectro\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = electro(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet:ICharacterSheet = { ...TravelerF.sheet, talent, key:charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport TravelerF from '../TravelerF/assets'\r\nexport default { ...TravelerF, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport Traveler from '../Traveler'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nexport default function anemo(key: CharacterSheetKey, charKey: CharacterKey) {\r\n  const elementKey: ElementKey = \"dendro\"\r\n  const condCharKey = \"TravelerDendro\"\r\n  const ct = charTemplates(key, Traveler.data_gen.weaponTypeKey, assets)\r\n\r\n  let s = 0, b = 0\r\n  const datamine = {\r\n    skill: {\r\n      dmg: skillParam_gen.skill[s++],\r\n      cd: skillParam_gen.skill[s++][0],\r\n    },\r\n    burst: {\r\n      lampDmg: skillParam_gen.burst[b++],\r\n      explosionDmg: skillParam_gen.burst[b++],\r\n      unknown1: skillParam_gen.burst[b++],\r\n      unknown2: skillParam_gen.burst[b++],\r\n      lampDuration: skillParam_gen.burst[b++][0],\r\n      cd: skillParam_gen.burst[b++][0],\r\n      enerCost: skillParam_gen.burst[b++][0]\r\n    },\r\n    passive1: {\r\n      eleMas: skillParam_gen.passive1[0][0],\r\n      maxStacks: 10,\r\n    },\r\n    passive2: {\r\n      skill_dmgInc: skillParam_gen.passive2[0][0],\r\n      burst_dmgInc: skillParam_gen.passive2[1][0],\r\n    },\r\n    constellation1: {\r\n      energyRegen: 1\r\n    },\r\n    constellation2: {\r\n      durationInc: skillParam_gen.constellation2[0],\r\n    },\r\n    constellation6: {\r\n      ele_dmg_: skillParam_gen.constellation6[0],\r\n    }\r\n  } as const\r\n\r\n  const [condA1StacksPath, condA1Stacks] = cond(condCharKey, \"a1Stacks\")\r\n  const a1StacksArr = range(1, datamine.passive1.maxStacks)\r\n  const a1_eleMas_disp = greaterEq(input.asc, 1,\r\n    lookup(condA1Stacks, Object.fromEntries(a1StacksArr.map(stack => [\r\n      stack,\r\n      prod(datamine.passive1.eleMas, stack)\r\n    ])), naught),\r\n    { key: \"eleMas\" }\r\n  )\r\n  const a1_eleMas = equal(input.activeCharKey, target.charKey, a1_eleMas_disp)\r\n\r\n  const a4_skill_dmg_ = greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.skill_dmgInc, { fixed: 2 }), input.total.eleMas),\r\n    { key: \"_\" }\r\n  )\r\n  const a4_burst_dmg_ = greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.burst_dmgInc), input.total.eleMas),\r\n    { key: \"_\" }\r\n  )\r\n\r\n  const [condC6BurstEffectPath, condC6BurstEffect] = cond(condCharKey, \"c6BurstEffect\")\r\n  const [condC6BurstElePath, condC6BurstEle] = cond(condCharKey, \"c6BurstEle\")\r\n  const c6_dendro_dmg_disp = greaterEq(input.constellation, 6,\r\n    equal(condC6BurstEffect, \"on\", percent(datamine.constellation6.ele_dmg_))\r\n  )\r\n  const c6_dendro_dmg_ = equal(input.activeCharKey, target.charKey, c6_dendro_dmg_disp)\r\n  const c6_ele_dmg_disp = Object.fromEntries([\"hydro\", \"pyro\", \"electro\"].map(ele => [\r\n    ele,\r\n    greaterEq(input.constellation, 6,\r\n      equal(condC6BurstEffect, \"on\",\r\n        equal(condC6BurstEle, ele, percent(datamine.constellation6.ele_dmg_))\r\n      )\r\n    )\r\n  ]))\r\n  const c6_ele_dmg_ = Object.fromEntries(Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n    `${ele}_dmg_`,\r\n    equal(input.activeCharKey, target.charKey, node)\r\n  ]))\r\n\r\n  const dmgFormulas = {\r\n    skill: {\r\n      dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    },\r\n    burst: {\r\n      lampDmg: dmgNode(\"atk\", datamine.burst.lampDmg, \"burst\"),\r\n      explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\")\r\n    }\r\n  } as const\r\n\r\n  const skillC3 = greaterEq(input.constellation, 3, 3)\r\n  const burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n  const data = dataObjForCharacterSheet(charKey, elementKey, undefined, Traveler.data_gen, dmgFormulas, {\r\n    bonus: {\r\n      burst: burstC5,\r\n      skill: skillC3,\r\n    },\r\n    premod: {\r\n      skill_dmg_: a4_skill_dmg_,\r\n      burst_dmg_: a4_burst_dmg_,\r\n    },\r\n    teamBuff: {\r\n      premod: {\r\n        eleMas: a1_eleMas,\r\n        dendro_dmg_: c6_dendro_dmg_,\r\n        ...c6_ele_dmg_,\r\n      },\r\n    }\r\n  })\r\n\r\n  const talent: TalentSheet = {\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.lampDmg,\r\n          { key: `char_${key}_gen:burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg,\r\n          { key: `char_${key}_gen:burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.lampDuration}s + ${datamine.constellation2.durationInc}s = ${datamine.burst.lampDuration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.lampDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      path: condA1StacksPath,\r\n      value: condA1Stacks,\r\n      teamBuff: true,\r\n      name: st(\"stacks\"),\r\n      states: Object.fromEntries(a1StacksArr.map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"stack\", { count: stack }),\r\n          fields: [{\r\n            node: a1_eleMas_disp\r\n          }]\r\n        }\r\n      ])),\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation2.durationInc,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstEffectPath,\r\n      value: condC6BurstEffect,\r\n      teamBuff: true,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstElePath,\r\n      value: condC6BurstEle,\r\n      teamBuff: true,\r\n      canShow: equal(condC6BurstEffect, \"on\", 1),\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n        ele, {\r\n          name: <ColorText color={ele}>{sgt(`element.${ele}`)}</ColorText>,\r\n          fields: [{ node: infoMut(node, { key: `${ele}_dmg_`, variant: ele as ElementKey, isTeamBuff: true }) }],\r\n        }\r\n      ]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: a4_skill_dmg_,\r\n      }, {\r\n        node: a4_burst_dmg_,\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n\r\n  return {\r\n    talent,\r\n    data,\r\n    elementKey\r\n  }\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerF from '../TravelerF'\r\nimport dendro from './dendro'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerF.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerDendroF\"\r\nconst charKey: CharacterKey = \"TravelerDendro\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = dendro(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerF.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { Translate } from '../../../Components/Translate'\r\nimport Traveler from '../Traveler'\r\nconst key = \"TravelerM\"\r\nconst tr = (strKey: string) => <Translate ns={`char_${key}_gen`} key18={strKey} />\r\n\r\nexport default {\r\n  sheet: {\r\n    ...Traveler.sheet,\r\n    name: tr(\"name\"),\r\n    gender: \"M\",\r\n    constellationName: tr(\"constellationName\"),\r\n    title: tr(\"title\"),\r\n  },\r\n  data_gen: Traveler.data_gen\r\n} as const\r\n","\r\nimport card from './Traveler_Male_Card.jpg'\r\nimport thumb from './icon.png'\r\nimport thumbSide from './iconSide.png'\r\n\r\nexport default { card, thumb, thumbSide } as const\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport Traveler from '../TravelerM/assets'\r\nexport default { ...Traveler, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerM from '../TravelerM'\r\nimport anemo from '../TravelerAnemoF/anemo'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerM.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerAnemoM\"\r\nconst charKey: CharacterKey = \"TravelerAnemo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = anemo(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerM.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport Traveler from '../TravelerM/assets'\r\nexport default { ...Traveler, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerM from '../TravelerM'\r\nimport geo from '../TravelerGeoF/geo'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerM.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerGeoM\"\r\nconst charKey: CharacterKey = \"TravelerGeo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = geo(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerM.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport Traveler from '../TravelerM/assets'\r\nexport default { ...Traveler, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerM from '../TravelerM'\r\nimport electro from '../TravelerElectroF/electro'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerM.data_gen as CharacterData\r\n\r\nconst key: CharacterSheetKey = \"TravelerElectroM\"\r\nconst charKey: CharacterKey = \"TravelerElectro\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = electro(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet:ICharacterSheet = { ...TravelerM.sheet, talent, key:charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\nimport Traveler from '../TravelerM/assets'\r\nexport default { ...Traveler, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, CharacterSheetKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dmgNode } from '../dataUtil'\r\nimport TravelerM from '../TravelerM'\r\nimport dendro from '../TravelerDendroF/dendro'\r\nimport assets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = TravelerM.data_gen as CharacterData\r\nconst key: CharacterSheetKey = \"TravelerDendroM\"\r\nconst charKey: CharacterKey = \"TravelerDendro\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n} as const\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n} as const\r\n\r\nconst { talent, data, elementKey } = dendro(key, charKey)\r\ntalent.auto = ct.talentTemplate(\"auto\", [{\r\n  text: tr(\"auto.fields.normal\")\r\n}, {\r\n  fields: datamine.normal.hitArr.map((_, i) => ({\r\n    node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n  }))\r\n}, {\r\n  text: tr(\"auto.fields.charged\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(1)\"\r\n  }, {\r\n    node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n    textSuffix: \"(2)\"\r\n  }, {\r\n    text: tr(\"auto.skillParams.6\"),\r\n    value: datamine.charged.stamina,\r\n  }]\r\n}, {\r\n  text: tr(\"auto.fields.plunging\"),\r\n}, {\r\n  fields: [{\r\n    node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n  }, {\r\n    node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n  }]\r\n}])\r\n\r\nconst sheet: ICharacterSheet = { ...TravelerM.sheet, talent, key: charKey, elementKey }\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Venti_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2)\r\n  },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = { ...c2Hit_anemo_enemyRes_ }\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", datamine.constellation6.res_))\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", equal(ele, condBurstAbsorption, datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } })),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: trm(\"upcurrentDuration\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2,\r\n      path: condC2Path,\r\n      teamBuff: true,\r\n      name: tr(\"constellation2.name\"),\r\n      states: {\r\n        hit: {\r\n          name: trm(\"c2.hit\"),\r\n          fields: [{\r\n            node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }, {\r\n            node: c2Hit_phys_enemyRes__\r\n          }]\r\n        },\r\n        launched: {\r\n          name: trm(\"c2.launched\"),\r\n          fields: [{\r\n            node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }, {\r\n            node: c2Hit_phys_enemyRes__\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n        }]\r\n      }]))\r\n    }), ct.headerTemplate(\"burst\", { // Custom burst formula\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n      }],\r\n      canShow: unequal(condBurstAbsorption, undefined, 1),\r\n    }), {\r\n      text: trm(\"fullBurstDMG.description\"),\r\n    }, ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        text: trm(\"regenEner\"),\r\n      }, {\r\n        text: trm(\"q\"),\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 Anemo\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6\"),\r\n      states: {\r\n        takeDmg: {\r\n          fields: [{\r\n            node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n      fields: absorbableEle.map(eleKey => (\r\n        { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n      )),\r\n      canShow: unequal(condBurstAbsorption, undefined,\r\n        equal(condC6, \"takeDmg\",\r\n          equal(target.charKey, key, 1)\r\n        )\r\n      ),\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      teamBuff: true,\r\n      canShow: equal(condC6, \"takeDmg\", unequal(input.activeCharKey, key, 1)),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n        }]\r\n      }]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\", [{ fields: [{ node: p3_staminaGlidingDec_ }] }]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [\r\n      ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    ]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiangling_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation1\", {\r\n      value: condAfterGuobaHit,\r\n      path: condAfterGuobaHitPath,\r\n      name: trm(\"afterGuobaHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        afterGuobaHit: {\r\n          fields: [{\r\n            node: afterGuobaHit\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      value: condDuringPyronado,\r\n      path: condDuringPyronadoPath,\r\n      name: trm(\"duringPyronado\"),\r\n      teamBuff: true,\r\n      states: {\r\n        duringPyronado: {\r\n          fields: [{\r\n            text: trm(\"c6Exception\"),\r\n            canShow: data => data.get(input.constellation).value >= 6\r\n              && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n          }, {\r\n            node: duringPyronado\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n      value: condAfterChili,\r\n      path: condAfterChiliPath,\r\n      name: trm(\"afterChili\"),\r\n      teamBuff: true,\r\n      states: {\r\n        afterChili: {\r\n          fields: [{\r\n            node: afterChili,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n      fields: [{\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive2\", { // A4\r\n      path: condA4SkillStackPath,\r\n      value: condA4SkillStack,\r\n      name: trm(\"skillStack\"),\r\n      states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n        name: st(\"uses\", { count: i }),\r\n        fields: [{ node: skill_dmg_ }]\r\n      }]))\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      path: condInBurstPath,\r\n      value: condInBurst,\r\n      name: trm(\"burst.inBurst\"),\r\n      states: {\r\n        inBurst: {\r\n          fields: [{\r\n            node: normal_dmg_,\r\n          }, {\r\n            node: charged_dmg_,\r\n          }, {\r\n            node: plunging_dmg_,\r\n          }, {\r\n            text: trm(\"burst.incJump\"),\r\n          }, {\r\n            text: trm(\"burst.incAtkAoe\"),\r\n          }, {\r\n            canShow: data => data.get(infusion).value === elementKey,\r\n            text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"passive1\", { // A1\r\n      path: condA1BurstStackPath,\r\n      value: condA1BurstStack,\r\n      name: trm(\"burst.stack\"),\r\n      canShow: equal(\"inBurst\", condInBurst, 1),\r\n      states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n        name: st(\"seconds\", { count: i * 3 }),\r\n        fields: [{ node: all_dmg_ }]\r\n      }]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n      canShow: equal(c2Inactive, 1, 1),\r\n      teamBuff: true,\r\n      fields: [{ node: c2Inactive_enerRech_ }],\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n      path: condC4BelowHPPath,\r\n      value: condC4BelowHP,\r\n      name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n      states: {\r\n        c4BelowHP: {\r\n          fields: [{ node: c4BelowHP_def_ }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xingqiu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, one } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      teamBuff: true,\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      name: trm(\"skillCond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: dmgFormulas.skill.dmgRed_,\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurst,\r\n      path: condBurstPath,\r\n      name: trm(\"burstCond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: nodeC4\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing` }),\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: nodeA4\r\n      }]\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2,\r\n      path: condC2Path,\r\n      teamBuff: true,\r\n      name: trm(\"c2Cond\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC2\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets);\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xinyan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: `${datamine.charged.stamina}/s`,\r\n      }],\r\n    }, ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: c6_staminaChargedDec_\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6Charged,\r\n      path: condC6ChargedPath,\r\n      name: trm(\"c6.duringCharge\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c6_chargedAtkBonus\r\n          }]\r\n        }\r\n      }\r\n    }), {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillHitNum,\r\n      path: condSkillHitNumPath,\r\n      name: trm(\"skill.shieldLevel\"),\r\n      states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n        lvl, {\r\n          name: trm(`skill.shieldLevels.${lvl}`),\r\n          fields: [\r\n            ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n              node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                {\r\n                  key: type === \"norm\" // And change the key to match\r\n                    ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                    : `char_${key}:skill.pyroShield.${lvl}`\r\n                }\r\n              )\r\n            },\r\n            ])), {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\",\r\n            },\r\n            // Level 3 damage\r\n            ...lvl === 3 ? [{ node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` }) }] : [],\r\n          ]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: trm(\"p1.desc\"),\r\n      }]\r\n    }), ct.conditionalTemplate(\"passive2\", {\r\n      value: condP2Shield,\r\n      path: condP2ShieldPath,\r\n      name: trm(\"p2.activeShield\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4SkillHit,\r\n      path: condC4SkillHitPath,\r\n      name: trm(\"c4.swingHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c4SkillHit_physical_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.c4.duration,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n      }, {\r\n        text: trm(\"c2.shield\"),\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1Crit,\r\n      path: condC1CritPath,\r\n      name: st(\"hitOp.crit\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c1Crit_atkSPD_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.c1.duration,\r\n            unit: \"s\",\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: datamine.c1.cd,\r\n            unit: \"s\",\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yae_Miko_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {  auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [{ fields: [{ node: nodeAsc4 }] }]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yanfei_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [\r\n        // TODO: Would probably be better as a conditional,\r\n        // but can't make conditional states based on constellation value\r\n        ...datamine.charged.dmgArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n        })), {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          // TODO: Should change this value based on how many seals, but can't do without conditional\r\n          // charged attack. And its a bit execssive.\r\n          value: datamine.charged.stamina,\r\n        }, {\r\n          text: st(\"staminaDec_\"),\r\n          value: datamine.charged.sealStaminaRed_ * 100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\",\r\n        }, {\r\n          text: trm(\"maxSeals\"),\r\n          value: data => data.get(input.constellation).value >= 6\r\n            ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n            : datamine.charged.maxSeals,\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.sealDuration,\r\n          unit: \"s\"\r\n        }],\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      value: condP1Seals,\r\n      path: condP1SealsPath,\r\n      name: trm(\"passive1.sealsConsumed\"),\r\n      // TODO: Should be changing number of seals shown based on C6\r\n      states: Object.fromEntries(range(1, 4).map(seals => [\r\n        seals, {\r\n          name: trm(`seals.${seals}`),\r\n          fields: [{\r\n            node: p1_pyro_dmg_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.conditionalTemplate(\"passive2\", {\r\n      value: condP2ChargedCrit,\r\n      path: condP2ChargedCritPath,\r\n      name: trm(\"passive2.chargedCrit\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: trm(\"c1.sealChargedStam_\"),\r\n        value: datamine.c1.sealStaminaRed_ * -100,\r\n        textSuffix: trm(\"perSeal\"),\r\n        unit: \"%\"\r\n      }, {\r\n        text: st(\"incInterRes\")\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2EnemyHp,\r\n      path: condC2EnemyHpPath,\r\n      name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c2EnemyHp_critRate_\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: trm(\"c6.maxSealInc\"),\r\n        value: datamine.c6.extraSeals\r\n      }]\r\n    }), {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"burst.grantMax\")\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condAfterBurst,\r\n      path: condAfterBurstPath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.sealInterval,\r\n            unit: \"s\"\r\n          }, {\r\n            node: afterBurst_charged_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation4\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.c4.duration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yelan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yelan\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    barb: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    resetChance: skillParam_gen.skill[s++][0],\r\n    maxDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    throwDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    hp_Arr: [0, ...skillParam_gen.passive1.map(([a]) => a)],\r\n  },\r\n  passive2: {\r\n    baseDmg_: skillParam_gen.passive2[0][0],\r\n    stackDmg_: skillParam_gen.passive2[1][0],\r\n    maxDmg_: skillParam_gen.passive2[2][0],\r\n    maxStacks: 14,\r\n  },\r\n  constellation1: {\r\n    addlCharge: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    arrowDmg_: skillParam_gen.constellation2[0],\r\n    cd: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    bonusHp_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n    maxHp_: skillParam_gen.constellation4[2],\r\n    maxStacks: 4,\r\n  },\r\n  constellation6: {\r\n    charges: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    dmg_: skillParam_gen.constellation6[2],\r\n  }\r\n}\r\n\r\nconst a1_hp_ = greaterEq(input.asc, 1, subscript(tally.ele, datamine.passive1.hp_Arr))\r\n\r\nconst [condA4StacksPath, condA4Stacks] = cond(key, \"a4Stacks\")\r\nconst a4Stacks = range(0, datamine.passive2.maxStacks)\r\nconst a4Dmg_Disp = greaterEq(input.asc, 4,\r\n  lookup(condA4Stacks, Object.fromEntries(a4Stacks.map(stacks => [\r\n    stacks,\r\n    sum(percent(datamine.passive2.baseDmg_), prod(stacks, percent(datamine.passive2.stackDmg_)))\r\n  ])),\r\n    naught)\r\n)\r\nconst a4Dmg = equal(target.charKey, input.activeCharKey, a4Dmg_Disp)\r\n\r\nconst [condC4StacksPath, condC4Stacks] = cond(key, \"c4Stacks\")\r\nconst c4Stacks = range(1, datamine.constellation4.maxStacks)\r\nconst c4Hp_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4Stacks, Object.fromEntries(c4Stacks.map(stacks => [\r\n    stacks,\r\n    prod(stacks, percent(datamine.constellation4.bonusHp_))\r\n  ])),\r\n    naught)\r\n)\r\n\r\nconst [condC6ActivePath, condC6Active] = cond(key, \"c6Active\")\r\nconst c6Active = greaterEq(input.constellation, 6, equal(condC6Active, \"on\", 1))\r\n\r\nconst hitEle = { hit: { ele: constant(elementKey) } }\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, unequal(c6Active, 1, dmgNode(\"atk\", arr, \"normal\"))])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", hitEle),\r\n    barb: dmgNode(\"hp\", datamine.charged.barb, \"charged\", hitEle),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"hp\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"hp\", datamine.burst.pressDmg, \"burst\"),\r\n    throwDmg: dmgNode(\"hp\", datamine.burst.throwDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    arrowDmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        percent(datamine.constellation2.arrowDmg_),\r\n        input.total.hp\r\n      ),\r\n      \"burst\",\r\n      hitEle\r\n    ))\r\n  },\r\n  constellation6: {\r\n    barbDmg: equal(c6Active, 1, customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, datamine.charged.barb, { key: \"_\" }),\r\n        percent(datamine.constellation6.dmg_),\r\n        input.total.hp\r\n      ),\r\n      \"charged\",\r\n      hitEle\r\n    )),\r\n  },\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    hp_: a1_hp_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_: a4Dmg,\r\n      hp_: c4Hp_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      canShow: unequal(c6Active, 1, 1),\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6ActivePath,\r\n      value: condC6Active,\r\n      name: trm(\"c6.condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.constellation6.barbDmg, { key: `char_${key}:c6.dmg` }),\r\n          }, {\r\n            text: st(\"charges\"),\r\n            value: datamine.constellation6.charges,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation6.duration\r\n          }]\r\n        }\r\n      }\r\n    }), {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.breakthrough`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.barb, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.maxDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }]\r\n    }, ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: st(\"addlCharge\"),\r\n        value: datamine.constellation1.addlCharge,\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      path: condC4StacksPath,\r\n      value: condC4Stacks,\r\n      teamBuff: true,\r\n      name: trm(\"c4.condName\"),\r\n      states: Object.fromEntries(c4Stacks.map(stacks => [\r\n        stacks,\r\n        {\r\n          name: st(\"stack\", { count: stacks }),\r\n          fields: [{\r\n            node: c4Hp_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation4.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      ]))\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.throwDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive2\", {\r\n      path: condA4StacksPath,\r\n      value: condA4Stacks,\r\n      teamBuff: true,\r\n      name: st(\"afterUse.burst\"),\r\n      states: Object.fromEntries(a4Stacks.map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"seconds\", { count: stack }),\r\n          fields: [{\r\n            node: infoMut(a4Dmg_Disp, { key: \"all_dmg_\" }),\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.arrowDmg, { key: `char_${key}:c2.dmg` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.constellation2.cd,\r\n        unit: \"s\",\r\n        fixed: 1,\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: a1_hp_\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yoimiya_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, one, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/fieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condA1Path, condA1] = cond(key, \"a1\")\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = compareEq(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: `char_${key}:normMult_` }), one)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, key,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n    hit: {\r\n      ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n    }\r\n  })\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = datamine.normal.hitArr.map((arr, i) => [i, greaterEq(input.constellation, 6,\r\n  equal(condSkill, \"skill\",\r\n    customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, arr, { key: \"_\" }),\r\n        constant(datamine.constellation6.dmg_, { key: `char_${key}:c6Key_` }),\r\n        input.total.atk,\r\n        normal_dmgMult\r\n      ),\r\n      \"normal\", {\r\n      hit: {\r\n        ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n      }\r\n    })\r\n  )\r\n)])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.hit, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.full, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.kindling, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n      }],\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      name: st(\"afterUse.skill\"),\r\n      path: condSkillPath,\r\n      value: condSkill,\r\n      states: {\r\n        skill: {\r\n          fields: [{\r\n            node: normal_dmgMult\r\n          }, {\r\n            text: trm(\"normPyroInfus\"),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.duration,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"passive1\", {\r\n      // Conditional for self display\r\n      canShow: equal(condSkill, \"skill\", 1),\r\n      value: condA1,\r\n      path: condA1Path,\r\n      name: tr(\"passive1.name\"),\r\n      states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n        [i, {\r\n          name: `${i} stack`,\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      ))\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      canShow: equal(condSkill, \"skill\", 1),\r\n      fields: datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n        node: infoMut(dmgFormulas.constellation6[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n      }))\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]\r\n    }, ct.headerTemplate(\"constellation1\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation1.burst_durationInc,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation1\", {\r\n      name: trm(\"c1\"),\r\n      value: condC1,\r\n      path: condC1Path,\r\n      states: {\r\n        c1: {\r\n          fields: [{\r\n            node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation1.duration,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n      teamBuff: true,\r\n      // Hide for Yoimiya\r\n      canShow: unequal(input.activeCharKey, key, 1),\r\n      path: condBurstPath,\r\n      value: condBurst,\r\n      name: tr(\"burst.name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"passive1\", {\r\n      // Conditional from P1 for team buff display when P2 is activated\r\n      canShow: unequal(input.activeCharKey, key,\r\n        equal(condBurst, \"on\", greaterEq(input.asc, 4, 1))\r\n      ),\r\n      teamBuff: true,\r\n      value: condA1,\r\n      path: condA1Path,\r\n      name: tr(\"passive1.name\"),\r\n      states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n        [i, {\r\n          name: `${i} stack`,\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      ))\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n      name: trm(\"c2\"),\r\n      value: condC2,\r\n      path: condC2Path,\r\n      states: {\r\n        c2: {\r\n          fields: [{\r\n            node: c2pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: const3TalentInc }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: const5TalentInc }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\")\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, dataObj, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yun_Jin_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n        textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }],\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }],\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      teamBuff: true,\r\n      value: condBurst,\r\n      path: condBurstPath,\r\n      name: trm(\"burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeSkill\r\n          }, {\r\n            node: nodeC2\r\n          }, {\r\n            node: nodeC6\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.triggerNum,\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      // C4 conditional in teambuff panel if burst is enabled\r\n      teamBuff: true,\r\n      canShow: unequal(input.activeCharKey, key, equal(condBurst, \"on\", 1)),\r\n      value: condC4,\r\n      path: condC4Path,\r\n      name: trm(\"c4\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC4\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation4.duration,\r\n            unit: \"s\"\r\n          },]\r\n        }\r\n      }\r\n    })\r\n    ]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4,\r\n      path: condC4Path,\r\n      name: trm(\"c4\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: nodeC4\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation4.duration,\r\n            unit: \"s\"\r\n          },]\r\n        }\r\n      }\r\n    })]),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { AssetType } from '../AssetType'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Zhongli_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nexport default { card, thumb, thumbSide, banner, constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3 } as AssetType\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport assets from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, assets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  key,\r\n  name: tr(\"name\"),\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\"),\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n      }, {\r\n        text: tr(\"auto.skillParams.7\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(`auto.fields.plunging`),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      teamBuff: true,\r\n      name: trm(\"skill.nearShield\"),\r\n      states: {\r\n        on: {\r\n          fields: Object.values(nodesSkill).map(node => ({ node }))\r\n        }\r\n      }\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n      value: condP1,\r\n      path: condP1Path,\r\n      teamBuff: true,\r\n      name: trm(\"p1cond\"),\r\n      states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]\r\n    })]),\r\n    passive3: ct.talentTemplate(\"passive3\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal` })\r\n      }]\r\n    })]),\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data, assets)\r\n","import { CharacterKey, CharacterSheetKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Collei from './Collei'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Dori from './Dori'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport KukiShinobu from './KukiShinobu'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport ShikanoinHeizou from \"./ShikanoinHeizou\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Tighnari from './Tighnari'\r\nimport TravelerAnemoF from './TravelerAnemoF'\r\nimport TravelerGeoF from './TravelerGeoF'\r\nimport TravelerElectroF from './TravelerElectroF'\r\nimport TravelerDendroF from './TravelerDendroF'\r\nimport TravelerAnemoM from './TravelerAnemoM'\r\nimport TravelerGeoM from './TravelerGeoM'\r\nimport TravelerElectroM from './TravelerElectroM'\r\nimport TravelerDendroM from './TravelerDendroM'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yelan from './Yelan'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterSheetKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Collei,\r\n  Diluc,\r\n  Diona,\r\n  Dori,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  KukiShinobu,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  ShikanoinHeizou,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Tighnari,\r\n  TravelerAnemoF,\r\n  TravelerGeoF,\r\n  TravelerElectroF,\r\n  TravelerDendroF,\r\n  TravelerAnemoM,\r\n  TravelerGeoM,\r\n  TravelerElectroM,\r\n  TravelerDendroM,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yelan,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n"],"names":["card","thumb","thumbSide","banner","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","skill","burst","passive1","passive2","passive3","data_gen","data_gen_src","key","trans","tr","trm","ct","charTemplates","weaponTypeKey","assets","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skillDmg","blossomDmg","duration","cd","blossomCd","burstDmg","blossomAmt","enerCost","blossomDmgInc","hpThresh","eleMasInc","blossomEner","maxStacks","stackDuration","plunging_dmg_","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","input","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","prod","lookup","Object","fromEntries","range","map","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","dmgNode","entries","value","blossom","total","skill_dmg_","skillC3","burstC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","eleMas","all_dmg_","burst_dmgInc","sheet","name","rarity","star","elementKey","gender","constellationName","title","talent","auto","talentTemplate","text","fields","_","node","infoMut","textSuffix","unit","sgt","conditionalTemplate","path","st","percent","states","belowHp","headerTemplate","fixed","skillInField","canShow","c6Crystallize","isoOnField","count","burstUsed","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","subscript","atk_","unequal","undefined","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","hit","ele","compareEq","constant","fieldsTemplate","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","variant","get","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","tally","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","sum","infusion","nonOverridableSelf","values","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","healNodeTalent","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","skillShieldNode","shieldNodeTalent","c1ShieldNode","shieldNode","shield","electroShield","shieldElement","baseDmg","dmgOneHit","dmgTwoHits","customDmgNode","customBonus","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","burstAtkRatio","burstAddlAtk","c1AtkRatio","c1AddlAtk","atkIncRatio","activeInAreaAtkDisp","condInAreaPath","condInArea","activeInArea","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","result","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","explosionDmg","leapDmg","sproutDmg","durationInc","maxExtension","anbarDmg","c1_enerRech_","condAfterBurstPath","condAfterBurst","c4AfterBurst_eleMasDisp","c4AfterBurst_eleMas","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","stamReduction","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressShield","pressCryoShield","holdShield","holdCryoShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","lower","higher","shotDmg","roundDmg","numRounds","connectorDmg","healMult","cdRed","maxEnergyRegen","addlRounds","toopDmg","energyThresh","heal_","condC4BelowHpPath","condC4BelowHp","condC4BelowEnerPath","condC4BelowEner","c4BelowHp_incHeal_disp","c4BelowHp_incHeal_","c4BelowEner_enerRech_disp","c4BelowEner_enerRech_","condC6AfterSkillPath","condC6AfterSkill","c6AfterSkill_infusion","greaterEqStr","heal","customHealNode","burstC3","skillC5","overridableSelf","color","belowEner","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","physical_dmg_","lightSwordAdditional","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","healNode","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","eleKey","c2","c2p","val","c6","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sprint","sp","cutDmg","bloomDmg","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","c4","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","x","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","pressDmg","ringHealHP_","ringHealFlat","ringDmg","singleDmg","maxDmgBase","maxDmgExtend","durationBase","durationExtend","emSkillHeal_","emSkillDmg_","skillDurInc","markDmg","em","a1Heal_","a4Skill_healInc","a4Skill_dmgInc","condC6TriggerPath","condC6Trigger","c6eleMas","ringHeal","healInc","totalDmg","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodesC4","allElements","gemDmg","n","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","resolveStackNode","resolveInitialBonus_","resolveInfusedBonus_","burstResolve","mvArr","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","electro_res_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","nBonus_","cBonus_","sBonus_","p","heal_ratio_","c1","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c2SkillHeal","c2BurstHeal","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","declension_dmg_","conviction_dmg_","declension_duration","slugger_dmg","iris_dmg","atkSpd_","baseEnergy","addlEnergy","hsCritRate_","hsCritDmg_","stacksArr","condDeclensionStacksPath","condDeclensionStacks","totalStacks_dmg_","condSkillHitPath","condSkillHit","a4_eleMasDisp","a4_eleMas","condTakeFieldPath","condTakeField","c1_atkSpd_","c6_skill_critRate_","c6_skill_critDMG_","skill_critRate_","skill_critDMG_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","slice","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","wreathArrow","clusterArrow","penetratorDuration","primaryDmg","secondaryDmg","charged_burst_dmg_","maxDmg_","dendro_dmg_","chargeTimeRed","condA1AfterWreathPath","condA1AfterWreath","a1AfterWreath_eleMas","a4_charged_dmg_","a4_burst_dmg_","chargedShaftAddl","c1_charged_critRate_","condC2EnemyFieldPath","condC2EnemyField","c2EnemyField_dendro_dmg_","c4_eleMas","after","react","wreath","cluster","strKey","Translate","ns","key18","Traveler","TravelerF","anemo","charKey","condCharKey","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","geo","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","electro","lampDmg","unknown1","unknown2","lampDuration","condA1StacksPath","condA1Stacks","a1StacksArr","a1_eleMas_disp","a1_eleMas","a4_skill_dmg_","condC6BurstEffectPath","condC6BurstEffect","condC6BurstElePath","condC6BurstEle","c6_dendro_dmg_disp","c6_dendro_dmg_","c6_ele_dmg_disp","c6_ele_dmg_","dendro","TravelerM","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","base","full7","reactions","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","one","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","customShieldNode","norm_shield","barb","resetChance","maxDuration","throwDmg","hp_Arr","baseDmg_","stackDmg_","addlCharge","arrowDmg_","bonusHp_","maxHp_","charges","a1_hp_","condA4StacksPath","condA4Stacks","a4Stacks","a4Dmg_Disp","a4Dmg","condC4StacksPath","condC4Stacks","c4Stacks","c4Hp_","condC6ActivePath","condC6Active","c6Active","hitEle","arrowDmg","barbDmg","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Collei","Diluc","Diona","Dori","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Tighnari","TravelerAnemoF","TravelerGeoF","TravelerElectroF","TravelerDendroF","TravelerAnemoM","TravelerGeoM","TravelerElectroM","TravelerDendroM","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yelan","Yoimiya","YunJin","Zhongli"],"sourceRoot":""}