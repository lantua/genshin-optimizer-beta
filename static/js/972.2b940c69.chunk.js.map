{"version":3,"file":"static/js/972.2b940c69.chunk.js","mappings":"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","sources":["Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/CustomNumberInput.tsx","Components/Conditional/ConditionalSelector.tsx","Components/Conditional/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Components/FieldDisplay.tsx"],"sourcesContent":["import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\r\nimport { Button, Divider, MenuItem } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport DropdownButton from '../DropdownMenu/DropdownButton';\r\nimport SqBadge from '../SqBadge';\r\nimport { DataContext } from '../../DataContext';\r\nimport IConditional from '../../Types/IConditional';\r\nimport { deepClone, layeredAssignment } from '../../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, disabled = false, }:\r\n  { conditional: IConditional, conditionalValue?: string, disabled?: boolean }) {\r\n  const { character, characterDispatch } = useContext(DataContext)\r\n  const setConditional = useCallback((v?: string) => {\r\n    const conditionalValues = deepClone(character.conditional)\r\n    layeredAssignment(conditionalValues, conditional.path, v)\r\n    characterDispatch({ conditional: conditionalValues })\r\n  }, [conditional, character, characterDispatch])\r\n\r\n  if (Object.keys(conditional.states).length === 1) {\r\n    const [stateKey, st] = Object.entries(conditional.states)[0]\r\n    const badge = st.name && <SqBadge color={\"success\"}>{st.name}</SqBadge>\r\n    return <Button fullWidth size=\"small\" onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n      {conditional.name} {badge}\r\n    </Button>\r\n  } else {//complex conditional\r\n    const state = conditionalValue ? conditional.states[conditionalValue] : undefined\r\n    const badge = state?.name && <SqBadge color={state ? \"success\" : \"secondary\"}>{state ? state.name : \"Not Active\"}</SqBadge>\r\n    return <DropdownButton fullWidth size=\"small\" title={<span>{conditional.name} {badge}</span>} disabled={disabled}>\r\n      <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\r\n        <span>Not Active</span>\r\n      </MenuItem>\r\n      <Divider />\r\n      {Object.entries(conditional.states).map(([stateKey, st]) =>\r\n        <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\r\n    </DropdownButton>\r\n  }\r\n}\r\n","import { Box, CardContent, CardHeader, Divider, ListItem } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport ConditionalSelector from \"./ConditionalSelector\"\r\nimport { DataContext, dataContextObj } from \"../../DataContext\"\r\nimport { Data } from \"../../Formula/type\"\r\nimport { data as dataNode } from '../../Formula/utils'\r\nimport IConditional from \"../../Types/IConditional\"\r\nimport { evalIfFunc } from \"../../Util/Util\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../FieldDisplay\"\r\n\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  hideHeader?: boolean,\r\n  hideDesc?: boolean,\r\n  fieldContext?: dataContextObj\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false, fieldContext }: ConditionalDisplayProps) {\r\n  const dataContext = useContext(DataContext)\r\n  const { data } = dataContext\r\n  // TODO: as Data\r\n  const canShow = conditional.canShow ? !!(fieldContext ? data.get(dataNode(conditional.canShow, { target: fieldContext.data.data[0] } as Data)).value : data.get(conditional.canShow).value) : true\r\n  if (!canShow) return null\r\n  const condVal = data.get(conditional.value).value\r\n\r\n  const description = !hideDesc && evalIfFunc(conditional.description, data)\r\n  let { icon, title, action } = conditional.header ?? {}\r\n  icon = evalIfFunc(icon, data)\r\n  const fields = condVal && conditional.states[condVal]?.fields\r\n\r\n  return <CardDark>\r\n    {!hideHeader && conditional.header && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n    {!hideHeader && conditional.header && <Divider />}\r\n    {!!conditional.name && <CardContent>\r\n      {description && <Box mb={1}>{description}</Box>}\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={condVal} />\r\n    </CardContent>}\r\n    {fields &&\r\n      <FieldDisplayList sx={{ m: 0 }}>\r\n        {fields.map((field, i) => <FieldDisplay key={i} field={field} fieldContext={fieldContext} component={ListItem} />)}\r\n      </FieldDisplayList>\r\n    }\r\n  </CardDark>\r\n}\r\n","import { Box, CardHeader, ListItem, Divider, CardContent } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { DocumentSection } from \"../Types/sheet\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./Conditional/ConditionalDisplay\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\r\n\r\nexport default function DocumentDisplay({ sections, teamBuffOnly }: { sections: DocumentSection[], teamBuffOnly?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const sectionsDisplay = sections?.map((section, i) => {\r\n    if (section.canShow && !section.canShow(data)) return null\r\n    if (teamBuffOnly && !section.teamBuff && !section.conditional?.teamBuff) return null\r\n    const talentText = evalIfFunc(section.text, data)\r\n    const description = evalIfFunc(section.fieldsDescription, data)\r\n    const fields = section.fields ?? []\r\n    let { icon, title, action } = section.fieldsHeader ?? {}\r\n    icon = evalIfFunc(icon, data)\r\n    return <Box key={\"section\" + i} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {!teamBuffOnly && talentText && <div>{talentText}</div>}\r\n      {(!teamBuffOnly || section.teamBuff) && <CardDark>\r\n        {teamBuffOnly && talentText && <CardContent>{talentText}</CardContent>}\r\n        {section.fieldsHeader && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n        {section.fieldsHeader && <Divider />}\r\n        {teamBuffOnly && description && <CardContent>{description}</CardContent>}\r\n        {fields.length > 0 && <FieldDisplayList>\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} component={ListItem} />)}\r\n        </FieldDisplayList>}\r\n      </CardDark>}\r\n      {!!section.conditional && (!teamBuffOnly || section.conditional.teamBuff) && <ConditionalDisplay conditional={section.conditional} hideDesc={!teamBuffOnly} />}\r\n    </Box>\r\n  }).filter(s => s)\r\n  if (!sectionsDisplay.length) return null\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sectionsDisplay}</Box>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, List, styled, Typography } from \"@mui/material\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { DataContext, dataContextObj } from \"../DataContext\";\r\nimport { NodeDisplay } from \"../Formula/api\";\r\nimport KeyMap, { valueString } from \"../KeyMap\";\r\nimport { IBasicFieldDisplay, IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { evalIfFunc } from \"../Util/Util\";\r\nimport BootstrapTooltip from \"./BootstrapTooltip\";\r\nimport ColorText from \"./ColoredText\";\r\nimport StatIcon from \"./StatIcon\";\r\nimport { data as dataNode } from '../Formula/utils'\r\nimport { Data } from \"../Formula/type\";\r\n\r\nexport default function FieldDisplay({ field, fieldContext, component }: { field: IFieldDisplay, fieldContext?: dataContextObj, component?: React.ElementType }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const canShow = useMemo(() => field?.canShow?.(data) ?? true, [field, data])\r\n  if (!canShow) return null\r\n  if (\"node\" in field) {\r\n    // TODO: remove as Data\r\n    const node = fieldContext ? data.get(dataNode(field.node, { target: fieldContext.data.data[0] } as Data)) : data.get(field.node)\r\n    if (node.isEmpty) return null\r\n    if (oldData) {\r\n      const oldNode = fieldContext ? oldData.get(dataNode(field.node, { target: fieldContext.oldData!.data[0] } as Data)) : oldData.get(field.node)\r\n      const oldValue = oldNode.isEmpty ? 0 : oldNode.value\r\n      return <NodeFieldDisplay node={node} oldValue={oldValue} suffix={field.textSuffix} component={component} />\r\n    }\r\n    else return <NodeFieldDisplay node={node} suffix={field.textSuffix} component={component} />\r\n  }\r\n  return <BasicFieldDisplay field={field} component={component} />\r\n}\r\n\r\nfunction BasicFieldDisplay({ field, component }: { field: IBasicFieldDisplay, component?: React.ElementType }) {\r\n  const { data } = useContext(DataContext)\r\n  const v = evalIfFunc(field.value, data)\r\n  const variant = evalIfFunc(field.variant, data)\r\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\r\n    <ColorText color={variant}><b>{field.text}</b></ColorText>\r\n    <Typography >{typeof v === \"number\" ? v.toFixed?.(field.fixed) : v}{field.unit}</Typography>\r\n  </Box>\r\n}\r\n\r\nexport function NodeFieldDisplay({ node, oldValue, suffix, component }: { node: NodeDisplay, oldValue?: number, suffix?: Displayable, component?: React.ElementType }) {\r\n  if (node.isEmpty) return null\r\n\r\n  suffix = suffix && <span> {suffix}</span>\r\n  const fieldText = node.key ? KeyMap.get(node.key) : \"\"\r\n  const fieldFormulaText = node.formula\r\n  let fieldVal = \"\" as Displayable\r\n  if (oldValue) {\r\n    const diff = node.value - oldValue\r\n    fieldVal = <span>{valueString(oldValue, node.unit)}{diff ? <ColorText color={diff > 0 ? \"success\" : \"error\"}> {diff > 0 ? \"+\" : \"\"}{valueString(diff, node.unit)}</ColorText> : \"\"}</span>\r\n  } else fieldVal = valueString(node.value, node.unit)\r\n  const formulaTextOverlay = !!node.formula && <BootstrapTooltip placement=\"top\" title={<Typography>{fieldFormulaText}</Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\", ml: 1 }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\r\n    <ColorText color={node.variant}>{node.key && (<span>{StatIcon[node.key]} </span>)}<b>{fieldText}</b>{suffix}{formulaTextOverlay}</ColorText>\r\n    <Typography >{fieldVal}</Typography>\r\n  </Box>\r\n}\r\n\r\nexport const FieldDisplayList = styled(List)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius,\r\n  overflow: \"hidden\",\r\n  margin: 0,\r\n  '> .MuiListItem-root:nth-of-type(even)': {\r\n    backgroundColor: theme.palette.contentDark.main\r\n  },\r\n  '> .MuiListItem-root:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.contentDarker.main\r\n  },\r\n}));\r\n"],"names":["BootstrapTooltip","styled","className","props","arrow","classes","popper","theme","tooltipClasses","color","palette","common","black","backgroundColor","CharacterDropdownButton","value","onChange","unSelectText","unSelectIcon","inventory","noUnselect","filter","t","useTranslation","database","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","title","name","startIcon","thumbImg","src","thumbImgSide","onClick","selected","disabled","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","map","characterKey","StyledInputBase","InputBase","primary","main","transition","dark","Wrapper","Button","padding","overflow","width","height","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","useState","number","setNumber","focused","setFocus","parseFunc","useMemo","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","type","inputProps","step","onKeyDown","ConditionalSelector","conditional","conditionalValue","DataContext","character","characterDispatch","setConditional","v","conditionalValues","deepClone","layeredAssignment","path","Object","keys","states","length","entries","stateKey","st","badge","SqBadge","fullWidth","size","undefined","CheckBox","CheckBoxOutlineBlank","state","DropdownButton","MenuItem","Divider","ConditionalDisplay","hideHeader","hideDesc","fieldContext","data","canShow","get","dataNode","condVal","description","evalIfFunc","header","icon","action","fields","CardDark","CardHeader","avatar","titleTypographyProps","CardContent","Box","mb","FieldDisplay","sx","m","field","i","component","ListItem","DocumentDisplay","sections","teamBuffOnly","sectionsDisplay","section","teamBuff","talentText","text","fieldsDescription","fieldsHeader","display","flexDirection","gap","s","oldData","node","isEmpty","oldNode","oldValue","NodeFieldDisplay","suffix","textSuffix","BasicFieldDisplay","justifyContent","toFixed","fixed","unit","fieldText","KeyMap","fieldFormulaText","formula","fieldVal","diff","valueString","formulaTextOverlay","placement","cursor","ml","faQuestionCircle","StatIcon","FieldDisplayList","List","borderRadius","shape","margin","contentDark","contentDarker"],"sourceRoot":""}