{"version":3,"file":"static/js/657.415df77a.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/LocationName.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/InfoComponent.tsx","Components/SortByButton.tsx","Components/StatFilterCard.tsx","Components/TextButton.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","GlobalSettings.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx","Components/Artifact/ArtifactMainStatMultipleSelectChip.tsx","Components/Artifact/ArtifactSetMultipleSelectChip.tsx","Components/Artifact/ArtifactSubStatMultipleSelectChip.tsx","PageArtifact/ArtifactFilter.tsx","PageArtifact/ProbabilityFilter.tsx","PageArtifact/ArtifactDisplay.tsx","PageArtifact/PercentBadge.tsx","ReactHooks/useDBState.tsx","Util/SortByFilters.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: 100, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={\"Level: \"}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n    />\r\n  </Card>\r\n}","import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n        <ListItemIcon>\r\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {artifactSheets?.[setKey]?.name}\r\n        </ListItemText>\r\n      </MenuItem >)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useState } from \"react\"\r\nimport useDBState from \"../ReactHooks/useDBState\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CloseButton from \"./CloseButton\"\r\nimport ModalWrapper from \"./ModalWrapper\"\r\nimport { Translate } from \"./Translate\"\r\nexport function initialInfoShownState() {\r\n  return {\r\n    artifactPage: true,\r\n    buildPage: true,\r\n    characterPage: true,\r\n  }\r\n}\r\ntype StateInfoShown = ReturnType<typeof initialInfoShownState>\r\ntype InfoShownPageKey = keyof StateInfoShown\r\n\r\nexport default function InfoComponent({ pageKey, text = \"\", modalTitle = \"\", children }: { pageKey: InfoShownPageKey, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [stateInfoShown, setStateInfoShown] = useDBState(\"InfoShown\", initialInfoShownState)\r\n  const showInfoModal = stateInfoShown[pageKey]\r\n  const setshowInfoModal = useCallback((value: boolean) => setStateInfoShown({ [pageKey]: value }), [setStateInfoShown, pageKey])\r\n\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => setshowInfoModal(false)\r\n\r\n  return <CardDark >\r\n    <Grid container>\r\n      <Grid item flexGrow={1}>\r\n        <Typography variant=\"caption\" pl={1} >\r\n          {displayText}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\r\n          <Translate ns=\"ui\" key18=\"info\" />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\r\n      <CardDark >\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{modalTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={closeModal} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\r\n            {children}\r\n          </Suspense>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <CloseButton large onClick={closeModal} />\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper >\r\n  </CardDark>\r\n}\r\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Minimum Final Stat Filter</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(statFilters).map(([statKey, min]) => {\r\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Grid>\r\n        })}\r\n        <Grid item xs={12}>\r\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character_WR\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon_WR\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet,\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\"\r\nimport { input } from \"../../Formula\"\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport IConditional from \"../../Types/IConditional_WR\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  get defIcon() { return <ImgIcon src={this.defIconSrc} sx={{ fontSize: \"1.5em\" }} /> }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      case \"PrayersForDestiny\":\r\n      case \"PrayersForIllumination\":\r\n      case \"PrayersForWisdom\":\r\n      case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\r\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\r\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\r\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\r\n      if (setNums.length) artifactSetEffect[setKey] = setNums\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(\"setName\"),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">4-set</SqBadge>\r\n  }\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (id: string) => void,\r\n  onDelete?: (id: string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              {KeyMap.get(mainStatKey)}\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          const numRolls = stat.rolls?.length ?? 0\r\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n          const efficiency = stat.efficiency ?? 0\r\n          const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n          const statName = KeyMap.get(stat.key)\r\n          return (<Box key={i} sx={{ display: \"flex\" }}>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\r\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}`}</Typography>\r\n            </Box>\r\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n          </Box>)\r\n        })}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <BootstrapTooltip placement=\"top\" title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>}>\r\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\r\n        </BootstrapTooltip>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton title={key ? KeyMap.get(key) : t('editor.substat.substatFormat', { value: index + 1 })} disabled={!artifact} color={key ? \"success\" : \"primary\"} sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              {KeyMap.get(k)}\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map(val =>\r\n            <Typography component=\"span\" key={val} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { valueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{valueString(value.value, KeyMap.unit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = KeyMap.unit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact, validateArtifact } from '../Database/validation';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: { artifactIdToEdit?: string, cancelEdit: () => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [uploadFiles])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact || !artifactIdToEdit) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <Grid container spacing={1} sx={{ mb: 1 }}>\r\n          {/* Left column */}\r\n          <Grid item xs={12} md={6} lg={6} sx={{\r\n            // select all excluding last\r\n            \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n          }}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton title={<b>{artifact ? KeyMap.get(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >{KeyMap.get(mainStatK)}</MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unitStr(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                        setModalShow(true)\r\n                        ReactGA.modalview('/artifact/how-to-upload')\r\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allMainStatKeys, MainStatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactMainStatMultipleSelectChip({ mainStatKeys, setMainStatKeys }:\r\n  { mainStatKeys: MainStatKey[], setMainStatKeys: (keys: MainStatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof mainStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setMainStatKeys((typeof value === 'string' ? value.split(',') : value) as MainStatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"main-stat-multiple-chip-label\">Main Stats</InputLabel>\r\n        <Select\r\n          labelId=\"main-stat-multiple-chip-label\"\r\n          id=\"main-stat-multiple-chip\"\r\n          multiple\r\n          value={mainStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"main-stat-select-multiple-chip\" label=\"Main Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allMainStatKeys.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, mainStatKeys, theme) }}>\r\n              {KeyMap.get(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { Divider, ListItemIcon, ListItemText, Typography } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport { useMemo } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { ArtifactSetKey, Rarity } from '../../Types/consts';\r\nimport { Stars } from '../StarDisplay';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSetMultipleSelectChip({ artSetKeys, setArtSetKeys }:\r\n  { artSetKeys: ArtifactSetKey[], setArtSetKeys: (keys: ArtifactSetKey[]) => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof artSetKeys>) => {\r\n    const { target: { value }, } = event\r\n    setArtSetKeys((typeof value === 'string' ? value.split(',') : value) as ArtifactSetKey[]);// On autofill we get a stringified value.\r\n  };\r\n  const displaySets = useMemo(() => {\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets])\r\n  if (!artifactSheets) return null\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"artifact-set-multiple-chip-label\">Artifact Sets</InputLabel>\r\n        <Select\r\n          labelId=\"artifact-set-multiple-chip-label\"\r\n          id=\"artifact-set-multiple-chip\"\r\n          multiple\r\n          value={artSetKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"artifact-set-select-multiple-chip\" label=\"Artifact Sets\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={artifactSheets[value]?.defIcon} label={artifactSheets[value].name} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n            ...((i > 0) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n            ...(sets.length ? [<MenuItem key={`${star}header`} style={{ pointerEvents: 'none' }} >\r\n              <Typography>\r\n                <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n              </Typography>\r\n            </MenuItem>] : []),\r\n            ...sets.map(setKey => <MenuItem key={setKey} value={setKey}>\r\n              <ListItemIcon>{artifactSheets[setKey]?.defIcon}</ListItemIcon>\r\n              <ListItemText primaryTypographyProps={{ style: getStyles(setKey, artSetKeys, theme) }}>\r\n                {artifactSheets[setKey]?.name}\r\n              </ListItemText>\r\n            </MenuItem >)\r\n          ])}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allSubstats, SubstatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSubStatMultipleSelectChip({ subStatKeys, setSubStatKeys }:\r\n  { subStatKeys: SubstatKey[], setSubStatKeys: (keys: SubstatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof subStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setSubStatKeys((typeof value === 'string' ? value.split(',') : value) as SubstatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"sub-stat-multiple-chip-label\">Sub Stats</InputLabel>\r\n        <Select\r\n          labelId=\"sub-stat-multiple-chip-label\"\r\n          id=\"sub-stat-multiple-chip\"\r\n          multiple\r\n          value={subStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"sub-stat-select-multiple-chip\" label=\"Sub Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allSubstats.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, subStatKeys, theme) }}>\r\n              {KeyMap.get(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { faBan, faChartLine, faTrash, faUserShield, faUserSlash } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { BusinessCenter, Lock, LockOpen, Replay } from \"@mui/icons-material\"\r\nimport { Button, CardContent, Divider, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, ToggleButton, Typography } from \"@mui/material\"\r\nimport { Box } from \"@mui/system\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport ArtifactLevelSlider from \"../Components/Artifact/ArtifactLevelSlider\"\r\nimport ArtifactMainStatMultipleSelectChip from \"../Components/Artifact/ArtifactMainStatMultipleSelectChip\"\r\nimport ArtifactSetMultipleSelectChip from \"../Components/Artifact/ArtifactSetMultipleSelectChip\"\r\nimport ArtifactSubStatMultipleSelectChip from \"../Components/Artifact/ArtifactSubStatMultipleSelectChip\"\r\nimport { artifactSlotIcon } from \"../Components/Artifact/SlotNameWIthIcon\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport { CharacterMenuItemArray } from \"../Components/Character/CharacterDropdownButton\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport SolidToggleButtonGroup from \"../Components/SolidToggleButtonGroup\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { ICachedArtifact } from \"../Types/artifact\"\r\nimport { allArtifactRarities, allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { FilterOption } from \"./ArtifactSort\"\r\n\r\nexport default function ArtifactFilter({ filterOption, filterOptionDispatch, filterDispatch, numShowing, total, }:\r\n  { filterOption: FilterOption, filterOptionDispatch: (any) => void, filterDispatch: (any) => void, numShowing: number, total: number }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", excluded = \"\" } = filterOption\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(location as CharacterKey), [location])\r\n\r\n  let locationDisplay\r\n  if (!location) locationDisplay = t(\"filterLocation.any\")\r\n  else if (location === \"Inventory\") locationDisplay = <span><BusinessCenter /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (location === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (excluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (excluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n    <CardDark  >\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item >\r\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></Typography>\r\n          </Grid>\r\n          <Grid item flexGrow={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            {numShowing !== total && <Typography>Filtered {numShowing} / {total}</Typography>}\r\n          </Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => filterDispatch({ type: \"reset\" })} startIcon={<Replay />}>\r\n              <Trans t={t} i18nKey=\"ui:reset\" />\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} mt={1}>\r\n          {/* left */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact stars filter */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\r\n              {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artifact Slot */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ slotKeys: newVal })} value={slotKeys} size=\"small\">\r\n              {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artiface level filter */}\r\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\r\n              setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n              setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n              setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n            <Box display=\"flex\" gap={1}>\r\n              {/* location */}\r\n              <LocationDropdown dropdownProps={{ color: location ? \"success\" : \"primary\" }} title={locationDisplay} onChange={location => filterOptionDispatch({ location })} selectedCharacterKey={location} />\r\n              {/* exclusion state */}\r\n              <DropdownButton fullWidth title={excludedDisplay} color={excluded ? (excluded === \"included\" ? \"success\" : \"error\") : \"primary\"}>\r\n                <MenuItem selected={excluded === \"\"} disabled={excluded === \"\"} onClick={() => filterOptionDispatch({ excluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></MenuItem>\r\n                <MenuItem selected={excluded === \"excluded\"} disabled={excluded === \"excluded\"} onClick={() => filterOptionDispatch({ excluded: \"excluded\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faBan} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n                <MenuItem selected={excluded === \"included\"} disabled={excluded === \"included\"} onClick={() => filterOptionDispatch({ excluded: \"included\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faChartLine} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n              </DropdownButton>\r\n            </Box>\r\n          </Grid>\r\n          {/* right */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact Set */}\r\n            <ArtifactSetMultipleSelectChip artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n            <ArtifactMainStatMultipleSelectChip mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n            <ArtifactSubStatMultipleSelectChip subStatKeys={substats} setSubStatKeys={substats => filterOptionDispatch({ substats })} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </Suspense>\r\n}\r\n\r\n\r\nfunction LocationDropdown({ title, onChange, selectedCharacterKey, dropdownProps }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  return <DropdownButton fullWidth {...dropdownProps} title={title}>\r\n    <MenuItem key=\"unselect\" selected={selectedCharacterKey === \"\"} disabled={selectedCharacterKey === \"\"} onClick={() => onChange(\"\")}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"inventory\" selected={selectedCharacterKey === \"Inventory\"} disabled={selectedCharacterKey === \"Inventory\"} onClick={() => onChange(\"Inventory\")}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"equipped\" selected={selectedCharacterKey === \"Equipped\"} disabled={selectedCharacterKey === \"Equipped\"} onClick={() => onChange(\"Equipped\")}>\r\n      <ListItemIcon>\r\n        <FontAwesomeIcon icon={faUserShield} />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <Divider />\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, database._getCharKeys().sort(), onChange, selectedCharacterKey)}\r\n  </DropdownButton>\r\n}\r\n\r\nexport function ArtifactRedButtons({ artifactIds, filterOption }:\r\n  { artifactIds: string[], filterOption: FilterOption }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock } = useMemo(() => {\r\n    const artifacts = artifactIds.map(id => database._getArt(id)) as ICachedArtifact[]\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 0 : 1), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n    const numDelete = numUnlock\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock }\r\n  }, [artifactIds, database])\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifactIds.map(id => database.setArtLocation(id, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${numDelete} artifacts?`) &&\r\n    artifactIds.map(id => !database._getArt(id)?.lock && database.removeArt(id))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: true }, id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: false }, id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numUnlock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: true }, id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numLock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: false }, id))\r\n\r\n  return <Grid container spacing={1} alignItems=\"center\">\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnequip} onClick={unequipArtifacts} startIcon={<FontAwesomeIcon icon={faUserSlash} />}>\r\n        <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnequip ? \"success\" : \"secondary\"}>{numUnequip}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numDelete} onClick={deleteArtifacts} startIcon={<FontAwesomeIcon icon={faTrash} />}>\r\n        <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numDelete ? \"success\" : \"secondary\"}>{numDelete}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numInclude} onClick={excludeArtifacts} startIcon={<FontAwesomeIcon icon={faBan} />}>\r\n        <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Exclude Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numInclude ? \"success\" : \"secondary\"}>{numInclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numExclude} onClick={includeArtifacts} startIcon={<FontAwesomeIcon icon={faChartLine} />}>\r\n        <Trans t={t} i18nKey=\"button.includeArtifacts\" >Include Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numExclude ? \"success\" : \"secondary\"}>{numExclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numLock} onClick={unlockArtifacts} startIcon={<LockOpen />}>\r\n        <Trans t={t} i18nKey=\"button.unlockrtifacts\" >Unlock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numLock ? \"success\" : \"secondary\"}>{numLock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnlock} onClick={lockArtifacts} startIcon={<Lock />}>\r\n        <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnlock ? \"success\" : \"secondary\"}>{numUnlock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={12} md={6} display=\"flex\" justifyContent=\"space-around\">\r\n      <Typography variant=\"caption\" color=\"text.secondary\"><Trans t={t} i18nKey=\"buttonHint\">Note: the red buttons above only applies to <b>currently filtered artifacts</b></Trans></Typography>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useCallback } from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { StatFilterItem } from \"../Components/StatFilterCard\"\r\nimport { allSubstats, SubstatKey } from \"../Types/artifact\"\r\n\r\nexport default function ProbabilityFilter({ probabilityFilter: statFilters = {}, setProbabilityFilter: setStatFilters, disabled = false }: {\r\n  probabilityFilter: Dict<SubstatKey, number>,\r\n  setProbabilityFilter: (object: Dict<SubstatKey, number>) => void,\r\n  disabled?: boolean\r\n}) {\r\n  const remainingKeys = allSubstats.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],\r\n  )\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"h6\">\r\n        Roll Probability Calculator <SqBadge color=\"success\">TC Feature</SqBadge>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={6}>\r\n          <CardLight>\r\n            <CardContent>\r\n              <Typography>\r\n                This UI only pops up when \"Sort by\" <strong>Probability</strong>.\r\n                In conjunction with the Artifact Filters above, this UI allows you to set a criteria for substats values, and it will sort the artifacts by those with the highest probability to roll into those criteria values.\r\n                <ColorText color=\"warning\"> Artifacts that already reach the criteria(100%) or are at 0% are hidden.</ColorText>\r\n              </Typography>\r\n\r\n            </CardContent>\r\n          </CardLight>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} container spacing={1}>\r\n          {Object.entries(statFilters).map(([statKey, min]) => {\r\n            return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n              delete statFilters[statKey]\r\n              setStatFilters({ ...statFilters })\r\n            }} /></Grid>\r\n          })}\r\n          <Grid item xs={12}>\r\n            <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark >\r\n}\r\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Replay } from '@mui/icons-material';\r\nimport { Alert, Box, Button, CardContent, Grid, Link, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { initGlobalSettings } from '../GlobalSettings';\r\nimport KeyMap from '../KeyMap';\r\nimport useDBState from '../ReactHooks/useDBState';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport { allSubstats, SubstatKey } from '../Types/artifact';\r\nimport { ArtifactDisplayLocationState } from '../Types/LocationState';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { clamp } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ArtifactFilter, { ArtifactRedButtons } from './ArtifactFilter';\r\nimport { artifactFilterConfigs, artifactSortConfigs, artifactSortKeys, artifactSortKeysTC, initialArtifactSortFilter } from './ArtifactSort';\r\nimport ProbabilityFilter from './ProbabilityFilter';\r\nimport { probability } from './RollProbability';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nfunction initialState() {\r\n  return {\r\n    ...initialArtifactSortFilter(),\r\n    maxNumArtifactsToDisplay: 50,\r\n    effFilter: [...allSubstats] as SubstatKey[],\r\n    probabilityFilter: {} as Dict<SubstatKey, number>,\r\n  }\r\n}\r\nexport default function ArtifactDisplay() {\r\n  const [{ tcMode }] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { state: locationState } = useLocation<ArtifactDisplayLocationState | undefined>()\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useDBState(\"ArtifactDisplay\", initialState)\r\n  const stateDispatch = useCallback(\r\n    action => {\r\n      if (action.type === \"reset\") setState(initialArtifactSortFilter())\r\n      else setState(action)\r\n    },\r\n    [setState],\r\n  )\r\n\r\n  const { effFilter, filterOption, ascending, probabilityFilter, maxNumArtifactsToDisplay } = state\r\n  let { sortType } = state\r\n  const showProbability = tcMode && sortType === \"probability\"\r\n  //force the sortType back to a normal value after exiting TC mode\r\n  if (sortType === \"probability\" && !tcMode) stateDispatch({ sortType: artifactSortKeys[0] })\r\n\r\n  const [artToEditId, setartToEditId] = useState(locationState?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback((id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(id => setartToEditId(id), [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(undefined), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  const filterOptionDispatch = useCallback((action) => {\r\n    stateDispatch({\r\n      filterOption: {\r\n        ...filterOption,\r\n        ...action\r\n      }\r\n    })\r\n  }, [stateDispatch, filterOption])\r\n\r\n  const setProbabilityFilter = useCallback(probabilityFilter => stateDispatch({ probabilityFilter }), [stateDispatch],)\r\n\r\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\r\n  const sortConfigs = useMemo(() => artifactSortConfigs(effFilterSet, probabilityFilter), [effFilterSet, probabilityFilter])\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const { artifactIds, totalArtNum } = useMemo(() => {\r\n    const { sortType = artifactSortKeys[0], ascending = false, filterOption } = state\r\n    let allArtifacts = database._getArts()\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    const sortFunc = sortFunction(sortType, ascending, sortConfigs)\r\n    //in probability mode, filter out the artifacts that already reach criteria\r\n    if (showProbability) {\r\n      allArtifacts.forEach(art => (art as any).probability = probability(art, probabilityFilter))\r\n      allArtifacts = allArtifacts.filter(art => (art as any).probability && (art as any).probability !== 1)\r\n    }\r\n    const artifactIds = allArtifacts.filter(filterFunc).sort(sortFunc).map(art => art.id)\r\n    return { artifactIds, totalArtNum: allArtifacts.length, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [state, dbDirty, database, sortConfigs, filterConfigs, probabilityFilter, showProbability])\r\n\r\n\r\n  const { artifactsToShow: artifactIdsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifactIds.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifactIds.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifactIds, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  //for pagination\r\n  const totalShowing = artifactIds.length !== totalArtNum ? `${artifactIds.length}/${totalArtNum}` : `${totalArtNum}`\r\n  const setPage = useCallback(\r\n    (e, value) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      setpageIdex(value - 1);\r\n    },\r\n    [setpageIdex, invScrollRef],\r\n  )\r\n\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} my={1}>\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n\r\n    {noArtifact && <Alert severity=\"info\" variant=\"filled\">Looks like you haven't added any artifacts yet. If you want, there are <Link color=\"warning.main\" component={RouterLink} to=\"/scanner\">automatic scanners</Link> that can speed up the import process!</Alert>}\r\n\r\n    <ArtifactEditor\r\n      artifactIdToEdit={artToEditId}\r\n      cancelEdit={cancelEditArtifact}\r\n    />\r\n    <ArtifactFilter filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filterDispatch={stateDispatch}\r\n      numShowing={artifactIds.length} total={totalArtNum} />\r\n    {showProbability && <ProbabilityFilter probabilityFilter={probabilityFilter} setProbabilityFilter={setProbabilityFilter} />}\r\n    <CardDark ref={invScrollRef}>\r\n      <CardContent>\r\n        <Grid container sx={{ mb: 1 }}>\r\n          <Grid item flexGrow={1}><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Substats to use in efficiency calculation</Trans></span></Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => stateDispatch({ effFilter: [...allSubstats] })} startIcon={<Replay />}><Trans t={t} i18nKey=\"ui:reset\" /></Button>\r\n          </Grid>\r\n        </Grid>\r\n        <EfficiencyFilter selectedKeys={effFilter} onChange={n => stateDispatch({ effFilter: n })} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <CardDark ><CardContent>\r\n      <Grid container alignItems=\"center\" sx={{ pb: 2 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <SortByButton fullWidth sortKeys={[...artifactSortKeys.filter(key => (artifactSortKeysTC as unknown as string[]).includes(key) ? tcMode : true)]}\r\n            value={sortType} onChange={sortType => stateDispatch({ sortType })}\r\n            ascending={ascending} onChangeAsc={ascending => stateDispatch({ ascending })}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <ArtifactRedButtons artifactIds={artifactIds} filterOption={filterOption} />\r\n    </CardContent></CardDark>\r\n\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\r\n      <Grid container spacing={1} >\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <CardDark sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\r\n            <CardContent>\r\n              <Typography sx={{ textAlign: \"center\" }}>Add New Artifact</Typography>\r\n            </CardContent>\r\n            <Box sx={{\r\n              flexGrow: 1,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n            >\r\n              <Button onClick={() => editArtifact(\"new\")} sx={{\r\n                borderRadius: \"1em\"\r\n              }}>\r\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\r\n              </Button>\r\n            </Box>\r\n          </CardDark>\r\n        </Grid>\r\n        {artifactIdsToShow.map(artId =>\r\n          <Grid item key={artId} xs={12} sm={6} md={4} lg={4} xl={3} >\r\n            <ArtifactCard\r\n              artifactId={artId}\r\n              effFilter={effFilterSet}\r\n              onDelete={deleteArtifact}\r\n              onEdit={editArtifact}\r\n              probabilityFilter={showProbability ? probabilityFilter : undefined}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark ><CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box >\r\n}\r\n\r\nfunction ShowingArt({ count, page, onChange, numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Artifacts\r\n    </Trans>\r\n  </Typography>\r\n}\r\n\r\nfunction EfficiencyFilter({ selectedKeys, onChange }) {\r\n  const keys1 = allSubstats.slice(0, 6)\r\n  const keys2 = allSubstats.slice(6)\r\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\r\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          {KeyMap.get(key)}\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          {KeyMap.get(key)}\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\r\n}\r\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","disabled","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","BootstrapTooltip","styled","className","arrow","classes","popper","theme","tooltipClasses","palette","common","black","backgroundColor","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","database","useContext","DatabaseContext","characterSheets","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","thumbImg","thumbImgSide","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","characterKey","LocationName","location","component","nameWIthIcon","verticalAlign","ThumbSide","height","lineHeight","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","primary","main","transition","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","number","setNumber","focused","setFocus","parseFunc","parseFloat","onBlur","onFocus","onInputChange","target","onKeyDOwn","key","type","onKeyDown","initialInfoShownState","artifactPage","buildPage","characterPage","InfoComponent","pageKey","text","modalTitle","useDBState","stateInfoShown","setStateInfoShown","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","container","item","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","large","SortByButton","sortKeys","ascending","onChangeAsc","faSortAmountDownAlt","faSortAmountUp","StatFilterCard","statFilters","setStatFilters","data","DataContext","statKeys","get","input","push","charEle","remainingKeys","some","k","setFilter","sKey","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","placeholder","faTrashAlt","DisabledButton","secondary","TextButton","createContext","then","imp","default","tr","strKey","allData","as","mergeData","values","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","this","slots","slotIcons","rarity","allSlotKeys","icons","set","a","sheets","grouped","forEach","Math","artifactSetEffect","setNums","sn","conditionalHeader","img","m","action","initGlobalSettings","tcMode","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","artifactID","_getArt","artifact","setArtifact","followArt","useArtifact","editable","art","id","lock","level","mainStatKey","substats","exclude","mainStatLevel","levelVariant","floor","mainStatVal","cacheValueString","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","slotDesc","slotDescTooltip","placement","Typography","faInfoCircle","setDescTooltip","setNumKey","SqBadge","Skeleton","minHeight","CardLight","flexDirection","CardContent","pt","pb","pr","Box","Chip","label","IconButton","updateArt","Lock","LockOpen","Grid","flexWrap","colored","mt","mb","alignSelf","CardMedia","image","stat","numRolls","rolls","rollColor","efficiency","effOpacity","clamp01","statName","mr","opacity","has","toFixed","my","PercentBadge","valid","probability","CardActions","flexShrink","charKey","setArtLocation","ButtonGroup","faEdit","Tooltip","faBan","faChartLine","ArtifactRarityDropdown","DropdownButton","MenuItem","ArtifactSlotDropdown","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","CustomNumberTextField","state","setState","sendChange","toString","TextField","SubstatEfficiencyDisplayCard","eff","Trans","FontAwesomeIcon","cursor","SubstatInput","index","setSubstat","accurateValue","reduce","b","unit","rollNum","error","rollData","allowedRolls","numUpgrades","high","rollOffset","whiteSpace","v","newValue","artifactSubstatRollCorrection","p","count","indexOf","ml","UploadExplainationModal","modalShow","hide","ModalWrapper","CardDark","CloseButton","Alert","severity","md","alt","Snippet","gutterBottom","href","rel","scan_art_main","BorrowManager","init","deinit","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","objectKeyMap","allArtifactRarities","score","includes","substat","mainStatScore","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","findIndex","mainStatValScore","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","valueString","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","artifactReducer","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","processingCurrent","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","isValid","preventClosing","preventDefault","CardHeader","lg","margin","ImgIcon","mainStatK","gap","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","CircularProgress","Add","createArt","confirm","process","Update","getStyles","personName","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMainStatMultipleSelectChip","setMainStatKeys","useTheme","FormControl","fullWidth","InputLabel","Select","labelId","event","split","OutlinedInput","renderValue","StatIcon","primaryTypographyProps","style","ArtifactSetMultipleSelectChip","artSetKeys","setArtSetKeys","defIcon","pointerEvents","ArtifactSubStatMultipleSelectChip","subStatKeys","setSubStatKeys","ArtifactFilter","locationDisplay","excludedDisplay","filterOption","filterOptionDispatch","filterDispatch","numShowing","total","excluded","locationCharacterSheet","BusinessCenter","faUserShield","SolidToggleButtonGroup","newVal","ToggleButton","LocationDropdown","dropdownProps","ArtifactRedButtons","artifactIds","artifacts","numUnlock","numLock","numDelete","numUnequip","numExclude","numInclude","sm","faUserSlash","removeArt","faTrash","ProbabilityFilter","setProbabilityFilter","InfoDisplay","React","initialState","initialArtifactSortFilter","maxNumArtifactsToDisplay","ArtifactDisplay","locationState","useLocation","stateDispatch","sortType","showProbability","artifactSortKeys","artToEditId","setartToEditId","pageIdex","setpageIdex","invScrollRef","useRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","editArtifact","cancelEditArtifact","noArtifact","_getArts","sortConfigs","artifactSortConfigs","filterConfigs","artifactFilterConfigs","allArtifacts","filterFunc","filterFunction","sortFunc","sortFunction","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","artifactIdsToShow","totalShowing","setPage","scrollIntoView","behavior","returnObjects","Link","RouterLink","to","ref","EfficiencyFilter","selectedKeys","n","Pagination","page","ShowingArt","xl","artifactSortKeysTC","borderRadius","faPlus","artId","keys1","keys2","selKeys1","selKeys2","arr","badgeColor","_getState","followState","updateState","sortby","configs","Sort","config","aV","getValue","bV","localeCompare","diff","tieBreaker","filterOptions","obj","optionKey","optionVal"],"sourceRoot":""}