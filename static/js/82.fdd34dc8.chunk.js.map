{"version":3,"file":"static/js/82.fdd34dc8.chunk.js","mappings":"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","sources":["Components/Character/CharacterSelectionModal.tsx","Components/SortByButton.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/ToggleButton/WeaponToggle.tsx","Util/CharacterSort.ts","Util/SortByFilters.ts"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\";\nimport { useContext, useMemo, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport { uiInput as input } from \"../../Formula\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport useTeamData from \"../../ReactHooks/useTeamData\";\nimport { ICachedCharacter } from \"../../Types/character_WR\";\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\nimport CardDark from \"../Card/CardDark\";\nimport CardLight from \"../Card/CardLight\";\nimport CloseButton from \"../CloseButton\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport ModalWrapper from \"../ModalWrapper\";\nimport SortByButton from \"../SortByButton\";\nimport SqBadge from \"../SqBadge\";\nimport { Stars } from \"../StarDisplay\";\nimport StatIcon from \"../StatIcon\";\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\n\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\n\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\n\ntype CharacterSelectionModalProps = {\n  show: boolean,\n  newFirst?: boolean\n  onHide: () => void,\n  onSelect?: (ckey: CharacterKey) => void,\n  filter?: characterFilter\n}\n\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\n  const database = useContext(DatabaseContext)\n\n  const [sortBy, setsortBy] = useState(sortKeys[0])\n  const [ascending, setascending] = useState(false)\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\n\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(characterSheets), [characterSheets])\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\n    [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey]))\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter }, filterConfigs))\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number) : [],\n    [database, characterSheets, filter, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs])\n\n  if (!characterSheets) return null\n  return <ModalWrapper open={show} onClose={onHide} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1} >\n          <Grid item>\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\n          </Grid>\n          <Grid item flexGrow={1}>\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\n          </Grid>\n\n          <Grid item flexGrow={1} />\n\n          <Grid item >\n            <SortByButton sx={{ height: \"100%\" }}\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\n              ascending={ascending} onChangeAsc={setascending} />\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\n          <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\n        </Grid>)}\n      </Grid></CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n\nfunction CharacterBtn({ onClick, characterKey }: { onClick: () => void, characterKey: CharacterKey }) {\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\n  const teamData = useTeamData(characterKey)\n  const { target: data } = teamData?.[characterKey] ?? {}\n  if (!characterSheet) return null\n  const rarity = characterSheet.rarity\n  return <CardActionArea onClick={onClick} >\n    <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\n      <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\n      <Box sx={{ pl: 1 }}>\n        <Typography><strong>{characterSheet.name}</strong></Typography>\n        {data ? <>\n          <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{CharacterSheet.getLevelString(data.get(input.lvl).value, data.get(input.asc).value)}</Typography>\n          <Typography >\n            <SqBadge color=\"success\">{`C${data.get(input.constellation).value}`}</SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.auto).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.auto).value}</strong></SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.skill).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.skill).value}</strong></SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.burst).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.burst).value}</strong></SqBadge>\n          </Typography>\n        </> : <>\n          <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\n        </>}\n        <small><Stars stars={rarity} colored /></small>\n      </Box>\n    </CardLight>\n  </CardActionArea >\n}\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\ntype SortByButtonProps = ButtonGroupProps & {\n  sortKeys: string[]\n  value: string\n  onChange: (value: string) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\n  const { t } = useTranslation(\"ui\")\n  return <ButtonGroup {...props} >\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\n      {sortKeys.map(key =>\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n    </DropdownButton>\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n    </Button>\n  </ButtonGroup>\n}","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\n\ntype SolidColoredToggleButtonPartial = {\n  baseColor?: ButtonProps[\"color\"];\n  selectedColor?: ButtonProps[\"color\"];\n}\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\n\n\nconst SolidColoredToggleButton = styled(ToggleButton, {\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\n  '&': {\n    backgroundColor: theme.palette[baseColor].main,\n    color: theme.palette[baseColor].contrastText,\n  },\n  '&:hover': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected': {\n    backgroundColor: theme.palette[selectedColor].main,\n    color: theme.palette[selectedColor].contrastText,\n  },\n  '&.Mui-selected:hover': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n  '&.Mui-disabled': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected.Mui-disabled': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n}));\n\nexport default SolidColoredToggleButton","import { Box, ToggleButtonGroup } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport { allElements, ElementKey } from \"../../Types/consts\";\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\nimport { uncoloredEleIcons } from \"../StatIcon\";\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: ElementKey | \"\") => void\n  value: ElementKey | \"\"\n}\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\n    </SolidColoredToggleButton>)}\n  </ToggleButtonGroup>\n}\n","import { ToggleButton } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: WeaponTypeKey | \"\") => void\n  value: WeaponTypeKey | \"\"\n}\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\n    </ToggleButton>)}\n  </SolidToggleButtonGroup>\n}","import CharacterSheet from \"../Data/Characters/CharacterSheet\";\nimport { ArtCharDatabase } from \"../Database/Database\";\nimport { CharacterKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\nexport type CharacterSortKey = typeof characterSortKeys[number]\n\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\n  return {\n    new: {\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\n      tieBreaker: \"name\"\n    },\n    name: {\n      getValue: (ck) => ck,\n    },\n    level: {\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\n      tieBreaker: \"rarity\"\n    },\n    rarity: {\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\n      tieBreaker: \"level\"\n    }\n  }\n}\n\nexport function characterFilterConfigs(characterSheets: Record<CharacterKey, CharacterSheet>): FilterConfigs<\"element\" | \"weaponType\", CharacterKey> {\n  return {\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\n  }\n}\n","type SortConfig<T> = {\n  getValue: (id: T) => number | string\n  tieBreaker?: string\n}\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\n\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\n    const aV = config.getValue(a)\n    const bV = config.getValue(b)\n    let diff = 0\n    if (typeof aV === \"string\" && typeof bV === \"string\")\n      diff = aV.localeCompare(bV)\n    else\n      diff = ((bV as number) - (aV as number))\n    return (ascending ? -1 : 1) * diff\n  }\n  return (a: T, b: T) => {\n    if (!configs[sortby]) return 0\n    const filterOption = configs[sortby]\n    let diff = Sort(a, b, ascending, filterOption)\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\n    return diff\n  }\n}\n\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\n}\n"],"names":["defaultSortKeys","CharacterSelectionModal","show","onHide","onSelect","filter","newFirst","sortKeys","useMemo","database","useContext","DatabaseContext","useState","sortBy","setsortBy","ascending","setascending","elementalFilter","setelementalFilter","weaponFilter","setweaponFilter","characterSheets","usePromise","CharacterSheet","sortConfigs","characterSortConfigs","filterConfigs","characterFilterConfigs","characterKeyList","Set","allCharacterKeys","cKey","_getChar","filterFunction","element","weaponType","sort","sortFunction","open","onClose","sx","py","container","spacing","item","height","onChange","value","size","flexGrow","onChangeAsc","onClick","map","characterKey","xs","md","lg","CharacterBtn","characterSheet","teamData","useTeamData","data","target","rarity","display","alignItems","component","src","thumbImg","width","className","pl","name","variant","elementKey","StatIcon","Assets","weaponTypeKey","get","input","color","stars","colored","SortByButton","props","t","useTranslation","title","i18nKey","key","selected","disabled","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","palette","main","contrastText","dark","ElementToggle","cb","useCallback","e","newVal","ToggleButtonGroup","exclusive","allElements","ele","Box","fontSize","lineHeight","uncoloredEleIcons","WeaponToggle","allWeaponTypeKeys","wt","characterSortKeys","new","getValue","ck","tieBreaker","level","sortby","configs","Sort","a","b","config","aV","bV","localeCompare","filterOption","diff","filterOptions","obj","Object","entries","every","optionKey","optionVal"],"sourceRoot":""}