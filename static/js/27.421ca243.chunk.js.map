{"version":3,"sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/Artifacts/Adventurer/flower.png","Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/Adventurer/plume.png","Data/Artifacts/Adventurer/sands.png","Data/Artifacts/Adventurer/goblet.png","Data/Artifacts/Adventurer/circlet.png","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/flower.png","Data/Artifacts/EmblemOfSeveredFate/plume.png","Data/Artifacts/EmblemOfSeveredFate/sands.png","Data/Artifacts/EmblemOfSeveredFate/goblet.png","Data/Artifacts/EmblemOfSeveredFate/circlet.png","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/flower.png","Data/Artifacts/NoblesseOblige/plume.png","Data/Artifacts/NoblesseOblige/sands.png","Data/Artifacts/NoblesseOblige/goblet.png","Data/Artifacts/NoblesseOblige/circlet.png","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/flower.png","Data/Artifacts/ViridescentVenerer/plume.png","Data/Artifacts/ViridescentVenerer/sands.png","Data/Artifacts/ViridescentVenerer/goblet.png","Data/Artifacts/ViridescentVenerer/circlet.png","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/index.ts"],"names":["Stat","this","Error","printStat","statKey","stats","sgt","strKey","Translate","ns","key18","st","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","absorbableEle","charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","allSubstats","input","total","getTalentType","move","singleDmgNode","base","multiplier","additional","data","hit","dmg","mergeData","prod","constant","dmgNode","lvlMultiplier","talentType","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","lvl","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","asc","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","special","allMainStatKeys","inferInfoMut","critRate_","cappedCritRate","icons","flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","displayArtifact","set2","threshold_add","artSet","Adventurer","heal","percent","hp","sheet","name","rarity","setEffects","document","fields","node","ArtifactSheet","EmblemOfSeveredFate","burstBonus","min","enerRech_","burst_dmg_","tr","NoblesseOblige","condSet4Path","condSet4","set4TallyWrite","match","set4TallyRead","customRead","set4","atk_","NO4","conditional","header","title","icon","ImgIcon","size","sx","m","src","action","SqBadge","color","description","states","on","text","unit","anemo_dmg_","ViridescentVenerer","swirl_dmg_","condSwirlPaths","e","condSwirls","condSwirlNodes","objectKeyValueMap","eleKey","swirl","elementalData","artifacts"],"mappings":"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","file":"static/js/27.421ca243.chunk.js","sourcesContent":["/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      } as IConditional\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\n  ]\n}\n","import { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, prod, subscript, sum } from \"../../Formula/utils\";\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\ncommonBasic.critRate_ = input.total.cappedCritRate\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\nexport function singleDmgNode(base: MainStatKey, multiplier: number, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: {\n      base: prod(input.total[base], multiplier,),\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\n    },\n  }, additional]))\n}\n\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return data(input.hit.dmg, mergeData([{\n    hit: {\n      base: prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]),\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\n    },\n  }, additional]))\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","export default __webpack_public_path__ + \"static/media/flower.1e05231c.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/plume.40546dc8.png\";","export default __webpack_public_path__ + \"static/media/sands.47890ea0.png\";","export default __webpack_public_path__ + \"static/media/goblet.fb105aeb.png\";","export default __webpack_public_path__ + \"static/media/circlet.bf871ab6.png\";","import { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { ArtifactSetKey } from \"../../Types/consts\";\n\nexport function dataObjForArtifactSheet(\n  key: ArtifactSetKey,\n  data: Data = {},\n  displayArtifact: DisplaySub = {},\n): Data {\n  return mergeData([inferInfoMut(data, key), {\n    display: {\n      [`artifact:${key}`]: displayArtifact\n    },\n  }])\n}\n","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { infoMut, percent, prod, threshold_add } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"Adventurer\"\nconst set2 = threshold_add(input.artSet.Adventurer, 2, 1000)\nconst heal = threshold_add(input.artSet.Adventurer, 4,\n  prod(percent(0.3), input.total.hp))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    hp: set2\n  },\n}, {\n  heal,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Adventurer\", rarity: [3],\n  icons,\n  setEffects: {\n    2: {\n      document: [{\n        fields: [{\n          node: set2,\n        }]\n      }]\n    },\n    4: {\n      document: [{\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.03a26b70.png\";","export default __webpack_public_path__ + \"static/media/plume.f8998212.png\";","export default __webpack_public_path__ + \"static/media/sands.c0e7d7a5.png\";","export default __webpack_public_path__ + \"static/media/goblet.14a77065.png\";","export default __webpack_public_path__ + \"static/media/circlet.e8fcadf0.png\";","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { min, percent, prod, threshold_add } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\n\nconst set2 = threshold_add(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\n\nconst burstBonus = threshold_add(input.artSet.EmblemOfSeveredFate, 4,\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    enerRech_: set2,\n    burst_dmg_: burstBonus,\n  },\n}, {\n  burstBonus,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: {\n      document: [{\n        fields: [{\n          node: set2,\n        }]\n      }]\n    },\n    4: {\n      document: [{\n        fields: [{\n          node: burstBonus,\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.0c959d66.png\";","export default __webpack_public_path__ + \"static/media/plume.859357f9.png\";","export default __webpack_public_path__ + \"static/media/sands.f177f0e0.png\";","export default __webpack_public_path__ + \"static/media/goblet.b2696785.png\";","export default __webpack_public_path__ + \"static/media/circlet.171108c7.png\";","import icons from './icons'\nimport { Translate } from '../../../Components/Translate'\nimport ImgIcon from '../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../Components/SqBadge'\nimport { sgt } from '../../Characters/SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { customRead, match, percent, threshold_add } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport { cond } from '../../SheetUtil'\n\nconst key: ArtifactSetKey = \"NoblesseOblige\"\n\nconst tr = (strKey: string) => <Translate ns={`artifact_${key}_gen`} key18={strKey} />\n\nconst set2 = threshold_add(input.artSet.NoblesseOblige, 2, percent(0.2))\n\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\nconst set4TallyWrite = threshold_add(input.artSet.NoblesseOblige, 4, match(condSet4, \"on\", 1))\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\nconst set4 = threshold_add(set4TallyRead, 1, percent(0.2))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    burst_dmg_: set2,\n    atk_: set4,\n  },\n  teamBuff: {\n    tally: {\n      NO4: set4TallyWrite\n    }\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Noblesse Oblige\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: {\n      document: [{\n        fields: [{\n          node: set2,\n        }]\n      }]\n    },\n    4: {\n      document: [{\n        conditional: {\n          teamBuff: true,\n          value: condSet4,\n          path: condSet4Path,\n          header: {\n            title: tr(\"setName\"),\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\n            action: <SqBadge color=\"success\">4-set</SqBadge>\n          },\n          description: tr(`setEffects.4`),\n          name: <Translate ns=\"artifact_NoblesseOblige\" key18=\"condName\" />,\n          states: {\n            on: {\n              fields: [{\n                node: set4\n              }, {\n                text: sgt(\"duration\"),\n                value: 12,\n                unit: \"s\"\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.78f9a382.png\";","export default __webpack_public_path__ + \"static/media/plume.fdfba7f4.png\";","export default __webpack_public_path__ + \"static/media/sands.c326b170.png\";","export default __webpack_public_path__ + \"static/media/goblet.89409f60.png\";","export default __webpack_public_path__ + \"static/media/circlet.cadf7990.png\";","import icons from './icons'\nimport ImgIcon from '../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../Components/SqBadge'\nimport { sgt } from '../../Characters/SheetUtil'\nimport { absorbableEle } from '../../Characters/dataUtil'\nimport ColorText from '../../../Components/ColoredText'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport { Data } from '../../../Formula/type'\nimport { match, percent, threshold_add } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport elementalData from '../../ElementalData'\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\nimport { condReadNode, st, trans } from '../../SheetUtil'\n\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\nconst [tr] = trans(\"artifact\", key)\n\nconst anemo_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 2, percent(0.15))\nconst swirl_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 4, percent(0.6))\n\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\n\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\nthreshold_add(input.artSet.ViridescentVenerer, 4,\n  match(\"swirl\", condSwirls[e], percent(-0.4))\n)])\n\nconst data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    anemo_dmg_,\n    swirl_dmg_,\n  },\n  teamBuff: {\n    premod: {\n      ...condSwirlNodes\n    }\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\n  setEffects: {\n    2: {\n      document: [{\n        fields: [{ node: anemo_dmg_ }]\n      }]\n    },\n    4: {\n      document: [{\n        fields: [{ node: swirl_dmg_ }],\n      },\n      ...absorbableEle.map(eleKey => ({\n        conditional: { // Poetics of Fuubutsu\n          value: condSwirls[eleKey],\n          path: condSwirlPaths[eleKey],\n          teamBuff: true,\n          header: {\n            title: tr(\"setName\"),\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\n            action: <SqBadge color=\"success\">4-set</SqBadge>\n          },\n          description: tr(`setEffects.4`),\n          name: st(\"eleSwirled\"),\n          states: {\n            swirl: {\n              name: <ColorText color={eleKey}>{elementalData[eleKey].name}</ColorText>,\n              fields: [{\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\n              }, {\n                text: sgt(\"duration\"),\n                value: 10,\n                unit: \"s\"\n              }]\n            }\n          }\n        },\n      }))\n      ]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import { ArtifactSetKey } from '../../Types/consts'\nimport { ArtifactSheet } from './ArtifactSheet'\n\nimport Adventurer from './Adventurer'\n// import ArchaicPetra from './ArchaicPetra'\n// import Berserker from './Berserker'\n// import BlizzardStrayer from './BlizzardStrayer'\n// import BloodstainedChivalry from './BloodstainedChivalry'\n// import BraveHeart from './BraveHeart'\n// import CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\n// import DefendersWill from './DefendersWill'\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\n// import Gambler from './Gambler'\n// import GladiatorsFinale from './GladiatorsFinale'\n// import HeartOfDepth from './HeartOfDepth'\n// import HuskOfOpulentDreams from './HuskOfOpulentDreams'\n// import Instructor from './Instructor'\n// import Lavawalker from './Lavawalker'\n// import LuckyDog from './LuckyDog'\n// import MaidenBeloved from './MaidenBeloved'\n// import MartialArtist from './MartialArtist'\nimport NoblesseOblige from './NoblesseOblige'\n// import OceanHuedClam from './OceanHuedClam'\n// import PaleFlame from './PaleFlame'\n// import PrayersForDestiny from './PrayersForDestiny'\n// import PrayersForIllumination from './PrayersForIllumination'\n// import PrayersForWisdom from './PrayersForWisdom'\n// import PrayersToSpringtime from './PrayersToSpringtime'\n// import ResolutionOfSojourner from './ResolutionOfSojourner'\n// import RetracingBolide from './RetracingBolide'\n// import Scholar from './Scholar'\n// import ShimenawasReminiscence from './ShimenawasReminiscence'\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith'\n// import TheExile from './TheExile'\n// import ThunderingFury from './ThunderingFury'\n// import Thundersoother from './Thundersoother'\n// import TinyMiracle from './TinyMiracle'\n// import TravelingDoctor from './TravelingDoctor'\nimport ViridescentVenerer from './ViridescentVenerer'\n// import WanderersTroupe from './WanderersTroupe'\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\n  Adventurer,\n  // ArchaicPetra,\n  // Berserker,\n  // BlizzardStrayer,\n  // BloodstainedChivalry,\n  // BraveHeart,\n  // CrimsonWitchOfFlames,\n  // DefendersWill,\n  EmblemOfSeveredFate,\n  // Gambler,\n  // GladiatorsFinale,\n  // HeartOfDepth,\n  // HuskOfOpulentDreams,\n  // Instructor,\n  // Lavawalker,\n  // LuckyDog,\n  // MaidenBeloved,\n  // MartialArtist,\n  NoblesseOblige,\n  // OceanHuedClam,\n  // PaleFlame,\n  // PrayersForDestiny,\n  // PrayersForIllumination,\n  // PrayersForWisdom,\n  // PrayersToSpringtime,\n  // ResolutionOfSojourner,\n  // RetracingBolide,\n  // Scholar,\n  // ShimenawasReminiscence,\n  // TenacityOfTheMillelith,\n  // TheExile,\n  // ThunderingFury,\n  // Thundersoother,\n  // TinyMiracle,\n  // TravelingDoctor,\n  ViridescentVenerer,\n  // WanderersTroupe,\n} as const\n\nexport default artifacts\n"],"sourceRoot":""}