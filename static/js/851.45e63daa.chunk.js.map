{"version":3,"file":"static/js/851.45e63daa.chunk.js","mappings":"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","sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/util.ts","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      }\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  input.infusion,\r\n  input.team.infusion,\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","// import Akuoumaru from './Akuoumaru'\r\n// import BlackcliffSlasher from './BlackcliffSlasher'\r\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\r\n// import DebateClub from './DebateClub'\r\n// import FavoniusGreatsword from './FavoniusGreatsword'\r\n// import FerrousShadow from './FerrousShadow'\r\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\r\n// import LithicBlade from './LithicBlade'\r\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\r\n// import OldMercsPal from './OldMercsPal'\r\n// import PrototypeArchaic from './PrototypeArchaic'\r\n// import Rainslasher from './Rainslasher'\r\n// import RedhornStonethresher from './RedhornStonethresher'\r\n// import RoyalGreatsword from './RoyalGreatsword'\r\n// import SacrificialGreatsword from './SacrificialGreatsword'\r\n// import SerpentSpine from './SerpentSpine'\r\n// import SkyriderGreatsword from './SkyriderGreatsword'\r\n// import SkywardPride from './SkywardPride'\r\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\r\n// import SongOfBrokenPines from './SongOfBrokenPines'\r\n// import TheBell from './TheBell'\r\n// import TheUnforged from './TheUnforged'\r\n// import WasterGreatsword from './WasterGreatsword'\r\n// import Whiteblind from './Whiteblind'\r\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\r\n// import WolfsGravestone from './WolfsGravestone'\r\nconst claymore = {\r\n  // Akuoumaru,\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  // DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  // KatsuragikiriNagamasa,\r\n  // LithicBlade,\r\n  // LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  // PrototypeArchaic,\r\n  // Rainslasher,\r\n  // RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  // SacrificialGreatsword,\r\n  // SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  // SkywardPride,\r\n  // SnowTombedStarsilver,\r\n  // SongOfBrokenPines,\r\n  // TheBell,\r\n  // TheUnforged,\r\n  // WasterGreatsword,\r\n  // Whiteblind,\r\n  // WhiteIronGreatsword,\r\n  // WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { MainStatKey, SubstatKey } from \"../../Types/artifact\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { sgt } from '../../../Characters/SheetUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst plunging_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\n\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: {\r\n        title: tr(`passiveName`),\r\n        icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? icon : iconAwaken} />,\r\n      },\r\n      description: data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`),\r\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import AmenomaKageuchi from './AmenomaKageuchi'\r\n// import AquilaFavonia from './AquilaFavonia'\r\n// import BlackcliffLongsword from './BlackcliffLongsword'\r\n// import CinnabarSpindle from './CinnabarSpindle'\r\n// import CoolSteel from './CoolSteel'\r\n// import DarkIronSword from './DarkIronSword'\r\nimport DullBlade from './DullBlade'\r\n// import FavoniusSword from './FavoniusSword'\r\n// import FesteringDesire from './FesteringDesire'\r\n// import FilletBlade from './FilletBlade'\r\nimport FreedomSworn from './FreedomSworn'\r\n// import HarbingerOfDawn from './HarbingerOfDawn'\r\n// import IronSting from './IronSting'\r\n// import LionsRoar from './LionsRoar'\r\n// import MistsplitterReforged from './MistsplitterReforged'\r\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\r\n// import PrototypeRancour from './PrototypeRancour'\r\n// import RoyalLongsword from './RoyalLongsword'\r\n// import SacrificialSword from './SacrificialSword'\r\n// import SilverSword from './SilverSword'\r\n// import SkyriderSword from './SkyriderSword'\r\n// import SkywardBlade from './SkywardBlade'\r\n// import SummitShaper from './SummitShaper'\r\n// import SwordOfDescension from './SwordOfDescension'\r\n// import TheAlleyFlash from './TheAlleyFlash'\r\n// import TheBlackSword from './TheBlackSword'\r\n// import TheFlute from './TheFlute'\r\n// import TravelersHandySword from './TravelersHandySword'\r\nconst sword = {\r\n  // AmenomaKageuchi,\r\n  // AquilaFavonia,\r\n  // BlackcliffLongsword,\r\n  // CinnabarSpindle,\r\n  // CoolSteel,\r\n  // DarkIronSword,\r\n  DullBlade,\r\n  // FavoniusSword,\r\n  // FesteringDesire,\r\n  // FilletBlade,\r\n  FreedomSworn,\r\n  // HarbingerOfDawn,\r\n  // IronSting,\r\n  // LionsRoar,\r\n  // MistsplitterReforged,\r\n  // PrimordialJadeCutter,\r\n  // PrototypeRancour,\r\n  // RoyalLongsword,\r\n  // SacrificialSword,\r\n  // SilverSword,\r\n  // SkyriderSword,\r\n  // SkywardBlade,\r\n  // SummitShaper,\r\n  // SwordOfDescension,\r\n  // TheAlleyFlash,\r\n  // TheBlackSword,\r\n  // TheFlute,\r\n  // TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: `Stack ${i}`,\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc)), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  hit\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: {\r\n        title: tr(`passiveName`),\r\n        icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? icon : iconAwaken} />,\r\n      },\r\n      description: data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`),\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\n// import Deathmatch from './Deathmatch'\r\n// import DragonsBane from './DragonsBane'\r\n// import DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\n// import FavoniusLance from './FavoniusLance'\r\n// import Halberd from './Halberd'\r\n// import IronPoint from './IronPoint'\r\n// import KitainCrossSpear from './KitainCrossSpear'\r\n// import LithicSpear from './LithicSpear'\r\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\n// import PrototypeStarglitter from './PrototypeStarglitter'\r\n// import RoyalSpear from './RoyalSpear'\r\n// import SkywardSpine from './SkywardSpine'\r\n// import StaffOfHoma from './StaffOfHoma'\r\n// import TheCatch from './TheCatch'\r\n// import VortexVanquisher from './VortexVanquisher'\r\n// import WavebreakersFin from './WavebreakersFin'\r\n// import WhiteTassel from './WhiteTassel'\r\nconst polearm = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  // Deathmatch,\r\n  // DragonsBane,\r\n  // DragonspineSpear,\r\n  EngulfingLightning,\r\n  // FavoniusLance,\r\n  // Halberd,\r\n  // IronPoint,\r\n  // KitainCrossSpear,\r\n  // LithicSpear,\r\n  // PrimordialJadeWingedSpear,\r\n  // PrototypeStarglitter,\r\n  // RoyalSpear,\r\n  // SkywardSpine,\r\n  // StaffOfHoma,\r\n  // TheCatch,\r\n  // VortexVanquisher,\r\n  // WavebreakersFin,\r\n  // WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","// import AlleyHunter from './AlleyHunter'\r\n// import AmosBow from './AmosBow'\r\n// import BlackcliffWarbow from './BlackcliffWarbow'\r\n// import CompoundBow from './CompoundBow'\r\n// import ElegyForTheEnd from './ElegyForTheEnd'\r\n// import FavoniusWarbow from './FavoniusWarbow'\r\n// import Hamayumi from './Hamayumi'\r\n// import HuntersBow from './HuntersBow'\r\n// import Messenger from './Messenger'\r\n// import MitternachtsWaltz from './MitternachtsWaltz'\r\n// import MouunsMoon from './MouunsMoon'\r\n// import PolarStar from './PolarStar'\r\n// import Predator from './Predator'\r\n// import PrototypeCrescent from './PrototypeCrescent'\r\n// import RavenBow from './RavenBow'\r\n// import RecurveBow from './RecurveBow'\r\n// import RoyalBow from './RoyalBow'\r\n// import Rust from './Rust'\r\n// import SacrificialBow from './SacrificialBow'\r\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\r\n// import SharpshootersOath from './SharpshootersOath'\r\n// import SkywardHarp from './SkywardHarp'\r\n// import Slingshot from './Slingshot'\r\n// import TheStringless from './TheStringless'\r\n// import TheViridescentHunt from './TheViridescentHunt'\r\n// import ThunderingPulse from './ThunderingPulse'\r\n// import WindblumeOde from './WindblumeOde'\r\nconst bow = {\r\n  // AlleyHunter,\r\n  // AmosBow,\r\n  // BlackcliffWarbow,\r\n  // CompoundBow,\r\n  // ElegyForTheEnd,\r\n  // FavoniusWarbow,\r\n  // Hamayumi,\r\n  // HuntersBow,\r\n  // Messenger,\r\n  // MitternachtsWaltz,\r\n  // MouunsMoon,\r\n  // PolarStar,\r\n  // Predator,\r\n  // PrototypeCrescent,\r\n  // RavenBow,\r\n  // RecurveBow,\r\n  // RoyalBow,\r\n  // Rust,\r\n  // SacrificialBow,\r\n  // SeasonedHuntersBow,\r\n  // SharpshootersOath,\r\n  // SkywardHarp,\r\n  // Slingshot,\r\n  // TheStringless,\r\n  // TheViridescentHunt,\r\n  // ThunderingPulse,\r\n  // WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { normal_dmgInc, heal_ }\r\n}, { normal_dmgInc })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\n\r\nconst skill_dmg_s = range(1, 3).map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\n\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: \"KaguraDance\",\r\n      states: {\r\n        1: {\r\n          name: \"1\",\r\n          fields: [{ node: skill_dmg_s[0] }]\r\n        },\r\n        2: {\r\n          name: \"2\",\r\n          fields: [{ node: skill_dmg_s[1] }]\r\n        },\r\n        3: {\r\n          name: \"3\",\r\n          fields: [{ node: skill_dmg_s[2], },\r\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import ApprenticesNotes from './ApprenticesNotes'\r\n// import BlackcliffAgate from './BlackcliffAgate'\r\n// import DodocoTales from './DodocoTales'\r\n// import EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\n// import EyeOfPerception from './EyeOfPerception'\r\n// import FavoniusCodex from './FavoniusCodex'\r\n// import Frostbearer from './Frostbearer'\r\n// import HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\n// import MagicGuide from './MagicGuide'\r\n// import MappaMare from './MappaMare'\r\n// import MemoryOfDust from './MemoryOfDust'\r\n// import OtherworldlyStory from './OtherworldlyStory'\r\n// import PocketGrimoire from './PocketGrimoire'\r\n// import PrototypeAmber from './PrototypeAmber'\r\n// import RoyalGrimoire from './RoyalGrimoire'\r\n// import SacrificialFragments from './SacrificialFragments'\r\n// import SkywardAtlas from './SkywardAtlas'\r\n// import SolarPearl from './SolarPearl'\r\n// import TheWidsith from './TheWidsith'\r\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\n// import TwinNephrite from './TwinNephrite'\r\n// import WineAndSong from './WineAndSong'\r\nconst catalyst = {\r\n  // ApprenticesNotes,\r\n  // BlackcliffAgate,\r\n  // DodocoTales,\r\n  // EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  // EyeOfPerception,\r\n  // FavoniusCodex,\r\n  // Frostbearer,\r\n  // HakushinRing,\r\n  KagurasVerity,\r\n  // LostPrayerToTheSacredWinds,\r\n  // MagicGuide,\r\n  // MappaMare,\r\n  // MemoryOfDust,\r\n  // OtherworldlyStory,\r\n  // PocketGrimoire,\r\n  // PrototypeAmber,\r\n  // RoyalGrimoire,\r\n  // SacrificialFragments,\r\n  // SkywardAtlas,\r\n  // SolarPearl,\r\n  // TheWidsith,\r\n  // ThrillingTalesOfDragonSlayers,\r\n  // TwinNephrite,\r\n  // WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","absorbableEle","charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","allSubstats","key","input","critRate_","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","undefined","dmgNode","lvlMultiplier","talentType","prod","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","special","allMainStatKeys","inferInfoMut","condReadNode","path","customStringRead","cond","subKey","trans","typeKey","weaponCurves","fromEntries","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","sheet","icon","iconAwaken","document","WeaponSheet","tr","autoSrc","condPassivePath","condPassive","atk_","equal","normal_dmg_","charged_dmg_","plunging_dmg_","dmg_","addProps","all_dmg_","fields","node","conditional","header","title","ImgIcon","size","sx","m","src","get","description","name","states","on","text","unit","DullBlade","FreedomSworn","opponentsDefeated","range","lookup","i","c","trm","condStackPath","condStack","dmg_Nodes","allElements","e","atkInc","matchFull","min","percent","enerRech_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","EngulfingLightning","normal_dmgInc","heal_","condPath","condNode","skill_dmg_s","toString","d","ele_dmg_s","skill_dmg_","EverlastingMoonglow","KagurasVerity","sword","claymore","polearm","bow","catalyst"],"sourceRoot":""}