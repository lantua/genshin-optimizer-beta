{"version":3,"sources":["Components/Card/CardLight.tsx","Components/Card/CardDark.tsx","Components/SqBadge.tsx","../node_modules/@mui/material/Link/linkClasses.js","../node_modules/@mui/material/Link/Link.js","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js","../node_modules/@mui/icons-material/esm/ArrowRightAlt.js","Data/Materials/Material.ts","PageDocumentation/DocumentationDisplay.tsx"],"names":["CardLight","styled","Card","backgroundColor","theme","palette","contentLight","main","CardDark","contentDark","SqBadge","name","slot","color","display","padding","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","verticalAlign","borderRadius","contrastText","getLinkUtilityClass","generateUtilityClass","linkClasses","generateUtilityClasses","_excluded","colorTransformations","primary","textPrimary","secondary","textSecondary","error","LinkRoot","Typography","overridesResolver","props","styles","ownerState","root","capitalize","underline","component","button","getPath","transformDeprecatedColors","_extends","textDecoration","textDecorationColor","alpha","undefined","position","WebkitTapHighlightColor","outline","border","margin","cursor","userSelect","MozAppearance","WebkitAppearance","borderStyle","focusVisible","Link","React","inProps","ref","useThemeProps","className","onBlur","onFocus","TypographyClasses","variant","other","_objectWithoutPropertiesLoose","useIsFocusVisible","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","setFocusVisible","handlerRef","useForkRef","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","event","current","getCardUtilityClass","CardRoot","Paper","overflow","raised","elevation","getCardContentUtilityClass","CardContentRoot","paddingBottom","CardContent","as","createSvgIcon","d","material","HomeDisplay","ReactGA","pageview","routeMatch","useRouteMatch","path","strict","sensitive","currentTab","params","slug","basename","sx","my","Grid","container","px","py","item","flexGrow","Divider","spacing","xs","md","height","Tabs","orientation","value","borderRight","borderColor","Tab","label","to","fallback","Skeleton","width","VersionHistoryPane","MaterialKeyPane","ArtifactSetKeyPane","WeaponKeyPane","CharacterKeyPane","StatKeyPane","KeyNamingPane","Overview","gutterBottom","CodeBlock","text","ArrowRightAlt","statKeysCode","map","k","KeyMap","get","join","t","useTranslation","Set","allArtifactSets","artSetKeysCode","sort","allCharacterKeys","charKeysCode","allWeaponKeys","weaponKeysCode","Object","keys","href","target","rel","Box","flexDirection","gap","LineNumber","digits","resize","fontFamily","CodeArea","overflowY","overflowX","info","light","lines","split","length","lineNums","Array","from","i","disabled","spellCheck","unselectable","toString"],"mappings":"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","file":"static/js/24.40d1189c.chunk.js","sourcesContent":["import { Card, styled } from \"@mui/material\";\n\nconst CardLight = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.palette.contentLight.main\n}));\n\nexport default CardLight","import { Card, styled } from \"@mui/material\";\n\nconst CardDark = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.palette.contentDark.main\n}));\n\nexport default CardDark","import { styled } from \"@mui/material\";\n\nconst SqBadge = styled(\"span\", {\n  name: 'SqBadge',\n  slot: 'Root',\n})(({ theme, color = \"primary\" }) => ({\n  display: \"inline-block\",\n  padding: \".25em .4em\",\n  fontSize: \"75%\",\n  fontWeight: 700,\n  lineHeight: 1,\n  textAlign: \"center\",\n  whiteSpace: \"nowrap\",\n  verticalAlign: \"baseline\",\n  borderRadius: \".25em\",\n  backgroundColor: theme.palette[color]?.main,\n  color: theme.palette[color]?.contrastText\n}))\nexport default SqBadge","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha, getPath } from '@mui/system';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\n\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\n\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const color = getPath(theme, `palette.${transformDeprecatedColors(ownerState.color)}`) || ownerState.color;\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && {\n    textDecoration: 'underline',\n    textDecorationColor: color !== 'inherit' ? alpha(color, 0.4) : undefined,\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }, ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n\n  const {\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'always',\n    variant = 'inherit'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n\n  const handleBlur = event => {\n    handleBlurVisible(event);\n\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  const handleFocus = event => {\n    handleFocusVisible(event);\n\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .any,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.01 11H4v2h12.01v3L20 12l-3.99-4z\"\n}), 'ArrowRightAlt');","import material_gen from './material_gen.json'\nconst material = material_gen\nexport default material","import { ArrowRightAlt } from \"@mui/icons-material\";\nimport { Box, CardContent, Divider, Grid, Link as MuiLink, Skeleton, styled, Tab, Tabs, Typography } from \"@mui/material\";\nimport React, { Suspense } from \"react\";\nimport ReactGA from 'react-ga';\nimport { useTranslation } from 'react-i18next';\nimport { HashRouter, Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport CardDark from \"../Components/Card/CardDark\";\nimport CardLight from \"../Components/Card/CardLight\";\nimport SqBadge from \"../Components/SqBadge\";\nimport material from \"../Data/Materials/Material\";\nimport KeyMap from \"../KeyMap\";\nimport { allArtifactSets, allCharacterKeys, allWeaponKeys } from \"../Types/consts\";\n\nexport default function HomeDisplay(props: any) {\n  // const { t } = useTranslation(\"documentation\")\n  ReactGA.pageview('/doc')\n\n  const routeMatch = useRouteMatch({\n    path: \"/doc/:slug\",\n    strict: true,\n    sensitive: true\n  });\n  const currentTab = (routeMatch?.params as any)?.slug ?? \"\"\n\n  return <HashRouter basename=\"/doc/\">\n    <CardDark sx={{ my: 1 }}>\n      <Grid container sx={{ px: 2, py: 1 }}>\n        <Grid item flexGrow={1}>\n          <Typography variant=\"h6\">\n            Documentation\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h6\">\n            <SqBadge color=\"info\">Version. 2</SqBadge>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Divider />\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={2}>\n            <CardLight sx={{ height: \"100%\" }}>\n              <Tabs\n                orientation=\"vertical\"\n                value={currentTab}\n                aria-label=\"Documentation Navigation\"\n                sx={{ borderRight: 1, borderColor: 'divider' }}\n              >\n                <Tab label=\"Overview\" value=\"\" component={Link} to=\"/\" />\n                <Tab label={\"Key naming convention\"} value=\"KeyNaming\" component={Link} to=\"/KeyNaming\" />\n                <Tab label={<code>StatKey</code>} value=\"StatKey\" component={Link} to=\"/StatKey\" />\n                <Tab label={<code>ArtifactSetKey</code>} value=\"ArtifactSetKey\" component={Link} to=\"/ArtifactSetKey\" />\n                <Tab label={<code>CharacterKey</code>} value=\"CharacterKey\" component={Link} to=\"/CharacterKey\" />\n                <Tab label={<code>WeaponKey</code>} value=\"WeaponKey\" component={Link} to=\"/WeaponKey\" />\n                <Tab label={<code>MaterialKey</code>} value=\"MaterialKey\" component={Link} to=\"/MaterialKey\" />\n                <Tab label={\"Version History\"} value=\"VersionHistory\" component={Link} to=\"/VersionHistory\" />\n              </Tabs>\n            </CardLight>\n          </Grid>\n          <Grid item xs={12} md={10}>\n            <CardLight sx={{ height: \"100%\" }}>\n              <CardContent>\n                <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\n                  <Switch>\n                    <Route path=\"/VersionHistory\" component={VersionHistoryPane} />\n                    <Route path=\"/MaterialKey\" component={MaterialKeyPane} />\n                    <Route path=\"/ArtifactSetKey\" component={ArtifactSetKeyPane} />\n                    <Route path=\"/WeaponKey\" component={WeaponKeyPane} />\n                    <Route path=\"/CharacterKey\" component={CharacterKeyPane} />\n                    <Route path=\"/StatKey\" component={StatKeyPane} />\n                    <Route path=\"/KeyNaming\" component={KeyNamingPane} />\n                    <Route path=\"/\" component={Overview} />\n                  </Switch>\n                </Suspense>\n              </CardContent>\n            </CardLight>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </CardDark>\n  </HashRouter >\n}\n\nconst goodCode = `interface IGOOD {\n  format: \"GOOD\" // A way for people to recognize this format.\n  version: number // GOOD API version.\n  source: string // The app that generates this data.\n  characters?: ICharacter[]\n  artifacts?: IArtifact[]\n  weapons?: IWeapon[]\n  materials?: { // Added in version 2\n    [key:MaterialKey]: number\n  }\n}`\n\nconst artifactCode = `interface IArtifact {\n  setKey: SetKey //e.g. \"GladiatorsFinale\"\n  slotKey: SlotKey //e.g. \"plume\"\n  level: number //0-20 inclusive\n  rarity: number //1-5 inclusive\n  mainStatKey: StatKey\n  location: CharacterKey|\"\" //where \"\" means not equipped.\n  lock: boolean //Whether the artifact is locked in game.\n  substats: ISubstat[]\n}\n\ninterface ISubstat {\n  key: StatKey //e.g. \"critDMG_\"\n  value: number //e.g. 19.4\n}\n\ntype SlotKey = \"flower\" | \"plume\" | \"sands\" | \"goblet\" | \"circlet\"`\n\nconst weaponCode = `interface IWeapon {\n  key: WeaponKey //\"CrescentPike\"\n  level: number //1-90 inclusive\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\n  refinement: number //1-5 inclusive\n  location: CharacterKey | \"\" //where \"\" means not equipped.\n  lock: boolean //Whether the weapon is locked in game.\n}`\nconst characterCode = `interface ICharacter {\n  key: CharacterKey //e.g. \"Rosaria\"\n  level: number //1-90 inclusive\n  constellation: number //0-6 inclusive\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\n  talent: { //does not include boost from constellations. 1-15 inclusive\n    auto: number\n    skill: number\n    burst: number\n  }\n}`\n\nfunction Overview() {\n  return <>\n    <Typography gutterBottom variant=\"h4\">Genshin Open Object Description (GOOD)</Typography>\n    <Typography gutterBottom><strong>GOOD</strong> is a data format description to map Genshin Data into a parsable JSON. This is intended to be a standardized format to allow Genshin developers/programmers to transfer data without needing manual conversion.</Typography>\n    <Typography gutterBottom>As of version 6.0.0, Genshin Optimizer's database export conforms to this format.</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={goodCode} />\n      </CardContent>\n    </CardDark>\n    <br />\n    <Typography gutterBottom variant=\"h4\">Artifact data representation</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={artifactCode} />\n      </CardContent>\n    </CardDark>\n    <br />\n    <Typography gutterBottom variant=\"h4\">Weapon data representation</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={weaponCode} />\n      </CardContent>\n    </CardDark>\n    <br />\n    <Typography gutterBottom variant=\"h4\">Character data representation</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={characterCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\nfunction KeyNamingPane() {\n  return <>\n    <CardDark>\n      <CardContent>\n        <Typography>Key Naming Convention</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Typography gutterBottom>The keys in the GOOD format, like Artifact sets, weapon keys, character keys, are all in <strong>PascalCase</strong>. This makes the name easy to derive from the in-game text, assuming no renames occur. If a rename is needed, then the standard will have to increment versions. (Last change was in 1.2 when the Prototype weapons were renamed)</Typography>\n        <Typography gutterBottom> To derive the PascalKey from a specific name, remove all symbols from the name, and Capitalize each word:</Typography>\n        <Typography><code>Gladiator's Finale</code> <ArrowRightAlt sx={{ verticalAlign: \"bottom\" }} /> <code>GladiatorsFinale</code></Typography>\n        <Typography><code>Spirit Locket of Boreas</code> <ArrowRightAlt sx={{ verticalAlign: \"bottom\" }} /> <code>SpiritLocketOfBoreas</code></Typography>\n        <Typography><code>\"The Catch\"</code> <ArrowRightAlt sx={{ verticalAlign: \"bottom\" }} /> <code>TheCatch</code></Typography>\n      </CardContent>\n    </CardDark>\n  </>\n}\n\nfunction StatKeyPane() {\n  // const { t } = useTranslation()\n  const statKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\n  const statKeysCode = `type StatKey\\n  = ${statKeys.map(k => `\"${k}\" //${KeyMap.get(k)}`).join(`\\n  | `)}`\n  return <>\n    <Typography gutterBottom variant=\"h4\">StatKey</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={statKeysCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\nfunction ArtifactSetKeyPane() {\n  const { t } = useTranslation([...new Set(allArtifactSets)].map(k => `artifact_${k}_gen`))\n  const artSetKeysCode = `type ArtifactSetKey\\n  = ${[...new Set(allArtifactSets)].sort().map(k => `\"${k}\" //${t(`artifact_${k}_gen:setName`)}`).join(`\\n  | `)}`\n  return <>\n    <Typography gutterBottom variant=\"h4\">ArtifactSetKey</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={artSetKeysCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\nfunction CharacterKeyPane() {\n  const { t } = useTranslation([...new Set(allCharacterKeys)].map(k => `char_${k}_gen`))\n  const charKeysCode = `type CharacterKey\\n  = ${[...new Set(allCharacterKeys)].sort().map(k => `\"${k}\" //${t(`char_${k}_gen:name`)}`).join(`\\n  | `)}`\n  return <>\n    <Typography gutterBottom variant=\"h4\">CharacterKey</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={charKeysCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\nfunction WeaponKeyPane() {\n  const { t } = useTranslation([...new Set(allWeaponKeys)].map(k => `weapon_${k}_gen`))\n  const weaponKeysCode = `type WeaponKey\\n  = ${[...new Set(allWeaponKeys)].sort().map(k => `\"${k}\" //${t(`weapon_${k}_gen:name`)}`).join(`\\n  | `)}`\n  return <>\n    <Typography gutterBottom variant=\"h4\">WeaponKey</Typography>\n    <CardDark>\n      <CardContent>\n        <CodeBlock text={weaponKeysCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\nfunction MaterialKeyPane() {\n  const { t } = useTranslation(\"material_gen\")\n  const weaponKeysCode = `type MaterialKey\\n  = ${Object.keys(material as any).sort().map(k => `\"${k}\" //${t(`${k}.name`)}`).join(`\\n  | `)}`\n  return <>\n    <Typography gutterBottom variant=\"h4\">MaterialKey</Typography>\n    <CardDark>\n      <CardContent>\n        <Typography gutterBottom>The material keys here are generated using the <MuiLink href=\"https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/MaterialExcelConfigData.json\" target=\"_blank\" rel=\"noreferrer\"><code>MaterialExcelConfigData.json</code></MuiLink> of the datamine. The item names are taken from the english translation, and then converted into <MuiLink component={Link} to=\"KeyNaming\"><code>PascalCase</code></MuiLink>.</Typography>\n        <CodeBlock text={weaponKeysCode} />\n      </CardContent>\n    </CardDark>\n  </>\n}\n\nfunction VersionHistoryPane() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n    <Typography gutterBottom variant=\"h4\">Version History</Typography>\n    <CardDark>\n      <CardContent>\n        <Typography>\n          Version 1\n        </Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Typography>Created general <code>IGOOD</code> format with character, weapon, artifact fields.</Typography>\n      </CardContent>\n    </CardDark>\n    <CardDark>\n      <CardContent>\n        <Typography>\n          Version 2\n        </Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Typography>Adds <code>materials</code> field to <code>IGOOD</code>. All other fields remain the same. V2 is backwards compatible with V1.</Typography>\n      </CardContent>\n    </CardDark>\n  </Box>\n}\n\ntype LineNumberProps = {\n  digits?: number;\n}\nconst LineNumber = styled(\"textarea\")<LineNumberProps>(({ theme, digits = 2 }) => ({\n  width: `${digits}em`, overflow: \"hidden\", userSelect: \"none\", color: theme.palette.text.secondary, resize: \"none\", border: \"none\", whiteSpace: \"pre\", fontFamily: \"monospace\", lineHeight: 1,\n  \"&:disabled\": {\n    backgroundColor: \"transparent\"\n  }\n}))\n\nconst CodeArea = styled(\"textarea\")(({ theme }) => ({\n  \"&:disabled\": {\n    backgroundColor: \"transparent\"\n  },\n  lineHeight: 1,\n  width: \"100%\",\n  overflowY: \"auto\",\n  overflowX: \"auto\",\n  fontFamily: \"monospace\",\n  border: \"none\",\n  // padding: 1em;\n  whiteSpace: \"pre\",\n  backgroundColor: \"transparent\",\n  resize: \"none\",\n  color: theme.palette.info.light\n}))\nfunction CodeBlock({ text }) {\n  const lines = text.split(/\\r\\n|\\r|\\n/).length + 1\n  const lineNums = Array.from(Array(lines).keys()).map(i => i + 1).join('\\n')\n\n  return <Box display=\"flex\" flexDirection=\"row\">\n    <LineNumber disabled={true} spellCheck=\"false\" aria-label='Code Sample' sx={{ height: `${lines + 1}em` }} value={lineNums} unselectable=\"on\" digits={lines.toString().length} />\n    <CodeArea sx={{ flexGrow: 1, height: `${lines + 1}em` }} disabled={true} spellCheck=\"false\" aria-label='Code Sample' value={text} />\n  </Box>\n}\n"],"sourceRoot":""}