{"version":3,"file":"static/js/673.54a49c72.chunk.js","mappings":"q+FAaMA,EAAoB,cAEpBC,EAAWC,EACjB,GAAkBC,EAAAA,EAAAA,IAAM,OAAQH,GAAhC,eAAOI,EAAP,KAAWC,EAAX,KAEMC,EAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,EAAAA,GAAAA,GACAA,EAAAA,GAAAA,GACAA,EAAAA,GAAAA,GACAA,EAAAA,GAAAA,KAGJC,QAAS,CACPC,OAAQF,EAAAA,GAAAA,GACRG,QAASH,EAAAA,GAAAA,GACTI,QAASJ,EAAAA,GAAAA,GACTK,KAAML,EAAAA,GAAAA,GAAAA,IAERM,SAAU,CACRC,IAAKP,EAAAA,GAAAA,GACLQ,IAAKR,EAAAA,GAAAA,GACLS,KAAMT,EAAAA,GAAAA,KAERU,GAAI,CACFC,SAAUX,EAAAA,GAAAA,IAAAA,IAEZY,MAAO,CACLL,IAAKP,EAAAA,GAAAA,GACLa,GAAIb,EAAAA,GAAAA,GACJW,SAAUX,EAAAA,GAAAA,GAAAA,GACVc,MAAOd,EAAAA,GAAAA,GAAAA,GACPe,GAAIf,EAAAA,GAAAA,GAAAA,IAENgB,MAAO,CACLC,OAAQjB,EAAAA,GAAAA,GAAAA,GACRkB,QAASlB,EAAAA,GAAAA,GACTmB,OAAQnB,EAAAA,GAAAA,GAAAA,GACRW,SAAUX,EAAAA,GAAAA,GAAAA,GACVe,GAAIf,EAAAA,GAAAA,GAAAA,GACJoB,KAAMpB,EAAAA,GAAAA,GAAAA,IAERqB,SAAU,CACRC,UAAW,EACXC,QAAS,IAEXC,SAAU,CACRC,KAAMzB,EAAAA,GAAAA,GAAAA,IAER0B,eAAgB,CACdD,KAAMzB,EAAAA,GAAAA,GACN2B,KAAM3B,EAAAA,GAAAA,GACNW,SAAUX,EAAAA,GAAAA,IAEZ4B,eAAgB,CACdC,iBAAkB7B,EAAAA,GAAAA,KAItB,GAAmC8B,EAAAA,EAAAA,IAAKvC,EAAK,SAA7C,eAAOwC,EAAP,KAAsBC,EAAtB,KACA,GAA6BF,EAAAA,EAAAA,IAAKvC,EAAK,YAAvC,eAAO0C,EAAP,KAAmBC,EAAnB,KACA,GAA6BJ,EAAAA,EAAAA,IAAKvC,EAAK,kBAAvC,eAAO4C,EAAP,KAAmBC,EAAnB,KAEMC,GAAcC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,EAASe,MAAMC,GAAI,CAAEtB,IAAK,QAAUiD,EAAAA,GAAAA,MAAAA,IACzFC,GAAeC,EAAAA,EAAAA,IAAMV,EAAW,MAAMM,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,EAASmB,MAAME,QAAS,CAAE3B,IAAK,SAAWiD,EAAAA,GAAAA,MAAAA,MACvHG,GAAkBD,EAAAA,EAAAA,IAAMV,EAAW,KAAMnC,EAASmB,MAAMC,OAAQ,CAAE1B,IAAK,YACvEqD,EAAkBC,OAAOC,YAAYC,EAAAA,GAAAA,KAAuB,SAAAC,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAgBN,EAAAA,EAAAA,IAAMV,EAAW,MAAOnC,EAASmB,MAAMG,aAC1H8B,GAAoBC,EAAAA,EAAAA,IAASlB,EAAW,KAAM,OAC9CmB,IAAcC,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGF,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,EAAS2B,SAASC,MAAOe,EAAAA,GAAAA,MAAAA,MAC5Ec,IAAeF,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGe,EAAAA,EAAAA,IAAOrB,EAAQW,OAAOC,aAAYU,EAAAA,EAAAA,IAAM,EAAG3D,EAASwB,SAASC,WAAWmC,KAAI,SAAAC,GAAC,MAAI,CAACA,GAAGC,EAAAA,EAAAA,IAAS9D,EAASwB,SAASE,QAAUmC,QAAO,EAAG,CAAEnE,IAAK,aAClLqE,IAAYlB,EAAAA,EAAAA,IAAMN,EAAQ,MAAMgB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,EAAS6B,eAAeC,OAC1FkC,IAAYnB,EAAAA,EAAAA,IAAMN,EAAQ,MAAMgB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,EAAS6B,eAAeD,OAC1FqC,IAAgBV,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,EAAS+B,eAAeC,kBAE1EkC,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,EAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPC,QAAQ+D,EAAAA,EAAAA,IAAQ,MAAOpE,EAASI,QAAQC,OAAQ,WAChDC,SAAS+D,EAAAA,EAAAA,KAAcC,EAAAA,EAAAA,KACrB7B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,UAAuB3C,EAASI,QAAQE,QAAS,CAAEZ,IAAK,MAAQiD,EAAAA,GAAAA,MAAAA,KAC/EW,IAAc,WAChB/C,SAAS8D,EAAAA,EAAAA,KAAcC,EAAAA,EAAAA,KACrB7B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,UAAuB3C,EAASI,QAAQG,QAAS,CAAEb,IAAK,MAAQiD,EAAAA,GAAAA,MAAAA,KAC/EW,IAAc,YAElB7C,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,EAASS,UAAUmD,KAAI,+BAAEY,EAAF,KAAQL,EAAR,WACjE,CAACK,GAAMJ,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,iBAC7BpD,MAAO,CACLL,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,EAASe,MAAML,IAAK,SACxCM,GAAIwB,GAENrB,MAAO,CACLE,QAASuB,IAIP6B,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,EAnGd,MAmG+B,UAAWC,EAAUuE,GAAa,CAC9FW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRC,OAAQ,CACNjD,KAAMiC,GACNnC,KAAMoC,KAGVe,QAAO,QACL/C,iBAAkBiC,GAClBe,IAAKpC,EACLlB,SAAS4C,EAAAA,EAAAA,IAAIxB,EAAiBW,KAC3BV,GAELkC,SAAU7B,IAGN8B,GAAyB,CAC7BV,KAAM1E,EAAG,QACTqF,QAASC,EACTC,SAAUC,EACVC,aAAcC,EACdC,UAAWC,EACXC,OAAQhG,EAASiG,KACjBC,WAAY,MACZC,cAAenG,EAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,EAAG,qBACtBmG,MAAOnG,EAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,EAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,EAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,EAAG,sBACT2G,OAAQzG,EAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,EAAV,iCAAsCmE,UAGpF,CACE2C,KAAM1G,EAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQE,QAAS,CAAEZ,IAAI,QAAD,OAAUA,EAAV,8BAC/C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQG,QAAS,CAAEb,IAAI,QAAD,OAAUA,EAAV,8BAC/C,CACD8G,KAAM1G,EAAG,sBACT+G,MAAO7G,EAASa,GAAGC,SACnBgG,KAAM,KACL,CACDH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQC,OAAQ,CAAEX,IAAI,QAAD,OAAUA,EAAV,8BAC9C,CACD8G,KAAM1G,EAAG,sBACT+G,MAAO7G,EAASI,QAAQI,QAEzB,CACDgG,KAAM1G,EAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKtDqB,MAAO,CACLyD,KAAM1E,EAAG,cACTuG,IAAKtF,EACLwF,SAAU,CAAC,CACTC,KAAM1G,EAAG,qBACT2G,OAAQ,CACN,CACEE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,EAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMC,GAAI,CAAEtB,IAAI,QAAD,OAAUA,EAAV,4BAAyCqH,QAAS,aAC1F,CACDP,KAAM1G,EAAG,uBACT+G,MAAO7G,EAASe,MAAMD,SACtBgG,KAAM,KACL,CACDN,KAAM1G,EAAG,uBACT+G,MAAO7G,EAASe,MAAMG,GACtB4F,KAAM,SAKd3F,MAAO,CACLqD,KAAM1E,EAAG,cACTuG,IAAKlF,EACLoF,SAAU,CAAC,CACTC,KAAM1G,EAAG,qBACT2G,OAAQ,CAAC,CACPD,KAAM1G,EAAG,uBACT+G,MAAO7G,EAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,EAAG,uBACT+G,MAAO7G,EAASmB,MAAMI,OAExByF,YAAa,CACXxC,KAAM1E,EAAG,cACT+G,MAAO1E,EACP8E,KAAM/E,EACNgF,OAAQ,CACNC,GAAI,CACFV,OAAO,CACL,CACED,MAAMY,EAAAA,EAAAA,IAAG,gBACTL,QAAS,OAEX,CACEJ,KAAM7D,IANJ,eAQDE,OAAOqE,OAAOtE,GAAiBa,KAAI,SAAA+C,GAAI,MAAK,CAAEA,KAAAA,OAR7C,CASJ,CACEA,MAAMC,EAAAA,EAAAA,IAAQhE,EAAc,CAAElD,IAAI,QAAD,OAAUA,EAAV,+BAEnC,CACE8G,KAAM1G,EAAG,uBACT+G,MAAO7G,EAASmB,MAAML,SACtBgG,KAAM,aAQpBtF,SAAU,CACRgD,KAAM1E,EAAG,iBACTuG,IAAK7E,EACL+E,SAAU,CAAC,CACTC,KAAM1G,EAAG,wBACTkH,YAAa,CACXxC,KAAMzE,EAAI,WACVuH,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOxE,EACP4E,KAAM7E,EACN8E,OAAQlE,OAAOC,aAAYU,EAAAA,EAAAA,IAAM,EAAG3D,EAASwB,SAASC,WAAWmC,KAAI,SAAAC,GAAC,MACpE,CAACA,EAAG,CACFW,MAAM4C,EAAAA,EAAAA,IAAG,YAAa,CAAEG,MAAO1D,IAC/B4C,OAAQ,CACN,CACEE,KAAMlD,eAOpB9B,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,EAAI6B,GACzC8F,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,EAAI2H,GACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,EAAI6H,GACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,EAAI+H,GACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,EAAIiI,EAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,eAAgB,CACd2C,KAAM1E,EAAG,uBACTuG,IAAK2B,EACLzB,SAAU,CAAC,CACTC,KAAM1G,EAAG,8BACTkH,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CsF,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,EAAIkI,GAChDG,YAAarI,EAAG,8BAChB0E,KAAMzE,EAAI,WACV+E,UAAU,EACV+B,MAAOtE,EACP0E,KAAM3E,EACN4E,OAAQ,CACNC,GAAI,CACFV,OAAQ,CACN,CACEE,KAAM5C,IACL,CACD4C,KAAM3C,IAER,CACEwC,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,EAAS6B,eAAef,SAC/BgG,KAAM,YAOpBuB,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,EAAIwI,EAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,EAAIyI,EAAI,CAAC,CAAE5B,KAAM1C,SAKxE,OAAmBuE,EAAAA,GAAetD,GAAOP,I,2tHC3SnChF,GAAWC,GAEXF,GAAoB,UACpBmG,GAAyB,OAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAChB3I,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPwI,KAAMzI,GAAAA,GAAoBsI,MAC1BI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BK,QAAS5I,GAAAA,GAAqBuI,MAC9BM,QAAS7I,GAAAA,GAAqBuI,MAC9BO,QAAS9I,GAAAA,GAAqBuI,MAC9BQ,QAAS/I,GAAAA,GAAqBuI,MAC9BS,UAAWhJ,GAAAA,GAAqBuI,MAChCU,SAAUjJ,GAAAA,GAAqBuI,MAAK,GACpCW,SAAUlJ,GAAAA,GAAqBuI,MAAK,GACpCY,SAAUnJ,GAAAA,GAAqBuI,MAAK,IAEtCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BY,OAAQpJ,GAAAA,GAAqBwI,MAC7Ba,UAAWrJ,GAAAA,GAAqBwI,MAChCc,SAAUtJ,GAAAA,GAAqBwI,MAC/B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtCnH,SAAU,CACRmI,OAAQ,IAEVhI,SAAU,CACRgI,OAAQ,IAEVjC,eAAgB,CACdkC,QAASzJ,GAAAA,GAAAA,IAEXyH,eAAgB,CACdiC,UAAW1J,GAAAA,GAAAA,GACX2J,OAAQ3J,GAAAA,GAAAA,IAEV0B,eAAgB,CACdnB,IAAKP,GAAAA,GAAAA,IAEP4B,eAAgB,CACdgI,SAAU5J,GAAAA,GAAAA,KAIR6J,IAAQzG,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,GAAS0H,eAAekC,SAElEK,IAAc3F,EAAAA,EAAAA,KAAI5B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAMsI,UAAWO,IACpF,IAAqC/H,EAAAA,EAAAA,IAAKvC,GAAK,UAA/C,iBAAOwK,GAAP,MAAuBC,GAAvB,MACMC,IAASvH,EAAAA,EAAAA,IAAM,SAAUsH,GAAY,GACrCE,IAAYxH,EAAAA,EAAAA,IAAMuH,GAAQ,GAC9B3H,EAAAA,EAAAA,IAAKwH,GAAatH,EAAAA,GAAAA,KAAAA,MAEd2H,IAAW/G,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACpCE,EAAAA,EAAAA,IAAMuH,GAAQ,EAAGpK,GAAS2B,SAASgI,SAE/BY,IAAkBhH,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GACrDe,EAAAA,EAAAA,IAAO8G,EAAAA,GAAAA,WACL,CAAE,OAAS1G,EAAAA,EAAAA,IAAS,GAAI,UAAYA,EAAAA,EAAAA,IAAS,GAAI,SAAWA,EAAAA,EAAAA,IAAS,KAAMA,EAAAA,EAAAA,IAAS,KAClF2G,IAAkB5H,EAAAA,EAAAA,IAAMuH,GAAQ,GACpCvH,EAAAA,EAAAA,IAAM0H,GAAiB,EAAGvK,GAAS+B,eAAegI,WAC9CW,IAAmBrH,EAAAA,EAAAA,IAAS+G,GAAQ,GACxC/G,EAAAA,EAAAA,IAASkH,GAAiB,EAAG1E,KAE/B,IAAuC5D,EAAAA,EAAAA,IAAKvC,GAAK,WAAjD,iBAAOiL,GAAP,MAAwBC,GAAxB,MACMC,IAAUtH,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC7CE,EAAAA,EAAAA,IAAM,UAAW+H,GAAa5K,GAAS4H,eAAekC,SAElD5F,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPwI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQwI,KAAM,YAE9CnI,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,SAC5CC,SAAS3E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMgI,QAAS,SAChDC,SAAS5E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMiI,QAAS,SAChDC,SAAS7E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMkI,QAAS,SAChDC,SAAS9E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMmI,QAAS,SAChDC,WAAW/E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMoI,UAAW,UAEtDhI,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCoK,OAAOC,EAAAA,EAAAA,IAAe,KAAM/K,GAASmB,MAAMoI,OAAQvJ,GAASmB,MAAMqI,UAAW,SAC7EwB,OAAQX,IAEV3C,eAAgB,CACduD,SAASxI,EAAAA,EAAAA,IAAKuH,GAAOrH,EAAAA,GAAAA,KAAAA,MAEvBd,eAAgB,CACdnB,KAAK+B,EAAAA,EAAAA,KAAK2B,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMiI,QAAS,SAAUhJ,GAAS6B,eAAenB,OAIjF+D,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,YAAalG,GAAUuE,GAAa,CAChGW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRC,OAAQ,CACNmG,UAAWT,GACXzF,IAAKqF,IAEPc,KAAM,CACJlG,SAAUyF,KAGd3F,OAAQ,CACNqG,UAAWP,MAKT3F,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAACyH,EAAYxH,GAAb,MAClC,CACC8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,UAEjF,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQwI,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,8BAC5C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CAEzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,sBAC3C,CACD8G,MAAM4B,EAAAA,EAAAA,IAAI,YACVtB,KAAM,IACND,MAAO,SAAAlC,GAAI,OAAI2G,GAAiB3G,EAAM3E,GAASe,MAAMqI,YACpD,CAEDzC,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMgI,QAAS,CAAErJ,IAAI,QAAD,OAAUA,GAAV,uBAC7C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMiI,QAAS,CAAEtJ,IAAI,QAAD,OAAUA,GAAV,uBAC7C,CACD8G,KAAMzG,GAAI,gBACV+G,KAAM,IACND,MAAO,SAAAlC,GAAI,OAAI2G,GAAiB3G,EAAM3E,GAASe,MAAMsI,YACpD,CAED1C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMkI,QAAS,CAAEvJ,IAAI,QAAD,OAAUA,GAAV,uBAC7C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMmI,QAAS,CAAExJ,IAAI,QAAD,OAAUA,GAAV,uBAC7C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMoI,UAAW,CAAEzJ,IAAI,QAAD,OAAUA,GAAV,qBAC/C,CACD8G,KAAMzG,GAAI,gBACV+G,KAAM,IACND,MAAO,SAAAlC,GAAI,OAAI2G,GAAiB3G,EAAM3E,GAASe,MAAMuI,cAEvDnI,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM2J,MAAO,CAAEpL,IAAI,QAAD,OAAUA,GAAV,4BAAyCqH,QAAS,aAC7F,CACDP,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,WACpB,CACF7C,MAAOsD,GACPlD,KAAMiD,GACN1F,KAAMzE,GAAI,cACV+E,UAAU,EACVoC,OAAQ,CACNkD,OAAQ,CACN3D,OAAQ,CAAC,CACPD,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAkC,IAA9BA,EAAK4G,IAAItB,IAAapD,OACrCC,KAAM,KACL,CACDH,MAAMC,EAAAA,EAAAA,IAAQyD,GAAW,CAAE3K,IAAI,6BAKvC8B,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,GAAU,CAAC,CAClDgF,MAAMY,EAAAA,EAAAA,IAAG,cACTP,MAAO7G,GAASwB,SAASmI,OACzB7C,KAAM,OAERnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,QAAU6J,EAAW,CAC5DlE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOsD,GACPlD,KAAMiD,GACN1F,KAAMzE,GAAI,cACVmH,OAAQ,CACNkD,OAAQ,CACN3D,OAAQ,CAAC,CACPD,MAAMY,EAAAA,EAAAA,IAAG,cACTP,MAAO7G,GAAS2B,SAASgI,OACzB7C,KAAM,UAKdW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,GAAI,CAAC,CACxDL,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDL,KAAMzG,GAAI,sBACV8G,MAAyC,IAAlC7G,GAAS0H,eAAekC,QAC/B9C,KAAM,KACL,CACDQ,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYwD,eAAeuD,QAAS,CAAEvL,IAAI,QAAD,OAAUA,GAAV,uBAEzDkI,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,QAAI2D,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAO+D,GACP3D,KAAM0D,GACNnG,KAAMzE,GAAI,WACVmH,OAAQ,CACN2D,QAAS,CACPpE,OAAQ,CAAC,CACPE,KAAMkE,SAKd/C,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,GAAI,CAAC,CACxDV,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYrC,eAAenB,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,eAErD2I,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClElE,QAASiD,GACT1D,MAAOsD,GACPlD,KAAMiD,GACN1F,KAAMzE,GAAI,cACV+E,UAAU,EACVoC,OAAQ,CACNkD,OAAQ,CACN3D,OAAQ,CAAC,CACPE,KAAM8D,IACL,CACDjE,MAAM,UAAC,KAAD,CAAWiF,MAAO5F,GAAlB,UAA+BuB,EAAAA,EAAAA,IAAG,4BAQtD,OAAmBoB,EAAAA,GAAetD,GAAOP,IAEzC,SAAS2G,GAAiB3G,EAAc+G,GACtC,IAAIC,EAAmB,EACnBC,EAAiBF,EAAU,IAQ/B,OAPI/G,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,IAC/B8E,EAAW,IAGI,KADjBA,GAAa,EAAIhH,EAAK4G,IAAIjB,IAAUzD,MAAQ,OAE1C+E,GAAU,OAAS,IAAiB,IAAXD,GAAkB,OAASD,EAAUC,GAEzDC,E,83HCnUHjM,GAAWC,GAEXF,GAAoB,OAC1B,IAAkBG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGkD,GAAK,EACxB7L,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACP0L,YAAa3L,GAAAA,GAAoBsI,MACjCsD,SAAU5L,GAAAA,GAAoBsI,MAC9BI,QAAS1I,GAAAA,GAAoBsI,MAAK,GAClC3H,SAAUX,GAAAA,GAAoBsI,MAAK,IAErChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BsD,KAAM7L,GAAAA,GAAqBuI,MAC3BuD,SAAU9L,GAAAA,GAAqBuI,MAC/BwD,WAAY/L,GAAAA,GAAqBuI,MACjCyD,WAAYhM,GAAAA,GAAqBuI,MACjC0D,eAAgBjM,GAAAA,GAAqBuI,MAAK,GAC1C2D,QAASlM,GAAAA,GAAqBuI,MAAK,GACnC4D,OAAQnM,GAAAA,GAAqBuI,MAAK,GAClC6D,SAAUpM,GAAAA,GAAqBuI,MAAK,GACpC8D,QAASrM,GAAAA,GAAqBuI,MAAK,GACnC+D,mBAAoBtM,GAAAA,GAAqBuI,MACzCgE,mBAAoBvM,GAAAA,GAAqBuI,MACzCiE,kBAAmBxM,GAAAA,GAAqBuI,MAAK,IAE/CvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BiE,aAAczM,GAAAA,GAAqBwI,MACnCkE,YAAa1M,GAAAA,GAAqBwI,MAClCmE,SAAU3M,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtCnH,SAAU,CACRuL,WAAY5M,GAAAA,GAAwB0L,MAAM,IAE5CnE,eAAgB,CACdsF,QAAS7M,GAAAA,GAAAA,IAEX0B,eAAgB,CACdoL,OAAQ9M,GAAAA,GAAAA,KAIZ,IAA2C8B,EAAAA,EAAAA,IAAKvC,GAAK,aAArD,iBAAOwN,GAAP,MAA0BC,GAA1B,MACA,IAAqDlL,EAAAA,EAAAA,IAAKvC,GAAK,kBAA/D,iBAAO0N,GAAP,MAA+BC,GAA/B,MACA,IAA6BpL,EAAAA,EAAAA,IAAKvC,GAAK,oBAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACA,IAAmDN,EAAAA,EAAAA,IAAKvC,GAAK,iBAA7D,iBAAO4N,GAAP,MAA8BC,GAA9B,MAEM3L,IAAO0C,EAAAA,EAAAA,KAAIzB,EAAAA,EAAAA,IAAM,SAAUsK,IAAe3J,EAAAA,EAAAA,IAAQxD,GAASe,MAAMwL,YAAY1J,EAAAA,EAAAA,IAAM,SAAUsK,IAAe3J,EAAAA,EAAAA,IAAQ,EAAIxD,GAASe,MAAMwL,YACvIiB,IAAiB3K,EAAAA,EAAAA,IAAM,WAAYsK,IAAezK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAM2L,qBACnGe,IAAqB5K,EAAAA,EAAAA,IAAM,WAAYsK,IAAezK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAM0L,qBACvGiB,IAAgB7K,EAAAA,EAAAA,IAAM,KAAM0K,IAAmB/J,EAAAA,EAAAA,IAAQxD,GAAS0H,eAAesF,UAE/EW,GAA6B,CACjC5I,OAAQ,CAAE6I,YAAY/K,EAAAA,EAAAA,IAAMN,GAAQ,MAAMuB,EAAAA,EAAAA,IAAS9D,GAAS6B,eAAeoL,UAC3EY,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS,cAGjBI,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACP0L,aAAa1H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQ0L,YAAa,WAC1DC,UAAU3H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQ2L,SAAU,YAEtDtL,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,SAC5CkD,MAAM5H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMiL,KAAM,SAC1CC,UAAU7H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMkL,SAAU,UAEpD9K,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCoN,mBAAmBzJ,EAAAA,EAAAA,KACjB5B,EAAAA,EAAAA,KACE6B,EAAAA,EAAAA,KACE5B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAMyL,aAAc,CAAElN,IAAK,OACtE+C,EAAAA,EAAAA,KACEiB,EAAAA,EAAAA,IAAO2J,IAAoBU,EAAAA,EAAAA,IAAapK,EAAAA,EAAAA,IAAM,EAAG,KAAK,SAAAE,GAAC,OAAIC,EAAAA,EAAAA,IAASD,OAAKC,EAAAA,EAAAA,IAAS,KAClFpB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAM0L,YAAa,CAAEnN,IAAK,QAGzEiD,EAAAA,GAAAA,MAAAA,KACC,QAASgL,KAEhBnM,SAAU,CACRwM,yBAAyBvL,EAAAA,EAAAA,KACvBe,EAAAA,EAAAA,IAAQxD,GAASwB,SAASuL,aAC1B3I,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMyL,aAAc,QAASe,OAIrDlJ,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAEpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAK,OAAQ,YAAaC,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETM,OAAQ,CACNnD,KAAAA,GACA4L,eAAAA,GACAC,mBAAAA,GACAC,cAAAA,MAIExI,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAY,OACZC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAClC,CACC8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,KAChFoK,WAAkB,IAANpK,GAA6B,IAANA,EAAb,WAAoC,QAE3D,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ0L,YAAa,CAAEpM,IAAI,QAAD,OAAUA,GAAV,8BACnD,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ2L,SAAU,CAAErM,IAAI,QAAD,OAAUA,GAAV,8BAChD,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,QACxB/B,KAAM,MACL,CACDN,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQU,SACxBgG,KAAM,OAEP,CACDN,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMsL,SACzBvF,KAAM,KACL,CACDH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMiL,KAAM,CAAEtM,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMuL,QACzBxF,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO,IAETG,YAAa,CACXH,MAAOsG,GACPlG,KAAMiG,GACN1I,KAAMzE,GAAI,eACVkI,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIiB,IACvCmG,OAAQ,CACN,OAAU,CACR1C,MAAM4C,EAAAA,EAAAA,IAAG,QAAS,CAAEG,MAAO,IAC3Bd,OAAQ,CAAC,CACPE,KAAM/E,IACL,CACD4E,KAAMzG,GAAI,yBACT,CACDyG,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAM4L,mBACzB7F,KAAM,OAGV,OAAU,CACRtC,MAAM4C,EAAAA,EAAAA,IAAG,QAAS,CAAEG,MAAO,IAC3Bd,OAAQ,CAAC,CACPE,KAAM/E,IACL,CACD4E,KAAMzG,GAAI,yBACT,CACDyG,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAM4L,mBACzB7F,KAAM,OAGV,SAAY,CACVtC,KAAM,WACNiC,OAAQ,CAAC,CACPE,KAAM6G,IACL,CACD7G,KAAM8G,IACL,CACDjH,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO,EACPC,KAAM,UAKb,CACDL,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMkL,SAAU,CAAEvM,IAAI,QAAD,OAAUA,GAAV,mCAIrDyB,MAAO,CACLqD,KAAM1E,GAAG,cACTuG,IAAKlF,GACLoF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM2M,kBAAmB,CAAEpO,IAAI,QAAD,OAAUA,GAAV,kBACvD,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMD,IACzB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMuI,WACxB,CACDlD,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO,EACPC,KAAM,MAERE,YAAa,CACXH,MAAOwG,GACPpG,KAAMmG,GACN5I,KAAMzE,GAAI,eACVkI,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIqB,IACvC+F,QAAO,WACF6G,EAAAA,EAAAA,IAAapK,EAAAA,EAAAA,IAAM,EAAG,KAAK,SAAAE,GAAC,MAAK,CAClCW,MAAM4C,EAAAA,EAAAA,IAAG,QAAS,CAAEG,MAAO1D,IAC3B4C,OAAQ,CAAC,CACPa,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDL,KAAMzG,GAAI,kBACT,CACDuH,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDL,KAAMzG,GAAI,6BAKjB,CACDiH,YAAa,CACXH,MAAOtE,GACP0E,KAAM3E,GACNkC,KAAMzE,GAAI,YACVkI,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAIkI,IAChDV,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CuE,OAAQ,CACNC,GAAI,QAKZ3F,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,GAAU,CAAC,CAClD8F,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAC9CF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY1C,SAASwM,wBAAyB,CAAEtO,IAAI,QAAD,OAAUA,GAAV,kBAEnEiC,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,IACzC8F,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,QAAI6D,EAAW,CAClE3E,MAAO0G,GACPtG,KAAMqG,GACN9I,KAAMzE,GAAI,YACVkI,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAI6H,IAChDL,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CuE,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM+G,IACL,CACDlH,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO9G,GAAI,2BAKnB6H,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAI3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,wpHC9UnChF,GAAWC,GAEXF,GAAoB,QACpBmG,GAAyB,OAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGkD,GAAK,EAAGqC,GAAK,EAChClO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACLoN,eAAgBhO,GAAAA,GAAqBuI,MAAK,GAC1CsC,OAAQ7K,GAAAA,GAAqBuI,MAC7BhI,IAAKP,GAAAA,GAAqBuI,MAC1B0F,qBAAsBjO,GAAAA,GAAqBuI,MAAK,GAChD5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCxH,GAAIf,GAAAA,GAAqBuI,MAAK,GAC9B2F,UAAWlO,GAAAA,GAAqBuI,MAAK,IAEvCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1B2F,SAAUnO,GAAAA,GAAqBwI,MAC/BmC,MAAO3K,GAAAA,GAAqBwI,MAC5B4F,WAAYpO,GAAAA,GAAqBwI,MACjCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,GACpC6F,MAAOrO,GAAAA,GAAqBwI,MAAK,IAEnCnH,SAAU,CACRiN,YAAatO,GAAAA,GAAwB0L,MAAM,GAC3C/K,SAAUX,GAAAA,GAAwB0L,MAAM,IAE1ClK,SAAU,CACR6M,MAAOrO,GAAAA,GAAwB+N,MAAM,GACrCQ,WAAYvO,GAAAA,GAAwB+N,MAAM,IAE5CtG,eAAgB,CACd+G,mBAAoBxO,GAAAA,GAAAA,IAEtB0B,eAAgB,CACd4M,YAAatO,GAAAA,GAAAA,GACbW,SAAUX,GAAAA,GAAAA,IAEZ4B,eAAgB,CACdyM,MAAOrO,GAAAA,GAAAA,GACPW,SAAUX,GAAAA,GAAAA,GACVyO,cAAezO,GAAAA,GAAAA,GACfsO,YAAatO,GAAAA,GAAAA,KAIjB,IAA2C8B,EAAAA,EAAAA,IAAKvC,GAAK,0BAArD,iBAAOmP,GAAP,MAA0BC,GAA1B,MACM9J,IAAMnC,EAAAA,EAAAA,IAAM,KAAMiM,IAAeC,EAAAA,EAAAA,KACrCtM,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAMiK,QAASrI,EAAAA,GAAAA,OAAAA,KAC/DF,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAASe,MAAMsN,WAAY1L,EAAAA,GAAAA,KAAAA,OACpCsC,IAAW5B,EAAAA,EAAAA,IAAS,KAAMyL,GAAejJ,IAE/C,IAA6B5D,EAAAA,EAAAA,IAAKvC,GAAK,aAAvC,iBAAOsP,GAAP,MAAmBC,GAAnB,MACMC,IAAiBrM,EAAAA,EAAAA,IAAM,KAAMoM,IAAQE,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAea,EAAAA,EAAAA,IAAQxD,GAASwB,SAASiN,aAAc,CAAE/O,IAAK,eACtI,IAA6BuC,EAAAA,EAAAA,IAAKvC,GAAK,iBAAvC,iBAAO0P,GAAP,MAAmBC,GAAnB,MACMnE,IAAYrI,EAAAA,EAAAA,IAAM,KAAMwM,IAAQ7L,EAAAA,EAAAA,IAAQxD,GAAS2B,SAAS+M,aAEhE,IAA6BzM,EAAAA,EAAAA,IAAKvC,GAAK,uBAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACM+M,IAAiBzM,EAAAA,EAAAA,IAAM,KAAMN,IAAQ4M,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAea,EAAAA,EAAAA,IAAQxD,GAAS6B,eAAe4M,aAAc,CAAE/O,IAAK,eAE5I,IAA6BuC,EAAAA,EAAAA,IAAKvC,GAAK,qBAAvC,iBAAO6P,GAAP,MAAmBC,GAAnB,MACMC,IAAY5M,EAAAA,EAAAA,IAAM,KAAM2M,IAAQjM,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGa,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAe0M,eAClGiB,GAAY1M,OAAOC,YAAYC,EAAAA,GAAAA,KAAuB,SAAAC,GAAG,MAAI,CAACA,GAAKN,EAAAA,EAAAA,IAAM,KAAM2M,IAAQjM,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGa,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAe6M,sBAEzJ1K,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLL,KAAKiP,EAAAA,EAAAA,IAAShN,EAAAA,GAAAA,cAAqB,GAAGyB,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,UACzEkP,OAAOrM,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGyB,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,QAAS,CAAEmN,IAAK,CAAEZ,QAAQxK,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,GAAgB3C,GAAS4H,eAAe+G,yBAErJxN,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxC4N,UAAUlK,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMmN,SAAU,SAClDxD,OAAO+E,EAAAA,EAAAA,KAAepN,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,IAAgBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAM2J,MAAO,CAAEpL,IAAK,QAC1G6O,YAAYsB,EAAAA,EAAAA,KAAepN,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,IAAgBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAMoN,WAAY,CAAE7O,IAAK,UAGlH+E,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAEpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,QAASlG,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETK,QAAO,gBACLmG,UAAAA,IACGlI,OAAOC,YAAYC,EAAAA,GAAAA,KAAuB,SAAAC,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBuM,GAAUvM,SAF1E,IAGJsM,UAAAA,KAEFK,MAAO,CACL9K,IAAAA,IAEFF,SAAU,CACRC,OAAQ,CACN0K,WAAWnL,EAAAA,EAAAA,IAAI4K,GAAgBI,MAGnCrK,SAAAA,KAGIC,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAClC,CACC8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,GAAKA,EAAI,EAAI,GAAK,MAClGoK,WAAkB,IAANpK,EAAU,MAAc,IAANA,EAAU,MAAQ,QAEjD,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM6O,MAAO,CAAElQ,IAAI,QAAD,OAAUA,GAAV,oCAC3C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMqN,qBACtBtH,KAAM,MACJ,CACFD,MAAOiI,GACP7H,KAAM4H,GACNrK,KAAMzE,GAAI,kBACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPD,KAAM1G,GAAG,uBACT+G,MAAuC,IAAhC7G,GAASe,MAAMoN,eACtBrH,KAAM,gBACL,CACDH,KAAM3B,IACL,CACDwB,MAAM,UAAC,KAAD,CAAWiF,MAAM,OAAjB,4BACL,CACDjF,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMD,SACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,UAKd3F,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMmN,SAAU,CAAE5O,IAAI,QAAD,OAAUA,GAAV,+BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM2J,MAAO,CAAEpL,IAAI,QAAD,OAAUA,GAAV,4BAAyCqH,QAAS,aAC7F,CACDJ,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMoN,WAAY,CAAE7O,IAAI,QAAD,OAAUA,GAAV,4BAAyCqH,QAAS,aAClG,CACDP,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,UACrB,CACDpC,QAAS,SAAC3C,GAAD,OAAUA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,MAAQ,GACzDL,KAAMzG,GAAI,uCAEZyB,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,QAAUgK,EAAW,CAC5D3E,MAAOoI,GACPhI,KAAM+H,GACNlK,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGwM,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,IAC7E6B,KAAMzE,GAAI,gBACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAMuI,IACL,CACD1I,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASwB,SAASV,SACzBgG,KAAM,UAKdnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,QAAU6J,EAAW,CAC5D3E,MAAOwI,GACPpI,KAAMmI,GACN9H,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjC6B,KAAMzE,GAAI,qBACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAMuE,SAKdzD,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAClE3E,MAAOtE,GACP0E,KAAM3E,GACNwC,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGwM,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,IACvF6B,KAAMzE,GAAI,2BACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM2I,IACL,CACD9I,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS6B,eAAef,SAC/BgG,KAAM,UAKduB,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClE3E,MAAO2I,GACPvI,KAAMsI,GACNjI,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,2BACVmH,OAAQ,CACNC,GAAI,CACFV,OAAO,GAAD,eACDvD,EAAAA,GAAAA,KAAuB,SAAAC,GAAG,MAAK,CAAEwD,KAAM+I,GAAUvM,QADhD,CAC0D,CAC5DwD,KAAM8I,IACL,CACDjJ,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS+B,eAAejB,SAC/BgG,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,MACVvB,MAAO,GACPC,KAAM,cAQtB,OAAmB0B,EAAAA,GAAetD,GAAOP,I,+oGCnTnChF,GAAWC,GAEXF,GAAoB,kBACpBmG,GAAyB,QAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGkD,GAAK,EAAGqC,GAAK,EAChClO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPwI,KAAMzI,GAAAA,GAAoBsI,MAC1BsH,KAAM5P,GAAAA,GAAoBsI,MAC1BI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BxH,GAAIf,GAAAA,GAAqBuI,MAAK,GAC9BsD,KAAM7L,GAAAA,GAAqBuI,MAC3BsH,OAAQ7P,GAAAA,GAAqBuI,MAAK,IAEpCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BsH,IAAK9P,GAAAA,GAAqBwI,MAC1BuH,IAAK/P,GAAAA,GAAqBwI,MAC1B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtCnH,SAAU,CACR2O,SAAUhQ,GAAAA,GAAwB0L,MAAM,IAE1ClK,SAAU,CACRyO,YAAajQ,GAAAA,GAAwB+N,MAAM,GAC3CpN,SAAUX,GAAAA,GAAwB+N,MAAM,IAE1CtG,eAAgB,CACdyI,OAAQlQ,GAAAA,GAAAA,IAEV4B,eAAgB,CACduO,MAAOnQ,GAAAA,GAAAA,GACPW,SAAUX,GAAAA,GAAAA,KAId,IAAuD8B,EAAAA,EAAAA,IAAKvC,GAAK,mBAAjE,iBAAO6Q,GAAP,MAAgCC,GAAhC,MAEA,IAAuDvO,EAAAA,EAAAA,IAAKvC,GAAK,mBAAjE,iBAAO+Q,GAAP,MAAgCC,GAAhC,MAEMC,GAAiB3N,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAC,GAAC,MAAI,CAACA,EAAG,CAACnR,GAAD,eAAcmR,SAC7EC,GAAa9N,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAC,GAAC,MAAI,CAACA,GAAGE,EAAAA,EAAAA,IAAaJ,GAAeE,SACvFG,GAAOhO,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAzN,GAAG,MACnD,CAAC,GAAD,OAAIA,EAAJ,UAAgBI,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACnCE,EAAAA,EAAAA,IAAM,QAASiO,GAAW3N,IAExBV,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASyO,aAAczN,EAAAA,GAAAA,OAAAA,eAInD,IAA6BV,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAOuR,GAAP,MAAmBC,GAAnB,MACMC,IAAW5N,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC9CE,EAAAA,EAAAA,IAAM,KAAMqO,GAAQlR,GAAS4H,eAAeyI,SAE9C,IAA+BpO,EAAAA,EAAAA,IAAKvC,GAAK,OAAzC,iBAAO0R,GAAP,MAAoBC,GAApB,MACMC,IAAY/N,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC/CE,EAAAA,EAAAA,IAAM,MAAOwO,IACXlC,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgB9K,GAAKM,GAAS4H,eAAeyI,UAEzD,IAA6BpO,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO6P,GAAP,MAAmBC,GAAnB,MACM+B,IAAaC,EAAAA,EAAAA,IAAa7O,EAAAA,GAAAA,cAAqB,GACnDU,EAAAA,EAAAA,IAAS,KAAMmM,GAAQ,UACnBiC,IAASlO,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC5CE,EAAAA,EAAAA,IAAM,KAAM2M,IAAQ/M,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAeuO,OAAQ3N,EAAAA,GAAAA,OAAAA,UAG7D+O,IAAU,UAAQD,IAClBE,IAAa,UAAQF,IACrBG,IAAc,UAAQH,IAEtBI,IAAUrO,EAAAA,EAAAA,IAAQ,IAElBU,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPwI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQwI,KAAM,WAC5CmH,MAAM3L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQ2P,KAAM,YAE9CtP,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,SAC5CkD,MAAM5H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMiL,KAAM,SAC1C8F,MAAM1N,EAAAA,EAAAA,IAAQ,MAAOpE,GAASS,SAASC,IAAK,WAAY,CAAEmN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS,YAC/EiO,MAAM3N,EAAAA,EAAAA,IAAQ,MAAOpE,GAASS,SAASE,IAAK,WAAY,CAAEkN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS,YAC/EkO,OAAO5N,EAAAA,EAAAA,IAAQ,MAAOpE,GAASS,SAASG,KAAM,WAAY,CAAEiN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS,aAEnF3C,OAAM,QACJT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCuP,KAAK7L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM8O,IAAK,UACrCjN,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAlR,GAAG,MACzC,CAACA,GAAKmD,EAAAA,EAAAA,IAAM2N,GAAqB9Q,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM+O,IAAK,QAAS,CAAErC,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAASpE,aAE7G8B,SAAUwB,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAlR,GAAG,MAChD,CAACA,GAAKmD,EAAAA,EAAAA,IAAM6N,GAAqBhR,GAAK2E,EAAAA,EAAAA,KAAc5B,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,IAAiB3C,GAASwB,SAAS2O,UAAW,WAAY,CAAEtC,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAASpE,YAC5IqC,eAAgB,CACdkQ,YAAaP,GACbQ,aAAcP,GACdQ,cAAeP,KAGbnN,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAK,QAAS,UAAWC,GAAUuE,GAAa,CAC3FW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRC,QAAO,kBACFiM,IADC,IAEJoB,kBAAmBP,KAErB/B,MAAO,CACLuC,OAAQf,KAGZrM,SAAUsM,GACVxM,OAAQ,CACNkN,YAAaP,GACbQ,aAAcP,GACdQ,cAAeP,IAEjB9B,MAAO,CACLuC,OAAQlB,MAINjM,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,GAAKA,EAAI,EAAI,GAAK,MAClGoK,WAAkB,IAANpK,EAAU,MAAc,IAANA,EAAU,MAAc,IAANA,GAAUuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAExF,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQwI,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,6BAC7CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ2P,KAAM,CAAErQ,IAAI,QAAD,OAAUA,GAAV,6BAC7CuO,WAAY,OACX,CACDzH,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,UACR7G,GAASe,MAAMG,GADP,oBACqB,GAAAlB,GAASe,MAAMG,IADpC,UAERlB,GAASe,MAAMG,KACtB4F,KAAM,KACL,CACDH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMiL,KAAM,CAAEtM,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,UACR7G,GAASe,MAAMG,GADP,oBACqB,GAAAlB,GAASe,MAAMG,IADpC,UAERlB,GAASe,MAAMiP,SACtBlJ,KAAM,KACL,CACDQ,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDL,KAAMzG,GAAI,SAEX,CACD0G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+Q,KAAM,CAAEpS,IAAK,4BAC5C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMgR,KAAM,CAAErS,IAAK,4BAC5C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMiR,MAAO,CAAEtS,IAAK,iCAIpDyB,MAAO,CACLqD,KAAM1E,GAAG,cACTuG,IAAKlF,GACLoF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM8O,IAAK,CAAEvQ,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,YAEvB,CACD1C,YAAa,CACXH,MAAO2J,GACPvJ,KAAMsJ,GACN/L,MAAM4C,EAAAA,EAAAA,IAAG,YACTa,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIqB,IACvC+F,OAAQlE,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAI,CAACA,EAAQ,CAC9D9N,MAAM,UAAC,KAAD,CAAWiH,MAAO6G,EAAlB,UAA2BlK,EAAAA,EAAAA,IAAI,WAAD,OAAYkK,MAChD7L,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMmR,GAAS,CAAE5S,IAAI,QAAD,OAAUA,GAAV,wCAInD,CACDsH,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAOqK,GACPjK,KAAMgK,GACNzM,KAAMzE,GAAI,MACVkI,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAI+H,IAChDX,OAAQ,CACNW,GAAI,CACFpB,OAAQ,CAAC,CACPE,KAAMwK,SAKb,CACDnK,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGwM,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgB9K,GAAK,IACxEmH,MAAOwK,GACPpK,KAAMmK,GACNtM,UAAU,EACVqD,YAAarI,GAAG,8BAChB0E,KAAMzE,GAAI,OACVkI,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAI+H,IAChDX,OAAQ,CACNqL,IAAK,CACH9L,OAAQ,CAAC,CACPE,KAAM2K,WAOlB9P,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,QAAUgK,EAAW,CAE5D3E,MAAO6J,GACPzJ,KAAMwJ,GACNjM,MAAM4C,EAAAA,EAAAA,IAAG,YACTE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCuE,OAAQlE,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAI,CAACA,EAAQ,CAC9D9N,MAAM,UAAC,KAAD,CAAWiH,MAAO6G,EAAlB,UAA2BlK,EAAAA,EAAAA,IAAI,WAAD,OAAYkK,MAChD7L,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY1C,SAAS8Q,GAAS,CAAE5S,IAAI,kCAIxDiC,SAAU,CACR6C,KAAM1E,GAAG,iBACTuG,IAAK1E,GACL4E,SAAS,CAAE,CACTC,KAAM1G,GAAG,0BADH,eAEF8Q,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAK,CACjCtL,YAAa,CACXH,MAAOiK,GAAWwB,GAClBrL,KAAM0J,GAAe2B,GACrBxN,UAAU,EAEVqD,YAAwB,UAAXmK,EAAqBxS,GAAG,wBAAyB,GAC9D0E,KAAMzE,GAAI,WAAD,OAAYuS,IACrBrK,QAAQC,EAAAA,EAAAA,IAAkB,WAAYpI,GAAI6B,IAC1C2F,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCuE,OAAQ,CACNsL,MAAO,CACL/L,OAAQ,CAAC,CACPE,KAAMqK,GAAK,GAAD,OAAIsB,EAAJ,WACT,CACD9L,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS2B,SAASb,SACzBgG,KAAM,gBAOlBW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,GAAU,CAAC,CAGlDd,KAAMkL,MAERnK,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAElElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAO2I,GACPvI,KAAMsI,GACN/K,KAAMzE,GAAI,YACVmH,OAAQ,CACNqB,GAAI,CACF9B,OAAQ,CAIN,CACEa,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAIgG,IAAY1K,QAAUhB,IAChDW,MAAM,UAAC,KAAD,CAAWiF,MAAO5F,GAAlB,UAA+BuB,EAAAA,EAAAA,IAAG,qBACvC,CACDT,KAAM+K,IACL,CACD/K,KAAMgL,IACL,CACDhL,KAAMiL,IACL,CACDpL,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS+B,eAAejB,SAC/BgG,KAAM,aAQtB,OAAmB0B,EAAAA,GAAetD,GAAOP,I,0+FChYnChF,GAAWC,GAEXF,GAAoB,gBACpBmG,GAAyB,OAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG8J,GAAK,EAAG5G,GAAK,EAAGqC,GAAK,EACxClO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPwI,KAAMzI,GAAAA,GAAoBsI,MAC1BI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BsH,IAAK9P,GAAAA,GAAqBwI,MAC1B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtC+J,OAAQ,CACNC,YAAaxS,GAAAA,GAAsBsS,MAAM,GACzCG,WAAYzS,GAAAA,GAAsBsS,MAAM,GACxC3R,SAAUX,GAAAA,GAAsBsS,MAAM,IAExCjR,SAAU,CACRqR,UAAW1S,GAAAA,GAAwB0L,MAAM,GACzC/K,SAAUX,GAAAA,GAAwB0L,MAAM,IAE1ClK,SAAU,CACRkH,QAAS1I,GAAAA,GAAwB+N,MAAM,GACvC4E,KAAM3S,GAAAA,GAAwB+N,MAAM,GACpCpN,SAAUX,GAAAA,GAAwB+N,MAAM,IAE1CtG,eAAgB,CACdmL,UAAW5S,GAAAA,GAAAA,IAEb0B,eAAgB,CACdmR,QAAS7S,GAAAA,GAAAA,GACTW,SAAUX,GAAAA,GAAAA,IAEZ4B,eAAgB,CACdb,GAAIf,GAAAA,GAAAA,GACJ8S,cAAe9S,GAAAA,GAAAA,KAInB,IAA+C8B,EAAAA,EAAAA,IAAKvC,GAAK,eAAzD,iBAAOwT,GAAP,MAA4BC,GAA5B,MACMC,IAAsB/P,EAAAA,EAAAA,IAAS,cAAe8P,GAAiBtN,IAErE,IAAiD5D,EAAAA,EAAAA,IAAKvC,GAAK,gBAA3D,iBAAO2T,GAAP,MAA6BC,GAA7B,MACMC,IAAa1Q,EAAAA,EAAAA,IAAM,aAAcyQ,IAAkB9P,EAAAA,EAAAA,IAAQxD,GAASwB,SAASqR,YAC7EW,IAAgB3Q,EAAAA,EAAAA,IAAM,aAAcyQ,IAAkB9P,EAAAA,EAAAA,IAAQxD,GAASwB,SAASqR,WAAY,CAAEnT,IAAK,iBAEzG,IAAyDuC,EAAAA,EAAAA,IAAKvC,GAAK,oBAAnE,iBAAO+T,GAAP,MAAiCC,GAAjC,MACMC,IAAuB9Q,EAAAA,EAAAA,IAAM,mBAAoB6Q,IAAsBlQ,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASmR,OAEvG,IAA6C7Q,EAAAA,EAAAA,IAAKvC,GAAK,cAAvD,iBAAOkU,GAAP,MAA2BC,GAA3B,MACMC,IAAavQ,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAChDE,EAAAA,EAAAA,IAAM,KAAMgR,GAAgB7T,GAAS6B,eAAemR,UAEtD,IAA6B/Q,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO6P,GAAP,MAAmBC,GAAnB,MACMmC,IAAgBpO,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GACnDE,EAAAA,EAAAA,IAAM,KAAM2M,GAAQxP,GAAS+B,eAAekR,eAAgB,CAAEvT,IAAI,iBAE9DwE,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPwI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQwI,KAAM,YAE9CnI,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,UAE9C3H,MAAO,CACL4S,SAAS3P,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SAC5CsT,OAAO5P,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM8O,IAAK,UAE5CrI,eAAgB,CACdlH,KAAK2D,EAAAA,EAAAA,KAAc5B,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,IAAiB3C,GAAS4H,eAAemL,WAAY,QAAS,CAAElF,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,SAG3GpB,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,UAAWlG,GAAUuE,GAAa,CAC9FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETK,SAAU,CACRC,OAAQ,CACNkP,aAAcH,KAGlB7O,SAAUmO,GACVrO,OAAQ,CACNkN,YAAasB,GACbrB,cAAc5N,EAAAA,EAAAA,IAAIkP,GAAe7B,IACjCuC,UAAWP,MAITzO,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,KAChFoK,WAAkB,IAANpK,GAAUuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAEpD,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQwI,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,6BAC7CuO,YAAY7G,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,KACjC,CACDf,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,OAER3F,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM4S,QAAS,CAAErU,IAAI,QAAD,OAAUA,GAAV,+BAC7C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM6S,MAAO,CAAEtU,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACD8G,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,MACVvB,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,cACVvB,MAAO7G,GAASmB,MAAMuI,YAExBgJ,QAAQlL,EAAAA,EAAAA,IAAe,SAAU1H,GAAI4S,GAAQ,CAAC,CAC5ClM,KAAM,iCACNK,MAAO7G,GAAS0S,OAAOC,aACtB,CACDnM,KAAM,gBACNK,MAAO7G,GAAS0S,OAAOE,WACvB9L,KAAM,OACJ,CACFD,MAAOsM,GACPlM,KAAMiM,GACN1O,KAAMzE,GAAI,eACVmH,OAAQ,CACNiN,YAAa,CACX1N,OAAQ,CAAC,CACPa,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI6H,IAAqBvM,QAAUhB,IACzDW,MAAM,UAAC,KAAD,CAAWiF,MAAM,OAAjB,4BACL,CACDjF,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS0S,OAAO5R,SACvBgG,KAAM,UAKdtF,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,QAAUgK,EAAW,CAE5DlE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOyM,GACPrM,KAAMoM,GACN7O,KAAMzE,GAAI,cACVmH,OAAQ,CACNkN,WAAY,CACV3N,OAAQ,CAAC,CACPE,KAAM4M,IACL,CACD5M,KAAM6M,IACL,CACDhN,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASwB,SAASV,SACzBgG,KAAM,UAKdnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,QAAU6J,EAAW,CAE5DlE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAO6M,GACPzM,KAAMwM,GACNjP,KAAMzE,GAAI,mBACVmH,OAAQ,CACNmN,iBAAkB,CAChB5N,OAAQ,CAAC,CACPD,KAAMzG,GAAI,kBACV8G,MAAO7G,GAAS2B,SAASkH,SACxB,CACDlC,KAAMgN,IACL,CACDnN,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS2B,SAASb,SACzBgG,KAAM,UAKdW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,GAAI,CAAC,CACxDP,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDL,KAAMzG,GAAI,gBACV8G,MAAO7G,GAAS4H,eAAemL,UAC/BpM,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY0D,eAAelH,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,sBAErDoI,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAElE1G,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAOgN,GACP5M,KAAM2M,GACNpP,KAAMzE,GAAI,kBACVmH,OAAQ,CACNc,GAAI,CACFvB,OAAQ,CAAC,CACPE,KAAMmN,IACL,CACDtN,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO,WAKfwB,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAO2I,GACPvI,KAAMsI,GACN/K,KAAMzE,GAAI,cACVmH,OAAQ,CACNqB,GAAI,CACF9B,OAAQ,CAAC,CACPD,MAAM4B,EAAAA,EAAAA,IAAI,MACVvB,MAAO7G,GAAS+B,eAAeb,GAC/B4F,KAAM,KACL,CACDH,KAAMgL,YASpB,OAAmBnJ,EAAAA,GAAetD,GAAOP,I,64FC9SnChF,GAAWC,GAEXF,GAAoB,YAC1B,IAAkBG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGuF,GAAK,EACxBlO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPkU,MAAOnU,GAAAA,GAAoBsI,MAC3B8L,WAAYpU,GAAAA,GAAoBsI,OAElChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACLL,IAAKP,GAAAA,GAAqBuI,MAC1Be,SAAUtJ,GAAAA,GAAqBuI,MAC/B5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLqT,gBAAiBrU,GAAAA,GAAqBwI,MACtC8L,gBAAiBtU,GAAAA,GAAqBwI,MACtCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtChH,SAAU,CACR+S,UAAWvU,GAAAA,GAAwB+N,MAAM,GACzCyG,GAAIxU,GAAAA,GAAwB+N,MAAM,IAEpCtG,eAAgB,CACdgN,eAAgBzU,GAAAA,GAAAA,IAElB4B,eAAgB,CACdiJ,OAAQ7K,GAAAA,GAAAA,KAIZ,IAAyD8B,EAAAA,EAAAA,IAAKvC,GAAK,qBAAnE,iBAAOmV,GAAP,MAAiCC,GAAjC,MACMC,IAAoBlS,EAAAA,EAAAA,IAAM2H,EAAAA,GAAAA,cAAsBA,EAAAA,GAAAA,SAAgB3H,EAAAA,EAAAA,IAAM,oBAAqBiS,IAC/FrS,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,KAAAA,KAAgBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAM0I,SAAS7F,KAAI,SAAAoR,GAAC,OAAIA,KAAI,CAAEtV,IAAK,SAErG,IAA6BuC,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO6P,GAAP,MAAmBC,GAAnB,MACMyF,IAAoBpS,EAAAA,EAAAA,IAAM,KAAM2M,IAAQhM,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAeiJ,SAExE9G,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPkU,OAAOlQ,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQkU,MAAO,WAC9CC,YAAYnQ,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQmU,WAAY,UAAW,CAAE1G,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS,eAE5FrD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLL,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,SACxCqU,kBAAAA,IAEF5T,MAAO,CACL+T,cAAc9Q,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMqT,gBAAiB,SAC7DW,cAAc/Q,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMsT,gBAAiB,UAE/D7M,eAAgB,CACdlH,KAAK6C,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGF,EAAAA,EAAAA,KAAK2B,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,UAAU8C,EAAAA,EAAAA,IAAQxD,GAAS4H,eAAegN,oBAGvHnQ,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAEpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAK,UAAW,UAAWC,GAAUuE,GAAa,CAC7FW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRC,OAAQ,CACNqQ,iBAAkBH,IAEpBnF,MAAO,CACL9K,IAAK+P,OAKL7P,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAY,UACZC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAClC,CACC8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,UAEjF,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQkU,MAAO,CAAE5U,IAAI,QAAD,OAAUA,GAAV,8BAC7C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQmU,WAAY,CAAE7U,IAAI,QAAD,OAAUA,GAAV,gCAEpD,CACD8G,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMD,SAApB,MACJ,CACD0F,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMG,GAApB,OACH,CACF2F,MAAOiO,GACP7N,KAAM4N,GACNrQ,KAAMzE,GAAI,gBACV+E,UAAU,EACVoC,OAAQ,CACNmO,kBAAmB,CACjB5O,OAAQ,CAAC,CACPE,KAAMoO,SAKd5T,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM+T,aAAc,CAAExV,IAAI,QAAD,OAAUA,GAAV,+BAClD,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMgU,aAAc,CAAEzV,IAAI,QAAD,OAAUA,GAAV,+BAClD,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMD,GAApB,MACJ,CACDsF,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMuI,aAE3BlI,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAClD2F,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAC9CL,KAAMzG,GAAI,eACV8G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,MAAAA,WAAuBkE,MAAQ7G,GAAS2B,SAAS+S,cAE3EjN,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,GAAI,CAAC,CACxDlB,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY0D,eAAelH,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,iCAErDoI,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClE3E,MAAO2I,GACPvI,KAAMsI,GACNzK,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,qBACVmH,OAAQ,CACNqB,GAAI,CACF9B,OAAQ,CAAC,CACPE,KAAMsO,YAQpB,OAAmBzM,EAAAA,GAAetD,GAAOP,I,i4FCxMnChF,GAAWC,GAEXF,GAAoB,OACpBmG,GAAyB,QAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAG8J,GAAK,EAAG5G,GAAK,EAAGqC,GAAK,EACxClO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACLkP,IAAK9P,GAAAA,GAAqBuI,MAC1BhI,IAAKP,GAAAA,GAAqBuI,MAC1BxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLmU,eAAgBnV,GAAAA,GAAqBwI,MAAK,GAC1CjI,IAAKP,GAAAA,GAAqBwI,MAC1B4M,YAAapV,GAAAA,GAAqBwI,MAClC6M,aAAcrV,GAAAA,GAAqBwI,MACnCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,GACpC8M,SAAUtV,GAAAA,GAAqBwI,OAEjC+J,OAAQ,CACNC,YAAaxS,GAAAA,GAAsBsS,MAAM,GACzCG,WAAYzS,GAAAA,GAAsBsS,MAAM,IAE1CjR,SAAU,CACRkU,gBAAiBvV,GAAAA,GAAwB0L,MAAM,GAC/C8J,gBAAiBxV,GAAAA,GAAwB0L,MAAM,GAC/CkB,WAAY5M,GAAAA,GAAwB0L,MAAM,IAE5ClK,SAAU,CACR6K,QAASrM,GAAAA,GAAwB+N,MAAM,GACvCnB,WAAY5M,GAAAA,GAAwB+N,MAAM,IAE5CxG,eAAgB,CACdkO,oBAAqBzV,GAAAA,GAAAA,GACrB0V,eAAgB1V,GAAAA,GAAAA,GAChB2V,iBAAkB3V,GAAAA,GAAAA,GAClB4V,gBAAiB5V,GAAAA,GAAAA,GACjBqM,QAASrM,GAAAA,GAAAA,GACTW,SAAUX,GAAAA,GAAAA,IAEZ0B,eAAgB,CACdmU,eAAgBC,KAAKC,IAAI/V,GAAAA,GAAAA,KAE3B4B,eAAgB,CACdyK,QAASrM,GAAAA,GAAAA,GACTsV,SAAUtV,GAAAA,GAAAA,GACVgW,YAAahW,GAAAA,GAAAA,GACbW,SAAUX,GAAAA,GAAAA,KAIRiW,IAAa7S,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGF,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,OAAAA,WAAwBa,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASoL,cAElG,IAAiC9K,EAAAA,EAAAA,IAAKvC,GAAK,QAA3C,iBAAO2W,GAAP,MAAqBC,GAArB,MACMC,IAAW1T,EAAAA,EAAAA,IAAM,KAAMyT,IAAU5T,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAMsU,SAAU,CAAE/V,IAAK,OAEzG,IAA+BuC,EAAAA,EAAAA,IAAKvC,GAAK,wBAAzC,iBAAO8W,GAAP,MAAoBC,GAApB,MACMC,IAAsBnT,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAM4T,IAASjT,EAAAA,EAAAA,IAAQxD,GAAS0H,eAAekO,uBAC7Ge,IAAapT,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAM4T,IAASjT,EAAAA,EAAAA,IAAQxD,GAAS0H,eAAeoO,oBACpGc,IAAgBrT,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAM4T,IAASjT,EAAAA,EAAAA,IAAQxD,GAAS0H,eAAemO,kBAE7G,IAA+B5T,EAAAA,EAAAA,IAAKvC,GAAK,sBAAzC,iBAAOmX,GAAP,MAAoBC,GAApB,MACMrH,IAAYlM,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAMiU,IAAStT,EAAAA,EAAAA,IAAQxD,GAAS6B,eAAemU,kBAEzG,IAA+B/T,EAAAA,EAAAA,IAAKvC,GAAK,wBAAzC,iBAAOqX,GAAP,MAAoBC,GAApB,MACM9E,IAAe3O,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGe,EAAAA,EAAAA,IAAOsT,IAASjJ,EAAAA,EAAAA,IAAapK,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAE,GAAC,OAAIL,EAAAA,EAAAA,IAAQK,EAAI7D,GAAS+B,eAAe0T,aAAY,IAEhJvR,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLkP,KAAK7L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMkP,IAAK,SACxCvP,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,UAE1CS,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,UAE1Cc,SAAU,CACRd,KAAK+B,EAAAA,EAAAA,KAAK2B,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,UAAU8C,EAAAA,EAAAA,IAAQxD,GAASwB,SAASuL,eAI/EtI,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAEpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,YAAalG,GAAUuE,GAAa,CAChGW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETM,OAAQ,CACNmN,aAAAA,GACAkE,WAAAA,IAEFtR,SAAU,CACRC,OAAQ,CACNwR,SAAAA,GACAG,oBAAAA,GACAC,WAAAA,GACAC,cAAAA,GACAnH,UAAAA,OAKAvK,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,UAEjF,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMkP,IAAK,CAAEvQ,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,OAER3F,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCqF,KAAMzG,GAAI,kBACV8G,MAAO7G,GAASmB,MAAMmU,eACtBxO,KAAM,KACL,CACDH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,MAAM4B,EAAAA,EAAAA,IAAI,MACVvB,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,cACVvB,MAAO7G,GAASmB,MAAMuI,WACpB,CACF7C,MAAOyP,GACPrP,KAAMoP,GACNvR,UAAU,EACVN,KAAMzE,GAAI,QACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM4P,IACL,CACD/P,KAAMzG,GAAI,gBACV8G,MAAO,SAAClC,GAAD,OAAU3E,GAASmB,MAAMqU,aAAa7Q,EAAK4G,IAAI5I,EAAAA,GAAAA,MAAAA,YAAwBkE,QAC9EC,KAAM,UAKd4L,QAAQlL,EAAAA,EAAAA,IAAe,SAAU1H,GAAI4S,GAAQ,CAAC,CAC5ClM,KAAM,iCACNK,MAAO7G,GAAS0S,OAAOC,aACtB,CACDnM,KAAM,gBACNK,MAAO7G,GAAS0S,OAAOE,WACvB9L,KAAM,QAERtF,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,GAAU,CAAC,CAClD8F,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAC9CF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY1C,SAASd,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BAC5C,CACD4H,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAC9CL,KAAMzG,GAAI,mBACV8G,MAAO7G,GAASwB,SAASmU,gBACzB7O,KAAM,OAERnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAClDgF,KAAMyP,MAER3O,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,QAAI6D,EAAW,CAClE3E,MAAO4P,GACPxP,KAAMuP,GACN1R,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,wBACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM+P,IACL,CACD/P,KAAMgQ,IACL,CACDhQ,KAAMiQ,IACL,CACDpQ,KAAMzG,GAAI,kBACV8G,MAAiD,IAA1C7G,GAAS0H,eAAeqO,gBAC/BjP,KAAM,UAKdc,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAClE3E,MAAOiQ,GACP7P,KAAM4P,GACN/R,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,wBACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM8I,SAKdpH,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClE3E,MAAOmQ,GACP/P,KAAM8P,GACNzP,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,cACVmH,OAAQlE,OAAOC,aAAYU,EAAAA,EAAAA,IAAM,EAAG,GAAGC,KAAI,SAAAC,GAAC,MAAI,CAACA,EAAG,CAClDW,MAAM4C,EAAAA,EAAAA,IAAG,QAAS,CAAEG,MAAO1D,IAC3B4C,OAAQ,CACN,CAAEE,KAAMuL,IACR,CACE1L,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS+B,eAAejB,SAC/BgG,KAAM,iBAOpB,OAAmB0B,EAAAA,GAAetD,GAAOP,I,62JCjSnChF,GAAWC,GAEXF,GAAoB,eAC1B,IAAkBG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGuF,GAAK,EACxBlO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACLkW,SAAU9W,GAAAA,GAAqBuI,MAC/BwO,QAAS/W,GAAAA,GAAqBuI,MAC9B5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCyO,eAAgBhX,GAAAA,GAAqBuI,MACrCxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1ByO,cAAejX,GAAAA,GAAqBwI,MACpC0O,cAAelX,GAAAA,GAAqBwI,MACpC2O,cAAenX,GAAAA,GAAqBwI,MACpC4O,KAAMpX,GAAAA,GAAqBwI,MAC3B6O,KAAMrX,GAAAA,GAAqBwI,MAC3B8O,KAAMtX,GAAAA,GAAqBwI,MAC3B+O,MAAOvX,GAAAA,GAAqBwI,MAC5BgP,MAAOxX,GAAAA,GAAqBwI,MAC5BiP,KAAMzX,GAAAA,GAAqBwI,MAC3BkP,SAAU1X,GAAAA,GAAqBwI,MAC/BmP,SAAU3X,GAAAA,GAAqBwI,MAC/BnI,KAAML,GAAAA,GAAqBwI,MAAK,GAChCoP,OAAQ5X,GAAAA,GAAqBwI,MAC7BqP,UAAW7X,GAAAA,GAAqBwI,MAChCsP,WAAY9X,GAAAA,GAAqBwI,MACjCuP,QAAS/X,GAAAA,GAAqBwI,MAC9B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtChH,SAAU,CACRgT,GAAIxU,GAAAA,GAAwB+N,MAAM,GAClCwG,UAAWvU,GAAAA,GAAwB+N,MAAM,GACzCiK,iBAAkBhY,GAAAA,GAAwB+N,MAAM,IAElDtG,eAAgB,CACdwQ,WAAYjY,GAAAA,GAAAA,IAEd0B,eAAgB,CACdwW,UAAWlY,GAAAA,GAAAA,GACXW,SAAUX,GAAAA,GAAAA,KAId,IAAyC8B,EAAAA,EAAAA,IAAKvC,GAAK,YAAnD,iBAAO4Y,GAAP,MAAyBC,GAAzB,MACMC,IAAY3V,EAAAA,EAAAA,IAAM,WAAY0V,IAClC9V,EAAAA,EAAAA,IAAKzC,GAASmB,MAAMuI,UAAUhH,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAMoW,eAAevT,KAAI,SAAAoR,GAAC,OAAIA,KAAI,CAAEtV,IAAK,QAEpH,SAASuX,GAASwB,GAEhB,OAAOrU,EAAAA,EAAAA,IAAQ,MAAOqU,EAAS,QAAS,CACtCC,MAAO,CAAEC,QAAQpV,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,GAAS4H,eAAewQ,eAI/E,IAAMQ,GAAc,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IACzC,IAAiD3W,EAAAA,EAAAA,IAAKvC,GAAK,gBAA3D,iBAAOmZ,GAAP,MAA6BC,GAA7B,MACMC,IAA0B5J,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAC3DF,EAAAA,EAAAA,KAAKiB,EAAAA,EAAAA,IAAOoV,IAAkB/K,EAAAA,EAAAA,GAAa6K,IAAa,SAAA/U,GAAC,OAAIC,EAAAA,EAAAA,IAASD,MAAK,IACzEnB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAMoW,eAAgB,CAAEzX,IAAK,QAEtEsZ,GAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3C,IAAiD/W,EAAAA,EAAAA,IAAKvC,GAAK,gBAA3D,iBAAOuZ,GAAP,MAA6BC,GAA7B,MAEA,SAASC,GAAaV,GAAqC,IAAlBW,EAAiB,wDACpDC,EAAeD,EAAUpZ,GAASmB,MAAMiW,cAAgBpX,GAASmB,MAAMkW,cAE3E,OAAOhT,EAAAA,EAAAA,KAAc5B,EAAAA,EAAAA,KAAK6B,EAAAA,EAAAA,KAAI5B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB8V,EAAS,CAAE/Y,IAAK,OAC9E+C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB0W,EAAazV,KAAI,SAAAoR,GAAC,OAAIA,KAAI,CAAEtV,IAAK,OACtEgE,EAAAA,EAAAA,IAAOwV,IAAkBnL,EAAAA,EAAAA,GAAaiL,IAAe,SAAAnV,GAAC,OAAIC,EAAAA,EAAAA,IAASD,MAAK,KAAMlB,EAAAA,GAAAA,MAAAA,KAAkB,QAAS,CAC3GkL,IAAK,CACH1K,KAAKW,EAAAA,EAAAA,IAAS,YACb4U,MAAO,CAERC,QAAQpV,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,GAAS4H,eAAewQ,eAKxE,IAAMkB,IAAuB/V,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGF,EAAAA,EAAAA,KAAK6B,EAAAA,EAAAA,IAAI3B,EAAAA,GAAAA,OAAAA,WAAwBa,EAAAA,EAAAA,KAAS,IAA2C,IAArCxD,GAAS2B,SAASwW,mBAEvH,IAA6BlW,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACMgX,IAAchW,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GACjDE,EAAAA,EAAAA,IAAM,KAAMN,IAAQ4M,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe3C,GAAS6B,eAAewW,aAGpFnU,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLL,IAAKuW,GAASjX,GAASe,MAAMkW,UAC7BC,QAASD,GAASjX,GAASe,MAAMmW,SACjCsB,UAAAA,IAEFrX,MAAO,CACLT,IAAKyY,GAAanZ,GAASmB,MAAMT,KAAK,GACtC6W,KAAM4B,GAAanZ,GAASmB,MAAMoW,MAClCC,KAAM2B,GAAanZ,GAASmB,MAAMqW,MAClCC,KAAM0B,GAAanZ,GAASmB,MAAMsW,MAClCC,MAAOyB,GAAanZ,GAASmB,MAAMuW,OACnCC,MAAOwB,GAAanZ,GAASmB,MAAMwW,OACnCC,KAAMuB,GAAanZ,GAASmB,MAAMyW,MAClCC,SAAUsB,GAAanZ,GAASmB,MAAM0W,UACtCC,SAAUqB,GAAanZ,GAASmB,MAAM2W,UACtCC,OAAQoB,GAAanZ,GAASmB,MAAM4W,QACpCC,UAAWmB,GAAanZ,GAASmB,MAAM6W,WACvCC,WAAYkB,GAAanZ,GAASmB,MAAM8W,cAGtCxT,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAEpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAK,UAAW,UAAWC,GAAUuE,GAAa,CAC7FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETM,OAAQ,CACN6I,WAAY4K,GACZgB,aAAcF,IAEhBxU,SAAU,CACRC,OAAQ,CACNjD,KAAMyX,GACN3L,WAAYmL,OAKZ7T,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAY,UACZC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAClC,CACC8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,GAAKA,EAAI,EAAI,GAAK,MAClGoK,WAAkB,IAANpK,EAAU,MAAc,IAANA,EAAU,MAAQ,QAEjD,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMmW,QAAS,CAAExX,IAAI,QAAD,OAAUA,GAAV,+BAC7C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMD,SAApB,MACJ,CACD0F,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMG,GAApB,OAEP8F,YAAa,CACXH,MAAO0R,GACPtR,KAAMqR,GACN9T,KAAMzE,GAAI,aACVkI,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIiB,IACvCmG,OAAQ,CACNuS,SAAU,CACRhT,OAAQ,CAAC,CACPE,KAAM6R,SAKb,CACDxR,YAAa,CACXH,MAAOiS,GACP7R,KAAM4R,GACN1Q,YAAarI,GAAG,qBAChBgF,UAAU,EACVwC,SAAS6H,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,GACrD6B,KAAMzE,GAAI,mBACVkI,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIiB,IACvCmG,OAAQlE,OAAOC,YAAY2V,GAAYhV,KAAI,SAAA8V,GAAC,MAAI,CAACA,EAAG,CAClDlV,KAAK,GAAD,OAAKkV,GACTjT,OAAQ,CAAC,CACPE,KAAMoS,eAMhB5X,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMoW,KAAM,CAAE7X,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMqW,KAAM,CAAE9X,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMsW,KAAM,CAAE/X,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMuW,MAAO,CAAEhY,IAAI,QAAD,OAAUA,GAAV,8BAC5CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMwW,MAAO,CAAEjY,IAAI,QAAD,OAAUA,GAAV,8BAC5CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMyW,KAAM,CAAElY,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM0W,SAAU,CAAEnY,IAAI,QAAD,OAAUA,GAAV,8BAC/CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM2W,SAAU,CAAEpY,IAAI,QAAD,OAAUA,GAAV,8BAC/CuO,WAAY,OACX,CACDzH,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMX,OACxB,CACDmG,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM4W,OAAQ,CAAErY,IAAI,QAAD,OAAUA,GAAV,gCAC5C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM6W,UAAW,CAAEtY,IAAI,QAAD,OAAUA,GAAV,gCAC/C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM8W,WAAY,CAAEvY,IAAI,QAAD,OAAUA,GAAV,gCAChD,CACD8G,KAAM1G,GAAG,wBACT+G,MAAO,SAAClC,GAAD,gBAAa3E,GAASmB,MAAM+W,QAAQvT,EAAK4G,IAAI5I,EAAAA,GAAAA,MAAAA,YAAwBkE,UAC3E,CACDL,KAAM1G,GAAG,wBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAML,SAApB,MACJ,CACD0F,KAAM1G,GAAG,wBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMD,GAApB,MACJ,CACDsF,KAAM1G,GAAG,wBACT+G,MAAM,GAAD,OAAK7G,GAASmB,MAAMuI,YACvB,CACF7C,MAAOqS,GACPjS,KAAMgS,GACNzU,KAAMzE,GAAI,kBACVmH,OAAQlE,OAAOC,YAAY+V,GAAcpV,KAAI,SAAA8V,GAAC,MAAI,CAACA,EAAG,CACpDlV,KAAK,GAAD,OAAKkV,GACTjT,OAAQ,WAGZjF,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAClD2F,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAC9CL,KAAMzG,GAAI,eACV8G,MAAO,SAAClC,GACN,OAAgD,IAAxCA,EAAK4G,IAAI5I,EAAAA,GAAAA,MAAAA,WAAuBkE,MAAc,MAAsC,IAA9B7G,GAAS2B,SAAS+S,YAElF5N,KAAM,KACL,CACCH,KAAM2S,MAEV7R,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAClE3E,MAAOtE,GACP0E,KAAM3E,GACNwC,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGwM,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,IACvF6B,KAAMzE,GAAI,cACVmH,OAAQ,CACNc,GAAI,CACFvB,OAAQ,CAAC,CACPE,KAAM4S,IACL,CACD/S,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAAS6B,eAAef,SAA7B,WAKbuH,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAI3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,kyGCpVnChF,GAAWC,GAEXF,GAAoB,SACpBmG,GAAyB,OAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI2I,GAAI,EAAGC,GAAI,EAAGkD,GAAK,EAAGqC,GAAK,EACzBlO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,KAGJC,QAAS,CACPM,IAAKP,GAAAA,GAAAA,GACL0I,QAAS1I,GAAAA,GAAAA,GAAAA,IAEXM,SAAU,CACRC,IAAKP,GAAAA,GAAAA,GACLQ,IAAKR,GAAAA,GAAAA,GACLS,KAAMT,GAAAA,GAAAA,KAERY,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BsD,KAAM7L,GAAAA,GAAqBuI,MAC3BiR,QAASxZ,GAAAA,GAAqBuI,MAC9B5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCkR,aAAczZ,GAAAA,GAAqBuI,MAAK,GACxCmR,QAAS1Z,GAAAA,GAAqBuI,MAAK,GACnCoR,YAAa3Z,GAAAA,GAAqBuI,MAAK,GACvCxH,GAAIf,GAAAA,GAAqBuI,MAAK,GAC9BsH,OAAQ7P,GAAAA,GAAqBuI,MAAK,IAEpCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BoR,KAAM5Z,GAAAA,GAAqBwI,MAC3BsH,IAAK9P,GAAAA,GAAqBwI,MAC1B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtCnH,SAAU,CACR0S,UAAW/T,GAAAA,GAAwB0L,MAAM,IAE3ClK,SAAU,CACRqY,WAAY7Z,GAAAA,GAAwB+N,MAAM,GAC1C+L,cAAe9Z,GAAAA,GAAwB+N,MAAM,GAC7CgM,UAAW/Z,GAAAA,GAAwB+N,MAAM,GACzC0L,aAAczZ,GAAAA,GAAwB+N,MAAM,IAE9CtG,eAAgB,CACduS,YAAaha,GAAAA,GAAAA,IAEf0B,eAAgB,CACduY,KAAMja,GAAAA,GAAAA,GACNsB,UAAWtB,GAAAA,GAAAA,IAEb4B,eAAgB,CACduO,MAAOnQ,GAAAA,GAAAA,GACPW,SAAUX,GAAAA,GAAAA,KAId,IAAmC8B,EAAAA,EAAAA,IAAKvC,GAAK,SAA7C,iBAAO2a,GAAP,MAAsBC,GAAtB,MACMC,IAAY1X,EAAAA,EAAAA,IAAM,QAASyX,IAC/B7X,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,OAAAA,KAAkBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAM4Y,QAAS,CAAEja,IAAK,QAG1F,IAAmCuC,EAAAA,EAAAA,IAAKvC,GAAK,SAA7C,iBAAOwC,GAAP,MAAsBC,GAAtB,MACMqY,IAAY3X,EAAAA,EAAAA,IAAM,QAASV,IAC/BO,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAM4Y,KAAKnW,KAAI,SAAAoR,GAAC,OAAKA,KAAI,CAAEtV,IAAK,OAEvE+a,IAAuB,UAAQD,IAC/BE,IAA2B,UAAQF,IAEzC,IAAiCvY,EAAAA,EAAAA,IAAKvC,GAAK,QAA3C,iBAAOib,GAAP,MAAqBC,GAArB,MACMC,IAAWtX,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACpCE,EAAAA,EAAAA,IAAM+X,GAAU,SACd/X,EAAAA,EAAAA,IAAMF,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QACzB3C,GAASwB,SAAS0S,aAKxB,IAAiCjS,EAAAA,EAAAA,IAAKvC,GAAK,QAA3C,iBAAOob,GAAP,MAAqBC,GAArB,MACMC,IAAWzX,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACpCE,EAAAA,EAAAA,IAAMkY,GAAU,QACd/a,GAAS2B,SAASqY,aAGhBiB,IAAwB,UAAQD,IAChCE,IAAwB,UAAQF,IAChCG,IAAe5X,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACxCE,EAAAA,EAAAA,IAAMkY,GAAU,OACd/a,GAAS2B,SAASuY,YAGhBkB,IAAwB,UAAQD,IAChCE,IAAyB,UAAQF,IACjCG,IAA0B,UAAQH,IAElCI,IAAShY,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC5CE,EAAAA,EAAAA,IAAM+X,GAAU,SACd/X,EAAAA,EAAAA,IAAMF,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QACzB3C,GAASwB,SAAS0S,aAKxB,IAA6BjS,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACMiZ,IAAQjY,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC3Ce,EAAAA,EAAAA,IAAOnB,IACLwL,EAAAA,EAAAA,IAAapK,EAAAA,EAAAA,IAAM,EAAG3D,GAAS6B,eAAeJ,YAAY,SAAAoC,GAAC,OAAIL,EAAAA,EAAAA,IAAQK,EAAI7D,GAAS6B,eAAeuY,SACnG,GACF,CAAE1a,IAAK,yBACHwE,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,QAAS,CAAE+E,IAAK,CAAE4H,SAAU+F,MACxExP,MAAM5H,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMiL,KAAM,QAAS,CAAE6B,IAAK,CAAE4H,SAAU+F,MACtEC,SAAUlB,IAEZpZ,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCuP,KAAK7L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM8O,IAAK,WAGtCxL,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,QAASlG,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRC,OAAQ,CACN2W,WAAYnB,GACZ/M,eAAgBiN,GAChBhN,mBAAoBiN,GACpBxG,UAAW2G,GACXc,WAAYV,GACZrN,WAAYsN,GACZjJ,YAAamJ,GACblJ,aAAcmJ,GACdlJ,cAAemJ,GACfM,cAAeL,OAKfrW,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,KAChFoK,WAAkB,IAANpK,GAAUuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAEpD,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMiL,KAAM,CAAEtM,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAMD,SAApB,eAAmCd,GAASe,MAAM6Y,aAAlD,MACJ,CACDpT,KAAM1G,GAAG,uBACT+G,MAAM,GAAD,OAAK7G,GAASe,MAAM8Y,QAApB,eAAkC7Z,GAASe,MAAM+Y,YAAjD,MACJ,CACDtT,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,KACL,CACDN,MAAMY,EAAAA,EAAAA,IAAG,WACTP,MAAO,SAAClC,GAAD,OAAUA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAI,EAAI,KAElEG,YAAa,CACXlC,UAAU,EACVmD,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIiB,IACvCoH,YAAarI,GAAG,qBAChB+G,MAAOyT,GACPrT,KAAMoT,GACN7V,KAAMzE,GAAI,SACVmH,OAAQ,CACN2U,MAAO,CACLpV,OAAQ,CAAC,CACPE,KAAM4T,SAKb,CACDvT,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOkU,GACP9T,KAAM6T,GACNhW,UAAU,EACVmD,QAAQC,EAAAA,EAAAA,IAAkB,WAAYpI,GAAI6B,IAC1CwG,YAAarI,GAAG,wBAChB0E,KAAMzE,GAAI,YACVmH,OAAQ,CACN4B,MAAO,CACLtE,KAAM,QACNiC,OAAQ,CAAC,CACPE,KAAMsU,IACL,CACDtU,KAAMuU,MAGVlP,KAAM,CACJxH,KAAM,OACNiC,OAAQ,CAAC,CACPE,KAAMyU,IACL,CACDzU,KAAM0U,IACL,CACD1U,KAAM2U,SAKb,CACDtU,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAOtE,GACP0E,KAAM3E,GACN2F,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAI6B,IAChDwG,YAAarI,GAAG,8BAChB0E,KAAMzE,GAAI,MACVmH,QAAQ6G,EAAAA,EAAAA,IAAapK,EAAAA,EAAAA,IAAM,EAAG,IAAIC,KAAI,SAAAC,GAAC,OAAIA,EAAEiY,eAAa,SAAAjY,GAAC,MAAK,CAC9DW,KAAMX,EAAEiY,WACRrV,OAAQ,CAAC,CAAEE,KAAM6U,aAKzBra,MAAO,CACLqD,KAAM1E,GAAG,cACTuG,IAAKlF,GACLoF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM8O,IAAK,CAAEvQ,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO,SAAClC,GAAD,MAAU,UAAG3E,GAASmB,MAAML,WAAc6D,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,cAAkD7G,GAAS4H,eAAeuS,aAAgB,KAC3IrT,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,YAEvB,CACD1C,YAAa,CACXlC,UAAU,EACV+B,MAAO1E,GACP8E,KAAM/E,GACNsC,KAAM1E,GAAG,cACTmI,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIqB,IACvCgH,YAAarI,GAAG,qBAChBoH,OAAQ,CACN/F,MAAO,CACLsF,OAAQ,CAAC,CACPE,KAAM8T,IACL,CACD9T,KAAM+T,SAKb,CACD1T,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGE,EAAAA,EAAAA,IAAMF,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,IAC3EkE,MAAO+T,GACP3T,KAAM0T,GACN7V,UAAU,EACVmD,QAAQC,EAAAA,EAAAA,IAAkB,WAAYpI,GAAI0B,IAC1C2G,YAAarI,GAAG,wBAChB0E,MAAM4C,EAAAA,EAAAA,IAAG,mBACTF,OAAQ,CACN6U,MAAO,CACLtV,OAAQ,CAAC,CACPE,KAAMkU,IACL,CACDlU,KAAM4U,WAOlB/Z,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,IACzC8F,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAI3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,2uFCxWnChF,GAAWC,GACXoc,GAA6B,UAC7BnW,GAAyB,QAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQmc,IAAhC,iBAAOlc,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGkD,GAAK,EAAGqC,GAAK,EAChClO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACL8O,IAAK9P,GAAAA,GAAqBwI,MAC1ByR,KAAMja,GAAAA,GAAqBwI,MAC3B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtCnH,SAAU,CACR6Q,OAAQlS,GAAAA,GAAwB0L,MAAM,GACtC/K,SAAUX,GAAAA,GAAwB0L,MAAM,IAE1ClK,SAAU,CACRsa,QAAS9b,GAAAA,GAAwB+N,MAAM,GACvCpN,SAAUX,GAAAA,GAAwB+N,MAAM,IAE1CtG,eAAgB,CACduS,YAAaha,GAAAA,GAAAA,IAEf4B,eAAgB,CACdma,SAAU/b,GAAAA,GAAAA,KAId,IAA6C8B,EAAAA,EAAAA,IAAK+Z,GAAc,cAAhE,iBAAOG,GAAP,MAA2BC,GAA3B,MAEA,IAAmDna,EAAAA,EAAAA,IAAK+Z,GAAc,SAAtE,iBAAOK,GAAP,MAA8BC,GAA9B,MAEA,IAAyDra,EAAAA,EAAAA,IAAK+Z,GAAc,YAA5E,iBAAOO,GAAP,MAAiCC,GAAjC,MAGMC,IAAgBlZ,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACzCwM,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgBwR,IACtBnZ,EAAAA,EAAAA,IAAM2H,EAAAA,GAAAA,QAAgB8R,GAAmB,KACvCI,IAAO7Z,EAAAA,EAAAA,IAAM4Z,GAAe,EAAGzc,GAASwB,SAAS6Q,QACjDrB,IAAOnO,EAAAA,EAAAA,IAAM,MAAO2Z,IACxBrN,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgBwR,IACtBzY,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACnBF,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASsa,SAAUtZ,EAAAA,GAAAA,OAAAA,WACzCga,IAASpZ,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGa,EAAAA,EAAAA,IAAQ,KAEnDoZ,IAAU7O,EAAAA,EAAAA,GAAa6C,EAAAA,GAAAA,KAAkB,SAAAzN,GAAG,gBAAOA,EAAP,aAA6B,SAAAzD,GAAG,OAChFmD,EAAAA,EAAAA,IAAMuZ,GAAgB1c,EAAImd,MAAM,GAAI,GAAIF,OAE7BzY,GAAc,CACzBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,UAE9C3H,OAAM,QACJ8O,KAAK7L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM8O,IAAK,UACrCjN,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAAlR,GAAG,MACzC,CAACA,GAAKmD,EAAAA,EAAAA,IAAMuZ,GAAgB1c,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMiZ,KAAM,QAAS,CAAEvM,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAASpE,cAIrG+E,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBoX,GAAcnW,GAAY,YAAalG,GAAUuE,GAAa,CACzGW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAETI,SAAU,CACRgL,MAAO,CAAEuC,OAAQrB,IACjBjM,QAAO,kBAAM6X,IAAP,IAAgBvK,OAAQqK,QAI5BxX,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUsc,GAAV,iCAA+CnY,UAG7F,CACE2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUsc,GAAV,8BAC3C,CACDxV,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUsc,GAAV,+BAC3C,CACDxV,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,KACL,CACDQ,QAAS,SAAC3C,GAAD,OAAUA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GAC1DL,MAAMY,EAAAA,EAAAA,IAAG,WACTP,MAAO,OAIb1F,MAAO,CACLqD,KAAM1E,GAAG,cACTuG,IAAKlF,GACLoF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM8O,IAAK,CAAEvQ,IAAI,QAAD,OAAUsc,GAAV,+BACzC,CACDxV,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,UAA8C7G,GAASmB,MAAML,SAA7D,SAA+Ed,GAASmB,MAAML,UAC7GgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,WAExB1C,YAAa,CACXH,MAAOuV,GACPnV,KAAMkV,GACN3X,MAAM4C,EAAAA,EAAAA,IAAG,YACTa,QAAQC,EAAAA,EAAAA,IAAkB,QAASpI,GAAIqB,IACvC+F,OAAQlE,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAI,CAACA,EAAQ,CAC9D9N,MAAM,UAAC,KAAD,CAAWiH,MAAO6G,EAAlB,UAA2BlK,EAAAA,EAAAA,IAAI,WAAD,OAAYkK,MAChD7L,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMmR,GAAS,CAAE5S,IAAI,QAAD,OAAUsc,GAAV,wCAInD,CACDhV,YAAa,CACXH,MAAOuV,GACPnV,KAAMkV,GACNlU,QAAQC,EAAAA,EAAAA,IAAkB,iBAAkBpI,GAAIyI,IAChDJ,YAAarI,GAAG,8BAChB0E,MAAM4C,EAAAA,EAAAA,IAAG,YACTtC,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CuE,OAAQlE,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAI,CAACA,EAAQ,CAC9D9N,MAAM,UAAC,KAAD,CAAWiH,MAAO6G,EAAlB,UAA2BlK,EAAAA,EAAAA,IAAI,WAAD,OAAYkK,MAChD7L,OAAQ,CAAC,CACPE,KAAMiW,GAAQ,GAAD,OAAItK,EAAJ,sBAMvB9Q,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,QAAUgK,EAAW,CAE5D1G,UAAU,EACV+B,MAAOyV,GACPrV,KAAMoV,GACN7X,MAAM4C,EAAAA,EAAAA,IAAG,cACTE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGwM,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgBwR,GAAc,IACvE9U,OAAQlE,OAAOC,YAAY2N,EAAAA,GAAAA,KAAkB,SAAA0B,GAAM,MAAI,CAACA,EAAQ,CAC9D9N,MAAM,UAAC,KAAD,CAAWiH,MAAO6G,EAAlB,UAA2BlK,EAAAA,EAAAA,IAAI,WAAD,OAAYkK,MAChD7L,OAAQ,CAAC,CACPE,KAAM+V,IACL,CAGDlW,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASwB,SAASV,SACzBgG,KAAM,cAIZnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,QAAU6J,EAAW,CAE5D1G,UAAU,EACV+B,MAAO2V,GACPvV,KAAMsV,GACN/X,KAAMzE,GAAI,QACVuH,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGwM,EAAAA,EAAAA,IAAQ3E,EAAAA,GAAAA,QAAgBwR,GAAc,IACvE9U,OAAQ,CACN2G,IAAK,CACHpH,OAAQ,CAAC,CACPE,KAAMqK,IACL,CACDxK,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS2B,SAASb,SACzBgG,KAAM,UAKdW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAI3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,g6FCxQnChF,GAAWC,GAEXF,GAAoB,YACpBmG,GAAyB,OAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGuF,GAAK,EACxBlO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPwI,KAAMzI,GAAAA,GAAoBsI,MAC1BI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL+H,MAAO3I,GAAAA,GAAqBuI,MAC5BxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLyH,KAAMzI,GAAAA,GAAqBwI,MAC3BoH,KAAM5P,GAAAA,GAAqBwI,MAC3BmU,KAAM3c,GAAAA,GAAqBwI,MAC3BoU,QAAS5c,GAAAA,GAAqBwI,MAC9B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtChH,SAAU,CACR0W,UAAWlY,GAAAA,GAAwB+N,MAAM,GACzCpN,SAAUX,GAAAA,GAAwB+N,MAAM,IAE1CxG,eAAgB,CACdsV,QAAS7c,GAAAA,GAAAA,GACTW,SAAUX,GAAAA,GAAAA,IAEZyH,eAAgB,CACdqV,UAAW9c,GAAAA,GAAAA,GACX+c,UAAW/c,GAAAA,GAAAA,GACXO,IAAKP,GAAAA,GAAAA,IAEP4B,eAAgB,CACdob,QAAShd,GAAAA,GAAAA,KAKb,IAA6C8B,EAAAA,EAAAA,IAAKvC,GAAK,cAAvD,iBAAO0d,GAAP,MAA2BC,GAA3B,MACMC,IAAa/Z,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GACtCE,EAAAA,EAAAA,IAAM,aAAcwa,IAAgB7Z,EAAAA,EAAAA,IAAQxD,GAAS2B,SAAS0W,aAGhE,IAAmDpW,EAAAA,EAAAA,IAAKvC,GAAK,iBAA7D,iBAAO6d,GAAP,MAA8BC,GAA9B,MACMC,IAAgBla,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GACnDE,EAAAA,EAAAA,IAAM,gBAAiB2a,IAAmBha,EAAAA,EAAAA,KAASxD,GAAS0H,eAAesV,WAG7E,IAAqD/a,EAAAA,EAAAA,IAAKvC,GAAK,iBAA/D,iBAAOge,GAAP,MAA+BC,GAA/B,MACMC,IAAiBra,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GACpDE,EAAAA,EAAAA,IAAM,iBAAkB8a,IAAoBna,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAeob,WAExEjZ,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPwI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQwI,KAAM,YAE9CnI,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL+H,OAAO1E,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+H,MAAO,UAE9C3H,MAAO,CACLyH,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMyH,KAAM,SAC1CmH,MAAM3L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM4O,KAAM,SAC1C+M,MAAM1Y,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM2b,KAAM,SAC1CC,SAAS3Y,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM4b,QAAS,UAElDnV,eAAgB,CACdlH,KAAK2D,EAAAA,EAAAA,KAAc5B,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,KAAiBa,EAAAA,EAAAA,IAAQxD,GAAS4H,eAAelH,MAAO,YAC9E,CAAEmN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,SAIvBpB,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,QAASlG,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETK,SAAU,CACRC,OAAQ,CACNjD,KAAMwb,GACNpS,UAAW0S,GACXC,eAAgBJ,OAKhBvY,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,KAChFoK,WAAkB,IAANpK,GAAUuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAa,IAAN1D,GAAUuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAE3F,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQwI,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,8BAC5C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+H,MAAO,CAAEpJ,IAAI,QAAD,OAAUA,GAAV,+BAC3C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,OAGR3F,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMyH,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM4O,KAAM,CAAErQ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM2b,KAAM,CAAEpd,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM4b,QAAS,CAAErd,IAAI,QAAD,OAAUA,GAAV,+BAC7C,CACD8G,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,MACVvB,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,MAAM4B,EAAAA,EAAAA,IAAI,cACVvB,MAAO7G,GAASmB,MAAMuI,YAGxBlI,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,QAAU6J,EAAW,CAC5DlE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOwW,GACPpW,KAAMmW,GACN5Y,KAAMzE,GAAI,cACV+E,UAAU,EACVoC,OAAQ,CACNoW,WAAY,CACV7W,OAAQ,CAAC,CACPE,KAAM2W,IACL,CACD9W,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS2B,SAASb,SACzBgG,KAAM,UAKdW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,QAAI6D,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAO2W,GACPvW,KAAMsW,GACN/Y,KAAMzE,GAAI,iBACV+E,UAAU,EACVoC,OAAQ,CACNuW,cAAe,CACbhX,OAAQ,CAAC,CACPE,KAAM8W,IACL,CACDjX,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS0H,eAAe5G,SAC/BgG,KAAM,UAKdc,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,GAAI,CAAC,CACxDP,QAAS,SAAA3C,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GACxDA,MAAO7G,GAAS4H,eAAelH,IAC/BiG,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY0D,eAAelH,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,sBAErDoI,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,QAAIiD,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAO8W,GACP1W,KAAMyW,GACNlZ,KAAMzE,GAAI,kBACV+E,UAAU,EACVoC,OAAQ,CACN0W,eAAgB,CACdnX,OAAQ,CAAC,CACPE,KAAMiX,IACL,CACDpX,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS0H,eAAe5G,SAC/BgG,KAAM,aAQpB,OAAmB0B,EAAAA,GAAetD,GAAOP,I,s+FCzPnCjF,GAAoB,UACpBmG,GAAyB,QACzBlG,GAAWC,GACjB,IAAkBC,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI2I,GAAI,EAAGC,GAAI,EACF3I,GAAW,CACtBC,OAAQ,CACNC,OAAQ,CACLC,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GAEAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,KAILC,QAAS,CACPmX,KAAOpX,GAAAA,GAAAA,GACPqX,KAAOrX,GAAAA,GAAAA,GACP0I,QAAS1I,GAAAA,GAAAA,GAAAA,IAEXM,SAAU,CACRC,IAAMP,GAAAA,GAAAA,IACNQ,IAAMR,GAAAA,GAAAA,IACNS,KAAOT,GAAAA,GAAAA,KAETY,MAAO,CACLwW,KAAOpX,GAAAA,GAAqBuI,MAC5B8O,KAAOrX,GAAAA,GAAqBuI,MAC5BoV,QAAU3d,GAAAA,GAAqBuI,MAC/B5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLT,IAAMP,GAAAA,GAAqBwI,MAC3B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9BpH,KAAMpB,GAAAA,GAAqBwI,MAAK,IAElChH,SAAU,CACRyU,WAAY,IAEdxO,eAAgB,CACdmW,iBAAkB,IAClBC,eAAgB,GAElBnc,eAAgB,CACduY,KAAM,KAIJ6D,IAAS1a,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG3C,GAAS2B,SAASyU,YAEzD,IAA6BnU,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAOuR,GAAP,MAAmBC,GAAnB,MACMqK,IAAShY,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC5CE,EAAAA,EAAAA,IAAMqO,GAAQ,KAAMlR,GAAS4H,eAAemW,kBAE9C,IAAmC9b,EAAAA,EAAAA,IAAKvC,GAAK,SAA7C,iBAAOwe,GAAP,MAAsBC,GAAtB,MAEA,IAAmClc,EAAAA,EAAAA,IAAKvC,GAAK,SAA7C,iBAAOwC,GAAP,MAAsBC,GAAtB,MACMic,IAAS7a,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAC5CE,EAAAA,EAAAA,IAAMV,GAAW,KAAMnC,GAAS6B,eAAeuY,MAAO,CAAE1a,IAAI,QAAD,OAAUA,GAAV,aAEvD2e,IAAmBxb,EAAAA,EAAAA,IAAMsb,GAAW,MACxC7Z,EAAAA,EAAAA,KAAI5B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAM+c,QAAS,CAAEpe,IAAK,OAAQqP,EAAAA,EAAAA,KAAIvL,EAAAA,EAAAA,IAAQ,MAAOf,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQ,IAAMb,EAAAA,GAAAA,MAAAA,eAE/G2b,IAAazO,EAAAA,EAAAA,KAAetM,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGF,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,IAAgBa,EAAAA,EAAAA,IAAQ,QAE1EU,GAAc,CACzBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPwI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQmX,KAAM,WAC5CxH,MAAM3L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQoX,KAAM,YAE9C/W,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLwd,QAAQ9b,EAAAA,EAAAA,KAAK6B,EAAAA,EAAAA,KAAId,EAAAA,EAAAA,IAAQ,GAAI4a,KAASha,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMwW,KAAM,UAC1EiH,QAAQ/b,EAAAA,EAAAA,KAAK6B,EAAAA,EAAAA,KAAId,EAAAA,EAAAA,IAAQ,GAAI4a,KAASha,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMyW,KAAM,UAC1EsG,QAASO,IAEX7c,SAAU,CACRid,QAASH,IAEXnd,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,QAAS,CAAEmN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,SAGtEpB,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,QAASlG,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETK,SAAU,CACRC,OAAQ,CACNgZ,gBAAiBxC,GACjBuC,SAASlX,EAAAA,EAAAA,IAAQyX,GAAkB,CAAE3e,IAAK,cAG9CqF,OAAQ,CACNqR,WAAY6H,MAIV/Y,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,KAChFoK,WAAmB,IAANpK,GAAiB,IAANA,GAAWuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAEjE,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQwI,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,6BAC7CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ2P,KAAM,CAAErQ,IAAI,QAAD,OAAUA,GAAV,6BAC7CuO,WAAY,OACX,CACDzH,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMwd,OAAQ,CAAE7e,IAAI,QAAD,OAAUA,GAAV,8BAC7CuO,WAAY,OACX,CACDtH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMyd,OAAQ,CAAE9e,IAAI,QAAD,OAAUA,GAAV,8BAC7CuO,WAAY,OACX,CACDzH,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,UACR7G,GAASe,MAAMD,SADP,eACsBd,GAAS4H,eAAeoW,gBAD9C,UAERhe,GAASe,MAAMD,WACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,MACJ,CACFhC,UAAU,EACV+B,MAAOsX,GACPlX,KAAMiX,GACN1Z,KAAMzE,GAAI,aACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAMzC,GAAYnD,MAAM+c,cAKhC3c,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCqF,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMI,OACpB,CACFsF,MAAO1E,GACP8E,KAAM/E,GACNsC,KAAMzE,GAAI,aACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDH,KAAMyX,SAKd5c,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,GAAU,CAAC,CAClDmF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY1C,SAASid,QAAS,CAAE/e,IAAI,oBAAsBqH,QAAS,eAEnFpF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAClDgF,KAAMsX,MAERxW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,QAAI2D,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAOqK,GACPjK,KAAMgK,GACNnM,UAAU,EACVN,KAAMzE,GAAI,UACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM4U,SAKdzT,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAK3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,8/FC/OnChF,GAAWC,GAEXF,GAAoB,UACpBmG,GAAyB,UAC/B,IAAkBhG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGuF,GAAK,EACxBlO,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL6H,KAAMzI,GAAAA,GAAqBuI,MAC3BqH,KAAM5P,GAAAA,GAAqBuI,MAC3BoU,KAAM3c,GAAAA,GAAqBuI,MAC3BgW,KAAMve,GAAAA,GAAqBuI,MAC3B5H,SAAUX,GAAAA,GAAqBuI,MAAK,GACpCxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BgW,SAAUxe,GAAAA,GAAqBwI,MAC/BzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,IAEtChH,SAAU,CACRid,YAAaze,GAAAA,GAAwB+N,MAAM,IAE7CrM,eAAgB,CACdqa,SAAU/b,GAAAA,GAAAA,GACVW,SAAUX,GAAAA,GAAAA,IAEZ4B,eAAgB,CACd8c,QAAS1e,GAAAA,GAAAA,KAKP6a,IAAWzX,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAAGF,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,QAAoBa,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASid,eAE5F,IAA6B3c,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACM6b,IAAS7a,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,MAAON,GAAQvC,GAAS6B,eAAeqa,WAExF4C,IAASvb,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG3C,GAAS+B,eAAe8c,SAEnE3a,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACL6H,MAAM+G,EAAAA,EAAAA,IAAShN,EAAAA,GAAAA,cAAqB,GAAGyB,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM6H,KAAM,UAC3EmH,MAAM3L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMgP,KAAM,QAAS,CAAE2I,MAAO,CAAEC,OAAQmG,MACtEhC,MAAM1Y,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM+b,KAAM,QAAS,CAAEpE,MAAO,CAAEC,OAAQmG,MACtEJ,MAAMnb,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGyB,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM2d,KAAM,QAAS,CAAEhG,MAAO,CAAEC,OAAQmG,QAE1G3d,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCie,UAAUva,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMwd,SAAU,WAGhDla,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GAAKmG,GAAY,QAASlG,GAAUuE,GAAa,CACrFW,MAAO,CACL9D,MAAO0D,GACPtD,MAAOuD,IAEToL,MAAO,CACL6L,WAAYX,IAEdlW,SAAU,CACRC,OAAQ,CACNyU,aAAc4E,OAKdlZ,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,UAEjF,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM6H,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMgP,KAAM,CAAErQ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM+b,KAAM,CAAEpd,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM2d,KAAM,CAAEhf,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMD,SACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,MAExBC,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMwd,SAAU,CAAEjf,IAAI,QAAD,OAAUA,GAAV,+BAC9C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,YAExBlI,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAAEgF,KAAMqU,MAC5DvT,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,IACrDC,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAClE3E,MAAOtE,GACP0E,KAAM3E,GACNwC,UAAU,EACVwC,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMzE,GAAI,MACVmH,OAAQ,CACN2G,IAAK,CACHpH,OAAQ,CAAC,CACPE,KAAMyX,SAKd/V,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OAI3D,OAAmBC,EAAAA,GAAetD,GAAOP,I,41FCzLnCqX,GAA6B,UAC7BnW,GAAyB,OACzBlG,GAAWC,GACjB,IAAqBC,EAAAA,EAAAA,IAAM,OAAQmc,IAAnC,iBAAOlc,GAAP,MAAWif,GAAX,MAEM/e,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,GACAA,GAAAA,GAAAA,KAGJC,QAAS,CACPyN,IAAK1N,GAAAA,GAAAA,GACL6e,KAAM7e,GAAAA,GAAAA,GACN8e,SAAU9e,GAAAA,GAAAA,IAEZM,SAAU,CACRC,IAAKP,GAAAA,GAAAA,GACLQ,IAAKR,GAAAA,GAAAA,GACLS,KAAMT,GAAAA,GAAAA,KAERY,MAAO,CACLqZ,KAAMja,GAAAA,GAAAA,GACNW,SAAU,GACVI,GAAI,IAENC,MAAO,CACLT,IAAKP,GAAAA,GAAAA,GACL+e,IAAK/e,GAAAA,GAAAA,GACLW,SAAU,GACVI,GAAI,GACJK,KAAM,IAERC,SAAU,CACR0J,UAAW/K,GAAAA,GAAAA,GAAAA,GACXW,SAAUX,GAAAA,GAAAA,GAAAA,GACVsB,UAAW,IAEbE,SAAU,CACRwd,WAAYhf,GAAAA,GAAAA,GAAAA,GACZif,SAAUjf,GAAAA,GAAAA,GAAAA,GACVW,SAAUX,GAAAA,GAAAA,GAAAA,IAEZuH,eAAgB,CACd2X,kBAAmBlf,GAAAA,GAAAA,GACnB2B,KAAM3B,GAAAA,GAAAA,GACNW,SAAUX,GAAAA,GAAAA,IAEZyH,eAAgB,CACdsD,UAAW/K,GAAAA,GAAAA,GACXW,SAAUX,GAAAA,GAAAA,IAEZ2H,eAAgB,GAChBjG,eAAgB,CACdyd,MAAOnf,GAAAA,GAAAA,IAETkI,eAAgB,GAChBtG,eAAgB,CACdwd,OAAQpf,GAAAA,GAAAA,GACRia,KAAMja,GAAAA,GAAAA,KAIV,IAAmC8B,EAAAA,EAAAA,IAAK+Z,GAAc,SAAtD,iBAAOkC,GAAP,MAAsBC,GAAtB,MACA,IAA6Blc,EAAAA,EAAAA,IAAK+Z,GAAc,MAAhD,iBAAOhN,GAAP,MAAmBC,GAAnB,MACA,IAA6BhN,EAAAA,EAAAA,IAAK+Z,GAAc,MAAhD,iBAAOwD,GAAP,MAAmBC,GAAnB,MACA,IAA6Bxd,EAAAA,EAAAA,IAAK+Z,GAAc,MAAhD,iBAAO/K,GAAP,MAAmBC,GAAnB,MACMwO,IAAkBnc,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpDgd,IAAkBpc,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpDid,IAAiBC,EAAAA,EAAAA,IAAU1B,GAAW,SAASzb,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASe,MAAMqZ,MAAO,EAAG,CAAE1a,IAAK,gBACjHogB,IAAWpc,EAAAA,EAAAA,IAAOuL,GAAQjM,OAAOC,aAAYU,EAAAA,EAAAA,IAAM,EAAG3D,GAASwB,SAASC,WAAWmC,KAAI,SAAAC,GAAC,MAAI,CAACA,GAAGC,EAAAA,EAAAA,IAASD,QAAO,GAChHqH,IAAYtE,EAAAA,EAAAA,KAAQnE,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAASwB,SAAS0J,WAAY4U,IAAW,CAAEpgB,IAAK,cACjFoC,IAAOqN,EAAAA,EAAAA,IAAQxM,EAAAA,GAAAA,cAAqBqZ,IAAc1X,EAAAA,EAAAA,KAAId,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASwd,aAAa1c,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAAS2B,SAASyd,UAAWU,MACvIC,IAASld,EAAAA,EAAAA,IAAM4c,GAAQ,MAAMjc,EAAAA,EAAAA,IAAQxD,GAAS0H,eAAe5F,OAC7Dke,IAAcnd,EAAAA,EAAAA,IAAMqO,GAAQ,MAAM1N,EAAAA,EAAAA,IAAQxD,GAAS4H,eAAesD,WAAY,CAAExL,IAAK,cAErFugB,GAAY,SAAAC,GAAM,OAAIA,EAAO3U,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,GAAqC,UAAhCqZ,EAAO3U,IAAI4S,IAAWtX,OAC1FsZ,GAAY,SAAAD,GAAM,OAAIA,EAAO3U,IAAI5I,EAAAA,GAAAA,KAAWkE,OAAS,GAErDuZ,GAAgBpgB,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MAC/C,CAACA,GAAGpB,EAAAA,EAAAA,IAAKmd,IAAgBxb,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,SAAU,CAAE0J,IAAK,CAAE1K,KAAK0c,EAAAA,EAAAA,IAAU1B,GAAW,SAASra,EAAAA,EAAAA,IAAS+B,KAAa/B,EAAAA,EAAAA,IAAS,qBAC9Huc,GAAkBD,GAAcxc,KAAI,WAAYC,EAAGM,GAAf,mBAAKwC,GAAL,iBAAuB,CAAC9C,EAAIM,EAAImc,QAAS7d,EAAAA,EAAAA,KAAKA,EAAAA,EAAAA,KAAKe,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAeqY,OAAO5W,EAAAA,EAAAA,IAAQxD,GAAS+B,eAAewd,SAAU5Y,OAGjKzC,GAAc,CACzBjE,OAAQ+C,OAAOC,YAAP,kBAAuBmd,KAAvB,OAAyCC,MACjDjgB,QAAS,CACPyN,KAAKzJ,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQyN,IAAK,WAC1CmR,MAAM5a,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQ4e,KAAM,UAAW,CAAEnR,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,OAC9EoZ,UAAU9P,EAAAA,EAAAA,IAAQgP,GAAW,SAAS/Z,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQ6e,SAAU,UAAW,CAAEpR,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,SAEpHpF,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,GACPI,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,QAAS,CAAEmN,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,OACxEqZ,KAAK9a,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAM+d,IAAK,QAAS,CAAErR,IAAK,CAAE1K,KAAKW,EAAAA,EAAAA,IAAS+B,SAI/D0a,IAAU3b,EAAAA,EAAAA,GAAyBoX,GAAcnW,GAAY,UAAWlG,GAAUuE,GAAa,CAC1GW,MAAO,CACL9D,MAAO2e,GACPve,MAAOwe,IAET7a,SAAU,CACRC,OAAQ,CACNjD,KAAAA,KAGJiD,OAAQ,CACNjD,KAAMie,GACN7U,WAAW5G,EAAAA,EAAAA,IAAI4G,GAAW8U,OAIxB9a,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAAAA,GACAC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CACR,CACEC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUsc,GAAV,iCAA+CnY,KACzFoK,WAAa,CAAC,EAAG,GAAGuS,SAAS3c,IAAMuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,QAEjE,CACDf,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQyN,IAAK,CAAEnO,IAAI,QAAD,OAAUsc,GAAV,8BAC3C,CACDrV,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ4e,KAAM,CAAEtf,IAAI,QAAD,OAAUsc,GAAV,8BAC5C,CACDrV,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQ6e,SAAU,CAAEvf,IAAI,QAAD,OAAUsc,GAAV,gCAElD,CACDxV,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAKxDqB,MAAO,CACLyD,KAAM1E,GAAG,cACTuG,IAAKtF,GACLwF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CAAC,CACPD,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMG,GACtB4F,KAAM,MAERE,YAAa,CACXxC,KAAM1E,GAAG,cACTmH,KAAMiX,GACNrX,MAAOsX,GACPjX,OAAQ,CACNnG,MAAO,CACL0F,OAAQ,CAAC,CACPD,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASe,MAAMD,SACtBgG,KAAM,YAOlB3F,MAAO,CACLqD,KAAM1E,GAAG,cACTuG,IAAKlF,GACLoF,SAAU,CAAC,CACTC,KAAM1G,GAAG,qBACT2G,OAAQ,CACN,CACEE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUsc,GAAV,+BAE5C,CACErV,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAM+d,IAAK,CAAExf,IAAI,QAAD,OAAUsc,GAAV,+BAE5C,CACExV,KAAM1G,GAAG,uBACT+G,MAAO,SAAAqZ,GAAM,OAAIlgB,GAASmB,MAAML,UAAYof,EAAO3U,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAI7G,GAAS0H,eAAe2X,kBAAoB,IACrIvY,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO,QAIfrF,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,GAAU,GACjD,CACE8F,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,EAAG,GACjCkE,MAAOoI,GACPhI,KAAM+H,GACNxK,KAAM1E,GAAG,iBACToH,OAAQlE,OAAOC,aAAYU,EAAAA,EAAAA,IAAM,EAAG3D,GAASwB,SAASC,WAAWmC,KAAI,SAAAC,GAAC,MACpE,CAACA,EAAG,CACFW,KAAK,GAAD,OAAKX,EAAL,UACJ4C,OAAQ,CACN,CACEE,KAAMuE,IAER,CACE1E,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAASwB,SAASV,SACzBgG,KAAM,cAOlBnF,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAClD2F,QAAS6Y,GACTxZ,MAAMC,EAAAA,EAAAA,IAAQ9E,GAAM,CAAEpC,IAAI,QAAD,OAAUsc,GAAV,yBACxB,CACD1U,QAAS6Y,GACT3Z,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS2B,SAASb,SACzBgG,KAAM,OAERW,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,GAAI,GAAI,CAC3DL,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMua,GAAO,MACblY,MAAO4Y,GACPxY,KAAMuY,GACNtY,OAAQ,CACNS,GAAI,CACFlB,OAAQ,CAAC,CACPE,MAAM7C,EAAAA,EAAAA,IAAS9D,GAAS0H,eAAe5F,KAAM,CAAEpC,IAAK,UACnD,CACD8G,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS0H,eAAe5G,SAC/BgG,KAAM,UAKdc,eAAgB,CACdpD,KAAM1E,GAAG,uBACTuG,IAAKwB,GACLtB,SAAU,CAAC,CACTC,KAAM1G,GAAG,8BACTkH,YAAa,CACXM,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C6B,KAAMua,GAAO,MACblY,MAAOqK,GACPjK,KAAMgK,GACN/J,OAAQ,CACNW,GAAI,CACFpB,OAAQ,CACN,CACEE,KAAMqZ,IACL,CACDxZ,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS4H,eAAe9G,SAC/BgG,KAAM,YAOpBgB,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAM+Y,MAClE7d,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,IACrDK,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMgZ,MAClE5d,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,GACnDvI,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,EAAG4E,GAAP,MAAiC,CAC1DnB,QAAS2Y,GACTtZ,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,EAAI4E,EAAE6X,QAAS,CAAE5gB,IAAI,QAAD,OAAUsc,GAAV,iCAA+CnY,KACpGoK,WAAa,CAAC,EAAG,GAAGuS,SAAS3c,IAAMuD,EAAAA,EAAAA,IAAG,SAAU,CAAEG,MAAO,IAAO,WAO1E,OAAmBiB,EAAAA,GAAetD,GAAOqb,I,ulHCrTnC5gB,GAAWC,GAEXF,GAAoB,SAE1B,IAAkBG,EAAAA,EAAAA,IAAM,OAAQH,IAAhC,iBAAOI,GAAP,MAAWC,GAAX,MAEI0I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAChB3I,GAAW,CACfC,OAAQ,CACNC,OAAQ,CACNC,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,MACpBtI,GAAAA,GAAoBsI,QAGxBrI,QAAS,CACPM,IAAKP,GAAAA,GAAoBsI,MACzBI,QAAS1I,GAAAA,GAAoBsI,MAAK,IAEpChI,SAAU,CACRC,IAAKP,GAAAA,GAAoBsI,MACzB9H,IAAKR,GAAAA,GAAoBsI,MACzB7H,KAAMT,GAAAA,GAAoBsI,OAE5B1H,MAAO,CACL0f,QAAStgB,GAAAA,GAAqBuI,MAC9BgY,OAAQvgB,GAAAA,GAAqBuI,MAC7BhI,IAAKP,GAAAA,GAAqBuI,MAC1BE,KAAMzI,GAAAA,GAAqBuI,MAC3BqH,KAAM5P,GAAAA,GAAqBuI,MAC3BxH,GAAIf,GAAAA,GAAqBuI,MAAK,IAEhCvH,MAAO,CACLT,IAAKP,GAAAA,GAAqBwI,MAC1BsE,OAAQ9M,GAAAA,GAAqBwI,MAC7B7H,SAAUX,GAAAA,GAAqBwI,MAAK,GACpCzH,GAAIf,GAAAA,GAAqBwI,MAAK,GAC9Be,SAAUvJ,GAAAA,GAAqBwI,MAAK,GACpCgY,WAAYxgB,GAAAA,GAAqBwI,MAAK,IAExChH,SAAU,CACRsL,OAAQ9M,GAAAA,GAAAA,KAA4B,SAAAsI,GAAC,OAAIA,EAAE,OAE7Cb,eAAgB,CACdgZ,UAAWzgB,GAAAA,GAAAA,IAEb0B,eAAgB,CACdD,KAAMzB,GAAAA,GAAAA,GACNW,SAAUX,GAAAA,GAAAA,IAEZ4B,eAAgB,CACdX,OAAQjB,GAAAA,GAAAA,KAIN8d,IAAS1a,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,IAAW,GAClCD,EAAAA,EAAAA,IAAU4B,EAAAA,GAAAA,WAAA,UAAOuc,EAAAA,EAAAA,KAAgB,SAAA1d,GAAG,OAAII,EAAAA,EAAAA,IAAUud,EAAAA,GAAM3d,GAAM,EAAG,QAAxD,CAA+D,GAA/D,eAAqEnD,GAAS2B,SAASsL,SAAS,CAAEvN,IAAK,OAElH,IAAmCuC,EAAAA,EAAAA,IAAKvC,GAAK,SAA7C,iBAAOwC,GAAP,MAAsBC,GAAtB,MACMoY,IAAY1X,EAAAA,EAAAA,IAAM,KAAMV,IAAWmC,EAAAA,EAAAA,KACvC7B,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,OAAAA,KAAkB2B,EAAAA,EAAAA,KAAI5B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAAA,WAAwB3C,GAASmB,MAAM8L,OAAQ,CAAEvN,IAAK,MAAQue,OAE/F1C,IAAShY,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAMV,GAAWnC,GAAS4H,eAAegZ,YAEhG,IAA6B3e,EAAAA,EAAAA,IAAKvC,GAAK,MAAvC,iBAAO4C,GAAP,MAAmBC,GAAnB,MACM6b,IAAS7a,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAMN,GAAQvC,GAAS6B,eAAeD,OAEvFkd,IAASvb,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,GAAGE,EAAAA,EAAAA,IAAM,KAAMV,GAAWnC,GAAS+B,eAAeX,SAE1F8C,GAAc,CAClBjE,OAAQ+C,OAAOC,YAAYjD,GAASC,OAAOC,OAAO0D,KAAI,SAACO,EAAKN,GAAN,MACpD,CAACA,GAAGO,EAAAA,EAAAA,IAAQ,MAAOD,EAAK,eAC1B/D,QAAS,CACPM,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASI,QAAQM,IAAK,YAE5CD,SAAUuC,OAAOC,YAAYD,OAAOuB,QAAQvE,GAASS,UAAUmD,KAAI,+BAAElE,EAAF,KAAOmH,EAAP,WACjE,CAACnH,GAAK0E,EAAAA,EAAAA,IAAQ,MAAOyC,EAAO,iBAC9B9F,MAAO,CACLL,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAML,IAAK,SACxCkI,MAAMxE,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAM6H,KAAM,SAC1CmH,MAAM3L,EAAAA,EAAAA,IAAQ,MAAOpE,GAASe,MAAMgP,KAAM,SAC1C2Q,QAAQK,EAAAA,EAAAA,IAAiB,KAAM/gB,GAASe,MAAM0f,QAASzgB,GAASe,MAAM2f,OAAQ,UAEhFvf,MAAO,CACLT,KAAK0D,EAAAA,EAAAA,IAAQ,MAAOpE,GAASmB,MAAMT,IAAK,SACxCuM,OAAQsN,KAGN9V,IAASlB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3C+B,IAASnB,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GACpCgC,IAAOC,EAAAA,EAAAA,GAAyBlF,GA3Fd,MA2F+B,QAASC,GAAUuE,GAAa,CAC5FW,MAAO,CACL9D,MAAO2D,GACPvD,MAAOsD,IAETM,OAAQ,CACNnD,KAAMwc,GACN1c,QAASod,IAEXha,SAAU,CACRC,OAAQ,CACNic,cAAezG,GACftI,YAAasJ,OAKbrW,GAAyB,CAC7BV,KAAM1E,GAAG,QACTqF,QAASC,GACTC,SAAUC,GACVC,aAAcC,GACdC,UAAWC,GACXC,OAAQhG,GAASiG,KACjBC,WAnH6B,MAoH7BC,cAAenG,GAASmG,cACxBC,OAAQ,IACRC,kBAAmBlG,GAAG,qBACtBmG,MAAOnG,GAAG,SACVoG,OAAQ,CACNC,OAAQ,CACNC,KAAM,CACJ5B,KAAM1E,GAAG,aACTuG,KAAKC,EAAAA,EAAAA,IAAU3G,GAASmG,eACxBS,SAAU,CAAC,CACTC,KAAM1G,GAAG,sBACT2G,OAAQzG,GAASC,OAAOC,OAAO0D,KAAI,SAAC8C,EAAG7C,GAAJ,MAAW,CAC5C8C,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYjE,OAAO4D,GAAI,CAAEnE,IAAI,QAAD,OAAUA,GAAV,iCAAsCmE,GAAKA,EAAI,GAAK,EAAI,IAAMA,EAAI,GAAK,EAAI,MACrHoK,WAAmB,IAANpK,GAAiB,IAANA,EAAW,MAAe,IAANA,GAAiB,IAANA,EAAW,MAAQ,QAE3E,CACD2C,KAAM1G,GAAG,uBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY9D,QAAQM,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,8BAC3C,CACD8G,KAAM1G,GAAG,sBACT+G,MAAO7G,GAASI,QAAQyI,WAEzB,CACDrC,KAAM1G,GAAG,wBACT2G,OAAQ,CAAC,CACPE,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASC,IAAK,CAAEhB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASE,IAAK,CAAEjB,IAAK,4BAC9C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYzD,SAASG,KAAM,CAAElB,IAAK,iCAItDqB,OAAOyG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIiB,GAAO,CAAC,CACzC4F,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAML,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM6H,KAAM,CAAElJ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAMgP,KAAM,CAAErQ,IAAI,QAAD,OAAUA,GAAV,+BAC1C,CACDiH,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAYnD,MAAM2f,OAAQ,CAAEhhB,IAAI,QAAD,OAAUA,GAAV,+BAC5C,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO,SAAAlC,GAAI,OAAIA,EAAK4G,IAAI5I,EAAAA,GAAAA,eAAqBkE,OAAS,EAAvC,UACR7G,GAASe,MAAMG,GADP,qBACsBlB,GAASe,MAAMG,IAAI,EAAE,MAAO+f,QAAQ,IAD1D,UAERjhB,GAASe,MAAMG,KACtB4F,KAAM,OAER3F,OAAOqG,EAAAA,EAAAA,IAAe,QAAS1H,GAAIqB,GAAO,CAAC,CACzCwF,MAAMC,EAAAA,EAAAA,IAAQ1C,GAAY/C,MAAMT,IAAK,CAAEhB,IAAI,QAAD,OAAUA,GAAV,+BACzC,CACD8G,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMD,GACtB4F,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMuI,WACpB,CACF5E,UAAU,EACV+B,MAAO1E,GACP8E,KAAM/E,GACNsC,KAAMzE,GAAI,SACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAM4T,IACL,CACD5T,KAAM4U,IACL,CACD5U,KAAMmY,IACL,CACDtY,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAML,SACtBgG,KAAM,KACL,CACDN,KAAM1G,GAAG,uBACT+G,MAAO7G,GAASmB,MAAMwf,iBAK9Bnf,UAAUgG,EAAAA,EAAAA,IAAe,WAAY1H,GAAI0B,IACzCG,UAAU6F,EAAAA,EAAAA,IAAe,WAAY1H,GAAI6B,GAAU,CAAC,CAAEgF,MAAMC,EAAAA,EAAAA,IAAQqX,GAAQ,CAAEve,IAAI,QAAD,OAAUA,GAAV,gBACjF+H,UAAUD,EAAAA,EAAAA,IAAe,WAAY1H,GAAI2H,IACzCC,gBAAgBF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI6H,IACrDC,gBAAgBJ,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAI+H,GAAI,CAAC,CAAElB,KAAM4U,MAClEzT,gBAAgBN,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIiI,GAAI,CAAC,CAAEpB,KAAMlC,MAClE5C,gBAAgB2F,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIkI,QAAIwD,EAAW,CAClElE,SAAS/D,EAAAA,EAAAA,IAAUZ,EAAAA,GAAAA,cAAqB,EAAG,GAC3CkE,MAAOtE,GACP0E,KAAM3E,GACNkC,KAAMzE,GAAI,MACVmH,OAAQ,CACNC,GAAI,CACFV,OAAQ,CAAC,CACPE,KAAMyX,IACL,CACD5X,MAAM4B,EAAAA,EAAAA,IAAI,YACVvB,MAAO7G,GAAS6B,eAAef,SAC/BgG,KAAM,UAKduB,gBAAgBb,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIwI,GAAI,CAAC,CAAE3B,KAAMjC,MAClE3C,gBAAgByF,EAAAA,EAAAA,IAAe,iBAAkB1H,GAAIyI,OCxI3D,GAjDyD,CAIvD2Y,YAAAA,GAGAC,QAAAA,GAIAC,KAAAA,GAIAC,MAAAA,GAEAC,gBAAAA,GAEAC,cAAAA,GAGAC,UAAAA,GAEAC,KAAAA,GAIAC,aAAAA,GAKAC,OAAAA,GACAC,QAAAA,GAKAC,UAAAA,GAEAC,QAAAA,GAEAC,QAAAA,GAEAC,QAAAA,GACAC,OD+IF,IAAmBzZ,EAAAA,GAAetD,GAAOP,M,uME3O5ByC,EAAK,SAAC8a,EAAgB7a,GAAjB,OAAqC,SAAC,IAAD,CAAW8a,GAAG,QAAQC,MAAOF,EAAQ7a,OAAQA,KACvFe,EAAM,SAAC8Z,GAAD,OAAoB,SAAC,IAAD,CAAWC,GAAG,YAAYC,MAAOF,KAE3DnR,EAAe,SAAC9J,GAAD,OAAoBob,EAAAA,EAAAA,IAAiB,CAAC,eAAF,eAAoBpb,MAC7E,SAAShF,EAAKvC,EAAgD4iB,GACnE,IAAMrb,EAAO,CAACvH,EAAK4iB,GAEnB,MAAO,CAACrb,EADK8J,EAAa9J,IAQrB,SAASpH,EAAM0iB,EAAyC7iB,GAC7D,MAAO,CACL,SAACwiB,GAAD,OAAoB,SAAC,IAAD,CAAWC,GAAE,UAAKI,EAAL,YAAgB7iB,EAAhB,QAA2B0iB,MAAOF,KACnE,SAACA,EAAgB7a,GAAjB,OAAqC,SAAC,IAAD,CAAW8a,GAAE,UAAKI,EAAL,YAAgB7iB,GAAO0iB,MAAOF,EAAQ7a,OAAQA,Q","sources":["Data/Characters/AratakiItto/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.total.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: customDmgNode(sum(\r\n      prod(subscript(input.total.autoIndex, datamine.charged.akSlash, { key: '_' }), input.total.atk),\r\n      nodeA4Bonus), \"charged\"),\r\n    akFinal: customDmgNode(sum(\r\n      prod(subscript(input.total.autoIndex, datamine.charged.akFinal, { key: '_' }), input.total.atk),\r\n      nodeA4Bonus), \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.ss.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.stam,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"skill.skillParams.3\"),\r\n              value: datamine.skill.cd,\r\n              unit: \"s\"\r\n            }\r\n          ],\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }],\r\n          conditional: {\r\n            name: tr(\"burst.name\"),\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  {\r\n                    text: st(\"infusion.geo\"),\r\n                    variant: \"geo\",\r\n                  },\r\n                  {\r\n                    node: nodeBurstAtkSpd,\r\n                  },\r\n                  ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n                  {\r\n                    node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n                  },\r\n                  {\r\n                    text: tr(\"burst.skillParams.2\"),\r\n                    value: datamine.burst.duration,\r\n                    unit: \"s\"\r\n                  }]\r\n              }\r\n            }\r\n\r\n          }\r\n        }],\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: {\r\n            name: trm(\"a1.name\"),\r\n            canShow: greaterEq(input.asc, 1, 1),\r\n            value: condP1,\r\n            path: condP1Path,\r\n            states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n              [i, {\r\n                name: st(\"stack_one\", { count: i }),\r\n                fields: [\r\n                  {\r\n                    node: nodeP1AtkSpd\r\n                  },\r\n                ]\r\n              }]))\r\n          },\r\n        }],\r\n      },\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n          conditional: {\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4.name\"),\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  {\r\n                    node: nodeC4Atk\r\n                  }, {\r\n                    node: nodeC4Def\r\n                  },\r\n                  {\r\n                    text: sgt(\"duration\"),\r\n                    value: datamine.constellation4.duration,\r\n                    unit: \"s\"\r\n                  }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 20, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 50, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc)\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"inArea\")\r\nconst inArea = equal(\"inArea\", condInArea, 1)\r\nconst inAreaAtk = equal(inArea, 1,\r\n  prod(atkIncRatio, input.base.atk))\r\n\r\nconst inAreaA4 = greaterEq(input.asc, 4,\r\n  equal(inArea, 1, datamine.passive2.cd_red))\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst inAreaC6PyroDmg = equal(inArea, 1,\r\n  equal(c6AndCorrectWep, 1, datamine.constellation6.pyro_dmg))\r\nconst inAreaC6Infusion = equalStr(inArea, 1,\r\n  equalStr(c6AndCorrectWep, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: inAreaAtk,\r\n  },\r\n  constellation1: {\r\n    addlATK: prod(c1Atk, input.base.atk)\r\n  },\r\n  constellation4: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg)\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: inAreaC6PyroDmg,\r\n      atk: inAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: inAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((percentArr, i) =>\r\n          ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              node: infoMut(inAreaAtk, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.cd_red,\r\n        unit: \"%\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        states: {\r\n          inArea: {\r\n            fields: [{ // Node will not show CD reduction, have to use value instead\r\n              text: st(\"skillCDRed\"),\r\n              value: datamine.passive2.cd_red,\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        text: trm(\"additionalATKRatio\"),\r\n        value: datamine.constellation1.atk_inc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        node: infoMut(dmgFormulas.constellation1.addlATK, { key: `char_${key}:additionalATK` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: trm(\"belowHP\"),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: c6AndCorrectWep,\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inArea: {\r\n            fields: [{\r\n              node: inAreaC6PyroDmg\r\n            }, {\r\n              text: <ColorText color={elementKey}>{st(\"infusion.pyro\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(inAreaA4).value / 100);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: i === 2 ? \"(2 Hits)\" : i === 4 ? \"(2 Hits)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.9\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {}\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: trm(\"passive2.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P,\r\n    unequal(target.charKey, key, datamine.constellation2.elemas)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 \r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cd}`,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.3\"),\r\n            value: data => data.get(input.constellation).value >= 1\r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cdHold}`,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: greaterEq(input.constellation, 2, 1),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: greaterEq(input.constellation, 2, unequal(target.charKey, key, 1)),\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            // Only show the description once\r\n            description: eleKey === \"hydro\" ? tr(\"passive2.description\"): \"\",\r\n            name: trm(`a4.name_${eleKey}`),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{\r\n        //TODO: put into subsection since this is teambuff\r\n        //   description: tr(\"passive3.description\"),\r\n        node: passive\r\n      }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }], { //sprint\r\n        value: condAfterSprint,\r\n        path: condAfterSprintPath,\r\n        name: trm(\"afterSprint\"),\r\n        states: {\r\n          afterSprint: {\r\n            fields: [{\r\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n              text: <ColorText color=\"cryo\">Cryo Infusion</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.sprint.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        //After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        //sprint\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condAfterApplySprint,\r\n        path: condAfterApplySprintPath,\r\n        name: trm(\"afterSprintCryo\"),\r\n        states: {\r\n          afterApplySprint: {\r\n            fields: [{\r\n              text: trm(\"staminaRestore\"),\r\n              value: datamine.passive2.stamina,\r\n            }, {\r\n              node: afterApplySprintCryo\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"snowflakeDMG\"),\r\n        value: datamine.constellation2.snowflake,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        // Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            }, {\r\n              node: c6ChargedDmg_,\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst skillTenguAmbush_ = equal(target.activeCharKey, target.charKey, equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' }))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              node: skillTenguAmbush_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1 = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.3\"),\r\n            value: `${datamine.skill.duration}s / ${datamine.skill.durationHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.trigger}s / ${datamine.skill.triggerHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.5\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"skill.skillParams.6\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: st(\"charges\"),\r\n            value: (data) => data.get(input.constellation).value >= 1 ? 3 : 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            description: tr(\"skill.description\"),\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: nodeSkill\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(\"asc4Cond\"),\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: nodeAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: nodeAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: nodeAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // CONSTELLATION4\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            value: condC4,\r\n            path: condC4Path,\r\n            header: conditionalHeader(\"constellation4\", tr, passive2),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4\"),\r\n            states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n              name: i.toString(),\r\n              fields: [{ node: c4Inc }]\r\n            }))\r\n          }\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            description: tr(\"burst.description\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: nodeBurstCryo_enemyRes_\r\n                }, {\r\n                  node: nodeBurstPhysical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: greaterEq(input.asc, 1, equal(input.activeCharKey, input.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"activeCharField\"),\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: nodeAsc1\r\n                }, {\r\n                  node: nodeC2\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Condition = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, 1)))\r\nconst asc1 = equal(asc1Condition, 1, datamine.passive1.eleMas)\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        canShow: greaterEq(input.asc, 1, unequal(target.charKey, characterKey, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: asc1,\r\n          }, {\r\n            // TODO: uncomment after `target` bug is fixed\r\n            // canShow: data => data.get(asc1Condition).value,\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(target.charKey, characterKey, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: asc4,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\"),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\"),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay_WR'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: 10,\r\n    cd: 18\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: 10,\r\n    cd: 15,\r\n    cost: 60\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1, { key: 'normal_dmg_' })\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_' })\r\nconst atk_ = unequal(input.activeCharKey, characterKey, sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_' })\r\n\r\nconst canShowC6 = uiData => uiData.get(input.constellation).value >= 6 && uiData.get(condSkill).value === 'skill'\r\nconst canShowA4 = uiData => uiData.get(input.asc).value >= 4\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i, arr) => [i + arr.length, (prod(prod(percent(datamine.constellation6.dmg_), percent(datamine.constellation6.chance)), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries([...normalEntries, ...kindlingEntries]),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: datamine.skill.cd,\r\n            unit: 's'\r\n          }],\r\n          conditional: {\r\n            name: tr(\"skill.name\"),\r\n            path: condSkillPath,\r\n            value: condSkill,\r\n            states: {\r\n              skill: {\r\n                fields: [{\r\n                  text: tr(\"skill.skillParams.1\"),\r\n                  value: datamine.skill.duration,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n            },\r\n            {\r\n              node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n            },\r\n            {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: 60,\r\n            }]\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [],\r\n        {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [\r\n                {\r\n                  node: pyro_dmg_\r\n                },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive1.duration,\r\n                  unit: \"s\"\r\n                }\r\n              ]\r\n\r\n            }]))\r\n        }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: canShowA4,\r\n        node: infoMut(atk_, { key: `char_${characterKey}_gen:passive2.name` })\r\n      }, {\r\n        canShow: canShowA4,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive2.duration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: {\r\n        name: tr(\"constellation2.name\"),\r\n        img: c2,\r\n        sections: [{\r\n          text: tr(\"constellation2.description\"),\r\n          conditional: {\r\n            canShow: greaterEq(input.constellation, 2, 1),\r\n            name: charTr(\"c2\"),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            states: {\r\n              c2: {\r\n                fields: [\r\n                  {\r\n                    node: c2pyro_dmg_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: datamine.constellation2.duration,\r\n                    unit: \"s\"\r\n                  }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i, a): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.normal[i + a.length], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\n// import Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\n// import Diluc from './Diluc'\r\n// import Diona from './Diona'\r\nimport Eula from './Eula'\r\n// import Fischl from './Fischl'\r\n// import Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\n// import Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\n// import Keqing from './Keqing'\r\n// import Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\nimport Mona from './Mona'\r\n// import Ningguang from './Ningguang'\r\n// import Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\n// import SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\n// import Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\n// import Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\n// import Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  AratakiItto,\r\n  // Barbara,\r\n  // Beidou,\r\n  Bennett,\r\n  // Chongyun,\r\n  // Diluc,\r\n  // Diona,\r\n  Eula,\r\n  // Fischl,\r\n  // Ganyu,\r\n  // Gorou,\r\n  HuTao,\r\n  // Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  // Keqing,\r\n  // Klee,\r\n  KujouSara,\r\n  // Lisa,\r\n  Mona,\r\n  // Ningguang,\r\n  // Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  // SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  // Venti,\r\n  Xiangling,\r\n  // Xiao,\r\n  Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  // Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["key","data_gen","data_gen_src","trans","tr","trm","datamine","normal","hitArr","skillParam_gen","charged","sSlash","akSlash","akFinal","stam","plunging","dmg","low","high","ss","duration","skill","hp","ss_cd","cd","burst","atkSpd","defConv","resDec","cost","passive1","maxStacks","atkSPD_","passive2","def_","constellation4","atk_","constellation6","charged_critDMG_","cond","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","prod","subscript","input","nodeBurstAtk","equal","nodeBurstAtkSpd","allNodeBurstRes","Object","fromEntries","allElementsWithPhy","ele","nodeBurstInfusion","equalStr","nodeA4Bonus","greaterEq","percent","nodeP1AtkSpd","lookup","range","map","i","constant","nodeC4Atk","nodeC4Def","nodeC6CritDMG","dmgFormulas","arr","dmgNode","customDmgNode","sum","entries","name","nodeC3","nodeC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","atk","infusion","sheet","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","weaponTypeKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","infoMut","value","unit","variant","conditional","path","states","on","st","values","canShow","count","talentTemplate","passive3","constellation1","c1","constellation2","c2","constellation3","c3","c4","header","conditionalHeader","description","sgt","constellation5","c5","c6","CharacterSheet","a","s","b","dmg1","stamina","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","enerCost","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","c1Atk","atkIncRatio","condInAreaPath","condInArea","inArea","inAreaAtk","inAreaA4","c6AndCorrectWep","target","inAreaC6PyroDmg","inAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","regen","healNodeTalent","atkInc","addlATK","pyro_dmg_","team","enerRech_","percentArr","calculateSkillCD","get","undefined","color","skillCD","cdFactor","result","p1","spinningDmg","finalDmg","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","unknown","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","maxStack","percentage","physInc","dmgInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","cryo_enemyRes_","physical_enemyRes_","physical_dmg_","lightSwordAdditional","burst_dmg_","hit","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","textSuffix","p2","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","critRateInc","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","min","condA1Path","condA1","critRateTeam_1","unequal","condA2Path","condA2","critRateTeam_2","condC6Path","condC6","critRate_","ele_res_s","lessThan","dmgC2","customHealNode","total","dmg2","cdHold","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","condC2Path","condC2","c2EleMas","condC2PPath","condC2P","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","normal_dmg_","charged_dmg_","plunging_dmg_","staminaSprintDec_","eleMas","eleKey","c2p","swirl","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","condAfterBurstPath","condAfterBurst","afterBurst","cutting","bloom","enemyDefRed_","cryo_dmg_","afterSprint","afterSkill","afterApplySprint","aimed","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_","x","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","Math","abs","maxDmgBonus","hydro_dmg_","condOmenPath","condOmen","all_dmg_","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","skillDmg","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","initial","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","electro_dmg_","skillEye","c","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","durationInc","dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2","c4Inc","quillDmg","all_dmgInc","skill_dmg_","cryo_critDMG_","quill","toString","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Condition","asc1","c6Base","c6Bonus","slice","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","pyro_enemyRes_","dmgRed_","hydro_enemyRes_","skill_duration","nodeA4","condSkillPath","condSkill","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","nodeC6","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","cdRed","chance","condC1Path","condC1","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","uiData","canShowA4","normalEntries","kindlingEntries","length","dataObj","includes","shield_","shield","triggerNum","normalInc","allElements","tally","shieldNodeTalent","normal_dmgInc","toFixed","AratakiItto","Bennett","Eula","HuTao","KaedeharaKazuha","KamisatoAyaka","KujouSara","Mona","RaidenShogun","Shenhe","Sucrose","Xiangling","Xingqiu","YaeMiko","Yoimiya","YunJin","strKey","ns","key18","customStringRead","subKey","typeKey"],"sourceRoot":""}