{"version":3,"file":"static/js/246.ec0144f9.chunk.js","mappings":"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","sources":["Components/Character/LocationName.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts"],"sourcesContent":["import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey, Rarity } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (id: string) => void,\r\n  onDelete?: (id: string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const mainStatUnit = KeyMap.unit(mainStatKey) === \"flat\" ? null : KeyMap.unit(mainStatKey)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\r\n              <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}{mainStatUnit}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat) => <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\r\n  if (!stat.value) return null\r\n  const numRolls = stat.rolls?.length ?? 0\r\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\r\n  const rollData = stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : []\r\n  const rollOffset = 7 - rollData.length\r\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n  const efficiency = stat.efficiency ?? 0\r\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n  // TODO: make the displaying of statname & unit with % less jank\r\n  const statName = KeyMap.getStr(stat.key)?.split(\"%\")[0]\r\n  const unit = KeyMap.unit(stat.key) === \"flat\" ? \"\" : \"%\"\r\n  const inFilter = stat.key && effFilter.has(stat.key)\r\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\r\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\r\n    {inFilter && <Box display=\"flex\" gap={0.25} height=\"90%\">\r\n      {stat.rolls.sort().map(v => <SmolProgress value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\r\n    </Box>}\r\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n  </Box>)\r\n}\r\nfunction SmolProgress({ color = \"red\", value = 50 }) {\r\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\r\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\r\n  </Box>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from '../Data/Artifacts/Artifact'\r\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n//\r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n *\r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n *\r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/**\r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n *\r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   *\r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   *\r\n   * Then\r\n   *\r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   *\r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   *\r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   *\r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n *\r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n"],"names":["LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","component","name","nameWIthIcon","sx","verticalAlign","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","database","useContext","DatabaseContext","databaseArtifact","artifactID","useState","_getArt","artifact","setArtifact","useEffect","followArt","undefined","useArtifact","sheet","ArtifactSheet","setKey","editable","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","max","min","mainStatUnit","KeyMap","levelVariant","floor","mainStatVal","color","cacheValueString","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","BootstrapTooltip","placement","title","Typography","icon","faInfoCircle","setEffects","setDescTooltip","Object","keys","map","setNumKey","variant","SqBadge","setNum","setEffectDesc","Suspense","fallback","Skeleton","width","height","minHeight","CardLight","display","flexDirection","CardContent","className","pt","pb","pr","Box","alignItems","Chip","size","label","pl","flexGrow","IconButton","disabled","onClick","updateArt","Lock","LockOpen","Grid","container","flexWrap","item","StatIcon","stars","colored","maxWidth","mt","mb","alignSelf","CardMedia","image","slotIcons","stat","SubstatDisplay","key","my","PercentBadge","value","valid","probability","toFixed","CardActions","xs","flexShrink","CharacterDropdownButton","inventory","onChange","charKey","setArtLocation","mr","ButtonGroup","Button","faEdit","Tooltip","arrow","faBan","faChartLine","faTrashAlt","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","clamp","efficiency","effOpacity","clamp01","statName","split","unit","inFilter","has","gap","alignContent","sort","v","SmolProgress","indexOf","opacity","minWidth","textAlign","bgcolor","overflow","borderRadius","badgeColor","text","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","i","layeredAssignment","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","_target","NaN","target","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","entries","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","parseInt","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values"],"sourceRoot":""}