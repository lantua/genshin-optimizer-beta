{"version":3,"file":"static/js/222.0760ccfa.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, matchFull, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  input.infusion,\r\n  input.team.infusion,\r\n  // Inferred Element\r\n  matchFull(input.weaponType, \"catalyst\", input.charEle, undefined),\r\n  matchFull(input.hit.move, \"skill\", input.charEle, undefined),\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, infoMut, match, matchFull, percent, prod, threshold, threshold_add, unmatch } from '../../../Formula/utils'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, threshold_add(input.asc, 4,\r\n    match(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = threshold_add(input.constellation, 2,\r\n  match(\"c2\", condC2, datamine.constellation2.elemas), { key: `eleMas` })\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = threshold_add(input.constellation, 2,\r\n  match(\"c2p\", condC2P,\r\n    unmatch(target.charKey, key, datamine.constellation2.elemas)\r\n  ), { key: `eleMas` })\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = threshold(input.constellation, 6,\r\n  matchFull(\"c6\", condC6, \"anemo\", undefined),\r\n  undefined\r\n)\r\nconst c6Dmg_ = threshold_add(input.constellation, 6,\r\n  match(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, match(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, match(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cd}s - 10%` : `${datamine.skill.cd}s`,\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cdHold}s - 10%` : `${datamine.skill.cdHold}s`,\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: threshold_add(input.constellation, 2, 1,),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: threshold_add(input.constellation, 2,\r\n              unmatch(target.charKey, key, 1)),\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Skill Absorption\r\n            value: condSkillAbsorption,\r\n            path: condSkillAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }],\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(`a4.name_${eleKey}`),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: {\r\n        name: tr(\"passive3.name\"),\r\n        img: passive3,\r\n        sections: [{\r\n          text: tr(\"passive3.description\"),\r\n          fields: [{ //TODO: put into subsection since this is teambuff\r\n            //   header: conditionalHeader(\"passive3\", tr, passive3),\r\n            //   description: tr(\"passive3.description\"),\r\n            node: passive\r\n          }]\r\n        }],\r\n      },\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: {\r\n        name: tr(\"constellation6.name\"),\r\n        img: c6,\r\n        sections: [{\r\n          text: tr(\"constellation6.description\"),\r\n          conditional: {//Crimson Momiji\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6.after\"),\r\n            states: {\r\n              c6: {\r\n                fields: [\r\n                  // { // TODO:\r\n                  //   node: c6infusion\r\n                  // },\r\n                  {\r\n                    canShow: data => data.get(c6infusion).value === \"anemo\",\r\n                    text: <ColorText color=\"anemo\">Anemo Infusion</ColorText>\r\n                  },\r\n                  {\r\n                    node: c6NormDmg_\r\n                  }, {\r\n                    node: c6ChargedDmg_\r\n                  }, {\r\n                    node: c6PlungingDmg_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: datamine.constellation6.duration,\r\n                    unit: \"s\",\r\n                  }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, match, prod, subscript, threshold_add } from '../../../Formula/utils'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst quillDmg = match(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = match(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst cryo_enemyRes_ = { ...enemyRes_ }\r\nconst physical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst asc1Buff = threshold_add(input.asc, 1,\r\n  match(condAsc1, \"field\",\r\n    match(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst buffAsc4Press = threshold_add(input.asc, 1,\r\n  match(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst buffAsc4Press_skill_dmg_ = { ...buffAsc4Press }\r\nconst buffAsc4Press_burst_dmg_ = { ...buffAsc4Press }\r\nconst buffAsc4Hold = threshold_add(input.asc, 1,\r\n  match(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst buffAsc4Hold_normal_dmg_ = { ...buffAsc4Hold }\r\nconst buffAsc4Hold_charged_dmg_ = { ...buffAsc4Hold }\r\nconst buffAsc4Hold_plunging_dmg_ = { ...buffAsc4Hold }\r\n\r\nconst con2Buff = threshold_add(input.constellation, 2,\r\n  match(condAsc1, \"field\",\r\n    match(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    quillDmg\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmgInc: quillDmg,\r\n      cryo_enemyRes_,\r\n      physical_enemyRes_,\r\n      cryo_dmg_: asc1Buff,\r\n      skill_dmg_: buffAsc4Press_skill_dmg_,\r\n      burst_dmg_: buffAsc4Press_burst_dmg_,\r\n      normal_dmg_: buffAsc4Hold_normal_dmg_,\r\n      charged_dmg_: buffAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: buffAsc4Hold_plunging_dmg_,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 2 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.3\"),\r\n            value: `${datamine.skill.duration}s / ${datamine.skill.durationHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.trigger}s / ${datamine.skill.triggerHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.5\"),\r\n            value: datamine.skill.cd\r\n          }, {\r\n            text: tr(\"skill.skillParams.6\"),\r\n            value: datamine.skill.cd\r\n          }, {\r\n            text: st(\"charges\"),\r\n            value: (data) => data.get(input.constellation).value >= 1 ? 3 : 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: quillDmg\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: threshold_add(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: <span>After Shenhe uses <strong>Spring Spirit Summoning</strong></span>,\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: buffAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: buffAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: buffAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: buffAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: buffAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: cryo_enemyRes_\r\n                }, {\r\n                  node: physical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: threshold_add(input.asc, 1, match(input.activeCharKey, input.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: \"Active Character in field\",\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: asc1Buff\r\n                }, {\r\n                  node: con2Buff\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n        }],\r\n        // TODO: stacking boost to E\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, infoMut, match, percent, prod, sum, threshold_add, unmatch } from \"../../../Formula/utils\"\r\nimport { CharacterKey, Rarity, WeaponTypeKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { conditionalHeader, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// Conditional Input\r\n// Absorption Element\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\n// TODO: Check if total or premod\r\nconst asc1 = threshold_add(input.asc, 1,\r\n  unmatch(target.charKey, characterKey,\r\n    match(target.charEle, condSwirlReaction, datamine.passive1.eleMas)), { key: \"eleMas\" })\r\nconst asc4 = match(\"hit\", condSkillHitOpponent,\r\n  unmatch(target.charKey, characterKey,\r\n    threshold_add(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))), { key: \"eleMas\" })\r\nconst c6Base = threshold_add(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  match(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, match(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\nexport const data = dataObjForCharacterSheet(characterKey, \"anemo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: sum(asc1, asc4) },\r\n    premod: c6Bonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star as Rarity,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((percentArr, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSwirlReaction,\r\n            path: condSwirlReactionPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"eleSwirled\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: asc1,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSkillHitOpponent,\r\n            path: condSkillHitOpponentPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: trm(\"asc4\"),\r\n            states: {\r\n              hit: {\r\n                fields: [{\r\n                  node: asc4,\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }],\r\n              }\r\n            }\r\n          },\r\n        }]\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\n// import AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\n// import Beidou from './Beidou'\r\n// import Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\n// import Diluc from './Diluc'\r\n// import Diona from './Diona'\r\n// import Eula from './Eula'\r\n// import Fischl from './Fischl'\r\n// import Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\n// import HuTao from './HuTao'\r\n// import Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\n// import KamisatoAyaka from './KamisatoAyaka'\r\n// import Keqing from './Keqing'\r\n// import Klee from './Klee'\r\n// import KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\n// import Mona from './Mona'\r\n// import Ningguang from './Ningguang'\r\n// import Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\n// import RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\n// import SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\n// import Venti from './Venti'\r\n// import Xiao from './Xiao'\r\n// import Xiangling from './Xiangling'\r\n// import Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\n// import Yanfei from './Yanfei'\r\n// import Yoimiya from './Yoimiya'\r\n// import Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  // AratakiItto,\r\n  // Barbara,\r\n  // Beidou,\r\n  // Bennett,\r\n  // Chongyun,\r\n  // Diluc,\r\n  // Diona,\r\n  // Eula,\r\n  // Fischl,\r\n  // Ganyu,\r\n  // Gorou,\r\n  // HuTao,\r\n  // Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  // KamisatoAyaka,\r\n  // Keqing,\r\n  // Klee,\r\n  // KujouSara,\r\n  // Lisa,\r\n  // Mona,\r\n  // Ningguang,\r\n  // Noelle,\r\n  // Qiqi,\r\n  // RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  // SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  // Venti,\r\n  // Xiao,\r\n  // Xiangling,\r\n  // Xingqiu,\r\n  // Xinyan,\r\n  // Yanfei,\r\n  // Yoimiya,\r\n  // Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["absorbableEle","charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","allSubstats","key","input","critRate_","inferredHitEle","stringPrio","matchFull","undefined","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","dmgNode","lvlMultiplier","talentType","prod","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","trans","tr","trm","a","s","b","p1","p2","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","press","cd","hold","cdHold","burst","dot","add","duration","enerCost","passive1","asorbAdd","passive2","elemas_dmg_","constellation2","elemas","constellation6","auto_","cond","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","fromEntries","e","condSwirls","condReadNode","asc4","threshold_add","match","percent","condC2Path","condC2","c2EleMas","condC2PPath","condC2P","c2PEleMas","unmatch","target","condC6Path","condC6","c6infusion","threshold","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","dmgFormulas","arr","i","entries","pdmg","plow","phigh","normal_dmg_","charged_dmg_","plunging_dmg_","bonus","staminaSprintDec_","total","eleMas","infusion","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","textSuffix","Translate","ns","key18","count","get","canShow","unit","conditional","path","st","states","eleKey","color","sgt","c2","header","conditionalHeader","description","c2p","swirl","passive3","constellation1","talentTemplate","c1","constellation3","c3","constellation4","c4","constellation5","c5","c6","CharacterSheet","dmgAtk_","durationHold","trigger","triggerHold","res_","cryo_dmg_","press_dmg_","durationPress","hold_dmg_","durationInc","condQuillPath","condQuill","quillDmg","condBurstPath","condBurst","enemyRes_","cryo_enemyRes_","physical_enemyRes_","condAsc1Path","condAsc1","asc1Buff","condAsc4Path","condAsc4","buffAsc4Press","buffAsc4Press_skill_dmg_","buffAsc4Press_burst_dmg_","buffAsc4Hold","buffAsc4Hold_normal_dmg_","buffAsc4Hold_charged_dmg_","buffAsc4Hold_plunging_dmg_","con2Buff","all_dmgInc","skill_dmg_","burst_dmg_","quill","field","characterKey","dmg_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1","c6Base","c6Bonus","percentArr","KaedeharaKazuha","Shenhe","Sucrose","strKey","customStringRead","subKey","typeKey"],"sourceRoot":""}