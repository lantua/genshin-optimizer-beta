{"version":3,"sources":["Data/SheetUtil.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/Artifacts/Adventurer/flower.png","Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/Adventurer/plume.png","Data/Artifacts/Adventurer/sands.png","Data/Artifacts/Adventurer/goblet.png","Data/Artifacts/Adventurer/circlet.png","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/ArchaicPetra/flower.png","Data/Artifacts/ArchaicPetra/plume.png","Data/Artifacts/ArchaicPetra/sands.png","Data/Artifacts/ArchaicPetra/goblet.png","Data/Artifacts/ArchaicPetra/circlet.png","Data/Artifacts/ArchaicPetra/icons.tsx","Data/Artifacts/ArchaicPetra/index.tsx","Data/Artifacts/Berserker/flower.png","Data/Artifacts/Berserker/plume.png","Data/Artifacts/Berserker/sands.png","Data/Artifacts/Berserker/goblet.png","Data/Artifacts/Berserker/circlet.png","Data/Artifacts/Berserker/icons.tsx","Data/Artifacts/Berserker/index.tsx","Data/Artifacts/BlizzardStrayer/flower.png","Data/Artifacts/BlizzardStrayer/plume.png","Data/Artifacts/BlizzardStrayer/sands.png","Data/Artifacts/BlizzardStrayer/goblet.png","Data/Artifacts/BlizzardStrayer/circlet.png","Data/Artifacts/BlizzardStrayer/icons.tsx","Data/Artifacts/BlizzardStrayer/index.tsx","Data/Artifacts/BloodstainedChivalry/flower.png","Data/Artifacts/BloodstainedChivalry/plume.png","Data/Artifacts/BloodstainedChivalry/sands.png","Data/Artifacts/BloodstainedChivalry/goblet.png","Data/Artifacts/BloodstainedChivalry/circlet.png","Data/Artifacts/BloodstainedChivalry/icons.tsx","Data/Artifacts/BloodstainedChivalry/index.tsx","Data/Artifacts/BraveHeart/icons.tsx","Data/Artifacts/BraveHeart/flower.png","Data/Artifacts/BraveHeart/plume.png","Data/Artifacts/BraveHeart/sands.png","Data/Artifacts/BraveHeart/goblet.png","Data/Artifacts/BraveHeart/circlet.png","Data/Artifacts/BraveHeart/index.tsx","Data/Artifacts/CrimsonWitchOfFlames/icons.tsx","Data/Artifacts/CrimsonWitchOfFlames/flower.png","Data/Artifacts/CrimsonWitchOfFlames/plume.png","Data/Artifacts/CrimsonWitchOfFlames/sands.png","Data/Artifacts/CrimsonWitchOfFlames/goblet.png","Data/Artifacts/CrimsonWitchOfFlames/circlet.png","Data/Artifacts/CrimsonWitchOfFlames/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/flower.png","Data/Artifacts/EmblemOfSeveredFate/plume.png","Data/Artifacts/EmblemOfSeveredFate/sands.png","Data/Artifacts/EmblemOfSeveredFate/goblet.png","Data/Artifacts/EmblemOfSeveredFate/circlet.png","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/Gambler/icons.tsx","Data/Artifacts/Gambler/flower.png","Data/Artifacts/Gambler/plume.png","Data/Artifacts/Gambler/sands.png","Data/Artifacts/Gambler/goblet.png","Data/Artifacts/Gambler/circlet.png","Data/Artifacts/Gambler/index.tsx","Data/Artifacts/GladiatorsFinale/icons.tsx","Data/Artifacts/GladiatorsFinale/flower.png","Data/Artifacts/GladiatorsFinale/plume.png","Data/Artifacts/GladiatorsFinale/sands.png","Data/Artifacts/GladiatorsFinale/goblet.png","Data/Artifacts/GladiatorsFinale/circlet.png","Data/Artifacts/GladiatorsFinale/index.tsx","Data/Artifacts/HeartOfDepth/icons.tsx","Data/Artifacts/HeartOfDepth/flower.png","Data/Artifacts/HeartOfDepth/plume.png","Data/Artifacts/HeartOfDepth/sands.png","Data/Artifacts/HeartOfDepth/goblet.png","Data/Artifacts/HeartOfDepth/circlet.png","Data/Artifacts/HeartOfDepth/index.tsx","Data/Artifacts/HuskOfOpulentDreams/icons.tsx","Data/Artifacts/HuskOfOpulentDreams/flower.png","Data/Artifacts/HuskOfOpulentDreams/plume.png","Data/Artifacts/HuskOfOpulentDreams/sands.png","Data/Artifacts/HuskOfOpulentDreams/goblet.png","Data/Artifacts/HuskOfOpulentDreams/circlet.png","Data/Artifacts/HuskOfOpulentDreams/index.tsx","Data/Artifacts/LuckyDog/icons.tsx","Data/Artifacts/LuckyDog/flower.png","Data/Artifacts/LuckyDog/plume.png","Data/Artifacts/LuckyDog/sands.png","Data/Artifacts/LuckyDog/goblet.png","Data/Artifacts/LuckyDog/circlet.png","Data/Artifacts/LuckyDog/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/flower.png","Data/Artifacts/NoblesseOblige/plume.png","Data/Artifacts/NoblesseOblige/sands.png","Data/Artifacts/NoblesseOblige/goblet.png","Data/Artifacts/NoblesseOblige/circlet.png","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/OceanHuedClam/icons.tsx","Data/Artifacts/OceanHuedClam/flower.png","Data/Artifacts/OceanHuedClam/plume.png","Data/Artifacts/OceanHuedClam/sands.png","Data/Artifacts/OceanHuedClam/goblet.png","Data/Artifacts/OceanHuedClam/circlet.png","Data/Artifacts/OceanHuedClam/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/flower.png","Data/Artifacts/ViridescentVenerer/plume.png","Data/Artifacts/ViridescentVenerer/sands.png","Data/Artifacts/ViridescentVenerer/goblet.png","Data/Artifacts/ViridescentVenerer/circlet.png","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/index.ts"],"names":["st","strKey","values","ns","key18","sgt","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","Stat","this","Error","printStat","statKey","stats","Translate","absorbableEle","charCurves","objectMap","_charCurves","value","Object","commonBasic","objectKeyMap","allSubstats","input","total","critRate_","cappedCritRate","inferredHitEle","stringPrio","infusion","team","equalStr","weaponType","charEle","hit","move","getTalentType","customDmgNode","base","additional","data","dmg","mergeData","constant","ele","undefined","dmgNode","lvlMultiplier","talentType","prod","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","lvl","basic","foundSpecial","charKey","weaponTypeKey","premod","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","asc","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","special","allMainStatKeys","inferInfoMut","icons","flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","displayArtifact","set2","greaterEq","artSet","Adventurer","heal","percent","hp","sheet","name","rarity","setEffects","2","document","fields","node","4","ArtifactSheet","tr","trm","ArchaicPetra","condPath","condNode","set4Nodes","fromEntries","e","equal","geo_dmg_","durationfield","text","unit","conditional","header","title","icon","ImgIcon","size","sx","m","src","action","SqBadge","color","description","states","critRate_info","Berserker","set4","70","condStatePath","condState","BlizzardStrayer","lookup","naught","cryo_dmg_","cryo","frozen","BloodstainedChivalry","set4Charged","set4StamDec","charged_dmg_","staminaDec_","BraveHeart","atk_","all_dmg_","50","condStackPath","condStack","pyro_dmg_info","CrimsonWitchOfFlames","set4Overload","set4Burning","set4Vape","set4Melt","stackArr","range","set4Pyro_dmg_","i","pyro_dmg_","overloaded_dmg_","burning_dmg_","vaporize_dmg_","melt_dmg_","toString","EmblemOfSeveredFate","burstBonus","min","enerRech_","burst_dmg_","Gambler","skill_dmg_","GladiatorsFinale","normal_dmg_","HeartOfDepth","set4Norm","hydro_dmg_","cast","def_info","HuskOfOpulentDreams","set4Def","set4Geo","def_","LuckyDog","def","NoblesseOblige","condSet4Path","condSet4","set4TallyWrite","set4TallyRead","customRead","NO4","on","OceanHuedClam","heal_","anemo_dmg_","ViridescentVenerer","swirl_dmg_","condSwirlPaths","condSwirls","condSwirlNodes","objectKeyValueMap","eleKey","swirl","elementalData","artifacts"],"mappings":"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","file":"static/js/27.dbbd5d25.chunk.js","sourcesContent":["import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\n  ]\n}\n","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, equalStr, infoMut, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\ncommonBasic.critRate_ = input.total.cappedCritRate\n\nconst inferredHitEle = stringPrio(\n  input.infusion,\n  input.team.infusion,\n  // Inferred Element\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\n  equalStr(input.hit.move, \"skill\", input.charEle),\n  \"physical\",\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","export default __webpack_public_path__ + \"static/media/flower.1e05231c.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/plume.40546dc8.png\";","export default __webpack_public_path__ + \"static/media/sands.47890ea0.png\";","export default __webpack_public_path__ + \"static/media/goblet.fb105aeb.png\";","export default __webpack_public_path__ + \"static/media/circlet.bf871ab6.png\";","import { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { ArtifactSetKey } from \"../../Types/consts\";\n\nexport function dataObjForArtifactSheet(\n  key: ArtifactSetKey,\n  data: Data = {},\n  displayArtifact: DisplaySub = {},\n): Data {\n  return mergeData([inferInfoMut(data, key), {\n    display: {\n      [`artifact:${key}`]: displayArtifact\n    },\n  }])\n}\n","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"Adventurer\"\nconst set2 = greaterEq(input.artSet.Adventurer, 2, 1000)\nconst heal = greaterEq(input.artSet.Adventurer, 4,\n  prod(percent(0.3), input.total.hp))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    hp: set2\n  },\n}, {\n  heal,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Adventurer\", rarity: [3],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","export default __webpack_public_path__ + \"static/media/flower.3935cb40.png\";","export default __webpack_public_path__ + \"static/media/plume.dfe96a7d.png\";","export default __webpack_public_path__ + \"static/media/sands.1b88a469.png\";","export default __webpack_public_path__ + \"static/media/goblet.c364d1e3.png\";","export default __webpack_public_path__ + \"static/media/circlet.63236f78.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","import ImgIcon from '../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../Components/SqBadge'\nimport { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { IFieldDisplay } from '../../../Types/IFieldDisplay_WR'\nimport { absorbableEle } from '../../Characters/dataUtil'\nimport { cond, sgt, trans } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\nconst key: ArtifactSetKey = \"ArchaicPetra\"\nconst [tr, trm] = trans(\"artifact\", key)\n\nconst set2 = greaterEq(input.artSet.ArchaicPetra, 2, percent(0.2))\nconst [condPath, condNode] = cond(key, \"element\")\nconst set4Nodes = Object.fromEntries(absorbableEle.map(e => [`${e}_dmg_`,\ngreaterEq(input.artSet.ArchaicPetra, 4,\n  equal(e, condNode, percent(0.35))\n)\n]))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    geo_dmg_: set2,\n  },\n  teamBuff: {\n    premod: set4Nodes\n  }\n}, undefined)\nconst durationfield: IFieldDisplay = {\n  text: sgt(\"duration\"),\n  value: 10,\n  unit: \"s\"\n}\n\nconst sheet: IArtifactSheet = {\n  name: \"Archaic Petra\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          path: condPath,\n          value: condNode,\n          teamBuff: true,\n          header: {\n            title: tr(\"setName\"),\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\n            action: <SqBadge color=\"success\">4-set</SqBadge>\n          },\n          description: tr(`setEffects.4`),\n          name: trm(\"condName\"),\n          states: Object.fromEntries(absorbableEle.map(e => [e, {\n            name: sgt(`element.${e}`),\n            fields: [{\n              node: set4Nodes[`${e}_dmg_`]\n            }, durationfield]\n          }])),\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","export default __webpack_public_path__ + \"static/media/flower.c02a7f41.png\";","export default __webpack_public_path__ + \"static/media/plume.837e8b5c.png\";","export default __webpack_public_path__ + \"static/media/sands.c219ad2b.png\";","export default __webpack_public_path__ + \"static/media/goblet.b675a75c.png\";","export default __webpack_public_path__ + \"static/media/circlet.321a4496.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","import { input } from '../../../Formula'\nimport { Data, Info } from '../../../Formula/type'\nimport { equal, percent, sum, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { cond, st } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\nconst key: ArtifactSetKey = \"Berserker\"\nconst critRate_info: Info = { key: \"critRate_\" }\nconst set2 = greaterEq(input.artSet.Berserker, 2, percent(0.12), critRate_info)\nconst [condPath, condNode] = cond(key, \"hp\")\nconst set4 = greaterEq(input.artSet.Berserker, 4,\n  equal(\"70\", condNode, percent(0.24)), critRate_info)\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    critRate_: sum(set2, set4),\n  },\n}, undefined)\nconst sheet: IArtifactSheet = {\n  name: \"Berserker\", rarity: [3, 4],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          path: condPath,\n          value: condNode,\n          name: st(\"lessPercentHP\", { percent: 70 }),\n          states: {\n            70: {\n              fields: [{\n                node: set4,\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","export default __webpack_public_path__ + \"static/media/flower.dffc6372.png\";","export default __webpack_public_path__ + \"static/media/plume.04b35bc0.png\";","export default __webpack_public_path__ + \"static/media/sands.0e6cd041.png\";","export default __webpack_public_path__ + \"static/media/goblet.f66cea5d.png\";","export default __webpack_public_path__ + \"static/media/circlet.71ed366e.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport { cond, trans } from '../../SheetUtil'\n\nconst key: ArtifactSetKey = \"BlizzardStrayer\"\n\nconst [, trm] = trans(\"artifact\", key)\n\nconst [condStatePath, condState] = cond(key, \"state\")\n\nconst set2 = greaterEq(input.artSet.BlizzardStrayer, 2, percent(0.15))\nconst set4 = greaterEq(input.artSet.BlizzardStrayer, 4, lookup(condState, { \"cryo\": percent(0.20), \"frozen\": percent(0.40) }, naught))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    cryo_dmg_: set2,\n    critRate_: set4\n  }\n})\n\nconst sheet: IArtifactSheet = {//Icebreaker\n  name: \"Blizzard Strayer\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          value: condState,\n          path: condStatePath,\n          name: trm(\"condName\"),\n          states: {\n            cryo: {\n              name: trm(\"condCryo\"),\n              fields: [{ node: set4 }]\n            },\n            frozen: {\n              name: trm(\"condFrozen\"),\n              fields: [{ node: set4 }]\n            }\n          }\n        }\n      }],\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","export default __webpack_public_path__ + \"static/media/flower.90eb2f30.png\";","export default __webpack_public_path__ + \"static/media/plume.84ca5601.png\";","export default __webpack_public_path__ + \"static/media/sands.5788c8a2.png\";","export default __webpack_public_path__ + \"static/media/goblet.46036e69.png\";","export default __webpack_public_path__ + \"static/media/circlet.c740e3ae.png\";","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","import { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { cond, st } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\nconst key: ArtifactSetKey = \"BloodstainedChivalry\"\nconst set2 = greaterEq(input.artSet.BloodstainedChivalry, 2, percent(0.25))\nconst [condPath, condNode] = cond(key, \"defeat\")\nconst set4Charged = greaterEq(input.artSet.BloodstainedChivalry, 4,\n  equal(\"hit\", condNode, percent(0.5)))\nconst set4StamDec = greaterEq(input.artSet.BloodstainedChivalry, 4,\n  equal(\"hit\", condNode, percent(1)))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    physical_dmg_: set2,\n    charged_dmg_: set4Charged,\n    staminaDec_: set4StamDec,\n  },\n}, undefined)\nconst sheet: IArtifactSheet = {\n  name: \"Bloodstained Chivalry\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          path: condPath,\n          value: condNode,\n          name: st(\"afterDefeatEnemy\", { percent: 70 }),\n          states: {\n            hit: {\n              fields: [{\n                node: set4Charged\n              }, {\n                node: set4StamDec\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.5da683e2.png\";","export default __webpack_public_path__ + \"static/media/plume.0c39b54c.png\";","export default __webpack_public_path__ + \"static/media/sands.28297dd9.png\";","export default __webpack_public_path__ + \"static/media/goblet.70b13ba4.png\";","export default __webpack_public_path__ + \"static/media/circlet.5c8eefde.png\";","import { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { cond, trans } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\n\nconst key: ArtifactSetKey = \"BraveHeart\"\nconst [, trm] = trans(\"artifact\", key)\nconst set2 = greaterEq(input.artSet.BraveHeart, 2, percent(0.18))\nconst [condPath, condNode] = cond(key, \"hp\")\nconst set4 = greaterEq(input.artSet.BraveHeart, 4,\n  equal(\"50\", condNode, percent(0.3))\n)\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    atk_: set2,\n    all_dmg_: set4,\n  },\n}, undefined)\n\nconst sheet: IArtifactSheet = {\n  name: \"Brave Heart\", rarity: [3, 4],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          path: condPath,\n          value: condNode,\n          name: trm(\"condName\"),\n          states: {\n            50: {\n              fields: [{\n                node: set4,\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.a3625cd2.png\";","export default __webpack_public_path__ + \"static/media/plume.008da8ad.png\";","export default __webpack_public_path__ + \"static/media/sands.8c19d6aa.png\";","export default __webpack_public_path__ + \"static/media/goblet.caecf233.png\";","export default __webpack_public_path__ + \"static/media/circlet.a52fe562.png\";","import { input } from '../../../Formula'\nimport { Data, Info } from '../../../Formula/type'\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { st } from '../../Characters/SheetUtil'\nimport { cond } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\n\nconst key: ArtifactSetKey = \"CrimsonWitchOfFlames\"\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst pyro_dmg_info: Info = { key: \"pyro_dmg_\", variant: \"pyro\" }\nconst set2 = greaterEq(input.artSet.CrimsonWitchOfFlames, 2, percent(0.15), pyro_dmg_info)\nconst set4Overload = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.4))\nconst set4Burning = { ...set4Overload }\nconst set4Vape = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.15))\nconst set4Melt = { ...set4Vape }\nconst stackArr = range(1, 3)\nconst set4Pyro_dmg_ = greaterEq(input.artSet.CrimsonWitchOfFlames, 4,\n  lookup(condStack,\n    Object.fromEntries(stackArr.map(i => [i, percent(0.15 * i / 2)]))\n    , naught),\n  pyro_dmg_info)\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    pyro_dmg_: sum(set2, set4Pyro_dmg_),\n    overloaded_dmg_: set4Overload,\n    burning_dmg_: set4Burning,\n    vaporize_dmg_: set4Vape,\n    melt_dmg_: set4Melt,\n  },\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Crimson Witch of Flames\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: set4Overload,\n        }, {\n          node: set4Burning,\n        }, {\n          node: set4Vape,\n        }, {\n          node: set4Melt,\n        }],\n        conditional: {\n          value: condStack,\n          path: condStackPath,\n          name: st(\"afterUse.skill\"),\n          states: Object.fromEntries(stackArr.map(i => [i, {\n            name: i.toString(),\n            fields: [{ node: set4Pyro_dmg_ }]\n          }]))\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.03a26b70.png\";","export default __webpack_public_path__ + \"static/media/plume.f8998212.png\";","export default __webpack_public_path__ + \"static/media/sands.c0e7d7a5.png\";","export default __webpack_public_path__ + \"static/media/goblet.14a77065.png\";","export default __webpack_public_path__ + \"static/media/circlet.e8fcadf0.png\";","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { min, percent, prod, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\n\nconst set2 = greaterEq(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\n\nconst burstBonus = greaterEq(input.artSet.EmblemOfSeveredFate, 4,\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    enerRech_: set2,\n    burst_dmg_: burstBonus,\n  },\n}, {\n  burstBonus,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: burstBonus,\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.67868a25.png\";","export default __webpack_public_path__ + \"static/media/plume.3de87c17.png\";","export default __webpack_public_path__ + \"static/media/sands.1348742f.png\";","export default __webpack_public_path__ + \"static/media/goblet.2fec87dd.png\";","export default __webpack_public_path__ + \"static/media/circlet.7ffbbe36.png\";","import { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { percent, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\n\nconst key: ArtifactSetKey = \"Gambler\"\n\nconst set2 = greaterEq(input.artSet.Gambler, 2, percent(0.2))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    skill_dmg_: set2\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Gambler\", rarity: [3, 4],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {}\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.4d301fa4.png\";","export default __webpack_public_path__ + \"static/media/plume.28d79593.png\";","export default __webpack_public_path__ + \"static/media/sands.23425783.png\";","export default __webpack_public_path__ + \"static/media/goblet.9daedb67.png\";","export default __webpack_public_path__ + \"static/media/circlet.e804bb32.png\";","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"GladiatorsFinale\"\n\nconst set2 = greaterEq(input.artSet.GladiatorsFinale, 2, percent(0.18))\nconst set4 = greaterEq(input.artSet.GladiatorsFinale, 4, lookup(input.weaponType, { \"sword\": percent(0.35), \"polearm\": percent(0.35), \"claymore\": percent(0.35) }, naught))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    atk_: set2,\n    normal_dmg_: set4\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Gladiator's Finale\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: set4,\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.419ba3d2.png\";","export default __webpack_public_path__ + \"static/media/plume.c85a1908.png\";","export default __webpack_public_path__ + \"static/media/sands.347924be.png\";","export default __webpack_public_path__ + \"static/media/goblet.505b3b75.png\";","export default __webpack_public_path__ + \"static/media/circlet.b5742556.png\";","import { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { cond, st } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\nconst key: ArtifactSetKey = \"HeartOfDepth\"\nconst set2 = greaterEq(input.artSet.HeartOfDepth, 2, percent(0.15))\nconst [condPath, condNode] = cond(key, \"skill\")\nconst set4Norm = greaterEq(input.artSet.HeartOfDepth, 4,\n  equal(\"cast\", condNode, percent(0.3)))\nconst set4Charged = { ...set4Norm }\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    hydro_dmg_: set2,\n    normal_dmg_: set4Norm,\n    charged_dmg_: set4Charged,\n  },\n}, undefined)\nconst sheet: IArtifactSheet = {//Ocean Conqueror\n  name: \"Heart of Depth\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          path: condPath,\n          value: condNode,\n          name: st(\"afterUse.skill\"),\n          states: {\n            cast: {\n              fields: [{\n                node: set4Norm,\n              }, {\n                node: set4Charged,\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.365e7926.png\";","export default __webpack_public_path__ + \"static/media/plume.047e4547.png\";","export default __webpack_public_path__ + \"static/media/sands.e3e55117.png\";","export default __webpack_public_path__ + \"static/media/goblet.baf4ef32.png\";","export default __webpack_public_path__ + \"static/media/circlet.3bc8882e.png\";","import { input } from '../../../Formula'\nimport { Data, Info } from '../../../Formula/type'\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { range } from '../../../Util/Util'\nimport { cond, trans } from '../../SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\n\nconst key: ArtifactSetKey = \"HuskOfOpulentDreams\"\nconst [, trm] = trans(\"artifact\", key)\nconst [condStackPath, condStack] = cond(key, \"stack\")\nconst def_info: Info = { key: \"def_\" }\nconst set2 = greaterEq(input.artSet.HuskOfOpulentDreams, 2, percent(0.3), def_info)\nconst stackArr = range(1, 4)\n\nconst set4Def = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\n  lookup(condStack,\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\n    , naught),\n  def_info)\nconst set4Geo = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\n  lookup(condStack,\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\n    , naught))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    def_: sum(set2, set4Def),\n    geo_dmg_: set4Geo,\n  },\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Husk of Opulent Dreams\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          value: condStack,\n          path: condStackPath,\n          name: trm(\"condName\"),\n          states: Object.fromEntries(stackArr.map(i => [i, {\n            name: i.toString(),\n            fields: [{ node: set4Def }, {\n              node: set4Geo\n            }]\n          }]))\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.dacbeacd.png\";","export default __webpack_public_path__ + \"static/media/plume.998d1a5c.png\";","export default __webpack_public_path__ + \"static/media/sands.c5e3e0f2.png\";","export default __webpack_public_path__ + \"static/media/goblet.5c49d774.png\";","export default __webpack_public_path__ + \"static/media/circlet.73e2a8af.png\";","import icons from './icons'\nimport { Data } from '../../../Formula/type'\nimport { infoMut, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nconst key: ArtifactSetKey = \"LuckyDog\"\nconst set2 = greaterEq(input.artSet.LuckyDog, 2, 100)\nconst heal = greaterEq(input.artSet.LuckyDog, 4, 300)\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    def: set2\n  },\n}, {\n  heal,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Lucky Dog\", rarity: [3],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.0c959d66.png\";","export default __webpack_public_path__ + \"static/media/plume.859357f9.png\";","export default __webpack_public_path__ + \"static/media/sands.f177f0e0.png\";","export default __webpack_public_path__ + \"static/media/goblet.b2696785.png\";","export default __webpack_public_path__ + \"static/media/circlet.171108c7.png\";","import icons from './icons'\nimport { Translate } from '../../../Components/Translate'\nimport ImgIcon from '../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../Components/SqBadge'\nimport { sgt } from '../../Characters/SheetUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { customRead, equal, percent, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport { cond } from '../../SheetUtil'\n\nconst key: ArtifactSetKey = \"NoblesseOblige\"\n\nconst tr = (strKey: string) => <Translate ns={`artifact_${key}_gen`} key18={strKey} />\n\nconst set2 = greaterEq(input.artSet.NoblesseOblige, 2, percent(0.2))\n\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\nconst set4TallyWrite = greaterEq(input.artSet.NoblesseOblige, 4, equal(condSet4, \"on\", 1))\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\nconst set4 = greaterEq(set4TallyRead, 1, percent(0.2))\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    burst_dmg_: set2,\n    atk_: set4,\n  },\n  teamBuff: {\n    tally: {\n      NO4: set4TallyWrite\n    }\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Noblesse Oblige\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        conditional: {\n          teamBuff: true,\n          value: condSet4,\n          path: condSet4Path,\n          header: {\n            title: tr(\"setName\"),\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\n            action: <SqBadge color=\"success\">4-set</SqBadge>\n          },\n          description: tr(`setEffects.4`),\n          name: <Translate ns=\"artifact_NoblesseOblige\" key18=\"condName\" />,\n          states: {\n            on: {\n              fields: [{\n                node: set4\n              }, {\n                text: sgt(\"duration\"),\n                value: 12,\n                unit: \"s\"\n              }]\n            }\n          }\n        }\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.20045a2d.png\";","export default __webpack_public_path__ + \"static/media/plume.09db835b.png\";","export default __webpack_public_path__ + \"static/media/sands.dcdf98b5.png\";","export default __webpack_public_path__ + \"static/media/goblet.c1b07458.png\";","export default __webpack_public_path__ + \"static/media/circlet.9606eeb5.png\";","import { input } from '../../../Formula'\nimport { Data } from '../../../Formula/type'\nimport { constant, infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { customDmgNode } from '../../Characters/dataUtil'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport icons from './icons'\nconst key: ArtifactSetKey = \"OceanHuedClam\"\nconst set2 = greaterEq(input.artSet.OceanHuedClam, 2, 1000)\nconst heal = greaterEq(input.artSet.OceanHuedClam, 4,\n  customDmgNode(prod(percent(0.9), 30000), \"elemental\", {\n    hit: { ele: constant(\"physical\") }\n  })\n)\n\nexport const data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    heal_: set2\n  },\n}, {\n  heal,\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Ocean-Hued Clam\", rarity: [4, 5],\n  icons,\n  setEffects: {\n    2: { document: [{ fields: [{ node: set2 }] }] },\n    4: {\n      document: [{\n        fields: [{\n          node: infoMut(heal, { key: `artifact_${key}:condName`, variant: \"physical\" })\n        }]\n      }]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import flower from './flower.png'\nimport plume from './plume.png'\nimport sands from './sands.png'\nimport goblet from './goblet.png'\nimport circlet from './circlet.png'\nconst icons = { flower, plume, sands, goblet, circlet } as const\nexport default icons\n","export default __webpack_public_path__ + \"static/media/flower.78f9a382.png\";","export default __webpack_public_path__ + \"static/media/plume.fdfba7f4.png\";","export default __webpack_public_path__ + \"static/media/sands.c326b170.png\";","export default __webpack_public_path__ + \"static/media/goblet.89409f60.png\";","export default __webpack_public_path__ + \"static/media/circlet.cadf7990.png\";","import icons from './icons'\nimport ImgIcon from '../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../Components/SqBadge'\nimport { sgt } from '../../Characters/SheetUtil'\nimport { absorbableEle } from '../../Characters/dataUtil'\nimport ColorText from '../../../Components/ColoredText'\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\nimport { ArtifactSetKey } from '../../../Types/consts'\nimport { dataObjForArtifactSheet } from '../dataUtil'\nimport { Data } from '../../../Formula/type'\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\nimport { input } from '../../../Formula'\nimport elementalData from '../../ElementalData'\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\nimport { condReadNode, st, trans } from '../../SheetUtil'\n\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\nconst [tr] = trans(\"artifact\", key)\n\nconst anemo_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 2, percent(0.15))\nconst swirl_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 4, percent(0.6))\n\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\n\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\ngreaterEq(input.artSet.ViridescentVenerer, 4,\n  equal(\"swirl\", condSwirls[e], percent(-0.4))\n)])\n\nconst data: Data = dataObjForArtifactSheet(key, {\n  premod: {\n    anemo_dmg_,\n    swirl_dmg_,\n  },\n  teamBuff: {\n    premod: {\n      ...condSwirlNodes\n    }\n  }\n})\n\nconst sheet: IArtifactSheet = {\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\n  setEffects: {\n    2: {\n      document: [{\n        fields: [{ node: anemo_dmg_ }]\n      }]\n    },\n    4: {\n      document: [{\n        fields: [{ node: swirl_dmg_ }],\n      },\n      ...absorbableEle.map(eleKey => ({\n        conditional: { // Poetics of Fuubutsu\n          value: condSwirls[eleKey],\n          path: condSwirlPaths[eleKey],\n          teamBuff: true,\n          header: {\n            title: tr(\"setName\"),\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\n            action: <SqBadge color=\"success\">4-set</SqBadge>\n          },\n          description: tr(`setEffects.4`),\n          name: st(\"eleSwirled\"),\n          states: {\n            swirl: {\n              name: <ColorText color={eleKey}>{elementalData[eleKey].name}</ColorText>,\n              fields: [{\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\n              }, {\n                text: sgt(\"duration\"),\n                value: 10,\n                unit: \"s\"\n              }]\n            }\n          }\n        },\n      }))\n      ]\n    }\n  }\n}\nexport default new ArtifactSheet(key, sheet, data)\n","import { ArtifactSetKey } from '../../Types/consts'\nimport { ArtifactSheet } from './ArtifactSheet'\n\nimport Adventurer from './Adventurer'\nimport ArchaicPetra from './ArchaicPetra'\nimport Berserker from './Berserker'\nimport BlizzardStrayer from './BlizzardStrayer'\nimport BloodstainedChivalry from './BloodstainedChivalry'\nimport BraveHeart from './BraveHeart'\nimport CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\n// import DefendersWill from './DefendersWill'\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\nimport Gambler from './Gambler'\nimport GladiatorsFinale from './GladiatorsFinale'\nimport HeartOfDepth from './HeartOfDepth'\nimport HuskOfOpulentDreams from './HuskOfOpulentDreams'\n// import Instructor from './Instructor'\n// import Lavawalker from './Lavawalker'\nimport LuckyDog from './LuckyDog'\n// import MaidenBeloved from './MaidenBeloved'\n// import MartialArtist from './MartialArtist'\nimport NoblesseOblige from './NoblesseOblige'\nimport OceanHuedClam from './OceanHuedClam'\n// import PaleFlame from './PaleFlame'\n// import PrayersForDestiny from './PrayersForDestiny'\n// import PrayersForIllumination from './PrayersForIllumination'\n// import PrayersForWisdom from './PrayersForWisdom'\n// import PrayersToSpringtime from './PrayersToSpringtime'\n// import ResolutionOfSojourner from './ResolutionOfSojourner'\n// import RetracingBolide from './RetracingBolide'\n// import Scholar from './Scholar'\n// import ShimenawasReminiscence from './ShimenawasReminiscence'\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith'\n// import TheExile from './TheExile'\n// import ThunderingFury from './ThunderingFury'\n// import Thundersoother from './Thundersoother'\n// import TinyMiracle from './TinyMiracle'\n// import TravelingDoctor from './TravelingDoctor'\nimport ViridescentVenerer from './ViridescentVenerer'\n// import WanderersTroupe from './WanderersTroupe'\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\n  Adventurer,\n  ArchaicPetra,\n  Berserker,\n  BlizzardStrayer,\n  BloodstainedChivalry,\n  BraveHeart,\n  CrimsonWitchOfFlames,\n  // DefendersWill,\n  EmblemOfSeveredFate,\n  Gambler,\n  GladiatorsFinale,\n  HeartOfDepth,\n  HuskOfOpulentDreams,\n  // Instructor,\n  // Lavawalker,\n  LuckyDog,\n  // MaidenBeloved,\n  // MartialArtist,\n  NoblesseOblige,\n  OceanHuedClam,\n  // PaleFlame,\n  // PrayersForDestiny,\n  // PrayersForIllumination,\n  // PrayersForWisdom,\n  // PrayersToSpringtime,\n  // ResolutionOfSojourner,\n  // RetracingBolide,\n  // Scholar,\n  // ShimenawasReminiscence,\n  // TenacityOfTheMillelith,\n  // TheExile,\n  // ThunderingFury,\n  // Thundersoother,\n  // TinyMiracle,\n  // TravelingDoctor,\n  ViridescentVenerer,\n  // WanderersTroupe,\n} as const\n\nexport default artifacts\n"],"sourceRoot":""}