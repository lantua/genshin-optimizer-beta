{"version":3,"file":"static/js/11.bfc3573c.chunk.js","mappings":"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","sources":["Components/Character/LocationName.tsx","Components/Weapon/WeaponSelectionModal.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","PageArtifact/PercentBadge.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","PageWeapon/WeaponDisplayCard.tsx","ReactHooks/useWeapon.tsx"],"sourcesContent":["import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n/**\r\n * @deprecated\r\n */\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\n/**\r\n * @deprecated\r\n */\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      }\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey, Rarity } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (id: string) => void,\r\n  onDelete?: (id: string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const mainStatUnit = KeyMap.unit(mainStatKey) === \"flat\" ? null : KeyMap.unit(mainStatKey)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\r\n              <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}{mainStatUnit}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat) => <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\r\n  if (!stat.value) return null\r\n  const numRolls = stat.rolls?.length ?? 0\r\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\r\n  const rollData = stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : []\r\n  const rollOffset = 7 - rollData.length\r\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n  const efficiency = stat.efficiency ?? 0\r\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n  const statName = KeyMap.get(stat.key)\r\n  const inFilter = stat.key && effFilter.has(stat.key)\r\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\r\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}`}</Typography>\r\n    {inFilter && <Box display=\"flex\" gap={0.25} height=\"90%\">\r\n      {stat.rolls.sort().map(v => <SmolProgress value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\r\n    </Box>}\r\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n  </Box>)\r\n}\r\nfunction SmolProgress({ color = \"red\", value = 50 }) {\r\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\r\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\r\n  </Box>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { ExpandMore } from \"@mui/icons-material\"\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useState } from \"react\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\r\nimport { DisplaySub } from \"../Formula/type\"\r\nimport { NodeDisplay } from \"../Formula/uiData\"\r\nimport KeyMap, { valueString } from \"../KeyMap\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CardLight from \"./Card/CardLight\"\r\nimport ColorText from \"./ColoredText\"\r\nimport ExpandButton from \"./ExpandButton\"\r\nimport ImgIcon from \"./Image/ImgIcon\"\r\n\r\nexport default function FormulaCalcCard() {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Formulas {\"&\"} Calculations</Typography>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    <Box sx={{ mr: -1, mb: -1 }}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Box>\r\n  </Suspense>\r\n}\r\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  if (!header) return null\r\n  const { title, icon, action } = header\r\n  return <CardDark sx={{ mb: 1 }}>\r\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([key, node]) =>\r\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\r\n          <AccordionSummary expandIcon={<ExpandMore />}>\r\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\r\n          </AccordionDetails>\r\n        </Accordion>)}\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport { objectKeyMap } from '../../Util/Util';\r\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\r\nimport { ArtifactDisplayLocationState } from '../../Types/LocationState';\r\n\r\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\r\n  const { data, character, mainStatAssumptionLevel } = useContext(DataContext)\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      state: {\r\n        artToEditId: artid\r\n      } as ArtifactDisplayLocationState\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\r\n    database.equipArtifacts(character.key, newBuild)\r\n  }, [character, data, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!character) return\r\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\r\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\r\n  }, [character, database])\r\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\r\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\r\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\r\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n            <Divider />\r\n            <CardContent >\r\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\r\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\r\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </CardLight>\r\n        )}\r\n      </Grid>\r\n      {artIds.map(id => !!id && <Grid item xs={6} md={4} key={id} >\r\n        <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={edit} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { PersonAdd } from \"@mui/icons-material\";\r\nimport { CardContent, Divider, Grid } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport { DataContext, dataContextObj } from \"../../DataContext\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { NodeDisplay } from \"../../Formula/uiData\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { objPathValue, range } from \"../../Util/Util\";\r\nimport CharacterCard from \"../CharacterCard\";\r\n\r\nexport default function CharacterTeamBuffsPane() {\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\r\n    <TeamBuffDisplay />\r\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\r\n    <Grid container spacing={1}>\r\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\r\n        <TeammateDisplay index={i} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </Box>\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\nexport function TeamBuffDisplay() {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const teamBuffs = data.getTeamBuff()\r\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\r\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"total\", key], node]))\r\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"premod\", key], node]))\r\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"enemy\", key], node]))\r\n  if (!nodes.length) return null\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Buffs\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container columnSpacing={2} rowSpacing={1}>\r\n        {nodes.map(([path, n], i) => n && <Grid item {...statBreakpoint} key={n.key} >\r\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n// function ResonanceDisplay() {\r\n//   const { data, characterDispatch } = useContext(DataContext)\r\n//   return <CardLight>\r\n//     <CardContent>\r\n//       Team Resonance\r\n//     </CardContent>\r\n//     <Divider />\r\n//     <CardContent>\r\n//       <Grid container spacing={1}>\r\n//         {resonanceSheets.map((doc, i) =>\r\n//           <Grid item key={i} xs={12} md={6} lg={4} >\r\n//             <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\r\n//               <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n//               <Divider />\r\n//               <CardContent>\r\n//                 {doc.description}\r\n//               </CardContent>\r\n//               {doc.conditionals.map(cond =>\r\n//                 <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n//               )}\r\n//             </CardDark>\r\n//           </Grid>\r\n//         )}\r\n//       </Grid>\r\n//     </CardContent>\r\n//   </CardLight>\r\n// }\r\nfunction TeammateDisplay({ index }: { index: number }) {\r\n  const dataContext = useContext(DataContext)\r\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\r\n  const activeCharacterKey = active.key\r\n  const characterKey = active.team[index]\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\r\n  const onClickHandler = useCharSelectionCallback()\r\n\r\n  const dataBundle = teamData[characterKey]\r\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\r\n    character: dataBundle.character,\r\n    characterSheet: dataBundle.characterSheet,\r\n    data: dataBundle.target,\r\n    teamData: teamData,\r\n    mainStatAssumptionLevel: 0,\r\n    characterDispatch\r\n  }\r\n  return <CardLight>\r\n    <CardContent>\r\n      <CharacterDropdownButton fullWidth value={characterKey}\r\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\r\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\r\n    </CardContent>\r\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\r\n      <CharacterCard characterKey={characterKey}\r\n        onClickHeader={onClickHandler}\r\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\r\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\r\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\r\n      />\r\n    </DataContext.Provider>}\r\n  </CardLight>\r\n\r\n}\r\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const { data, } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sections = useMemo(() => artifactSheets &&\r\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\r\n      .flatMap(([setKey, setNums]) =>\r\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\r\n    , [artifactSheets, data])\r\n  if (!sections) return null\r\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\r\n}\r\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const { teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const weaponSheet = teamData[charKey]!.weaponSheet\r\n\r\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\r\n}\r\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const characterSheet = teamData[charKey]!.characterSheet\r\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\r\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\r\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\r\n}\r\n\r\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\r\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\r\n  </Box >\r\n}\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport { DataContext } from \"../../DataContext\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ReadNode } from \"../../Formula/type\";\r\nimport KeyMap, { valueString } from \"../../KeyMap\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\r\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\r\nimport { range } from \"../../Util/Util\";\r\nexport default function CharacterOverviewPane() {\r\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = data.get(input.lvl).value\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  const tlvl = {\r\n    auto: data.get(input.total.auto).value,\r\n    skill: data.get(input.total.skill).value,\r\n    burst: data.get(input.total.burst).value,\r\n  }\r\n  const tBoost = {\r\n    auto: data.get(input.bonus.auto).value,\r\n    skill: data.get(input.bonus.skill).value,\r\n    burst: data.get(input.bonus.burst).value,\r\n  }\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {range(1, 6).map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey, charEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\r\n      <MainStatsCards />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\r\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\r\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\r\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\r\n\r\nconst otherStatReadNodes = [\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\r\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\r\n]\r\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst miscStatReadNodes = [\r\n  input.total.all_dmg_,\r\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\r\n  input.total.normal_dmg_, input.total.normal_critRate_,\r\n  input.total.charged_dmg_, input.total.charged_critRate_,\r\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\r\n  input.total.skill_dmg_, input.total.skill_critRate_,\r\n  input.total.burst_dmg_, input.total.burst_critRate_,\r\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x]),\r\n  input.total.dmgRed_\r\n]\r\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n    {nodes.map(rn => <Grid item key={rn.info?.key} {...statBreakpoint} >\r\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\r\n    </Grid>)}\r\n    {extra}\r\n  </Grid>\r\n}\r\n\r\nfunction MainStatsCards() {\r\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const specialNode = data.get(input.special)\r\n\r\n  return <>\r\n    <TeamBuffDisplay />\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\r\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\r\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\r\n        </Grid>}\r\n      />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {mainEditKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              defaultValue={undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<StatDisplayContent statBreakpoint={{\r\n        xs: 12, sm: 6, md: 6,\r\n      }} nodes={miscStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport KeyMap, { valueString } from '../../KeyMap'\r\nimport { NodeDisplay } from '../../Formula/uiData'\r\nimport { NumNode } from \"../../Formula/type\";\r\nimport { range } from \"../../Util/Util\";\r\nexport default function CharacterTalentPane() {\r\n  const { data, character, characterSheet } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(character.key)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\r\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  return <>\r\n    <ReactionDisplay />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {range(1, 6).map(i => {\r\n        let tKey = `constellation${i}` as TalentSheetElementKey\r\n        return <Grid item key={i} xs={12} md={4}\r\n          sx={{ opacity: constellation >= i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i}`}\r\n            onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct: SuperConductCard,\r\n  electrocharged: ElectroChargedCard,\r\n  overloaded: OverloadedCard,\r\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\r\n  shattered: ShatteredCard,\r\n  crystallize: CrystallizeCard,\r\n}\r\nfunction ReactionDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(reaction).map(([key, node]) => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele node={node} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\n\r\nfunction SwirlCard() {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const { data } = useContext(DataContext)\r\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst crystallizeEleToDisplay = {\r\n  \"geo\": <ColorText color=\"crystallize\">{KeyMap.get(\"crystallize\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_crystallize\")}</ColorText> {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_crystallize\")}</ColorText> {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_crystallize\")}</ColorText> {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_crystallize\")}</ColorText> {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\n\r\nfunction CrystallizeCard() {\r\n  const [ele, setele] = useState(Object.keys(crystallizeEleToDisplay)[0])\r\n  const { data } = useContext(DataContext)\r\n  const node = ele === \"geo\" ? data.getDisplay().reaction!.crystallize! : data.getDisplay().reaction![`${ele}Crystallize`]!\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystallizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystallizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  talentKey: TalentSheetElementKey,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\r\n    const level = data.get(input.total[talentKey]).value\r\n    const asc = data.get(input.asc).value\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {range(1, talentLimits[asc]).map(i =>\r\n            <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n  }\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport ColorText from '../Components/ColoredText';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\r\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport { sgt } from '../Data/Characters/SheetUtil';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { clamp } from '../Util/Util';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  footer?: JSX.Element\r\n  newteamData?: TeamData,\r\n  mainStatAssumptionLevel?: number,\r\n  onClose?: (any) => void,\r\n  tabName?: string,\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\r\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\r\n  const { compareData } = character ?? {}\r\n\r\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\r\n    if (!teamData || !character || !characterSheet || !charUIData) return undefined\r\n    return {\r\n      character,\r\n      characterSheet,\r\n      mainStatAssumptionLevel,\r\n      data: (newteamData ? newteamData[characterKey]!.target : charUIData),\r\n      teamData: (newteamData ? newteamData : teamData),\r\n      oldData: (compareData && newteamData) ? charUIData : undefined,\r\n      characterDispatch\r\n    }\r\n  }, [character, characterSheet, mainStatAssumptionLevel, newteamData, charUIData, teamData, characterDispatch, characterKey, compareData])\r\n\r\n  if (!teamData || !character || !characterSheet || !charUIData || !dataContextValue) return <></>\r\n\r\n  return <CardDark >\r\n    <DataContext.Provider value={dataContextValue}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            <CharSelectDropdown />\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n              <ToggleButton value={false} disabled={!compareData}>\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} disabled={compareData}>\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1} />\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            <Tab value=\"buffs\" label=\"Team Buffs\" />\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <DamageOptionsCard />\r\n        <FormulaCalcCard />\r\n        <EnemyExpandCard />\r\n\r\n        {/* Character Panel */}\r\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\r\n        {/* Artifacts Panel */}\r\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\r\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\r\n        </DataContext.Provider>\r\n        {/* new build panel */}\r\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\r\n        {/* Buffs panel */}\r\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\r\n        {/* talent panel */}\r\n        <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane />\r\n        </TabPanel >\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent >\r\n        {footer}\r\n      </CardContent>}\r\n    </DataContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\n\r\nfunction CharSelectDropdown() {\r\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\r\n  const [showModal, setshowModal] = useState(false)\r\n  const setCharacter = useCharSelectionCallback()\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    if (!character) return\r\n    const { level = 1, ascension = 0 } = character\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, character])\r\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\r\n  return <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    <Grid container spacing={1}>\r\n      <Grid item>\r\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\r\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n          </DropdownButton>}\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setLevel} value={level}\r\n              startAdornment=\"Lvl. \"\r\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n              disabled={!characterSheet} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n            {milestoneLevels.map(([lv, as]) => {\r\n              const sameLevel = lv === ascensionMaxLevel[as]\r\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n              const selected = lv === level && as === ascension\r\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n            })}\r\n          </DropdownButton>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  </>\r\n}\r\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport KeyMap, { valueString } from \"../KeyMap\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseWeapon = useWeapon(weaponId)\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\r\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {stats.map(node => {\r\n            if (!node.key) return null\r\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\r\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\r\n              <Typography>{displayVal}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}\r\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport { ascensionMaxLevel, lowRarityMilestoneLevels } from \"../Data/LevelData\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const { data } = useContext(DataContext)\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n  const weapon = useWeapon(propWeaponId)\r\n  const { key = \"\", level = 0, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\r\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  //check the levels when switching from a 5* to a 1*, for example.\r\n  useEffect(() => {\r\n    if (!weaponSheet || !weaponDispatch || weaponSheet.key !== weapon?.key) return\r\n    if (weaponSheet.rarity <= 2 && (level > 70 || ascension > 4)) {\r\n      const [level, ascension] = lowRarityMilestoneLevels[0]\r\n      weaponDispatch({ level, ascension })\r\n    }\r\n  }, [weaponSheet, weapon, weaponDispatch, level, ascension])\r\n\r\n\r\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                {weaponSheet?.hasRefinement && <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                {weaponSheet && <Button sx={{ pl: 1 }} disabled={!weaponSheet.ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>}\r\n                {weaponSheet && <DropdownButton title={\"Select Level\"} >\r\n                  {weaponSheet.milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\r\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\r\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n          <Typography><small>{weaponSheet.description}</small></Typography>\r\n        </Box>\r\n        <Box sx={{ mb: -1 }} flexGrow={1} >\r\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\r\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\r\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            <CardDark >\r\n              <CardContent>\r\n                <Typography>Main Stats</Typography>\r\n              </CardContent>\r\n              <FieldDisplayList>\r\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\r\n                  const n = weaponUIData.get(node)\r\n                  if (n.isEmpty || !n.value) return null\r\n                  return <NodeFieldDisplay key={n.key} node={n} component={ListItem} />\r\n                })}\r\n              </FieldDisplayList>\r\n            </CardDark>\r\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\r\n          </Box>\r\n        </Box>\r\n      </Box>}\r\n    </CardContent>\r\n    {footer && id && <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n        </Grid>\r\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n      </Grid>\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\r\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}\r\n"],"names":["LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","component","name","nameWIthIcon","sx","verticalAlign","WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","useState","setWeaponfilter","useEffect","weaponIdList","Set","allWeaponKeys","wKey","weaponType","sort","a","b","rarity","open","onClose","py","container","item","flexGrow","value","onChange","disabled","size","onClick","spacing","map","weaponKey","weaponSheet","lg","md","height","display","src","img","width","className","px","variant","Assets","stars","colored","large","Stat","this","Error","printStat","statKey","stats","sgt","strKey","ns","key18","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","database","useContext","DatabaseContext","databaseArtifact","artifactID","_getArt","artifact","setArtifact","followArt","undefined","useArtifact","sheet","ArtifactSheet","setKey","editable","art","id","lock","slotKey","level","mainStatKey","substats","exclude","mainStatLevel","Math","max","min","mainStatUnit","KeyMap","levelVariant","floor","mainStatVal","color","cacheValueString","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","BootstrapTooltip","placement","title","Typography","icon","faInfoCircle","setEffects","setDescTooltip","Object","keys","setNumKey","SqBadge","setNum","setEffectDesc","Suspense","fallback","Skeleton","minHeight","CardLight","flexDirection","CardContent","pt","pb","pr","Box","alignItems","Chip","label","pl","IconButton","updateArt","Lock","LockOpen","Grid","flexWrap","StatIcon","maxWidth","mt","mb","alignSelf","CardMedia","image","slotIcons","stat","SubstatDisplay","key","my","PercentBadge","valid","probability","toFixed","CardActions","xs","flexShrink","CharacterDropdownButton","inventory","charKey","setArtLocation","mr","ButtonGroup","Button","faEdit","Tooltip","arrow","faBan","faChartLine","faTrashAlt","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","clamp","efficiency","effOpacity","clamp01","statName","inFilter","has","gap","alignContent","v","SmolProgress","indexOf","opacity","minWidth","textAlign","bgcolor","overflow","borderRadius","badgeColor","text","FormulaCalcCard","expanded","setexpanded","toggle","useCallback","ExpandButton","expand","ExpandMore","Collapse","in","timeout","unmountOnExit","CalculationDisplay","data","DataContext","sections","getDisplaySections","Nodes","FormulaCalc","displayNs","sectionKey","header","getDisplayHeader","action","CardDark","CardHeader","avatar","ImgIcon","m","titleTypographyProps","Divider","entries","node","isEmpty","Accordion","AccordionSummary","expandIcon","valueString","unit","AccordionDetails","formulas","subform","i","newBuild","character","history","useHistory","edit","artid","push","pathname","state","artToEditId","artifactSheets","useForceUpdate","followAnyArt","equipArts","window","confirm","fromEntries","allSlotKeys","s","get","input","equipArtifacts","unequipArts","objectKeyMap","_","artIds","useMemo","StatDisplayComponent","Card","p","palette","warning","dark","sm","setNumKeyArr","defIconSrc","SetEffectDisplay","CharacterTeamBuffsPane","TeamBuffDisplay","range","TeammateDisplay","index","statBreakpoint","oldData","teamBuffs","getTeamBuff","nodes","total","forEach","premod","enemy","columnSpacing","rowSpacing","path","n","oldValue","objPathValue","dataContext","active","teamData","activeCharacterDispatch","characterDispatch","activeCharacterKey","characterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","target","fullWidth","type","ck","includes","unSelectText","unSelectIcon","PersonAdd","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","setEffectDocument","DisplaySectionsTeamCond","document","talent","getTalent","values","sheets","sts","section","conditional","teamBuff","ConditionalDisplay","fieldContext","CharacterOverviewPane","charEle","weaponTypeKey","ascension","constellation","tlvl","auto","skill","burst","tBoost","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","fontSize","padding","lineHeight","getTalentOfKey","constellationName","cursor","WeaponDisplayCard","weaponId","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatReadNodes","allElementsWithPhy","ele","x","otherStatKeys","info","miscStatReadNodes","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","extra","rn","specialNode","StatDisplayCard","content","justifyContent","editContent","StatInput","placeholder","bonusStats","percent","onValueChange","defaultValue","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","onClickTitle","ReactionComponents","superconduct","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","getDisplay","reaction","DropdownButton","element","MenuItem","selected","shattered","information","faQuestionCircle","crystallize","crystallizeEleToDisplay","Ele","talentLimits","actionWrapeprFunc","children","CardActionArea","levelBoost","newTalentLevelKey","talentSheet","ConditionalWrapper","condition","wrapper","DocumentDisplay","TabPanel","current","other","role","hidden","CharacterDisplayCard","footer","newteamData","tabName","useTeamData","charUIData","tab","settab","onTab","e","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","exclusive","ToggleButton","CloseButton","Tabs","Tab","showModal","setshowModal","setCharacter","setLevel","ascensionMaxLevel","ascenML","setAscension","lowerAscension","elementKey","CharacterSelectionModal","startIcon","ThumbSide","thumbImgSide","contentDark","main","talents","eleKey","CustomNumberInput","startAdornment","inputProps","ambiguousLevel","milestoneLevels","lv","as","lvlstr","noUnselect","props","characterSheets","characterKeys","_getCharKeys","thumbImg","BusinessCenter","Replay","ListItemIcon","noWrap","CharacterMenuItemArray","selectedCharacterKey","WeaponCard","canEquip","weapon","useWeapon","cs","actionWrapperFunc","equipOnChar","setWeaponLocation","UIData","computeUIData","dataObjForWeapon","refinement","imgAwaken","updateWeapon","displayVal","propWeaponId","weaponDispatch","newWeapon","ws","initialWeaponFilter","lowRarityMilestoneLevels","weaponUIData","hasRefinement","Array","contentLight","SwapBtn","onChangeId","description","process","passiveName","gutterBottom","passiveDescription","ListItem","setShow","close","clickHandler","weapons","dbWeapon","_getWeapon","weaponID","setWeapon","followWeapon"],"sourceRoot":""}