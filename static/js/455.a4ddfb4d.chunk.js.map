{"version":3,"file":"static/js/455.a4ddfb4d.chunk.js","mappings":"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","sources":["Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/ArchaicPetra/icons.tsx","Data/Artifacts/ArchaicPetra/index.tsx","Data/Artifacts/Berserker/icons.tsx","Data/Artifacts/Berserker/index.tsx","Data/Artifacts/BlizzardStrayer/icons.tsx","Data/Artifacts/BlizzardStrayer/index.tsx","Data/Artifacts/BloodstainedChivalry/icons.tsx","Data/Artifacts/BloodstainedChivalry/index.tsx","Data/Artifacts/BraveHeart/icons.tsx","Data/Artifacts/BraveHeart/index.tsx","Data/Artifacts/CrimsonWitchOfFlames/icons.tsx","Data/Artifacts/CrimsonWitchOfFlames/index.tsx","Data/Artifacts/DefendersWill/icons.tsx","Data/Artifacts/DefendersWill/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/Gambler/icons.tsx","Data/Artifacts/Gambler/index.tsx","Data/Artifacts/GladiatorsFinale/icons.tsx","Data/Artifacts/GladiatorsFinale/index.tsx","Data/Artifacts/HeartOfDepth/icons.tsx","Data/Artifacts/HeartOfDepth/index.tsx","Data/Artifacts/HuskOfOpulentDreams/icons.tsx","Data/Artifacts/HuskOfOpulentDreams/index.tsx","Data/Artifacts/Instructor/icons.tsx","Data/Artifacts/Instructor/index.tsx","Data/Artifacts/Lavawalker/icons.tsx","Data/Artifacts/Lavawalker/index.tsx","Data/Artifacts/LuckyDog/icons.tsx","Data/Artifacts/LuckyDog/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/OceanHuedClam/icons.tsx","Data/Artifacts/OceanHuedClam/index.tsx","Data/Artifacts/PaleFlame/icons.tsx","Data/Artifacts/PaleFlame/index.tsx","Data/Artifacts/ShimenawasReminiscence/icons.tsx","Data/Artifacts/ShimenawasReminiscence/index.tsx","Data/Artifacts/ThunderingFury/icons.tsx","Data/Artifacts/ThunderingFury/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/index.ts","Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx"],"sourcesContent":["import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { ArtifactSetKey } from \"../../Types/consts\";\r\n\r\nexport function dataObjForArtifactSheet(\r\n  key: ArtifactSetKey,\r\n  data: Data = {},\r\n  displayArtifact: DisplaySub = {},\r\n): Data {\r\n  return mergeData([inferInfoMut(data, key), {\r\n    display: {\r\n      [`artifact:${key}`]: displayArtifact\r\n    },\r\n  }])\r\n}\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"Adventurer\"\r\nconst set2 = greaterEq(input.artSet.Adventurer, 2, 1000)\r\nconst heal = greaterEq(input.artSet.Adventurer, 4,\r\n  prod(percent(0.3), input.total.hp))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hp: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Adventurer\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { IFieldDisplay } from '../../../Types/IFieldDisplay_WR'\r\nimport { absorbableEle } from '../../Characters/dataUtil'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"ArchaicPetra\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst set2 = greaterEq(input.artSet.ArchaicPetra, 2, percent(0.2))\r\nconst [condPath, condNode] = cond(key, \"element\")\r\nconst set4Nodes = Object.fromEntries(absorbableEle.map(e => [`${e}_dmg_`,\r\ngreaterEq(input.artSet.ArchaicPetra, 4,\r\n  equal(e, condNode, percent(0.35))\r\n)\r\n]))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    geo_dmg_: set2,\r\n  },\r\n  teamBuff: {\r\n    premod: set4Nodes\r\n  }\r\n}, undefined)\r\nconst durationfield: IFieldDisplay = {\r\n  text: sgt(\"duration\"),\r\n  value: 10,\r\n  unit: \"s\"\r\n}\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Archaic Petra\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          teamBuff: true,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: Object.fromEntries(absorbableEle.map(e => [e, {\r\n            name: sgt(`element.${e}`),\r\n            fields: [{\r\n              node: set4Nodes[`${e}_dmg_`]\r\n            }, durationfield]\r\n          }])),\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { equal, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"Berserker\"\r\nconst critRate_info: Info = { key: \"critRate_\" }\r\nconst set2 = greaterEq(input.artSet.Berserker, 2, percent(0.12), critRate_info)\r\nconst [condPath, condNode] = cond(key, \"hp\")\r\nconst set4 = greaterEq(input.artSet.Berserker, 4,\r\n  equal(\"70\", condNode, percent(0.24)), critRate_info)\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    critRate_: sum(set2, set4),\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Berserker\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"lessPercentHP\", { percent: 70 }),\r\n          states: {\r\n            70: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"BlizzardStrayer\"\r\n\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.BlizzardStrayer, 2, percent(0.15))\r\nconst set4 = greaterEq(input.artSet.BlizzardStrayer, 4, lookup(condState, { \"cryo\": percent(0.20), \"frozen\": percent(0.40) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    cryo_dmg_: set2,\r\n    critRate_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {//Icebreaker\r\n  name: \"Blizzard Strayer\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            cryo: {\r\n              name: trm(\"condCryo\"),\r\n              fields: [{ node: set4 }]\r\n            },\r\n            frozen: {\r\n              name: trm(\"condFrozen\"),\r\n              fields: [{ node: set4 }]\r\n            }\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"BloodstainedChivalry\"\r\nconst set2 = greaterEq(input.artSet.BloodstainedChivalry, 2, percent(0.25))\r\nconst [condPath, condNode] = cond(key, \"defeat\")\r\nconst set4Charged = greaterEq(input.artSet.BloodstainedChivalry, 4,\r\n  equal(\"hit\", condNode, percent(0.5)))\r\nconst set4StamDec = greaterEq(input.artSet.BloodstainedChivalry, 4,\r\n  equal(\"hit\", condNode, percent(1)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    physical_dmg_: set2,\r\n    charged_dmg_: set4Charged,\r\n    staminaDec_: set4StamDec,\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Bloodstained Chivalry\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"afterDefeatEnemy\", { percent: 70 }),\r\n          states: {\r\n            hit: {\r\n              fields: [{\r\n                node: set4Charged\r\n              }, {\r\n                node: set4StamDec\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"BraveHeart\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst set2 = greaterEq(input.artSet.BraveHeart, 2, percent(0.18))\r\nconst [condPath, condNode] = cond(key, \"hp\")\r\nconst set4 = greaterEq(input.artSet.BraveHeart, 4,\r\n  equal(\"50\", condNode, percent(0.3))\r\n)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    all_dmg_: set4,\r\n  },\r\n}, undefined)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Brave Heart\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            50: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { st } from '../../Characters/SheetUtil'\r\nimport { cond } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"CrimsonWitchOfFlames\"\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst pyro_dmg_info: Info = { key: \"pyro_dmg_\", variant: \"pyro\" }\r\nconst set2 = greaterEq(input.artSet.CrimsonWitchOfFlames, 2, percent(0.15), pyro_dmg_info)\r\nconst set4Overload = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.4))\r\nconst set4Burning = { ...set4Overload }\r\nconst set4Vape = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.15))\r\nconst set4Melt = { ...set4Vape }\r\nconst stackArr = range(1, 3)\r\nconst set4Pyro_dmg_ = greaterEq(input.artSet.CrimsonWitchOfFlames, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.15 * i / 2)]))\r\n    , naught),\r\n  pyro_dmg_info)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    pyro_dmg_: sum(set2, set4Pyro_dmg_),\r\n    overloaded_dmg_: set4Overload,\r\n    burning_dmg_: set4Burning,\r\n    vaporize_dmg_: set4Vape,\r\n    melt_dmg_: set4Melt,\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Crimson Witch of Flames\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4Overload,\r\n        }, {\r\n          node: set4Burning,\r\n        }, {\r\n          node: set4Vape,\r\n        }, {\r\n          node: set4Melt,\r\n        }],\r\n        conditional: {\r\n          value: condStack,\r\n          path: condStackPath,\r\n          name: st(\"afterUse.skill\"),\r\n          states: Object.fromEntries(stackArr.map(i => [i, {\r\n            name: i.toString(),\r\n            fields: [{ node: set4Pyro_dmg_ }]\r\n          }]))\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { input, tally } from \"../../../Formula/index\"\r\nimport { allElements, ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { objectKeyValueMap } from '../../../Util/Util'\r\n\r\nconst key: ArtifactSetKey = \"DefendersWill\"\r\n\r\nconst set2 = greaterEq(input.artSet.DefendersWill, 2, percent(0.3))\r\n\r\nconst res_ = objectKeyValueMap(allElements, (ele) => [`${ele}_res_`,\r\n  greaterEq(input.artSet.DefendersWill, 4, greaterEq(tally[ele], 1, percent(0.3)))])\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def_: set2,\r\n    ...res_\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Defender's Will\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: Object.values(res_).map(node => ({ node }))\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { min, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\r\n\r\nconst set2 = greaterEq(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\r\n\r\nconst burstBonus = greaterEq(input.artSet.EmblemOfSeveredFate, 4,\r\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2,\r\n    burst_dmg_: burstBonus,\r\n  },\r\n}, {\r\n  burstBonus,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: burstBonus,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Gambler\"\r\n\r\nconst set2 = greaterEq(input.artSet.Gambler, 2, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    skill_dmg_: set2\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Gambler\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"GladiatorsFinale\"\r\n\r\nconst set2 = greaterEq(input.artSet.GladiatorsFinale, 2, percent(0.18))\r\nconst set4 = greaterEq(input.artSet.GladiatorsFinale, 4, lookup(input.weaponType, { \"sword\": percent(0.35), \"polearm\": percent(0.35), \"claymore\": percent(0.35) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmg_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Gladiator's Finale\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"HeartOfDepth\"\r\nconst set2 = greaterEq(input.artSet.HeartOfDepth, 2, percent(0.15))\r\nconst [condPath, condNode] = cond(key, \"skill\")\r\nconst set4Norm = greaterEq(input.artSet.HeartOfDepth, 4,\r\n  equal(\"cast\", condNode, percent(0.3)))\r\nconst set4Charged = { ...set4Norm }\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hydro_dmg_: set2,\r\n    normal_dmg_: set4Norm,\r\n    charged_dmg_: set4Charged,\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {//Ocean Conqueror\r\n  name: \"Heart of Depth\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"afterUse.skill\"),\r\n          states: {\r\n            cast: {\r\n              fields: [{\r\n                node: set4Norm,\r\n              }, {\r\n                node: set4Charged,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"HuskOfOpulentDreams\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst def_info: Info = { key: \"def_\" }\r\nconst set2 = greaterEq(input.artSet.HuskOfOpulentDreams, 2, percent(0.3), def_info)\r\nconst stackArr = range(1, 4)\r\n\r\nconst set4Def = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\r\n    , naught),\r\n  def_info)\r\nconst set4Geo = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\r\n    , naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def_: sum(set2, set4Def),\r\n    geo_dmg_: set4Geo,\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Husk of Opulent Dreams\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condStack,\r\n          path: condStackPath,\r\n          name: trm(\"condName\"),\r\n          states: Object.fromEntries(stackArr.map(i => [i, {\r\n            name: i.toString(),\r\n            fields: [{ node: set4Def }, {\r\n              node: set4Geo\r\n            }]\r\n          }]))\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Instructor\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"set4\")\r\n\r\nconst set2 = greaterEq(input.artSet.Instructor, 2, 80)\r\nconst set4 = greaterEq(input.artSet.Instructor, 4, equal(\"on\", condState, 120))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    eleMas: set2\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: set4\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Instructor\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condState,\r\n          path: condStatePath,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }, {\r\n                text: \"Duration\",\r\n                value: \"8\",\r\n                unit: \"s\"\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Lavawalker\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.Lavawalker, 2, percent(0.40))\r\nconst set4 = greaterEq(input.artSet.Lavawalker, 4, equal(\"on\", condState, percent(0.35)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    pyro_res_: set2,\r\n    all_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Lavawalker\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"LuckyDog\"\r\nconst set2 = greaterEq(input.artSet.LuckyDog, 2, 100)\r\nconst heal = greaterEq(input.artSet.LuckyDog, 4, 300)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Lucky Dog\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { Translate } from '../../../Components/Translate'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { customRead, equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, sgt } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"NoblesseOblige\"\r\n\r\nconst tr = (strKey: string) => <Translate ns={`artifact_${key}_gen`} key18={strKey} />\r\n\r\nconst set2 = greaterEq(input.artSet.NoblesseOblige, 2, percent(0.2))\r\n\r\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\r\nconst set4TallyWrite = greaterEq(input.artSet.NoblesseOblige, 4, equal(condSet4, \"on\", 1))\r\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\r\nconst set4 = greaterEq(set4TallyRead, 1, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    burst_dmg_: set2,\r\n    atk_: set4,\r\n  },\r\n  teamBuff: {\r\n    tally: {\r\n      NO4: set4TallyWrite\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Noblesse Oblige\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condSet4,\r\n          path: condSet4Path,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: <Translate ns=\"artifact_NoblesseOblige\" key18=\"condName\" />,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 12,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { customDmgNode } from '../../Characters/dataUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"OceanHuedClam\"\r\nconst set2 = greaterEq(input.artSet.OceanHuedClam, 2, 1000)\r\nconst heal = greaterEq(input.artSet.OceanHuedClam, 4,\r\n  customDmgNode(prod(percent(0.9), 30000), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })\r\n)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    heal_: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Ocean-Hued Clam\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: `artifact_${key}:condName`, variant: \"physical\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"PaleFlame\"\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.PaleFlame, 2, lookup(condState, { \"twostacks\": percent(0.5) }, percent(0.25)))\r\nconst set4 = greaterEq(input.artSet.PaleFlame, 4, lookup(condState, { \"onestack\": percent(0.09), \"twostacks\": percent(0.18) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    physical_dmg_: set2,\r\n    atk_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Pale Flame\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: st(\"hitOp.skill\"),\r\n          states: {\r\n            onestack: {\r\n              name: st(\"stack\", { count: 1 }),\r\n              fields: [{ node: set4 }, { text: sgt(\"duration\"), value: 7, unit: 's' }]\r\n            },\r\n            twostacks: {\r\n              name: st(\"stack\", { count: 2 }),\r\n              fields: [{ node: set4 }, { text: sgt(\"duration\"), value: 7, unit: 's' }]\r\n            }\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"ShimenawasReminiscence\"\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst [usedEnergyStatePath, usedEnergyState] = cond(key, \"usedEnergy\")\r\n\r\nconst set2 = greaterEq(input.artSet.ShimenawasReminiscence, 2, percent(0.18))\r\nconst set4Norm = greaterEq(input.artSet.ShimenawasReminiscence, 4,\r\n  equal(\"used\", usedEnergyState, percent(0.5)))\r\nconst set4Charged = { ...set4Norm }\r\nconst set4Plunge = { ...set4Norm }\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmg_: set4Norm,\r\n    charged_dmg_: set4Charged,\r\n    plunging_dmg_: set4Plunge\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Shimenawa's Reminiscence\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: usedEnergyState,\r\n          path: usedEnergyStatePath,\r\n          name: trm(\"afterUseEnergy\"),\r\n          states: {\r\n            used: {\r\n              fields: [{\r\n                node: set4Norm,\r\n              }, {\r\n                node: set4Charged,\r\n              }, {\r\n                node: set4Plunge,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"ThunderingFury\"\r\n\r\nconst set2 = greaterEq(input.artSet.ThunderingFury, 2, percent(0.15))\r\nconst set4 = greaterEq(input.artSet.ThunderingFury, 4, percent(0.40))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    electro_dmg_: set2,\r\n    overloaded_dmg_: set4,\r\n    electrocharged_dmg_: set4,\r\n    superconduct_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Thundering Fury\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\r\nimport { absorbableEle } from '../../Characters/dataUtil'\r\nimport { sgt } from '../../Characters/SheetUtil'\r\nimport elementalData from '../../ElementalData'\r\nimport { condReadNode, st, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\r\nconst [tr] = trans(\"artifact\", key)\r\n\r\nconst anemo_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 2, percent(0.15))\r\nconst swirl_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 4, percent(0.6))\r\n\r\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\r\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\r\n\r\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\r\ngreaterEq(input.artSet.ViridescentVenerer, 4,\r\n  equal(\"swirl\", condSwirls[e], percent(-0.4))\r\n)])\r\n\r\nconst data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    anemo_dmg_,\r\n    swirl_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...condSwirlNodes\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{ node: anemo_dmg_ }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{ node: swirl_dmg_ }],\r\n      },\r\n      ...absorbableEle.map(eleKey => ({\r\n        conditional: {\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: st(\"eleSwirled\"),\r\n          states: {\r\n            swirl: {\r\n              name: <ColorText color={eleKey}>{elementalData[eleKey].name}</ColorText>,\r\n              fields: [{\r\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 10,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        },\r\n      }))\r\n      ]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import { ArtifactSetKey } from '../../Types/consts'\r\nimport { ArtifactSheet } from './ArtifactSheet'\r\n\r\nimport Adventurer from './Adventurer'\r\nimport ArchaicPetra from './ArchaicPetra'\r\nimport Berserker from './Berserker'\r\nimport BlizzardStrayer from './BlizzardStrayer'\r\nimport BloodstainedChivalry from './BloodstainedChivalry'\r\nimport BraveHeart from './BraveHeart'\r\nimport CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\r\nimport DefendersWill from './DefendersWill'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\r\nimport Gambler from './Gambler'\r\nimport GladiatorsFinale from './GladiatorsFinale'\r\nimport HeartOfDepth from './HeartOfDepth'\r\nimport HuskOfOpulentDreams from './HuskOfOpulentDreams'\r\nimport Instructor from './Instructor'\r\nimport Lavawalker from './Lavawalker'\r\nimport LuckyDog from './LuckyDog'\r\n// import MaidenBeloved from './MaidenBeloved'\r\n// import MartialArtist from './MartialArtist'\r\nimport NoblesseOblige from './NoblesseOblige'\r\nimport OceanHuedClam from './OceanHuedClam'\r\nimport PaleFlame from './PaleFlame'\r\n// import PrayersForDestiny from './PrayersForDestiny'\r\n// import PrayersForIllumination from './PrayersForIllumination'\r\n// import PrayersForWisdom from './PrayersForWisdom'\r\n// import PrayersToSpringtime from './PrayersToSpringtime'\r\n// import ResolutionOfSojourner from './ResolutionOfSojourner'\r\n// import RetracingBolide from './RetracingBolide'\r\n// import Scholar from './Scholar'\r\nimport ShimenawasReminiscence from './ShimenawasReminiscence'\r\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith'\r\n// import TheExile from './TheExile'\r\nimport ThunderingFury from './ThunderingFury'\r\n// import Thundersoother from './Thundersoother'\r\n// import TinyMiracle from './TinyMiracle'\r\n// import TravelingDoctor from './TravelingDoctor'\r\nimport ViridescentVenerer from './ViridescentVenerer'\r\n// import WanderersTroupe from './WanderersTroupe'\r\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\r\n  Adventurer,\r\n  ArchaicPetra,\r\n  Berserker,\r\n  BlizzardStrayer,\r\n  BloodstainedChivalry,\r\n  BraveHeart,\r\n  CrimsonWitchOfFlames,\r\n  DefendersWill,\r\n  EmblemOfSeveredFate,\r\n  Gambler,\r\n  GladiatorsFinale,\r\n  HeartOfDepth,\r\n  HuskOfOpulentDreams,\r\n  Instructor,\r\n  Lavawalker,\r\n  LuckyDog,\r\n  // MaidenBeloved,\r\n  // MartialArtist,\r\n  NoblesseOblige,\r\n  OceanHuedClam,\r\n  PaleFlame,\r\n  // PrayersForDestiny,\r\n  // PrayersForIllumination,\r\n  // PrayersForWisdom,\r\n  // PrayersToSpringtime,\r\n  // ResolutionOfSojourner,\r\n  // RetracingBolide,\r\n  // Scholar,\r\n  ShimenawasReminiscence,\r\n  // TenacityOfTheMillelith,\r\n  // TheExile,\r\n  ThunderingFury,\r\n  // Thundersoother,\r\n  // TinyMiracle,\r\n  // TravelingDoctor,\r\n  ViridescentVenerer,\r\n  // WanderersTroupe,\r\n} as const\r\n\r\nexport default artifacts\r\n","/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n/**\r\n * @deprecated\r\n */\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\n/**\r\n * @deprecated\r\n */\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      }\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  input.infusion,\r\n  input.team.infusion,\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","key","data","displayArtifact","mergeData","inferInfoMut","display","set2","greaterEq","input","heal","prod","percent","premod","hp","sheet","name","rarity","icons","setEffects","document","fields","node","infoMut","variant","ArtifactSheet","trans","tr","trm","cond","condPath","condNode","set4Nodes","Object","fromEntries","absorbableEle","e","equal","geo_dmg_","teamBuff","undefined","durationfield","text","sgt","value","unit","conditional","path","header","conditionalHeader","description","states","critRate_info","set4","critRate_","sum","st","condStatePath","condState","lookup","naught","cryo_dmg_","cryo","frozen","set4Charged","set4StamDec","physical_dmg_","charged_dmg_","staminaDec_","hit","atk_","all_dmg_","condStackPath","condStack","pyro_dmg_info","set4Overload","set4Burning","set4Vape","set4Melt","stackArr","range","set4Pyro_dmg_","map","i","pyro_dmg_","overloaded_dmg_","burning_dmg_","vaporize_dmg_","melt_dmg_","toString","res_","objectKeyValueMap","allElements","ele","tally","def_","values","burstBonus","min","enerRech_","burst_dmg_","skill_dmg_","normal_dmg_","set4Norm","hydro_dmg_","cast","def_info","set4Def","set4Geo","eleMas","on","pyro_res_","def","strKey","Translate","ns","key18","condSet4Path","condSet4","set4TallyWrite","set4TallyRead","customRead","NO4","customDmgNode","constant","heal_","onestack","count","twostacks","usedEnergyStatePath","usedEnergyState","set4Plunge","plunging_dmg_","used","electro_dmg_","electrocharged_dmg_","superconduct_dmg_","anemo_dmg_","swirl_dmg_","condSwirlPaths","objectKeyMap","condSwirls","condReadNode","condSwirlNodes","eleKey","swirl","color","elementalData","Adventurer","ArchaicPetra","Berserker","BlizzardStrayer","BloodstainedChivalry","BraveHeart","CrimsonWitchOfFlames","DefendersWill","EmblemOfSeveredFate","Gambler","GladiatorsFinale","HeartOfDepth","HuskOfOpulentDreams","Instructor","Lavawalker","LuckyDog","NoblesseOblige","OceanHuedClam","PaleFlame","ShimenawasReminiscence","ThunderingFury","ViridescentVenerer","Stat","this","Error","printStat","statKey","stats","charCurves","objectMap","_charCurves","commonBasic","allSubstats","inferredHitEle","stringPrio","equalStr","getTalentType","move","base","additional","customShieldNode","shieldNode","dmgNode","lvlMultiplier","talentType","subscript","shieldNodeTalent","baseMultiplier","flat","talentIndex","dataObjForCharacterSheet","element","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","charEle","reaction","reactions","layeredAssignment","stat","list","curves","push","ascensions","some","x","props","NaN","length","result","prefix","asConst","endsWith","info","slice","special","allMainStatKeys","customStringRead","subKey","typeKey"],"sourceRoot":""}