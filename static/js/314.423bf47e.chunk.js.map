{"version":3,"file":"static/js/314.423bf47e.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/InfoComponent.tsx","Components/StatFilterCard.tsx","GlobalSettings.tsx","PageBuild/BackgroundWorker.ts","PageBuild/ChartCard.tsx","PageBuild/common.ts","PageBuild/Components/ArtifactBuildDisplayItem.tsx","PageBuild/Components/ArtifactConditionalCard.tsx","PageBuild/Components/ArtifactSetPicker.tsx","PageBuild/Components/BonusStatsCard.tsx","PageBuild/Components/BuildAlert.tsx","PageBuild/Components/EnemyEditorCard.tsx","PageBuild/Components/HitModeCard.tsx","PageBuild/Components/MainStatSelectionCard.tsx","PageBuild/Components/OptimizationTargetSelector.tsx","PageBuild/Components/TeamBuffCard.tsx","PageBuild/foreground.ts","PageBuild/BuildDisplay.tsx","ReactHooks/useCharacter.tsx","ReactHooks/useDBState.tsx","Util/TimeUtil.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: 100, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={\"Level: \"}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n    />\r\n  </Card>\r\n}","import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n        <ListItemIcon>\r\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {artifactSheets?.[setKey]?.name}\r\n        </ListItemText>\r\n      </MenuItem >)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useState } from \"react\"\r\nimport useDBState from \"../ReactHooks/useDBState\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CloseButton from \"./CloseButton\"\r\nimport ModalWrapper from \"./ModalWrapper\"\r\nimport { Translate } from \"./Translate\"\r\nexport function initialInfoShownState() {\r\n  return {\r\n    artifactPage: true,\r\n    buildPage: true,\r\n    characterPage: true,\r\n  }\r\n}\r\ntype StateInfoShown = ReturnType<typeof initialInfoShownState>\r\ntype InfoShownPageKey = keyof StateInfoShown\r\n\r\nexport default function InfoComponent({ pageKey, text = \"\", modalTitle = \"\", children }: { pageKey: InfoShownPageKey, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [stateInfoShown, setStateInfoShown] = useDBState(\"InfoShown\", initialInfoShownState)\r\n  const showInfoModal = stateInfoShown[pageKey]\r\n  const setshowInfoModal = useCallback((value: boolean) => setStateInfoShown({ [pageKey]: value }), [setStateInfoShown, pageKey])\r\n\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => setshowInfoModal(false)\r\n\r\n  return <CardDark >\r\n    <Grid container>\r\n      <Grid item flexGrow={1}>\r\n        <Typography variant=\"caption\" pl={1} >\r\n          {displayText}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\r\n          <Translate ns=\"ui\" key18=\"info\" />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\r\n      <CardDark >\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{modalTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={closeModal} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\r\n            {children}\r\n          </Suspense>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <CloseButton large onClick={closeModal} />\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper >\r\n  </CardDark>\r\n}\r\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Minimum Final Stat Filter</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(statFilters).map(([statKey, min]) => {\r\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Grid>\r\n        })}\r\n        <Grid item xs={12}>\r\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BackgroundWorker.3be35dd3.worker.js\");\n}\n","import { CheckBox, CheckBoxOutlineBlank, Download, Info } from '@mui/icons-material';\r\nimport { Button, CardContent, Collapse, Divider, Grid, MenuItem, styled, Tooltip, Typography } from '@mui/material';\r\nimport { useContext, useMemo, useState } from 'react';\r\nimport { CartesianGrid, ComposedChart, Legend, Line, ResponsiveContainer, Scatter, XAxis, YAxis, ZAxis } from 'recharts';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport { NumNode } from '../Formula/type';\r\nimport KeyMap from '../KeyMap';\r\nimport { MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { ChartData } from './background';\r\ntype ChartCardProps = {\r\n  chartData?: ChartData\r\n  plotBase: MainStatKey | SubstatKey | \"\",\r\n  setPlotBase: (key: MainStatKey | SubstatKey | \"\") => void\r\n  disabled?: boolean\r\n}\r\ntype Point = { x: number, y: number, min?: number }\r\nexport default function ChartCard({ chartData, plotBase, setPlotBase, disabled = false }: ChartCardProps) {\r\n  const [showDownload, setshowDownload] = useState(false)\r\n  const [showMin, setshowMin] = useState(true)\r\n  const { data } = useContext(DataContext)\r\n  const statKeys = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  statKeys.push(`${data.get(input.charEle).value}_dmg_`)\r\n\r\n  const { displayData, downloadData } = useMemo(() => {\r\n    if (!chartData) return { displayData: null, downloadData: null }\r\n    const points = chartData.data.map(({ value: y, plot: x }) => ({ x, y })) as Point[]\r\n    const increasingX: Point[] = points.sort((a, b) => a.x - b.x)\r\n    const minimumData: Point[] = []\r\n    for (const point of increasingX) {\r\n      let last: Point | undefined\r\n      while ((last = minimumData.pop())) {\r\n        if (last.y > point.y) {\r\n          minimumData.push(last)\r\n          break\r\n        }\r\n      }\r\n      minimumData.push(point)\r\n    }\r\n\r\n    // Note:\r\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\r\n    // It could be faster too since there're no empty entries in `minimumData`.\r\n    if (minimumData[0].x !== increasingX[0].x)\r\n      increasingX[0].min = minimumData[0].y\r\n    minimumData.forEach(x => { x.min = x.y })\r\n\r\n    const downloadData = {\r\n      minimum: minimumData.map(({ x, y }) => [x, y]),\r\n      allData: increasingX.map(({ x, y }) => [x, y]),\r\n    }\r\n    return { displayData: increasingX, downloadData }\r\n  }, [chartData])\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container spacing={1} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h6\" >Optimization Target vs</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <DropdownButton title={plotBase ? KeyMap.get(plotBase) : \"Not Selected\"}\r\n            color={plotBase ? \"success\" : \"primary\"}\r\n            disabled={disabled}\r\n          >\r\n            <MenuItem onClick={() => { setPlotBase(\"\") }}>Unselect</MenuItem>\r\n            <Divider />\r\n            {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { setPlotBase(sKey as any) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n          </DropdownButton>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <Tooltip placement=\"top\" title=\"Using data from the builder, this will generate a graph to visualize Optimization Target vs. a selected stat. The graph will show the maximum Optimization Target value per 0.01 of the selected stat.\">\r\n            <Info />\r\n          </Tooltip>\r\n        </Grid>\r\n        {!!downloadData && <Grid item>\r\n          <Button startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\r\n            color={showMin ? \"success\" : \"secondary\"}\r\n            onClick={() => setshowMin(!showMin)}>Show Min Stat Threshold</Button>\r\n        </Grid>}\r\n        {!!downloadData && <Grid item>\r\n          <Button color=\"info\" startIcon={<Download />} onClick={() => setshowDownload(!showDownload)}>Download Data</Button>\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent>\r\n    {!!displayData && <Divider />}\r\n    {chartData && !!displayData && <CardContent>\r\n      <Collapse in={!!downloadData && showDownload}>\r\n        <CardDark sx={{ mb: 2 }}>\r\n          <CardContent>\r\n            <Typography>Min Data</Typography>\r\n            <DataDisplay data={downloadData?.minimum} />\r\n            <Typography>All Data</Typography>\r\n            <DataDisplay data={downloadData?.allData} />\r\n          </CardContent>\r\n        </CardDark>\r\n      </Collapse>\r\n      <Chart displayData={displayData} plotNode={chartData.plotNode} valueNode={chartData.valueNode} showMin={showMin} />\r\n    </CardContent>}\r\n  </CardLight >\r\n}\r\nconst TextArea = styled(\"textarea\")({\r\n  width: \"100%\",\r\n  fontFamily: \"monospace\",\r\n  resize: \"vertical\",\r\n  minHeight: \"5em\"\r\n})\r\nfunction DataDisplay({ data, }: { data?: object }) {\r\n  return <TextArea readOnly value={JSON.stringify(data)} onClick={e => {\r\n    const target = e.target as HTMLTextAreaElement;\r\n    target.selectionStart = 0;\r\n    target.selectionEnd = target.value.length;\r\n  }} />\r\n}\r\nfunction Chart({ displayData, plotNode, valueNode, showMin }: {\r\n  displayData: Point[],\r\n  plotNode: NumNode,\r\n  valueNode: NumNode,\r\n  showMin: boolean\r\n}) {\r\n  const plotBaseUnit = KeyMap.unitStr(plotNode.info?.key)\r\n  const valueUnit = KeyMap.unitStr(valueNode.info?.key)\r\n  return <ResponsiveContainer width=\"100%\" height={600}>\r\n    <ComposedChart data={displayData}>\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"x\" scale=\"linear\" unit={plotBaseUnit} domain={[\"auto\", \"auto\"]} tick={{ fill: 'white' }} type=\"number\" tickFormatter={n => n > 10000 ? n.toFixed() : n.toFixed(1)} />\r\n      <YAxis name=\"DMG\" domain={[\"auto\", \"auto\"]} unit={valueUnit} allowDecimals={false} tick={{ fill: 'white' }} type=\"number\" />\r\n      <ZAxis dataKey=\"y\" range={[3, 25]} />\r\n      <Legend />\r\n      <Scatter name=\"Optimization Target\" dataKey=\"y\" fill=\"#8884d8\" line lineType=\"fitting\" isAnimationActive={false} />\r\n      {showMin && <Line name=\"Minimum Stat Requirement Threshold\" dataKey=\"min\" stroke=\"#ff7300\" type=\"stepBefore\" connectNulls strokeWidth={2} isAnimationActive={false} />}\r\n    </ComposedChart>\r\n  </ResponsiveContainer>\r\n}\r\n","import { forEachNodes, mapFormulas } from \"../Formula/internal\";\r\nimport { allOperations, constantFold } from \"../Formula/optimization\";\r\nimport { ConstantNode, NumNode } from \"../Formula/type\";\r\nimport { constant, customRead, max, min } from \"../Formula/utils\";\r\nimport { allSlotKeys, ArtifactSetKey } from \"../Types/consts\";\r\nimport { assertUnreachable, objectKeyMap, objectMap } from \"../Util/Util\";\r\nimport type { ArtifactBuildData, ArtifactsBySlot, Build, DynStat, PlotData, RequestFilter } from \"./background\";\r\n\r\ntype DynMinMax = { [key in string]: MinMax }\r\ntype MinMax = { min: number, max: number }\r\n\r\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\r\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\r\n  let should = forced\r\n  /** If `key` makes progress, all operations in `value` should be performed */\r\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\r\n    pruneOrder: { pruneNodeRange: true },\r\n    pruneArtRange: { pruneNodeRange: true },\r\n    pruneNodeRange: { reaffine: true },\r\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\r\n  }\r\n  let count = 0\r\n  while (Object.values(should).some(x => x) && count++ < 20) {\r\n    if (should.pruneOrder) {\r\n      delete should.pruneOrder\r\n      const newArts = pruneOrder(arts, numTop, keepArtifacts)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneOrder }\r\n      }\r\n    }\r\n    if (should.pruneArtRange) {\r\n      delete should.pruneArtRange\r\n      const newArts = pruneArtRange(nodes, arts, minimum)\r\n      if (arts !== newArts) {\r\n        arts = newArts\r\n        should = { ...should, ...deps.pruneArtRange }\r\n      }\r\n    }\r\n    if (should.pruneNodeRange) {\r\n      delete should.pruneNodeRange\r\n      const newNodes = pruneNodeRange(nodes, arts)\r\n      if (nodes !== newNodes) {\r\n        nodes = newNodes\r\n        should = { ...should, ...deps.pruneNodeRange }\r\n      }\r\n    }\r\n    if (should.reaffine) {\r\n      delete should.reaffine\r\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\r\n      if (nodes !== newNodes || arts !== newArts) {\r\n        nodes = newNodes\r\n        arts = newArts\r\n        should = { ...should, ...deps.reaffine }\r\n      }\r\n    }\r\n  }\r\n  return { nodes, arts }\r\n}\r\n\r\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\r\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\r\n\r\n  function visit(node: NumNode, isAffine: boolean) {\r\n    if (isAffine) affineNodes.add(node)\r\n    else node.operands.forEach(_op => {\r\n      const op = _op as NumNode\r\n      affineNodes.has(op) && topLevelAffine.add(op)\r\n    })\r\n  }\r\n\r\n  const dynKeys = new Set<string>()\r\n\r\n  forEachNodes(nodes, _ => { }, f => {\r\n    const operation = f.operation\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\r\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\r\n        dynKeys.add(f.path[1])\r\n        visit(f, true)\r\n        break\r\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\r\n      case \"mul\": {\r\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\r\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\r\n        break\r\n      }\r\n      case \"const\":\r\n        if (typeof f.value === \"string\" || f.value === undefined)\r\n          throw new Error(`Found constant ${f.value} while compacting`)\r\n        visit(f as NumNode, true); break\r\n      case \"res\": case \"threshold\": case \"sum_frac\":\r\n      case \"max\": case \"min\": visit(f, false); break\r\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\":\r\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\"))\r\n    return { nodes, arts }\r\n\r\n  let current = -1\r\n  function nextDynKey(): string {\r\n    while (dynKeys.has(`${++current}`));\r\n    return `${current}`\r\n  }\r\n\r\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\r\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\r\n  const affineMap = new Map(affine.map(node => [node,\r\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\r\n      ? node\r\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\r\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\r\n\r\n  function reaffineArt(stat: DynStat): DynStat {\r\n    const values = constantFold([...affineMap.keys()], {\r\n      dyn: objectMap(stat, (value) => constant(value))\r\n    } as any, _ => true)\r\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\r\n  }\r\n  const result = {\r\n    nodes, arts: {\r\n      base: reaffineArt(arts.base),\r\n      values: objectKeyMap(allSlotKeys, slot =>\r\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\r\n    }\r\n  }\r\n  const offsets = Object.entries(reaffineArt({}))\r\n  for (const arts of Object.values(result.arts.values))\r\n    for (const { values } of arts)\r\n      for (const [key, baseValue] of offsets)\r\n        values[key] -= baseValue\r\n  return result\r\n}\r\n/** Remove artifacts that cannot be in top `numTop` builds */\r\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>): ArtifactsBySlot {\r\n  let progress = false\r\n  const values = objectKeyMap(allSlotKeys, slot => {\r\n    const list = arts.values[slot]\r\n    const newList = list.filter(art => {\r\n      let count = 0\r\n      return list.every(other => {\r\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\r\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\r\n        if (greaterEqual && (greater || other.id > art.id) &&\r\n          (!keepArtifacts.has(art.set) || keepArtifacts.has(other.set)))\r\n          count++\r\n        return count < numTop\r\n      })\r\n    })\r\n    if (newList.length !== list.length) progress = true\r\n    return newList\r\n  })\r\n  return progress ? { base: arts.base, values } : arts\r\n}\r\n/** Remove artifacts that cannot reach `minimum` in any build */\r\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const wrap = { arts }\r\n  while (true) {\r\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\r\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\r\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\r\n\r\n    let progress = false\r\n    const values = objectKeyMap(allSlotKeys, slot => {\r\n      const result = wrap.arts.values[slot].filter(art => {\r\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\r\n        const newRange = computeNodeRange(nodes, read)\r\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\r\n      })\r\n      if (result.length !== wrap.arts.values[slot].length)\r\n        progress = true\r\n      return result\r\n    })\r\n    if (!progress) break\r\n    wrap.arts = { base: wrap.arts.base, values }\r\n  }\r\n  return wrap.arts\r\n}\r\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\r\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\r\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\r\n  const nodeRange = computeNodeRange(nodes, reads)\r\n\r\n  return mapFormulas(nodes, f => {\r\n    const { operation } = f\r\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\r\n    switch (operation) {\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = operandRanges\r\n        if (value.min >= threshold.max) return f.operands[2]\r\n        else if (value.max < threshold.min) return constant(0)\r\n        if (pass.max === pass.min &&\r\n          fail.max === fail.min &&\r\n          pass.min === fail.min && isFinite(pass.min))\r\n          return constant(pass.max)\r\n        break\r\n      }\r\n      case \"min\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\r\n        break\r\n      }\r\n      case \"max\": {\r\n        const newOperands = f.operands.filter((_, i) => {\r\n          const op1 = operandRanges[i]\r\n          return operandRanges.every(op2 => op1.max >= op2.min)\r\n        })\r\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\r\n        break\r\n      }\r\n    }\r\n    return f\r\n  }, f => f)\r\n}\r\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\r\n  const result: DynMinMax = {}\r\n  ranges.forEach(range => {\r\n    Object.entries(range).forEach(([key, value]) => {\r\n      if (result[key]) {\r\n        result[key].min += value.min\r\n        result[key].max += value.max\r\n      } else result[key] = { ...value }\r\n    })\r\n  })\r\n  return result\r\n}\r\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\r\n  const result: DynMinMax = {}, keys = new Set<string>()\r\n  arts.forEach(({ values }) => {\r\n    Object.keys(values).forEach(key => keys.add(key))\r\n    for (const key of keys) {\r\n      const value = values[key] ?? 0\r\n      if (!result[key]) result[key] = { min: value, max: value }\r\n      else {\r\n        if (result[key].max < value) result[key].max = value\r\n        if (result[key].min > value) result[key].min = value\r\n      }\r\n    }\r\n  })\r\n\r\n  return result\r\n}\r\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\r\n  const range = new Map<NumNode, MinMax>()\r\n\r\n  forEachNodes(nodes, _ => { }, _f => {\r\n    const f = _f as NumNode\r\n    const { operation } = f\r\n    const operands = f.operands.map(op => range.get(op)!)\r\n    let current: MinMax\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.path[0] !== \"dyn\")\r\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\r\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\r\n        break\r\n      case \"const\": current = computeMinMax([f.value]); break\r\n      case \"subscript\": current = computeMinMax(f.list); break\r\n      case \"add\": case \"min\": case \"max\":\r\n        current = {\r\n          min: allOperations[operation](operands.map(x => x.min)),\r\n          max: allOperations[operation](operands.map(x => x.max)),\r\n        }; break\r\n      case \"res\": current = {\r\n        min: allOperations[operation]([operands[0].max]),\r\n        max: allOperations[operation]([operands[0].min]),\r\n      }; break\r\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\r\n        accu.min * current.min, accu.min * current.max,\r\n        accu.max * current.min, accu.max * current.max,\r\n      ])); break\r\n      case \"threshold\":\r\n        if (operands[0].min >= operands[1].max) current = operands[2]\r\n        else if (operands[0].max < operands[1].min) current = computeMinMax([0])\r\n        else current = computeMinMax([0], [operands[2]])\r\n        break\r\n      case \"sum_frac\": {\r\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\r\n        if (sum.min <= 0 && sum.max >= 0)\r\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\r\n        else\r\n          // TODO: Check this\r\n          current = computeMinMax([\r\n            x.min / sum.min, x.min / sum.max,\r\n            x.max / sum.min, x.max / sum.max\r\n          ])\r\n        break\r\n      }\r\n      case \"data\": case \"lookup\": case \"match\":\r\n        throw new Error(`Unsupported ${operation} node`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n    range.set(f, current)\r\n  })\r\n  return range\r\n}\r\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\r\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\r\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\r\n  return { min, max }\r\n}\r\n\r\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\r\n  return {\r\n    base: arts.base,\r\n    values: objectKeyMap(allSlotKeys, slot => {\r\n      const filter = filters[slot]\r\n      switch (filter.kind) {\r\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\r\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set))\r\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set))\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\r\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\r\n}\r\nexport function mergePlot(plots: PlotData[]): PlotData {\r\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\r\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\r\n  while (keys.size > maxCount) {\r\n    scale *= reductionScaling\r\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\r\n  }\r\n  const result: PlotData = {}\r\n  for (const plot of plots)\r\n    for (const build of Object.values(plot)) {\r\n      const x = Math.round(build.plot! / scale) * scale\r\n      if (!result[x] || result[x]!.value < build.value)\r\n        result[x] = build\r\n    }\r\n  return result\r\n}\r\n\r\nexport function countBuilds(arts: ArtifactsBySlot): number {\r\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\r\n}\r\n","import { CardActionArea, CardContent, Grid, Skeleton, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext } from 'react';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport SqBadge from '../../Components/SqBadge';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from '../../Types/consts';\r\nimport { artifactSlotIcon } from '../../Components/Artifact/SlotNameWIthIcon';\r\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\r\n\r\ntype ArtifactBuildDisplayItemProps = {\r\n  index: number,\r\n  onClick: () => void,\r\n  compareBuild: boolean,\r\n  disabled?: boolean\r\n}\r\n//for displaying each artifact build\r\nexport default function ArtifactBuildDisplayItem({ index, onClick, compareBuild, disabled }: ArtifactBuildDisplayItemProps) {\r\n  const dataContext = useContext(DataContext)\r\n  const { character, data, oldData } = dataContext\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  if (!character || !artifactSheets || !oldData) return null\r\n  const currentlyEquipped = allSlotKeys.every(slotKey => data.get(input.art[slotKey].id).value === oldData.get(input.art[slotKey].id).value)\r\n  const statProviderContext = { ...dataContext }\r\n  if (!compareBuild) statProviderContext.oldData = undefined\r\n  const setToSlots: Partial<Record<ArtifactSetKey, SlotKey[]>> = {}\r\n  allSlotKeys.forEach(slotKey => {\r\n    const set = data.get(input.art[slotKey].set).value as ArtifactSetKey | undefined\r\n    if (!set) return\r\n    if (setToSlots[set]) setToSlots[set]!.push(slotKey)\r\n    else setToSlots[set] = [slotKey]\r\n  })\r\n  return <CardLight>\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\r\n      <CardActionArea onClick={onClick} disabled={disabled}>\r\n        <CardContent>\r\n          <Grid container spacing={1} sx={{ pb: 1 }}>\r\n            <Grid item>\r\n              <Typography variant=\"h6\"><SqBadge color=\"info\"><strong>#{index + 1}{currentlyEquipped ? \" (Equipped)\" : \"\"}</strong></SqBadge></Typography>\r\n            </Grid>\r\n            {(Object.entries(setToSlots) as [ArtifactSetKey, SlotKey[]][]).sort(([k1, slotarr1], [k2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n              <Grid item key={key}><Typography variant=\"h6\"><SqBadge color={currentlyEquipped ? \"success\" : \"primary\"} >\r\n                {slotarr.map(slotKey => artifactSlotIcon(slotKey))} {artifactSheets?.[key].name ?? \"\"}\r\n              </SqBadge></Typography></Grid>\r\n            )}\r\n          </Grid>\r\n          <DataContext.Provider value={statProviderContext}>\r\n            <StatDisplayComponent />\r\n          </DataContext.Provider>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Suspense>\r\n  </CardLight>\r\n}\r\n","import { Replay } from '@mui/icons-material';\r\nimport { Box, Button, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext, useMemo, useState } from 'react';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport CardDark from '../../Components/Card/CardDark';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport CloseButton from '../../Components/CloseButton';\r\nimport ModalWrapper from '../../Components/ModalWrapper';\r\nimport SqBadge from '../../Components/SqBadge';\r\nimport { Stars } from '../../Components/StarDisplay';\r\nimport { DataContext } from '../../DataContext';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allArtifactSets, SetNum } from '../../Types/consts';\r\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\r\n\r\nexport default function ArtifactConditionalCard({ disabled }: { disabled?: boolean }) {\r\n  const { character } = useContext(DataContext)\r\n  const [open, setOpen] = useState(false)\r\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\r\n  const onClose = useCallback(() => setOpen(false), [setOpen])\r\n  const artifactCondCount = useMemo(() =>\r\n    (Object.keys(character.conditional) as any).filter(k => allArtifactSets.includes(k)).length\r\n    , [character])\r\n  return <CardLight><CardContent>\r\n    <Button fullWidth onClick={onOpen} disabled={disabled}>\r\n      <span>Default Artifact Set Effects Conditionals {!!artifactCondCount && <SqBadge color=\"success\">{artifactCondCount} Selected</SqBadge>}</span>\r\n    </Button>\r\n    <ArtConditionalModal open={open} onClose={onClose} artifactCondCount={artifactCondCount} />\r\n  </CardContent></CardLight>\r\n}\r\n\r\nfunction ArtConditionalModal({ open, onClose, artifactCondCount }: {\r\n  open: boolean, onClose: () => void, artifactCondCount: number\r\n}) {\r\n  const { character, characterDispatch } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const resetArtConds = useCallback(() => {\r\n    const conditional = Object.fromEntries(Object.entries(character.conditional).filter(([k, v]) => !allArtifactSets.includes(k as any)))\r\n    characterDispatch({ conditional })\r\n  }, [character, characterDispatch]);\r\n\r\n  if (!artifactSheets) return null\r\n  const artSetKeyList = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets)).reverse().flatMap(([, sets]) => sets)\r\n  return <ModalWrapper open={open} onClose={onClose} ><CardDark>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Typography variant=\"h6\">Default Artifact Set Effects {!!artifactCondCount && <SqBadge color=\"success\">{artifactCondCount} Selected</SqBadge>}</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button onClick={resetArtConds} startIcon={<Replay />}>Reset All</Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <CardLight sx={{ mb: 1 }}>\r\n        <CardContent>\r\n          <Typography>Some artifacts provide conditional stats. This windows allows you to select those stats, so they can take effect during build calculation, when artifact sets are not specified.</Typography>\r\n        </CardContent>\r\n      </CardLight>\r\n      <Grid container spacing={1}>\r\n        {artSetKeyList.map(setKey => {\r\n          const sheet = artifactSheets[setKey]\r\n          // Don't display if no conditional in artifact\r\n          if (!Object.values(sheet.setEffects).some(entry => entry.document && entry.document.some(d => d.conditional))) return null\r\n          return <Grid item key={setKey} xs={6} lg={4}>\r\n            <CardLight sx={{ height: \"100%\" }}>\r\n              <Box className={`grad-${sheet.rarity[0]}star`} width=\"100%\" sx={{ display: \"flex\" }} >\r\n                <Box component=\"img\" src={sheet.defIconSrc} sx={{ height: 100, width: \"auto\" }} />\r\n                <Box sx={{ flexGrow: 1, px: 1, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\r\n                  <Typography variant=\"h6\">{artifactSheets?.[setKey].name ?? \"\"}</Typography>\r\n                  <Typography variant=\"subtitle1\">{sheet.rarity.map((ns, i) => <span key={ns}>{ns}<Stars stars={1} /> {i < (sheet.rarity.length - 1) ? \"/ \" : null}</span>)}</Typography>\r\n                </Box>\r\n              </Box>\r\n              <CardContent><Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\r\n                {Object.keys(sheet.setEffects).map(setNumKey => <SetEffectDisplay key={setNumKey} setKey={setKey} setNumKey={parseInt(setNumKey) as SetNum} />)}\r\n              </Grid></CardContent>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ py: 1 }}>\r\n      <CloseButton large onClick={onClose} />\r\n    </CardContent>\r\n  </CardDark></ModalWrapper>\r\n}\r\n","import { ButtonGroup, CardContent, Divider, MenuItem } from '@mui/material';\r\nimport React, { useMemo } from 'react';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\r\nimport ArtifactSetDropdown from '../../Components/Artifact/ArtifactSetDropdown';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { BuildSetting } from '../../Types/Build';\r\nimport { ArtifactRarity, ArtifactSetKey, SetNum } from '../../Types/consts';\r\n\r\ntype PickerProps = {\r\n  index: number\r\n  setFilters: BuildSetting[\"setFilters\"],\r\n  disabled?: boolean,\r\n  onChange: (index: number, key: ArtifactSetKey | \"\", num: number) => void,\r\n}\r\n\r\nexport default function ArtifactSetPicker({ index, setFilters, onChange, disabled = false }: PickerProps) {\r\n  const { key: setKey, num: setNum } = setFilters[index]\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const artifactSetsByRarity = useMemo(() => {\r\n    if (!artifactSheets) return undefined\r\n    const artifactSetsByRarity = Object.fromEntries(Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets)).map(([rarity, sets]) => [rarity, sets.filter(setKey => {\r\n      if (setFilters.some(filter => filter.key === setKey)) return false;\r\n      const setsNumArr = Object.keys(artifactSheets?.[setKey]?.setEffects ?? {})\r\n      const artsAccountedOther = setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every((num: any) => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return true\r\n    })])) as Dict<ArtifactRarity, ArtifactSetKey[]>\r\n    return artifactSetsByRarity\r\n  }, [artifactSheets, setFilters, index])\r\n\r\n  const artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <ButtonGroup>\r\n        {/* Artifact set */}\r\n        {artifactSheets && <ArtifactSetDropdown hasUnselect selectedSetKey={setKey} artifactSetsByRarity={artifactSetsByRarity as any} disabled={disabled}\r\n          onChange={setKey => onChange(index, setKey as ArtifactSetKey, parseInt(Object.keys(artifactSheets[setKey]?.setEffects ?? {})[0] as string) ?? 0)} />}\r\n        {/* set number */}\r\n        <DropdownButton title={`${setNum}-set`}\r\n          disabled={disabled || !setKey || artsAccounted >= 5}\r\n        >\r\n          {Object.keys(artifactSheets?.[setKey]?.setEffects ?? {}).map((num: any) => {\r\n            let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n            return (parseInt(num) + artsAccountedOther <= 5) &&\r\n              (<MenuItem key={num} onClick={() => onChange(index, setFilters[index].key, parseInt(num) ?? 0)} >\r\n                {`${num}-set`}\r\n              </MenuItem>)\r\n          })}\r\n        </DropdownButton>\r\n      </ButtonGroup>\r\n    </CardContent>\r\n    {!!setKey && <Divider />}\r\n    {!!setKey && <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n      {Object.keys(artifactSheets?.[setKey].setEffects ?? {}).map(setNKey => parseInt(setNKey as string) as SetNum).filter(setNkey => setNkey <= setNum).map(setNumKey =>\r\n        <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, ListItem, Typography } from '@mui/material';\r\nimport { useContext } from 'react';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport { FieldDisplayList, NodeFieldDisplay } from '../../Components/FieldDisplay';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula';\r\nimport { NumNode } from '../../Formula/type';\r\nexport default function BonusStatsCard() {\r\n  const { data, character } = useContext(DataContext)\r\n  const bonusStatsKeys = Object.keys(character?.bonusStats)\r\n  if (!bonusStatsKeys.length) return null\r\n  const nodes = bonusStatsKeys.map(k => data.get(input.customBonus[k] as NumNode))\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Bonus Stats</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent><FieldDisplayList sx={{ my: 0 }} >\r\n      {nodes.map(n => <ListItem key={n.key}><NodeFieldDisplay node={n} /></ListItem>)}\r\n    </FieldDisplayList></CardContent>\r\n  </CardLight>\r\n}\r\n","import { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material';\r\nimport React, { ReactNode } from 'react';\r\nimport { timeStringMs } from '../../Util/TimeUtil';\r\n\r\nexport const warningBuildNumber = 10000000\r\n\r\nconst Monospace = styled(\"strong\")({\r\n  fontFamily: \"monospace\"\r\n})\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n  height: 10,\r\n  borderRadius: 5,\r\n}));\r\nexport default function BuildAlert({ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }) {\r\n  const totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n  const totalUnskipped = totBuildNumber - generationSkipped\r\n  const generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n  const generationSkippedString = generationSkipped?.toLocaleString() ?? generationSkipped\r\n  const totalUnskippedString = totalUnskipped?.toLocaleString() ?? totalUnskipped\r\n  const generationSkippedText = !!generationSkipped && <span>(<b>{generationSkippedString}</b> skipped)</span>\r\n\r\n  let color = \"success\" as \"success\" | \"warning\" | \"error\"\r\n  let title = \"\" as ReactNode\r\n  let subtitle = \"\" as ReactNode\r\n  let progress = undefined as undefined | number\r\n\r\n  if (generatingBuilds) {\r\n    progress = generationProgress * 100 / (totalUnskipped)\r\n    title = <Typography>Generating and testing <Monospace>{generationProgressString}/{totalUnskippedString}</Monospace> build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</Typography>\r\n    subtitle = <Typography>Time elapsed: <Monospace>{timeStringMs(Math.round(generationDuration))}</Monospace></Typography>\r\n  } else if (!generatingBuilds && generationProgress) {//done\r\n    progress = 100\r\n    title = <Typography>Generated and tested <Monospace>{totalUnskippedString}</Monospace> Build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</Typography>\r\n    subtitle = <Typography>Total duration: <Monospace>{timeStringMs(Math.round(generationDuration))}</Monospace></Typography>\r\n  } else {\r\n    if (totBuildNumber === 0) {\r\n      title = <Typography>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/include more Artifacts.</Typography>\r\n      color = \"error\"\r\n    } else if (totBuildNumber > warningBuildNumber) {\r\n      title = <Typography>Current configuration will generate <Monospace>{totalBuildNumberString}</Monospace> potential builds for <b>{characterName}</b>. This might take quite a while to generate...</Typography>\r\n      color = \"warning\"\r\n    } else\r\n      title = <Typography>Current configuration {totBuildNumber <= maxBuildsToShow ? \"generated\" : \"will generate\"} <Monospace>{totalBuildNumberString}</Monospace> builds for <b>{characterName}</b>.</Typography>\r\n  }\r\n\r\n  return <Alert severity={color} variant=\"filled\" sx={{\r\n    \"& .MuiAlert-message\": {\r\n      flexGrow: 1\r\n    }\r\n  }}>\r\n    {title && title}\r\n    {subtitle && subtitle}\r\n    {progress !== undefined && <Grid container spacing={1} alignItems=\"center\">\r\n      <Grid item>\r\n        <Typography>{`${progress.toFixed(1)}%`}</Typography>\r\n      </Grid>\r\n      <Grid item flexGrow={1} >\r\n        <BorderLinearProgress variant=\"determinate\" value={progress} color=\"primary\" />\r\n      </Grid>\r\n    </Grid>}\r\n  </Alert>\r\n}\r\n\r\n","import { ExpandMore } from '@mui/icons-material';\r\nimport { CardContent, CardHeader, Collapse, Divider, Grid, Typography } from '@mui/material';\r\nimport React, { useContext, useState } from 'react';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport { EnemyEditor, EnemyResText } from '../../Components/EnemyEditor';\r\nimport ExpandButton from '../../Components/ExpandButton';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula/index';\r\nimport KeyMap, { valueString } from '../../KeyMap';\r\nimport { allElementsWithPhy } from '../../Types/consts';\r\n\r\nexport default function EnemyEditorCard() {\r\n  const [expanded, setExpanded] = useState(false);\r\n  const { data } = useContext(DataContext)\r\n  const eLvlNode = data.get(input.enemy.level)\r\n  const eDefRed = data.get(input.enemy.defRed)\r\n  const eDefIgn = data.get(input.enemy.defIgn)\r\n  return <CardLight>\r\n    <CardHeader\r\n      action={\r\n        <ExpandButton\r\n          expand={expanded}\r\n          onClick={() => setExpanded(!expanded)}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          size=\"small\"\r\n        >\r\n          <ExpandMore />\r\n        </ExpandButton>\r\n      }\r\n      title={<Typography>\r\n        {KeyMap.get(eLvlNode.key)} <strong>{valueString(eLvlNode.value, eLvlNode.unit, 0)}</strong>\r\n      </Typography>}\r\n    />\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {allElementsWithPhy.map(element => <Grid item xs={3} key={element}><EnemyResText element={element} /></Grid>)}\r\n        <Grid item xs={4} ><Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography></Grid>\r\n        <Grid item xs={4} ><Typography>DEF Reduction {valueString(eDefIgn.value, eDefIgn.unit)}</Typography></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor bsProps={{ xs: 12 }} />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../../Components/HitModeEditor';\r\nexport default function HitModeCard({ disabled }: { disabled: boolean }) {\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}><Typography>Hit Mode Options</Typography></Grid>\r\n        <Grid item ><InfusionAuraDropdown size=\"small\" disabled={disabled} /></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <HitModeToggle fullWidth size=\"small\" disabled={disabled} />\r\n      <ReactionToggle fullWidth size=\"small\" disabled={disabled} sx={{ mt: 1 }} />\r\n    </CardContent>\r\n  </CardLight >\r\n}\r\n","import { Info, Replay } from '@mui/icons-material';\r\nimport { Button, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport SlotNameWithIcon from '../../Components/Artifact/SlotNameWIthIcon';\r\nimport BootstrapTooltip from '../../Components/BootstrapTooltip';\r\nimport CardDark from '../../Components/Card/CardDark';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../Components/SqBadge';\r\nimport StatIcon from '../../Components/StatIcon';\r\nimport KeyMap from '../../KeyMap';\r\nimport { MainStatKey } from '../../Types/artifact';\r\nimport { BuildSetting } from '../../Types/Build';\r\nimport { SlotKey } from '../../Types/consts';\r\nimport Artifact from '../../Data/Artifacts/Artifact';\r\n\r\nexport const artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"] as const\r\n\r\nexport default function MainStatSelectionCard({ mainStatAssumptionLevel, mainStatKeys, onChangeMainStatKey, onChangeAssLevel, disabled = false, }: {\r\n  mainStatAssumptionLevel: number\r\n  mainStatKeys: BuildSetting[\"mainStatKeys\"]\r\n  onChangeMainStatKey: (slotKey: SlotKey, mainStatKey?: MainStatKey) => void\r\n  onChangeAssLevel: (level: number) => void\r\n  disabled?: boolean\r\n}) {\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }} >\r\n      <Grid container alignItems=\"center\" spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Artifact Main Stat</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <BootstrapTooltip placement=\"top\" title={<Typography><strong>Level Assumption</strong> changes mainstat value to be at least a specific level. Does not change substats.</Typography>}>\r\n            <Info />\r\n          </BootstrapTooltip>\r\n        </Grid>\r\n        <Grid item>\r\n          <AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={v => onChangeAssLevel(v)} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{\r\n      // select all excluding last\r\n      \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n    }}>\r\n      {artifactsSlotsToSelectMainStats.map(slotKey => {\r\n        const numSel = mainStatKeys[slotKey].length\r\n        return <CardDark key={slotKey}>\r\n          <CardContent sx={{ py: 1 }}><Grid container spacing={1}>\r\n            <Grid item ><SlotNameWithIcon slotKey={slotKey} /></Grid>\r\n            <Grid item flexGrow={1}>\r\n              <SqBadge color=\"info\">{numSel ? `${numSel} Selected` : `Any`}</SqBadge>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" size=\"small\" disabled={!mainStatKeys[slotKey].length || disabled}\r\n                onClick={() => onChangeMainStatKey(slotKey)}>\r\n                <Replay />\r\n              </Button>\r\n            </Grid>\r\n          </Grid></CardContent>\r\n          <Divider />\r\n          <CardContent>\r\n            <Grid container spacing={1}>\r\n              {Artifact.slotMainStats(slotKey).map((mainStatKey, i) => {\r\n                const selected = mainStatKeys[slotKey].includes(mainStatKey)\r\n                return <Grid item xs={i < 3 ? 4 : 6} key={mainStatKey} >\r\n                  <Button fullWidth size=\"small\" color={selected ? \"success\" : \"secondary\"} disabled={disabled} sx={{ height: \"100%\" }}\r\n                    onClick={() => onChangeMainStatKey(slotKey, mainStatKey)} startIcon={StatIcon[mainStatKey]}>\r\n                    {KeyMap.get(mainStatKey)}\r\n                  </Button>\r\n                </Grid>\r\n              })}\r\n            </Grid>\r\n          </CardContent>\r\n        </CardDark>\r\n      })}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst levels = {\r\n  0: <span>No level assumption</span>,\r\n  4: <span>Assume at least level 4</span>,\r\n  8: <span>Assume at least level 8</span>,\r\n  12: <span>Assume at least level 12</span>,\r\n  16: <span>Assume at least level 16</span>,\r\n  20: <span>Assume at least level 20</span>\r\n} as const\r\nfunction AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel, disabled }) {\r\n  return <DropdownButton color={mainStatAssumptionLevel ? \"warning\" : \"primary\"} disabled={disabled} title={levels[mainStatAssumptionLevel]}>\r\n    {Object.entries(levels).map(([key, text]) => <MenuItem key={key} onClick={() => setmainStatAssumptionLevel(parseInt(key))}>{text}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Masonry } from '@mui/lab';\r\nimport { Button, CardContent, CardHeader, Divider, MenuItem, MenuList, styled } from '@mui/material';\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport CardDark from '../../Components/Card/CardDark';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport ColorText from '../../Components/ColoredText';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../../Components/ModalWrapper';\r\nimport { DataContext } from '../../DataContext';\r\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil';\r\nimport { DisplaySub } from '../../Formula/type';\r\nimport { NodeDisplay } from '../../Formula/uiData';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { objPathValue } from '../../Util/Util';\r\n\r\nconst WhiteButton = styled(Button)({\r\n  color: \"black\",\r\n  backgroundColor: \"white\",\r\n  \"&:hover\": {\r\n    backgroundColor: \"#e1e1e1\",\r\n  }\r\n})\r\nexport default function OptimizationTargetSelector({ optimizationTarget, setTarget, disabled = false }: {\r\n  optimizationTarget?: string[], setTarget: (target: string[]) => void, disabled\r\n}) {\r\n  const [open, setOpen] = useState(false)\r\n  const onOpen = useCallback(() => !disabled && setOpen(true), [setOpen, disabled])\r\n  const onClose = useCallback(() => setOpen(false), [setOpen])\r\n\r\n  const setTargetHandler = useCallback(\r\n    (target: string[]) => {\r\n      onClose()\r\n      setTarget(target)\r\n    },\r\n    [onClose, setTarget],\r\n  )\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <>\r\n    <WhiteButton onClick={onOpen} disabled={disabled} >\r\n      <TargetDisplayText optimizationTarget={optimizationTarget} />\r\n    </WhiteButton>\r\n    <ModalWrapper open={open} onClose={onClose}>\r\n      <CardDark >\r\n        <CardContent>\r\n          <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\r\n            {sections.map(([key, Nodes]) =>\r\n              <SelectorSection key={key} displayNs={Nodes} sectionKey={key} setTarget={setTargetHandler} />)}\r\n          </Masonry >\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}\r\nfunction SelectorSection({ displayNs, sectionKey, setTarget }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string, setTarget: (target: string[]) => void }) {\r\n  const { data } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  if (!header || Object.values(displayNs).every(n => n.isEmpty)) return null\r\n  return <CardLight key={sectionKey as string}>\r\n    <CardHeader avatar={header.icon && <ImgIcon size={2} sx={{ m: -1 }} src={header.icon} />} title={header.title} action={header.action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <MenuList>\r\n      {Object.entries(displayNs).map(([key, n]) =>\r\n        <TargetSelectorMenuItem key={key} node={n} onClick={() => setTarget([sectionKey, key])} />)}\r\n    </MenuList>\r\n  </CardLight>\r\n}\r\nfunction NoTarget() {\r\n  return <b>Please select an Optimization Target</b>\r\n}\r\nfunction TargetDisplayText({ optimizationTarget }: { optimizationTarget?: string[] }) {\r\n  const { data } = useContext(DataContext)\r\n  const displayHeader = usePromise(optimizationTarget && getDisplayHeader(data, optimizationTarget[0]), [data, optimizationTarget])\r\n\r\n  if (!optimizationTarget || !displayHeader) return <NoTarget />\r\n  const node: NodeDisplay | undefined = objPathValue(data.getDisplay(), optimizationTarget) as any\r\n  if (!node) return <NoTarget />\r\n\r\n  return <b>{displayHeader.title} : {<ColorText color={node.variant}>{KeyMap.get(node.key)}</ColorText>}</b>\r\n}\r\nfunction TargetSelectorMenuItem({ node, onClick }: { node: NodeDisplay, onClick: () => void }) {\r\n  if (node.isEmpty) return null\r\n  return <MenuItem onClick={onClick} style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n    <ColorText color={node.variant} >{KeyMap.get(node.key)}</ColorText>\r\n  </MenuItem>\r\n}\r\n","import { CardContent, Divider, ListItem, Typography } from '@mui/material';\r\nimport React, { useContext } from 'react';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport { FieldDisplayList, NodeFieldDisplay } from '../../Components/FieldDisplay';\r\nimport { DataContext } from '../../DataContext';\r\nimport { NodeDisplay } from '../../Formula/uiData';\r\nexport default function TeamBuffCard() {\r\n  const { data } = useContext(DataContext)\r\n  const teamBuffs = data.getTeamBuff()\r\n  const nodes: Array<NodeDisplay<number>> = []\r\n  Object.values(teamBuffs.total ?? {}).forEach(node => !node.isEmpty && nodes.push(node))\r\n  Object.values(teamBuffs.premod ?? {}).forEach(node => !node.isEmpty && nodes.push(node))\r\n  Object.values(teamBuffs.enemy ?? {}).forEach(node => !node.isEmpty && nodes.push(node))\r\n  if (!nodes.length) return null\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Team Buff Stats</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <FieldDisplayList sx={{ my: 0 }} >\r\n        {nodes.map((n, i) => n && <NodeFieldDisplay key={i.toString() + (n.key ?? \"\")} node={n} component={ListItem} />)}\r\n      </FieldDisplayList>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { input } from \"../Formula\";\r\nimport { computeUIData } from \"../Formula/api\";\r\nimport { formulaString } from \"../Formula/debug\";\r\nimport { Data, NumNode } from \"../Formula/type\";\r\nimport { constant, setReadNodeKeys } from \"../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, ICachedArtifact } from \"../Types/artifact\";\r\nimport { SetFilter } from \"../Types/Build\";\r\nimport { allSlotKeys, ArtifactSetKey } from \"../Types/consts\";\r\nimport { deepClone, objectKeyMap, objectMap } from \"../Util/Util\";\r\nimport type { ArtifactBuildData, ArtifactsBySlot, DynStat, RequestFilter } from \"./background\";\r\nimport { countBuilds, filterArts } from \"./common\";\r\n\r\nconst dynamic = setReadNodeKeys(deepClone({ dyn: { ...input.art, ...input.artSet } }))\r\nexport const dynamicData = {\r\n  art: objectKeyMap([...allMainStatKeys, ...allSubstats], key => dynamic.dyn[key]),\r\n  artSet: objectMap(input.artSet, (_, key) => dynamic.dyn[key]),\r\n}\r\n\r\nexport function compactArtifacts(arts: ICachedArtifact[], mainStatAssumptionLevel: number): ArtifactsBySlot {\r\n  const result: ArtifactsBySlot = {\r\n    base: {},\r\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] }\r\n  }\r\n  const keys = new Set<string>()\r\n\r\n  for (const art of arts) {\r\n    const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n\r\n    const data: ArtifactBuildData = {\r\n      id: art.id, set: art.setKey,\r\n      values: {\r\n        [art.setKey]: 1,\r\n        [art.mainStatKey]: art.mainStatKey.endsWith('_') ? mainStatVal / 100 : mainStatVal,\r\n        ...Object.fromEntries(art.substats.map(substat =>\r\n          [substat.key, substat.key.endsWith('_') ? substat.accurateValue / 100 : substat.accurateValue]))\r\n      },\r\n    }\r\n    delete data.values[\"\"]\r\n    result.values[art.slotKey].push(data)\r\n    Object.keys(data.values).forEach(x => keys.add(x))\r\n  }\r\n  result.base = objectKeyMap([...keys], _ => 0)\r\n  return result\r\n}\r\nexport function* artSetPerm(filters: SetFilter[]): Iterable<RequestFilter> {\r\n  function* check(request: RequestFilter, filters: Dict<ArtifactSetKey, number>[], remainingSlots: number) {\r\n    if (!filters.length) return\r\n    if (filters.some(filter => !Object.keys(filter).length)) {\r\n      yield request\r\n      return\r\n    }\r\n\r\n    const slot = allSlotKeys[remainingSlots - 1]\r\n    const keys = new Set(filters.flatMap(filter => Object.keys(filter)))\r\n    for (const key of keys) {\r\n      const newRequest = { ...request, [slot]: { kind: \"required\", sets: new Set([key]) } }\r\n      const newFilters = filters\r\n        .filter(filter => filter[key])\r\n        .map(filter => {\r\n          const result = { ...filter }\r\n          result[key]! -= 1\r\n          if (!result[key]) delete result[key]\r\n          return result\r\n        })\r\n      yield* check(newRequest, newFilters, remainingSlots - 1)\r\n    }\r\n    {\r\n      const newRequest = { ...request, [slot]: { kind: \"exclude\", sets: keys } }\r\n      const newFilters = filters.filter(filter =>\r\n        Object.values(filter).reduce((a, b) => a + b, 0) < remainingSlots)\r\n      yield* check(newRequest, newFilters, remainingSlots - 1)\r\n    }\r\n  }\r\n  yield* check(objectKeyMap(allSlotKeys, _ => noFilter), filters.map(filter => {\r\n    const result: Dict<ArtifactSetKey, number> = {}\r\n    filter.forEach(({ key, num }) => key && num && (result[key] = (result[key] ?? 0) + num))\r\n    return result\r\n  }), 5)\r\n}\r\nexport function* splitFiltersBySet(_arts: ArtifactsBySlot, filters: Iterable<RequestFilter>, limit: number): Iterable<RequestFilter> {\r\n  if (limit < 10000) limit = 10000\r\n\r\n  for (const filter of filters) {\r\n    const filters = [filter]\r\n\r\n    while (filters.length) {\r\n      const filter = filters.pop()!\r\n      const arts = filterArts(_arts, filter)\r\n      const count = countBuilds(arts)\r\n      if (count <= limit) {\r\n        if (count) yield filter\r\n        continue\r\n      }\r\n\r\n      const candidates = allSlotKeys\r\n        // TODO: Cache this loop\r\n        .map(slot => ({ slot, sets: new Set(arts.values[slot].map(x => x.set)) }))\r\n        .filter(({ sets }) => sets.size > 1)\r\n      if (!candidates.length) {\r\n        yield* splitFilterByIds(arts, filter, limit)\r\n        continue\r\n      }\r\n      const { sets, slot } = candidates.reduce((a, b) => a.sets.size < b.sets.size ? a : b)\r\n      sets.forEach(set => filters.push({ ...filter, [slot]: { kind: \"required\", sets: new Set([set]) } }))\r\n    }\r\n  }\r\n}\r\nfunction* splitFilterByIds(_arts: ArtifactsBySlot, filter: RequestFilter, limit: number): Iterable<RequestFilter> {\r\n  const filters = [filter]\r\n\r\n  while (filters.length) {\r\n    const filter = filters.pop()!\r\n    const arts = filterArts(_arts, filter)\r\n    const count = countBuilds(arts)\r\n    if (count <= limit) {\r\n      if (count) yield filter\r\n      continue\r\n    }\r\n\r\n    const candidates = allSlotKeys\r\n      .map(slot => ({ slot, length: arts.values[slot].length }))\r\n      .filter(x => x.length > 1)\r\n    const { slot, length } = candidates.reduce((a, b) => a.length < b.length ? a : b)\r\n\r\n    const numChunks = Math.ceil(count / limit)\r\n    const boundedNumChunks = Math.min(numChunks, length)\r\n    const chunk = Array(boundedNumChunks).fill(0).map(_ => new Set<string>())\r\n    arts.values[slot].forEach(({ id }, i) => chunk[i % boundedNumChunks].add(id))\r\n    if (numChunks > length) {\r\n      chunk.forEach(ids => filters.push({ ...filter, [slot]: { kind: \"id\", ids } }))\r\n    } else {\r\n      for (const ids of chunk)\r\n        yield { ...filter, [slot]: { kind: \"id\", ids } }\r\n    }\r\n  }\r\n}\r\n\r\nconst noFilter = { kind: \"exclude\" as const, sets: new Set<ArtifactSetKey>() }\r\n\r\nexport function debugCompute(nodes: NumNode[], base: DynStat, arts: ArtifactBuildData[]) {\r\n  const stats = { ...base }\r\n  for (const art of arts) {\r\n    for (const [key, value] of Object.entries(art.values)) {\r\n      stats[key] = (stats[key] ?? 0) + value\r\n    }\r\n  }\r\n  const data = { dyn: Object.fromEntries(Object.entries(stats).map(([key, value]) => [key, constant(value)])) } as Data\r\n  const uiData = computeUIData([data])\r\n  return {\r\n    base, arts, stats,\r\n    data, uiData,\r\n    nodes: nodes.map(formulaString),\r\n    results: nodes.map(node => uiData.get(node)),\r\n  }\r\n}\r\n","import { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { CheckBox, CheckBoxOutlineBlank, Close } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, Divider, Grid, Link, MenuItem, Skeleton, ToggleButton, Typography } from '@mui/material';\r\nimport React, { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BackgroundWorker\";\r\nimport ArtifactLevelSlider from '../Components/Artifact/ArtifactLevelSlider';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport StatFilterCard from '../Components/StatFilterCard';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport { mergeData, uiDataForTeam } from '../Formula/api';\r\nimport { uiInput as input } from '../Formula/index';\r\nimport { optimize } from '../Formula/optimization';\r\nimport { NumNode } from '../Formula/type';\r\nimport { initGlobalSettings } from '../GlobalSettings';\r\nimport KeyMap from '../KeyMap';\r\nimport CharacterCard from '../PageCharacter/CharacterCard';\r\nimport useCharacter from '../ReactHooks/useCharacter';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useDBState from '../ReactHooks/useDBState';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useTeamData, { getTeamData } from '../ReactHooks/useTeamData';\r\nimport { BuildSetting } from '../Types/Build';\r\nimport { ArtifactSetKey, CharacterKey } from '../Types/consts';\r\nimport { objectMap, objPathValue } from '../Util/Util';\r\nimport { Build, ChartData, Finalize, FinalizeResult, Request, Setup, WorkerResult } from './background';\r\nimport { maxBuildsToShowList } from './Build';\r\nimport { initialBuildSettings } from './BuildSetting';\r\nimport ChartCard from './ChartCard';\r\nimport { countBuilds, filterArts, mergeBuilds, mergePlot, pruneAll } from './common';\r\nimport ArtifactBuildDisplayItem from './Components/ArtifactBuildDisplayItem';\r\nimport ArtifactConditionalCard from './Components/ArtifactConditionalCard';\r\nimport ArtifactSetPicker from './Components/ArtifactSetPicker';\r\nimport BonusStatsCard from './Components/BonusStatsCard';\r\nimport BuildAlert, { warningBuildNumber } from './Components/BuildAlert';\r\nimport EnemyEditorCard from './Components/EnemyEditorCard';\r\nimport HitModeCard from './Components/HitModeCard';\r\nimport MainStatSelectionCard from './Components/MainStatSelectionCard';\r\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector';\r\nimport TeamBuffCard from './Components/TeamBuffCard';\r\nimport { artSetPerm, compactArtifacts, dynamicData, splitFiltersBySet } from './foreground';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCard = lazy(() => import('../PageCharacter/CharacterDisplayCard'))\r\n\r\nfunction buildSettingsReducer(state: BuildSetting, action): BuildSetting {\r\n  switch (action.type) {\r\n    case 'mainStatKey': {\r\n      const { slotKey, mainStatKey } = action\r\n      const mainStatKeys = { ...state.mainStatKeys }//create a new object to update react dependencies\r\n\r\n      if (state.mainStatKeys[slotKey].includes(mainStatKey))\r\n        mainStatKeys[slotKey] = mainStatKeys[slotKey].filter(k => k !== mainStatKey)\r\n      else\r\n        mainStatKeys[slotKey].push(mainStatKey)\r\n      return { ...state, mainStatKeys }\r\n    }\r\n    case 'mainStatKeyReset': {\r\n      const { slotKey } = action\r\n      const mainStatKeys = { ...state.mainStatKeys }//create a new object to update react dependencies\r\n      mainStatKeys[slotKey] = []\r\n      return { ...state, mainStatKeys }\r\n    }\r\n    case `setFilter`: {\r\n      const { index, key, num = 0 } = action\r\n      state.setFilters[index] = { key, num }\r\n      return { ...state, setFilters: [...state.setFilters] }//do this because this is a dependency, so needs to be a \"new\" array\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\nfunction initialBuildDisplayState(): {\r\n  characterKey: CharacterKey | \"\"\r\n} {\r\n  return {\r\n    characterKey: \"\"\r\n  }\r\n}\r\n\r\nexport default function BuildDisplay({ location: { characterKey: propCharacterKey } }) {\r\n  const [{ tcMode }] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n  const { database } = useContext(DatabaseContext)\r\n  const [{ characterKey }, setBuildSettings] = useDBState(\"BuildDisplay\", initialBuildDisplayState)\r\n  const setcharacterKey = useCallback(characterKey => {\r\n    if (characterKey && database._getChar(characterKey)) setBuildSettings({ characterKey })\r\n    else setBuildSettings({ characterKey: \"\" })\r\n  }, [setBuildSettings, database])\r\n\r\n  // propCharacterKey can override the selected character, on initial load. This is intended to run on component startup.\r\n  useEffect(() => {\r\n    if (propCharacterKey && propCharacterKey !== characterKey)\r\n      setcharacterKey(propCharacterKey)\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const [modalBuildIndex, setmodalBuildIndex] = useState(-1) // the index of the newBuild that is being displayed in the character modal,\r\n\r\n  const [generatingBuilds, setgeneratingBuilds] = useState(false)\r\n  const [generationProgress, setgenerationProgress] = useState(0)\r\n  const [generationDuration, setgenerationDuration] = useState(0)//in ms\r\n  const [generationSkipped, setgenerationSkipped] = useState(0)\r\n\r\n  const [chartData, setchartData] = useState(undefined as ChartData | undefined)\r\n\r\n  const [artsDirty, setArtsDirty] = useForceUpdate()\r\n\r\n  const setCharacter = useCharSelectionCallback()\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const character = useCharacter(characterKey)\r\n  const buildSettings = character?.buildSettings ?? initialBuildSettings()\r\n  const { plotBase, setFilters, statFilters, mainStatKeys, optimizationTarget, mainStatAssumptionLevel, useExcludedArts, useEquippedArts, builds, buildDate, maxBuildsToShow, levelLow, levelHigh } = buildSettings\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\r\n  const { characterSheet, target: data } = teamData?.[characterKey as CharacterKey] ?? {}\r\n\r\n  const teamDataBuilds = usePromise(Promise.all(builds.map(async (b) => {\r\n    if (!characterKey) return undefined\r\n    const result = await getTeamData(database, characterKey, mainStatAssumptionLevel, b.filter(a => a).map(a => database._getArt(a)!))\r\n    if (!result) return null\r\n    const { teamData, teamBundle } = result\r\n\r\n    const calcData = uiDataForTeam(teamData, characterKey)\r\n    const data = objectMap(calcData, (obj, ck) => {\r\n      const { data: _, ...rest } = teamBundle[ck]!\r\n      return { ...obj, ...rest }\r\n    })\r\n    return data\r\n  })).then(arr => arr.map(a => a)), [teamData, builds, database, characterKey, mainStatAssumptionLevel]) ?? []\r\n\r\n  const compareData = character?.compareData ?? false\r\n\r\n  const noCharacter = useMemo(() => !database._getCharKeys().length, [database])\r\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\r\n\r\n  const buildSettingsDispatch = useCallback((action) =>\r\n    characterDispatch && characterDispatch({ buildSettings: buildSettingsReducer(buildSettings, action) })\r\n    , [characterDispatch, buildSettings])\r\n\r\n  useEffect(() => ReactGA.pageview('/build'), [])\r\n\r\n  //select a new character Key\r\n  const selectCharacter = useCallback((cKey = \"\") => {\r\n    if (characterKey === cKey) return\r\n    setcharacterKey(cKey)\r\n    setchartData(undefined)\r\n  }, [setcharacterKey, characterKey])\r\n\r\n  //register changes in artifact database\r\n  useEffect(() =>\r\n    database.followAnyArt(setArtsDirty),\r\n    [setArtsDirty, database])\r\n\r\n  const { split, setPerms, totBuildNumber } = useMemo(() => {\r\n    if (!characterKey) // Make sure we have all slotKeys\r\n      return { totBuildNumber: 0 }\r\n    const arts = database._getArts().filter(art => {\r\n      if (art.level < levelLow) return false\r\n      if (art.level > levelHigh) return false\r\n      const mainStats = mainStatKeys[art.slotKey]\r\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey)) return false\r\n\r\n      // If its equipped on the selected character, bypass the check\r\n      if (art.location === characterKey) return true\r\n\r\n      if (art.exclude && !useExcludedArts) return false\r\n      if (art.location && !useEquippedArts) return false\r\n      return true\r\n    })\r\n    const split = compactArtifacts(arts, mainStatAssumptionLevel)\r\n    const setPerms = [...artSetPerm([setFilters])]\r\n    const totBuildNumber = [...setPerms].map(perm => countBuilds(filterArts(split, perm))).reduce((a, b) => a + b, 0)\r\n    return artsDirty && { split, setPerms, totBuildNumber }\r\n  }, [characterKey, useExcludedArts, useEquippedArts, mainStatKeys, setFilters, levelLow, levelHigh, artsDirty, database, mainStatAssumptionLevel])\r\n\r\n  // Reset the Alert by setting progress to zero.\r\n  useEffect(() => {\r\n    setgenerationProgress(0)\r\n  }, [totBuildNumber])\r\n\r\n  // Provides a function to cancel the work\r\n  const cancelToken = useRef(() => { })\r\n  //terminate worker when component unmounts\r\n  useEffect(() => () => cancelToken.current(), [])\r\n  const generateBuilds = useCallback(async () => {\r\n    if (!characterKey || !optimizationTarget || !split || !setPerms) return\r\n    const teamData = await getTeamData(database, characterKey, mainStatAssumptionLevel, [])\r\n    if (!teamData) return\r\n    const workerData = uiDataForTeam(teamData.teamData, characterKey)[characterKey as CharacterKey]?.target.data![0]\r\n    if (!workerData) return\r\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\r\n    let optimizationTargetNode = objPathValue(workerData.display ?? {}, optimizationTarget) as NumNode | undefined\r\n    if (!optimizationTargetNode) return\r\n    const targetNode = optimizationTargetNode\r\n    const valueFilter: { value: NumNode, minimum: number }[] = Object.entries(statFilters).map(([key, value]) => {\r\n      if (key.endsWith(\"_\")) value = value / 100 // TODO: Conversion\r\n      return { value: input.total[key], minimum: value }\r\n    }).filter(x => x.value && x.minimum > -Infinity)\r\n\r\n    const t1 = performance.now()\r\n    setgeneratingBuilds(true)\r\n    setchartData(undefined)\r\n    setgenerationDuration(0)\r\n    setgenerationProgress(0)\r\n    setgenerationSkipped(0)\r\n\r\n    const cancelled = new Promise<void>(r => cancelToken.current = r)\r\n\r\n    let nodes = [...valueFilter.map(x => x.value), optimizationTargetNode], arts = split!\r\n    const origCount = totBuildNumber, minimum = [...valueFilter.map(x => x.minimum), -Infinity]\r\n    if (plotBase) {\r\n      nodes.push(input.total[plotBase])\r\n      minimum.push(-Infinity)\r\n    }\r\n\r\n    nodes = optimize(nodes, workerData, ({ path: [p] }) => p !== \"dyn\");\r\n    ({ nodes, arts } = pruneAll(nodes, minimum, arts, maxBuildsToShow,\r\n      new Set(setFilters.map(x => x.key as ArtifactSetKey)), {\r\n      reaffine: true, pruneArtRange: true, pruneNodeRange: true, pruneOrder: true\r\n    }))\r\n\r\n    const plotBaseNode = plotBase ? nodes.pop() : undefined\r\n    optimizationTargetNode = nodes.pop()!\r\n\r\n    let wrap = {\r\n      buildCount: 0, failedCount: 0, skippedCount: origCount,\r\n      buildValues: Array(maxBuildsToShow).fill(0).map(_ => -Infinity)\r\n    }\r\n    setPerms.forEach(filter => wrap.skippedCount -= countBuilds(filterArts(arts, filter)))\r\n\r\n    const maxWorkers = navigator.hardwareConcurrency || 4\r\n\r\n    const setPerm = splitFiltersBySet(arts, setPerms,\r\n      maxWorkers === 1\r\n        // Don't split for single worker\r\n        ? Infinity\r\n        // 8 perms / worker, up to 1M builds / perm\r\n        : Math.min(origCount / maxWorkers / 4, 1_000_000))[Symbol.iterator]()\r\n\r\n    function fetchWork(): Request | undefined {\r\n      const { done, value } = setPerm.next()\r\n      return done ? undefined : {\r\n        command: \"request\",\r\n        threshold: wrap.buildValues[maxBuildsToShow - 1], filter: value,\r\n      }\r\n    }\r\n\r\n    const filters = nodes\r\n      .map((value, i) => ({ value, min: minimum[i] }))\r\n      .filter(x => x.min > -Infinity)\r\n\r\n    const finalizedList: Promise<FinalizeResult>[] = []\r\n    for (let i = 0; i < maxWorkers; i++) {\r\n      const worker = new Worker()\r\n\r\n      const setup: Setup = {\r\n        command: \"setup\",\r\n        id: `${i}`,\r\n        arts,\r\n        optimizationTarget: optimizationTargetNode,\r\n        plotBase: plotBaseNode,\r\n        maxBuilds: maxBuildsToShow,\r\n        filters\r\n      }\r\n      worker.postMessage(setup, undefined)\r\n      let finalize: (_: FinalizeResult) => void\r\n      const finalized = new Promise<FinalizeResult>(r => finalize = r)\r\n      worker.onmessage = async ({ data }: { data: WorkerResult }) => {\r\n        switch (data.command) {\r\n          case \"interim\":\r\n            wrap.buildCount += data.buildCount\r\n            wrap.failedCount += data.failedCount\r\n            wrap.skippedCount += data.skippedCount\r\n            if (data.buildValues) {\r\n              wrap.buildValues.push(...data.buildValues)\r\n              wrap.buildValues.sort((a, b) => b - a).splice(maxBuildsToShow)\r\n            }\r\n            break\r\n          case \"request\":\r\n            const work = fetchWork()\r\n            if (work) {\r\n              worker.postMessage(work)\r\n            } else {\r\n              const finalizeCommand: Finalize = { command: \"finalize\" }\r\n              worker.postMessage(finalizeCommand)\r\n            }\r\n            break\r\n          case \"finalize\": finalize(data); break\r\n          default: console.log(\"DEBUG\", data)\r\n        }\r\n      }\r\n\r\n      cancelled.then(() => worker.terminate())\r\n      finalizedList.push(finalized)\r\n    }\r\n\r\n    const buildTimer = setInterval(() => {\r\n      setgenerationProgress(wrap.buildCount)\r\n      setgenerationSkipped(wrap.skippedCount)\r\n      setgenerationDuration(performance.now() - t1)\r\n    }, 100)\r\n    const results = await Promise.any([Promise.all(finalizedList), cancelled])\r\n    clearInterval(buildTimer)\r\n    cancelToken.current = () => { }\r\n\r\n    if (!results) {\r\n      setgenerationDuration(0)\r\n      setgenerationProgress(0)\r\n      setgenerationSkipped(0)\r\n    } else {\r\n      if (plotBase) {\r\n        const plotData = mergePlot(results.map(x => x.plotData!))\r\n        const plotBaseNode = input.total[plotBase] as NumNode\r\n        let data = Object.values(plotData)\r\n        if (KeyMap.unit(targetNode.info?.key) === \"%\")\r\n          data = data.map(({ value, plot }) => ({ value: value * 100, plot })) as Build[]\r\n        if (KeyMap.unit(plotBaseNode!.info?.key) === \"%\")\r\n          data = data.map(({ value, plot }) => ({ value, plot: (plot ?? 0) * 100 })) as Build[]\r\n        setchartData({\r\n          valueNode: targetNode,\r\n          plotNode: plotBaseNode,\r\n          data\r\n        })\r\n      }\r\n      const builds = mergeBuilds(results.map(x => x.builds), maxBuildsToShow)\r\n      buildSettingsDispatch({ builds: builds.map(build => build.artifactIds), buildDate: Date.now() })\r\n      const totalDuration = performance.now() - t1\r\n\r\n      setgenerationProgress(wrap.buildCount)\r\n      setgenerationSkipped(wrap.skippedCount)\r\n      setgenerationDuration(totalDuration)\r\n\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: totalDuration,\r\n        label: totBuildNumber.toString()\r\n      })\r\n    }\r\n    setgeneratingBuilds(false)\r\n  }, [characterKey, database, totBuildNumber, mainStatAssumptionLevel, maxBuildsToShow, optimizationTarget, plotBase, setPerms, split, buildSettingsDispatch, setFilters, statFilters])\r\n\r\n  const characterName = characterSheet?.name ?? \"Character Name\"\r\n\r\n  const closeBuildModal = useCallback(() => setmodalBuildIndex(-1), [setmodalBuildIndex])\r\n  const setPlotBase = useCallback(plotBase => {\r\n    buildSettingsDispatch({ plotBase })\r\n    setchartData(undefined)\r\n  }, [buildSettingsDispatch])\r\n  const dataContext: dataContextObj | undefined = data && characterSheet && character && teamData && {\r\n    data,\r\n    characterSheet,\r\n    character,\r\n    mainStatAssumptionLevel,\r\n    teamData,\r\n    characterDispatch\r\n  }\r\n  const selectedBuild = teamDataBuilds[modalBuildIndex]\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} sx={{ my: 1 }}>\r\n    <InfoComponent\r\n      pageKey=\"buildPage\"\r\n      modalTitle=\"Character Management Page Guide\"\r\n      text={[\"For self-infused attacks, like Noelle's Sweeping Time, enable the skill in the character talent page.\",\r\n        \"You can compare the difference between equipped artifacts and generated builds.\",\r\n        \"Rainbow builds can sometimes be \\\"optimal\\\". Good substat combinations can sometimes surpass set effects.\",\r\n        \"The more complex the formula, the longer the generation time.\",]}\r\n    ><InfoDisplay /></InfoComponent>\r\n    {characterKey && selectedBuild && <BuildModal teamData={selectedBuild} characterKey={characterKey} onClose={closeBuildModal} />}\r\n    {noCharacter && <Alert severity=\"error\" variant=\"filled\"> Opps! It looks like you haven't added a character to GO yet! You should go to the <Link component={RouterLink} to=\"/character\">Characters</Link> page and add some!</Alert>}\r\n    {noArtifact && <Alert severity=\"warning\" variant=\"filled\"> Opps! It looks like you haven't added any artifacts to GO yet! You should go to the <Link component={RouterLink} to=\"/artifact\">Artifacts</Link> page and add some!</Alert>}\r\n    {/* Build Generator Editor */}\r\n    {!dataContext && <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Typography variant=\"h6\">Build Generator</Typography>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <CardLight>\r\n          <CardContent>\r\n            <CharacterDropdownButton fullWidth value={characterKey} onChange={selectCharacter} disabled={generatingBuilds} />\r\n          </CardContent>\r\n        </CardLight>\r\n      </CardContent>\r\n    </CardDark>}\r\n    {dataContext && <DataContext.Provider value={dataContext}>\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Typography variant=\"h6\">Build Generator</Typography>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n          <Grid container spacing={1} >\r\n            {/* Left half */}\r\n            <Grid item xs={12} md={6} lg={5} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <CardLight>\r\n                <CardContent>\r\n                  <CharacterDropdownButton fullWidth value={characterKey} onChange={selectCharacter} disabled={generatingBuilds} />\r\n                </CardContent>\r\n              </CardLight>\r\n              {/* character card */}\r\n              <Box><CharacterCard characterKey={characterKey} onClick={generatingBuilds ? undefined : setCharacter} /></Box>\r\n\r\n              <BonusStatsCard />\r\n              <TeamBuffCard />\r\n              {/* Enemy Editor */}\r\n              <EnemyEditorCard />\r\n              {/*Minimum Final Stat Filter */}\r\n              <StatFilterCard statFilters={statFilters} setStatFilters={sFs => buildSettingsDispatch({ statFilters: sFs })} disabled={generatingBuilds} />\r\n              {/* Hit mode options */}\r\n              <HitModeCard disabled={generatingBuilds} />\r\n            </Grid>\r\n\r\n            {/* Right half */}\r\n            <Grid item xs={12} md={6} lg={7} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <ArtifactConditionalCard disabled={generatingBuilds} />\r\n\r\n              {/* Artifact set pickers */}\r\n              {setFilters.map((setFilter, index) => (index <= setFilters.filter(s => s.key).length) && <ArtifactSetPicker key={index} index={index} setFilters={setFilters}\r\n                disabled={generatingBuilds} onChange={(index, key, num) => buildSettingsDispatch({ type: 'setFilter', index, key, num })} />)}\r\n\r\n              {/* use equipped/excluded */}\r\n              {characterKey && <CardLight><CardContent>\r\n                <Grid container spacing={1}>\r\n                  <Grid item flexGrow={1}>\r\n                    <Button fullWidth onClick={() => buildSettingsDispatch({ useEquippedArts: !useEquippedArts })} disabled={generatingBuilds} startIcon={useEquippedArts ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n                      Use Equipped Artifacts\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid item flexGrow={1}>\r\n                    <Button fullWidth onClick={() => buildSettingsDispatch({ useExcludedArts: !useExcludedArts })} disabled={generatingBuilds} startIcon={useExcludedArts ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n                      Use Excluded Artifacts\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent></CardLight>}\r\n\r\n              { /* Level Filter */}\r\n              {characterKey && <CardLight>\r\n                <CardContent sx={{ py: 1 }}>\r\n                  Artifact Level Filter\r\n                </CardContent>\r\n                <Divider />\r\n                <CardContent>\r\n                  <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh} dark\r\n                    setLow={levelLow => buildSettingsDispatch({ levelLow })}\r\n                    setHigh={levelHigh => buildSettingsDispatch({ levelHigh })}\r\n                    setBoth={(levelLow, levelHigh) => buildSettingsDispatch({ levelLow, levelHigh })} />\r\n                </CardContent>\r\n              </CardLight>}\r\n              {/* main stat selector */}\r\n              {characterKey && <MainStatSelectionCard\r\n                mainStatAssumptionLevel={mainStatAssumptionLevel}\r\n                mainStatKeys={mainStatKeys}\r\n                onChangeMainStatKey={(slotKey, mainStatKey = undefined) => {\r\n                  if (mainStatKey === undefined)\r\n                    buildSettingsDispatch({ type: \"mainStatKeyReset\", slotKey })\r\n                  else\r\n                    buildSettingsDispatch({ type: \"mainStatKey\", slotKey, mainStatKey })\r\n                }}\r\n                onChangeAssLevel={mainStatAssumptionLevel => buildSettingsDispatch({ mainStatAssumptionLevel })}\r\n                disabled={generatingBuilds}\r\n              />}\r\n            </Grid>\r\n          </Grid>\r\n          {/* Footer */}\r\n          <Grid container spacing={1}>\r\n            <Grid item flexGrow={1} >\r\n              <ButtonGroup>\r\n                <Button\r\n                  disabled={!characterKey || generatingBuilds || !optimizationTarget || !totBuildNumber || !objPathValue(data?.getDisplay(), optimizationTarget)}\r\n                  color={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                  onClick={generateBuilds}\r\n                  startIcon={<FontAwesomeIcon icon={faCalculator} />}\r\n                >Generate</Button>\r\n                {/* <Tooltip title={<Typography></Typography>} placement=\"top\" arrow> */}\r\n                <DropdownButton disabled={generatingBuilds || !characterKey}\r\n                  title={<span><b>{maxBuildsToShow}</b> {maxBuildsToShow === 1 ? \"Build\" : \"Builds\"}</span>}>\r\n                  <MenuItem>\r\n                    <Typography variant=\"caption\" color=\"info.main\">\r\n                      Decreasing the number of generated build will decrease build calculation time for large number of builds.\r\n                    </Typography>\r\n                  </MenuItem>\r\n                  <Divider />\r\n                  {maxBuildsToShowList.map(v => <MenuItem key={v}\r\n                    onClick={() => buildSettingsDispatch({ maxBuildsToShow: v })}>{v} {v === 1 ? \"Build\" : \"Builds\"}</MenuItem>)}\r\n                </DropdownButton>\r\n                {/* </Tooltip> */}\r\n                <Button\r\n                  disabled={!generatingBuilds}\r\n                  color=\"error\"\r\n                  onClick={() => cancelToken.current()}\r\n                  startIcon={<Close />}\r\n                >Cancel</Button>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <span>Optimization Target: </span>\r\n              {<OptimizationTargetSelector\r\n                optimizationTarget={optimizationTarget}\r\n                setTarget={target => buildSettingsDispatch({ optimizationTarget: target })}\r\n                disabled={!!generatingBuilds}\r\n              />}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {!!characterKey && <Box >\r\n            <BuildAlert {...{ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }} />\r\n          </Box>}\r\n          {tcMode && <Box >\r\n            <ChartCard disabled={generatingBuilds} chartData={chartData} plotBase={plotBase} setPlotBase={setPlotBase} />\r\n          </Box>}\r\n        </CardContent>\r\n      </CardDark>\r\n      <CardDark>\r\n        <CardContent>\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" >\r\n            <Typography>\r\n              {teamDataBuilds ? <span>Showing <strong>{teamDataBuilds.length}</strong> Builds generated for {characterName}. {!!buildDate && <span>Build generated on: <strong>{(new Date(buildDate)).toLocaleString()}</strong></span>}</span>\r\n                : <span>Select a character to generate builds.</span>}\r\n            </Typography>\r\n            <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n              <ToggleButton value={false} disabled={!compareData}>\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} disabled={compareData}>\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>\r\n          </Box>\r\n        </CardContent>\r\n      </CardDark>\r\n      <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\r\n        {/* Build List */}\r\n        {teamDataBuilds?.map((teamData, index) => teamData && <DataContext.Provider key={index} value={{ ...dataContext, data: teamData[characterKey].target, teamData, oldData: data }}>\r\n          <ArtifactBuildDisplayItem index={index} onClick={() => setmodalBuildIndex(index)} compareBuild={compareData} disabled={!!generatingBuilds} />\r\n        </DataContext.Provider>\r\n        )}\r\n      </Suspense>\r\n    </DataContext.Provider>}\r\n  </Box>\r\n}\r\n\r\nfunction BuildModal({ teamData, characterKey, onClose }: { teamData: TeamData, characterKey: CharacterKey, onClose: () => void }) {\r\n  return <ModalWrapper open={!!teamData} onClose={onClose} containerProps={{ maxWidth: \"xl\" }}>\r\n    <CharacterDisplayCard\r\n      characterKey={characterKey}\r\n      newteamData={teamData}\r\n      onClose={onClose}\r\n      footer={<CloseButton large onClick={onClose} />} />\r\n  </ModalWrapper>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\n\r\nexport default function useCharacter(characterKey: CharacterKey | \"\" | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [character, updateCharacter] = useState(database._getChar(characterKey))\r\n  useEffect(() => updateCharacter(database._getChar(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, updateCharacter) : undefined,\r\n    [characterKey, updateCharacter, database])\r\n  return character\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","import { strPadLeft } from \"./Util\"\r\n\r\nexport const SECOND_MS = 1000\r\nexport const MINUTE_MS = 60 * SECOND_MS\r\nexport const HOUR_MS = 60 * MINUTE_MS\r\nexport const DAY_MS = 24 * HOUR_MS\r\n\r\nexport function msToUnits(ms: number) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms: number) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms: number) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","disabled","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","initialInfoShownState","artifactPage","buildPage","characterPage","InfoComponent","pageKey","text","modalTitle","children","useDBState","stateInfoShown","setStateInfoShown","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","container","item","variant","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","height","large","StatFilterCard","statFilters","setStatFilters","data","useContext","DataContext","statKeys","get","input","push","charEle","remainingKeys","filter","key","some","k","setFilter","sKey","spacing","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","float","placeholder","faTrashAlt","initGlobalSettings","tcMode","Worker_fn","Worker","ChartCard","chartData","plotBase","setPlotBase","showDownload","setshowDownload","showMin","setshowMin","displayData","downloadData","increasingX","y","x","plot","sort","a","b","minimumData","point","last","pop","forEach","minimum","allData","CardLight","CardContent","Grid","Typography","DropdownButton","MenuItem","Divider","Tooltip","placement","Info","Button","CheckBox","CheckBoxOutlineBlank","Download","Collapse","in","CardDark","mb","DataDisplay","Chart","plotNode","valueNode","TextArea","styled","fontFamily","resize","minHeight","readOnly","JSON","stringify","target","selectionStart","selectionEnd","plotBaseUnit","info","valueUnit","ResponsiveContainer","ComposedChart","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","unit","domain","tick","fill","type","tickFormatter","n","toFixed","YAxis","allowDecimals","ZAxis","range","Legend","Scatter","line","lineType","isAnimationActive","Line","stroke","connectNulls","strokeWidth","pruneAll","nodes","arts","numTop","keepArtifacts","forced","should","deps","pruneNodeRange","reaffine","pruneOrder","pruneArtRange","count","values","newArts","newNodes","forceRename","affineNodes","Set","topLevelAffine","visit","node","isAffine","add","operands","_op","op","has","dynKeys","forEachNodes","_","f","operation","path","accu","Error","every","nonConst","assertUnreachable","current","nextDynKey","affine","affineMap","Map","customRead","reaffineArt","stat","constantFold","dyn","objectMap","constant","fromEntries","v","result","mapFormulas","base","objectKeyMap","allSlotKeys","slot","id","set","offsets","baseValue","progress","list","newList","art","other","greaterEqual","greater","baseRange","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","Infinity","nodeRange","operandRanges","threshold","pass","fail","isFinite","newOperands","op1","op2","j","ranges","reads","_f","computeMinMax","allOperations","reduce","c","sum","NaN","minMaxes","Math","filterArts","filters","kind","ids","mergeBuilds","builds","maxNum","slice","mergePlot","plots","round","build","countBuilds","_count","ArtifactBuildDisplayItem","index","compareBuild","dataContext","character","oldData","currentlyEquipped","slotKey","statProviderContext","setToSlots","Skeleton","CardActionArea","pb","SqBadge","slotarr1","slotarr","artifactSlotIcon","StatDisplayComponent","ArtifactConditionalCard","setOpen","onOpen","artifactCondCount","conditional","allArtifactSets","fullWidth","ArtConditionalModal","characterDispatch","resetArtConds","artSetKeyList","ModalWrapper","Replay","CloseButton","setEffects","entry","document","d","lg","Box","className","rarity","component","flexDirection","justifyContent","gap","setNumKey","SetEffectDisplay","ArtifactSetPicker","setFilters","setNum","num","setsNumArr","artsAccountedOther","cur","ind","artsAccounted","ButtonGroup","setNKey","setNkey","BonusStatsCard","bonusStatsKeys","bonusStats","FieldDisplay","my","ListItem","warningBuildNumber","Monospace","BorderLinearProgress","LinearProgress","theme","borderRadius","BuildAlert","totBuildNumber","generatingBuilds","generationSkipped","generationProgress","generationDuration","characterName","maxBuildsToShow","totalBuildNumberString","toLocaleString","totalUnskipped","generationProgressString","generationSkippedString","totalUnskippedString","generationSkippedText","subtitle","timeStringMs","Alert","severity","EnemyEditorCard","expanded","setExpanded","eLvlNode","eDefRed","eDefIgn","CardHeader","action","ExpandButton","expand","ExpandMore","valueString","allElementsWithPhy","element","timeout","unmountOnExit","pt","EnemyEditor","bsProps","HitModeCard","mt","artifactsSlotsToSelectMainStats","MainStatSelectionCard","mainStatAssumptionLevel","mainStatKeys","onChangeMainStatKey","onChangeAssLevel","BootstrapTooltip","AssumeFullLevelToggle","setmainStatAssumptionLevel","numSel","Artifact","mainStatKey","includes","StatIcon","levels","WhiteButton","backgroundColor","OptimizationTargetSelector","optimizationTarget","setTarget","setTargetHandler","sections","getDisplaySections","TargetDisplayText","Masonry","columns","sm","md","Nodes","SelectorSection","displayNs","sectionKey","header","getDisplayHeader","isEmpty","avatar","ImgIcon","m","titleTypographyProps","MenuList","TargetSelectorMenuItem","NoTarget","displayHeader","objPathValue","getDisplay","style","overflow","textOverflow","TeamBuffCard","teamBuffs","getTeamBuff","total","premod","enemy","toString","artSetPerm","splitFiltersBySet","splitFilterByIds","dynamic","setReadNodeKeys","deepClone","dynamicData","allMainStatKeys","allSubstats","artSet","check","request","remainingSlots","newRequest","newFilters","noFilter","_arts","limit","candidates","numChunks","ceil","boundedNumChunks","chunk","InfoDisplay","React","CharacterDisplayCard","lazy","buildSettingsReducer","state","initialBuildDisplayState","characterKey","BuildDisplay","propCharacterKey","location","database","DatabaseContext","setBuildSettings","setcharacterKey","_getChar","modalBuildIndex","setmodalBuildIndex","setgeneratingBuilds","setgenerationProgress","setgenerationDuration","setgenerationSkipped","setchartData","useForceUpdate","artsDirty","setArtsDirty","setCharacter","useCharSelectionCallback","useCharacterReducer","updateCharacter","followChar","useCharacter","buildSettings","initialBuildSettings","useExcludedArts","useEquippedArts","buildDate","teamData","useTeamData","characterSheet","teamDataBuilds","Promise","all","getTeamData","_getArt","teamBundle","calcData","uiDataForTeam","obj","ck","rest","then","arr","compareData","noCharacter","_getCharKeys","noArtifact","_getArts","buildSettingsDispatch","ReactGA","selectCharacter","cKey","followAnyArt","split","flower","plume","goblet","circlet","sands","mainStatVal","level","endsWith","substats","substat","accurateValue","compactArtifacts","mainStats","exclude","setPerms","perm","cancelToken","useRef","generateBuilds","fetchWork","setPerm","next","done","command","buildValues","workerData","assign","mergeData","optimizationTargetNode","targetNode","valueFilter","t1","performance","now","cancelled","r","origCount","optimize","plotBaseNode","buildCount","failedCount","skippedCount","maxWorkers","navigator","hardwareConcurrency","Symbol","iterator","finalizedList","worker","setup","maxBuilds","postMessage","finalize","finalized","onmessage","splice","work","finalizeCommand","console","log","terminate","buildTimer","setInterval","any","results","clearInterval","plotData","artifactIds","Date","totalDuration","category","variable","label","closeBuildModal","selectedBuild","BuildModal","Link","RouterLink","to","CharacterDropdownButton","CharacterCard","sFs","faCalculator","maxBuildsToShowList","Close","SolidToggleButtonGroup","exclusive","ToggleButton","newteamData","footer","init","_getState","setState","followState","updateState","SECOND_MS","MINUTE_MS","HOUR_MS","DAY_MS","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft"],"sourceRoot":""}