{"version":3,"file":"static/js/891.13981173.chunk.js","mappings":"2cAQMA,GAAoBC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWC,EAAAA,IACzCC,GAAoBC,EAAAA,EAAAA,IAAK,GAAK,GAAGC,EAAAA,EAAAA,IAAKJ,EAAAA,GAAAA,MAAAA,OAAoB,OAC1DK,GAAiBC,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAKI,EAAAA,EAAAA,IAAIC,EAAAA,GAAiCN,GAAoBJ,GAAoB,CAAEW,IAAK,cAAeC,QAAS,QAE1IC,GAAcZ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWY,EAAAA,IACnCC,GAAcV,EAAAA,EAAAA,IAAK,IAAIC,EAAAA,EAAAA,IAAKJ,EAAAA,GAAAA,MAAAA,OAAoB,MAChDc,GAAK,mBACNC,EAAAA,EAAAA,GAAa,CAAC,aAAc,iBAAkB,eAAgB,cAAuB,SAAAC,GACtF,MAAmCC,EAAAA,GAAwBD,GAAnDE,EAAR,EAAQA,MAAkBC,GAA1B,SAAeC,SAAf,MACA,OAAOd,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KACbG,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,IAAKe,EAAOP,GAAc,CAAEU,QAZ1B,QAaVd,EAAAA,EAAAA,IAAIC,EAAAA,GAAMK,EAAab,EAAAA,GAAAA,MAAA,UAAegB,EAAf,WACvBhB,EAAAA,GAAAA,MAAA,UAAemB,EAAf,eACA,CAAEV,IAAI,GAAD,OAAKO,EAAL,QAAqBN,QAASM,QAP9B,IASTM,OAAOP,EAAAA,EAAAA,GAAaE,EAAAA,GAAAA,MAAAA,UAAwC,SAAAE,GAAG,OAAIb,EAAAA,EAAAA,KACjEH,EAAAA,EAAAA,KACEG,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,IAAKc,EAAAA,GAAAA,MAAAA,MAAqCN,GAAc,CAAEU,QAnBxD,QAoBVd,EAAAA,EAAAA,IAAIC,EAAAA,GAAMK,EAAab,EAAAA,GAAAA,MAAAA,YACvBA,EAAAA,GAAAA,MAAA,UAAemB,EAAf,eACF,CAAEV,IAAI,GAAD,OAAKU,EAAL,cAAsBT,QAASS,SAE3BI,EAAY,CACvBC,MAAO,CACLC,aAAcX,EAAMQ,MAAMI,QAC1BC,UAAWb,EAAMQ,MAAMM,KACvBC,UAAWf,EAAMQ,MAAMQ,KACvBC,WAAYjB,EAAMQ,MAAMU,MACxBC,UAAWnB,EAAMmB,WAEnBC,KAAI,gBACFC,YAAa9B,GACV+B,OAAOC,YAAYC,EAAAA,GAAAA,KAAkB,SAAAC,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,gBAC7CjC,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAKqC,EAAAA,EAAAA,IAAQ,KAAMnC,GAAiB,CAAEI,IAAI,GAAD,OAAK8B,EAAL,gBAAsB7B,QAAS6B,UAH/E,IAIDN,UAAWnB,EAAMmB,YAEnBP,QAAS,CACPe,WAAY3B,EAAM2B,WAClBC,eAAgB5B,EAAM4B,eACtBC,aAAc7B,EAAM6B,aACpBV,UAAWnB,EAAMmB,WAEnBD,MAAO,CACLU,eAAgB5B,EAAM4B,eACtBT,UAAWnB,EAAMmB,WAEnBL,KAAM,CACJa,WAAY3B,EAAM2B,WAClBR,UAAWnB,EAAMmB,WAEnBH,KAAM,CACJa,aAAc7B,EAAM6B,aACpBV,UAAWnB,EAAMmB,Y,60IChDfW,GAAaC,EAAAA,EAAAA,IAAUC,GAAa,SAAAC,GAAK,OAAK,GAAL,eAAWX,OAAOY,OAAOD,QAElEE,GAAclC,EAAAA,EAAAA,GAAa,CAAC,KAAM,MAAO,MAAO,SAAU,YAAa,YAAa,WAAY,UAAU,SAAAN,GAAG,OAAIT,EAAAA,GAAAA,MAAYS,MACnIwC,EAAYC,UAAYlD,EAAAA,GAAAA,MAAAA,eAExB,IAAMmD,GAAiBC,EAAAA,EAAAA,KAErBC,EAAAA,EAAAA,IAASrD,EAAAA,GAAAA,WAAkB,WAAYA,EAAAA,GAAAA,UACvCqD,EAAAA,EAAAA,IAASrD,EAAAA,GAAAA,IAAAA,KAAgB,QAASA,EAAAA,GAAAA,UAClCqD,EAAAA,EAAAA,IAASrD,EAAAA,GAAAA,IAAAA,KAAgB,QAASA,EAAAA,GAAAA,SAClCA,EAAAA,GAAAA,SACAA,EAAAA,GAAAA,KAAAA,SACA,YAGF,SAASsD,EAAcC,GACrB,OAAQA,GACN,IAAK,SAAU,IAAK,UAAW,IAAK,WAAY,MAAO,OACvD,IAAK,QAAS,MAAO,QACrB,IAAK,QAAS,MAAO,SAKlB,SAASC,EAAcC,EAAeF,GAA4G,IAAD,EAAhCG,EAAgC,uDAAb,GACzI,OAAOC,EAAAA,EAAAA,IAAK3D,EAAAA,GAAAA,IAAAA,KAAe4D,EAAAA,EAAAA,IAAU,CAAC,CACpCC,IAAK,CAAEJ,KAAAA,EAAMF,MAAMO,EAAAA,EAAAA,IAASP,GAAOpC,IAAe,OAAVuC,QAAU,IAAVA,GAAA,UAAAA,EAAYG,WAAZ,SAAiB1C,SAAM4C,EAAYZ,IAC1EO,KAGE,SAASM,EAAiBP,EAAeC,GAC9C,IAAMO,GAAa9D,EAAAA,EAAAA,IAAKsD,GAAMlD,EAAAA,EAAAA,IAAIC,EAAAA,GAAMR,EAAAA,GAAAA,MAAAA,UACxC,OAAO0D,GAAaC,EAAAA,EAAAA,IAAKM,EAAYP,GAAcO,EAG9C,SAASC,EAAeT,EAAeC,GAC5C,IAAMS,GAAWhE,EAAAA,EAAAA,IAAKsD,GAAMlD,EAAAA,EAAAA,IAAIC,EAAAA,GAAMR,EAAAA,GAAAA,MAAAA,QACtC,OAAO0D,GAAaC,EAAAA,EAAAA,IAAKQ,EAAUT,GAAcS,EAG5C,SAASC,EAAQX,EAAgCY,EAAyBd,GAA8F,IAAjCG,EAAgC,uDAAb,GACzJY,EAAahB,EAAcC,GACjC,OAAOC,GAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,MAAA,UAAesE,EAAf,UAAmCD,EAAe,CAAE5D,IAAK,MAAQT,EAAAA,GAAAA,MAAYyD,IAAQF,EAAMG,GAG1H,SAASO,EAAWR,EAAgCjB,EAA2B+B,EAAwBb,GAC5G,OAAOM,GAAiBzD,EAAAA,EAAAA,KAAIJ,EAAAA,EAAAA,IAAKqC,EAASxC,EAAAA,GAAAA,MAAYyD,IAAQc,GAAOb,GAOhE,SAASc,EAAiBf,EAAgCgB,EAA0BF,EAAgBhB,EAA6DG,GACtK,IAAMY,EAAahB,EAAcC,GAC3BmB,EAAc1E,EAAAA,GAAAA,MAAA,UAAesE,EAAf,UACpB,OAAON,GAAiBzD,EAAAA,EAAAA,KACtBJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAU2E,EAAaD,EAAgB,CAAEhE,IAAK,MAAQT,EAAAA,GAAAA,MAAYyD,KACvE1D,EAAAA,EAAAA,IAAU2E,EAAaH,IACtBb,GAEE,SAASiB,EAAcC,EAAwDX,GACpF,OAAO3D,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,KAAKqC,EAAAA,EAAAA,IAAoB,QAAZoC,EAAoB,IAAM,KAAMX,GAAa,CAAEvD,QAASkE,IAG/E,SAASC,EAAepB,EAAgCgB,EAA0BF,EAAgBhB,EAA6DG,GACpK,IAAMY,EAAahB,EAAcC,GAC3BmB,EAAc1E,EAAAA,GAAAA,MAAA,UAAesE,EAAf,UACpB,OAAOJ,GAAe3D,EAAAA,EAAAA,KACpBJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAU2E,EAAaD,EAAgB,CAAEhE,IAAK,MAAQT,EAAAA,GAAAA,MAAYyD,KACvE1D,EAAAA,EAAAA,IAAU2E,EAAaH,IACtBb,GAEE,SAASoB,EACdrE,EACAmE,EACAG,EACAC,EAMAC,GAEO,IADPvB,EACM,uDADa,GAEnB,SAASwB,EAAMzB,EAAc0B,GAC3B,OAAOhF,EAAAA,EAAAA,IAAKsD,GAAM1D,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAW4C,EAAWuC,KAEpDF,EAAQG,OAAR,UAAqBnC,GACrB,IAoBIoC,EApBE1B,EAAa,CACjB2B,SAASxB,EAAAA,EAAAA,IAASrD,GAClBgD,KAAM,GACN8B,YAAYzB,EAAAA,EAAAA,IAASkB,EAAIQ,eACzBC,OAAQ,GACRR,QAAAA,GAEEL,IACFjB,EAAK+B,SAAU5B,EAAAA,EAAAA,IAASc,GACxBjB,EAAKgC,SAAW,CAAEC,OAAM,UAAIhB,GAAUd,EAAAA,EAAAA,IAAS,KAC/CH,EAAKsB,QAASG,MAAd,UAAuBR,EAAvB,UAAyC5E,EAAAA,GAAAA,MAAA,UAAe4E,EAAf,UACzCjB,EAAKsB,QAASjE,SAAWO,EAAUqD,IAEjCG,IACFc,EAAAA,EAAAA,IAAkBlC,EAAM,CAAC,WAAY,QAASoB,IAASjB,EAAAA,EAAAA,IAAS,IACxC,aAAtBkB,EAAIQ,gBACD7B,EAAKsB,QAASG,QAAOzB,EAAKsB,QAASG,MAAQ,IAChDzB,EAAKsB,QAASG,MAAOU,cAAgB9F,EAAAA,GAAAA,MAAAA,eAIvC,IA1BM,iBA0BD,IAAM+F,EAAI,KACPC,EAAkB,GAOxB,GANIhB,EAAIiB,OAAOF,IACbC,EAAKE,KAAKhB,EAAMF,EAAIvB,KAAKsC,GAAOf,EAAIiB,OAAOF,KACjCf,EAAImB,WAAWC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAMP,OAE3CC,EAAKE,MAAKnG,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,IAAWgF,EAAImB,WAAWI,KAAI,SAAAF,GAAC,uBAAIA,EAAEC,MAAMP,UAAZ,QAAqBS,UAErER,EAAKS,OAAQ,iBAElB,IAAMC,GAASpG,EAAAA,EAAAA,IAAwB,IAAhB0F,EAAKS,OAAeT,EAAK,GAAKzF,EAAAA,GAAAA,WAAA,EAAOyF,GAAO,CAAEvF,IAAKsF,EAAMY,OAAQ,OAAQtF,SAAS,IAEzG,GADI0E,EAAKa,SAAS,WAAUF,EAAOG,KAAMnG,QAAUqF,EAAKe,MAAM,GAAI,IACrD,QAATf,GAA2B,QAATA,GAA2B,OAATA,EACtCpC,EAAKF,KAAMsC,GAAQW,MAChB,CACH,GAAIrB,EAAc,MAAM,IAAI0B,MAAM,2BAClC1B,GAAe,EACf1B,EAAKqD,QAAUN,EACf/C,EAAK8B,OAAQM,GAAQ/F,EAAAA,GAAAA,UAlBzB,wBAAuBiH,EAAAA,GAAvB,CAAwC,QAAxC,eAAyD,IAsBzD,OAAOrD,EAAAA,EAAAA,IAAU,CAACD,GAAMuD,EAAAA,EAAAA,IAAaxD,O,uMC5I1ByD,EAAK,SAACC,EAAgBpE,GAAjB,OAAqC,SAAC,IAAD,CAAWqE,GAAG,QAAQC,MAAOF,EAAQpE,OAAQA,KACvFuE,EAAM,SAACH,GAAD,OAAoB,SAAC,IAAD,CAAWC,GAAG,YAAYC,MAAOF,KAE3DI,EAAe,SAACC,GAAD,OAAoBC,EAAAA,EAAAA,IAAiB,CAAC,eAAF,eAAoBD,MAC7E,SAASE,EAAKlH,EAAgDmH,GACnE,IAAMH,EAAO,CAAChH,EAAKmH,GAEnB,MAAO,CAACH,EADKD,EAAaC,IAQrB,SAAS3G,EAAM+G,EAAyCpH,GAC7D,MAAO,CACL,SAAC2G,GAAD,OAAoB,SAAC,IAAD,CAAWC,GAAE,UAAKQ,EAAL,YAAgBpH,EAAhB,QAA2B6G,MAAOF,KACnE,SAACA,EAAgBpE,GAAjB,OAAqC,SAAC,IAAD,CAAWqE,GAAE,UAAKQ,EAAL,YAAgBpH,GAAO6G,MAAOF,EAAQpE,OAAQA,Q,gonBCb9F8E,EAAe1F,OAAOC,YAAYD,OAAO2F,QAAQC,GAAezB,KAAI,+BAAE9F,EAAF,KAAOsC,EAAP,WAAkB,CAACtC,EAAD,CAAO,GAAP,eAAa2B,OAAOY,OAAOD,UAEhH,SAASkF,EACdxH,EACAuE,GAGO,IAFPtB,EAEM,uDAFa,GACnBwE,EACM,uDADsB,GAEtBxB,EAAe,CACnBjD,KAAM,GACNgC,OAAQ,GACR0C,MAAO,GACPC,OAAQ,CACN3H,KAAKqD,EAAAA,EAAAA,IAASrD,GAAM4H,MAAMvE,EAAAA,EAAAA,IAASkB,EAAIO,aAEzCN,SAAQ,2BACKxE,GAAQyH,IAIfI,EAAsBtD,EAAtBsD,SAAUC,EAAYvD,EAAZuD,QACZC,EAAU,CAAC9B,GAEjB,GAAsB,QAAlB4B,EAASD,MAAoC,QAAlBC,EAASD,MAAoC,OAAlBC,EAASD,KAAe,MAAM,IAAItB,MAAM,gCAClG,IAAM0B,GAAenI,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAAIJ,EAAAA,EAAAA,IAAKmI,EAAS7E,MAAM1D,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkB8H,EAAaQ,EAASpD,UAAUnF,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkBgF,EAAI0D,UAAUnC,KAAI,SAAAF,GAAC,uBAAIA,EAAEsC,SAASL,EAASD,aAAxB,QAAiC,OAAM,CAAE5H,IAAK6H,EAASD,OAGvN,GAFAG,EAAQtC,KAAK,CAAEzC,MAAK,UAAI6E,EAASD,KAAOrI,EAAAA,GAAAA,OAAAA,MAAqBoI,OAAQ,CAAEQ,KAAMH,KAEzEF,EAAS,CACX,GAAqB,QAAjBA,EAAQF,MAAmC,QAAjBE,EAAQF,MAAmC,OAAjBE,EAAQF,KAAe,MAAM,IAAItB,MAAM,2CAC/F,IAAM8B,GAAcvI,EAAAA,EAAAA,KAAQH,EAAAA,EAAAA,IAAKoI,EAAQ9E,MAAM1D,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkB8H,EAAaS,EAAQrD,SAAU,CAAEzE,IAAK8H,EAAQF,OACzHG,EAAQtC,KAAK,CACXT,QAAO,UAAI8C,EAAQF,KAAOrI,EAAAA,GAAAA,OAAAA,KAC1BoI,OAAQ,CAAEU,IAAKD,KAGnB,OAAOjF,EAAAA,EAAAA,IAAU,GAAD,OAAK4E,EAAL,EAActB,EAAAA,EAAAA,IAAaxD,EAAYjD,M,mcChCnDA,EAAiB,YACjBsI,EAAWC,EACjB,GAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,GAAlC,eAAOwI,EAAP,KAAWC,EAAX,KAEA,GAAuCvB,EAAAA,EAAAA,IAAKlH,EAAK,uBAAjD,eAAO0I,EAAP,KAAwBC,EAAxB,KACMC,GAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAI/C,KAAI,SAAAgD,GAAC,OAAQ,GAAJA,KACpCC,EAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,EAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,GAAaC,EAAAA,EAAAA,IAAOP,EAAahH,OAAOC,YAAYgH,EAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,GAAGK,EAAAA,EAAAA,KAAIzJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwJ,EAAO,CAAE/I,IAAK,MAAQ8I,IAAIxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0ByJ,EAAK,CAAEhJ,IAAK,YAAYoJ,EAAAA,IAChNlG,EAAOsE,EAAsBxH,EAAKsI,EAAU,CAChDtD,OAAQ,CACNiE,WAAAA,KAIEI,EAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,EACP3B,KAAM0B,EACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,EAAIc,EAAMC,GACpCK,KAAMnB,EAAI,SACVoB,OAAQlI,OAAOC,YAAYgH,EAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,cAKzB,MAAmBgB,EAAAA,GAAYjK,EAAKqJ,EAAOf,EAAUpF,G,wbC/B/ClD,EAAiB,oBACjBsI,EAAWC,EACjB,GAAalI,EAAAA,EAAAA,IAAM,SAAUL,GAA7B,eAAOwI,EAAP,KAEA,GAAuCtB,EAAAA,EAAAA,IAAKlH,EAAK,qBAAjD,eAAO0I,EAAP,KAAwBC,EAAxB,KACMuB,GAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,GAAOzK,EAAAA,EAAAA,KAAKwJ,EAAAA,EAAAA,IAAOP,GAAarI,EAAAA,EAAAA,GAAa4J,GAAmB,SAAApB,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAK,IACvFxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC2D,EAAOsE,EAAsBxH,EAAKsI,EAAU,CAChDtD,OAAQ,CACNmF,KAAMA,KAGJd,EAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,EACP3B,KAAM0B,EACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,EAAIc,EAAMC,GAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,oBACTmD,OACElI,OAAOC,YAAYsI,EAAkBpE,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,GACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,gBAMlB,MAAmBkK,EAAAA,GAAYjK,EAAKqJ,EAAOf,EAAUpF,G,ubCvC/ClD,GAAiB,yBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,wBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAGlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,EACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ocChC/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMoC,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADzB,CAAC,GAAK,IAAM,GAAK,KAAM,KACqC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACxH6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjBH,GAAOsE,EAAsBxH,GAAKsI,IAClCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAIhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,icCvB/ClD,GAAiB,qBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCN/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,aAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMmC,IAAeN,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFvC,CAAC,GAAK,IAAM,GAAK,IAAM,MAGlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN8F,aAAAA,MAIEzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GAGNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMc,IACL,CACDR,KAAM7B,GAAI,sBAOtB,OAAmBwB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bCtC/ClD,GAAiB,wBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMuC,IAAazL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADP,CAAC,IAAM,KAAO,IAAM,KAAO,MAG3C2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+F,WAAAA,MAGE1B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMe,QAGrB,OAAmBd,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sbCnB/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,IAAM,IAAM,IAAM,GAAK,KACjCC,GAAU,CAAC,IAAM,IAAM,IAAM,IAAM,KACnChB,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B2L,GAAQ,CAAElL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC7H3G,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B4L,GAAS,CAAEnL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC5HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACA1H,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,YACnDkD,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,SAAU,CAAE2D,MAAOvB,IAC5BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMvH,eAKzC,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC/B/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMS,IAAa3J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFP,CAAC,IAAM,IAAM,IAAM,IAAM,MAG/C,IAAuC2H,EAAAA,EAAAA,IAAKlH,GAAK,kBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMyC,IAAOZ,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5F,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHnD,CAAC,EAAG,KAAM,IAAK,KAAM,GAGiE,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CACnJ6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,gBAGjBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNiE,WAAAA,MAGEI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTO,OAAQ,CAAC,CAAEC,KAAMf,KACjBQ,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,eACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,sBAOvC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,yRC1C/ClD,GAAiB,cACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCL/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGM4C,IAAOrI,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAD1B,CAAC,IAAK,EAAG,IAAK,IAAK,KAC0C,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC1H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,IAClCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,mBAG1C,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCnB/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,sBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ofChC/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAKM6C,IAAO/L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHP,CAAC,IAAM,IAAM,IAAM,IAAM,MAInC+L,IAAgB5L,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHd,CAAC,GAAK,GAAK,GAAK,GAAK,IAGmC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KACxFgM,IAAiB7L,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHd,CAAC,GAAK,GAAK,GAAK,GAAK,IAGoC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAE1F2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNqG,KAAAA,GACAC,cAAAA,GACAC,eAAAA,KAED,CACDD,cAAAA,GACAC,eAAAA,KAEIlC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMqB,IACL,CACDrB,KAAMsB,IACL,CACDtB,KAAMuB,QAIZ,OAAmBtB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbClC/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMO,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChC/I,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiM,GAAO,CAAExL,IAAK,MAAQ8I,MAAKM,EAAAA,IAE1HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNvC,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNpB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMvH,eAKzB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,icChC/ClD,GAAiB,wBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM8C,IAASjB,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5G,EAAAA,EAAAA,IAAQ,IAE1CmB,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNyG,OAAAA,MAIEpC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMyB,WAOlB,OAAmBxB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bC9B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGMiD,GAAY,CAAC,EAAG,IAAK,IAAK,IAAK,GAErC,IAAuCxE,EAAAA,EAAAA,IAAKlH,GAAK,gBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWjL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJT,CAAC,IAAM,IAAM,IAAM,IAAM,IAIqB,CAAES,IAAK,MACjE2L,IAAgBzC,EAAAA,EAAAA,IAAOP,IAAD,WACvBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAK6K,GAAUzB,OAChDM,EAAAA,IAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAUoB,MAIRtC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAO,WACFvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACjCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM2B,IACL,CACDrB,KAAM7B,GAAI,eACVnG,MAAO,SAAAY,GAAI,OAAIwI,GAAUxI,EAAK0I,IAAIrM,EAAAA,GAAAA,OAAAA,aAA0B+C,OAASwG,GACrE/I,KAAM,eAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,icC5C/ClD,GAAiB,qBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAmCtB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMY,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,IACpC1B,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,MAAQ8I,MAAKM,EAAAA,IAExHlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,MAGEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNpB,MAAMlD,EAAAA,EAAAA,IAAG,yBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEG,MAAMxD,EAAAA,EAAAA,IAAI,YAAaxE,MAAO,EAAGvC,KAAM,gBAK1E,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kfC9B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIM+B,IAAWjL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,GAAK,IAAM,IAAM,MAGjCqL,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFzB,CAAC,GAAK,EAAG,IAAK,IAAK,KAEyC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACxH6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMO,IACL,CACDP,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAIhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ocC5B/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMsD,IAAS/I,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFzB,CAAC,GAAK,IAAM,IAAK,KAAM,KAEwC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC9H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjB0I,IAAchJ,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJ7B,CAAC,EAAG,IAAK,IAAK,IAAK,KAIiD,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACpI6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,IAClCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQiM,GAAQ,CAAE9L,IAAI,UAAD,OAAYA,GAAZ,cAC1B,CACDgK,MAAMnK,EAAAA,EAAAA,IAAQkM,GAAa,CAAE/L,IAAI,UAAD,OAAYA,GAAZ,2BAItC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wfC3B/ClD,GAAiB,oBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAKA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,oBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAO7K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJP,CAAC,IAAM,GAAM,IAAM,IAAM,KAIiB,CAAES,IAAK,MAC3DgM,IAAWxB,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJhC,CAAC,GAAM,IAAM,GAAM,IAAM,IAI8C,CAAES,IAAK,UAC5FiM,IAAUzB,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJhC,CAAC,IAAM,IAAM,IAAM,IAAM,OAMtC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,IAEFjF,SAAU,CACRF,OAAQ,CACNmF,KAAM6B,GACNC,QAAAA,OAIA5C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMG,KACjBV,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNxD,UAAU,EACVwE,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,YACpDgC,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,QACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMgC,IACL,CACDhC,KAAMiC,IACL,CACD3B,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qbCnD/ClD,GAAiB,UACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,sBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMuD,IAAS3I,EAAAA,GAAAA,KAAiB7D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAH7B,CAAC,GAAK,IAAM,IAAM,IAAM,KAG0C,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KACnG,IAA6C2H,EAAAA,EAAAA,IAAKlH,GAAK,cAAvD,iBAAOmM,GAAP,MAA2BC,GAA3B,MACM7B,IAAWjL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJT,CAAC,IAAM,IAAM,IAAM,IAAM,KAIqB,CAAES,IAAK,MAEjEkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,KAED,CACD2B,OAAAA,KAEI7C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,WACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPO,KAAM7B,GAAI,mBACT,CACDuB,MAAMnK,EAAAA,EAAAA,IAAQqM,GAAQ,CAAElM,IAAI,6BAC3B,CACDsK,MAAMxD,EAAAA,EAAAA,IAAI,MACVxE,MAAO,GACPvC,KAAM,UAKb,CACD0J,YAAa,CACXnH,MAAO8J,GACPpF,KAAMmF,GACNzC,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,qBACTmD,OAAQ,CACNwC,UAAW,CACTtC,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,moBCzD/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM2D,IAAUhN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,GAAK,IAAM,GAAK,IAAM,KAIzC,IAA6C2H,EAAAA,EAAAA,IAAKlH,GAAK,cAAvD,iBAAOmM,GAAP,MAA2BC,GAA3B,MACMlB,IAAS5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJV,CAAC,IAAM,IAAM,IAAM,IAAM,MAKlCgN,IAAY7M,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAG0K,EAAAA,EAAAA,IAAM4B,GAAgB,YAAa,KAC1ClD,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MACtD,CAACA,GAAGpJ,EAAAA,EAAAA,IAAKwL,GAAQpC,QAAOM,EAAAA,KAGtBlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsH,QAAAA,GACAnC,KAAMoC,MAGJlD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMsC,KAER7C,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,QACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMuC,IACL,CACDjC,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,cAKb,CACD0J,YAAa,CACXnH,MAAO8J,GACPpF,KAAMmF,GACNzC,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,WACpDmB,MAAMlD,EAAAA,EAAAA,IAAG,qBACTmD,OAAQ,CACNwC,UAAW,CACTtC,OAAQ,CAAC,CACPO,KAAM7B,GAAI,aACVnG,MAAO,IACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0RCtE/CoF,GAAWC,GACXvI,GAAiB,mBACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ybCL/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAmCtB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMY,GAAW,CAAC,IAAM,KAAO,IAAM,KAAO,KACtC1B,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,MAAQ8I,MAAKM,EAAAA,IAC/HiC,IAAOnC,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,MAAQ8I,MAAKM,EAAAA,IAExHlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACAkB,KAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNpB,MAAMlD,EAAAA,EAAAA,IAAG,yBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMqB,IACL,CACDf,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,gBAMhB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCxC/ClD,GAAiB,sBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGA,IAA6BtB,EAAAA,EAAAA,IAAKlH,GAAK,eAAvC,iBAAOwM,GAAP,MAAiBC,GAAjB,MACMC,IAAOlC,EAAAA,EAAAA,IAAMiC,GAAU,MAAMhJ,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFjD,CAAC,IAAM,GAAK,IAAM,IAAM,KAE4D,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,MAEtG2D,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAAEoJ,KAAAA,KAChErD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOmK,GACPzF,KAAMwF,GACN5C,MAAMlD,EAAAA,EAAAA,IAAG,oBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAYzC,EAAAA,EAAAA,IAAI,YACpD+C,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,oBAOrE,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,6eC7B/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,kBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAO7K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHP,CAAC,GAAK,IAAM,GAAK,IAAM,KAIjCyM,IAAWxB,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHhC,CAAC,GAAK,GAAK,GAAK,GAAK,IAGkD,CAAES,IAAK,UAE5FkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAMA,IAERjF,SAAU,CACRF,OAAQ,CACNmF,KAAM6B,OAIN3C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTO,OAAQ,CAAC,CAAEC,KAAMG,KACjBV,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNxD,UAAU,EACVwE,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMgC,IACL,CACD1B,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,IC7B/CyJ,GAAmD,CACvDC,UAAAA,EACAC,kBAAAA,EACAC,uBAAAA,GACAC,WAAAA,GACAC,mBAAAA,GACAC,cAAAA,GACAC,sBAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,qBAAAA,GACAC,gBAAAA,GACAC,sBAAAA,GACAC,aAAAA,GACAC,mBAAAA,GACAC,aAAAA,GACAC,qBAAAA,GACAC,kBAAAA,GACAC,QAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,WAAAA,GACAC,oBAAAA,GACAC,gBAAAA,IAEF,M,qbChDMrO,GAAiB,kBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ifCL/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAA6BvB,EAAAA,EAAAA,IAAKlH,GAAK,mBAAvC,iBAAOwM,GAAP,MAAiBC,GAAjB,MACMtC,IAAO7K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+I,GAASgG,SAASxI,KAAI,SAAAF,GAAC,uBAAIA,EAAEuE,YAAN,QAAcpE,QAChF2G,IAAOlC,EAAAA,EAAAA,IAAMiC,GAAU,MAAM/M,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHlC,CAAC,EAAG,KAAM,IAAK,KAAM,KAGgD,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,MAC9FqL,IAAMJ,EAAAA,EAAAA,IAAMiC,GAAU,MAAM1J,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL9C,CAAC,EAAG,IAAK,IAAK,IAAK,KAK+D,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAChJ6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,gBAGVH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,KAED,CACDuC,KAAAA,GAAM9B,IAAAA,KAEFvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMG,KAERV,YAAa,CACXnH,MAAOmK,GACPzF,KAAMwF,GACN5C,MAAMlD,EAAAA,EAAAA,IAAG,WACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,SACpDoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,aACxD,CACD+J,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,eACzB,CACDsK,MAAMxD,EAAAA,EAAAA,IAAI,MACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ybCjD/ClD,GAAiB,sBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAOzK,EAAAA,EAAAA,KAAKwJ,EAAAA,EAAAA,IAAOP,IAAarI,EAAAA,EAAAA,GAAa4J,IAAmB,SAAApB,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAK,IACvFxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAMA,MAGJd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,oBACTmD,OACElI,OAAOC,YAAYsI,GAAkBpE,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,gBAMlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCvC/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4F,IAAe/D,EAAAA,EAAAA,IAAM,KAAM7B,IAAajJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFxC,CAAC,GAAK,GAAK,GAAK,GAAK,IAE2D,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,MAE9G2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuJ,aAAAA,KAED,CACDA,aAAAA,KAEIlF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,QACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMuE,WAOlB,OAAmBtE,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qbClC/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qbCjC/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,cAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFjC,CAAC,GAAK,IAAM,GAAK,IAAM,IAE4C,CAAES,IAAK,OAEnFkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,MAGEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAM5D,EAAAA,EAAAA,IAAG,YACTpE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sRCxC/CoF,GAAWC,GACXvI,GAAiB,YACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,6bCT/ClD,GAAiB,gBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCN/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMuC,IAAazL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,IAAM,GAAK,IAAM,IAAM,KAEwB,CAAES,IAAK,MACtEwO,IAAkBlP,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,KAAO,IAAM,KAAO,KAE0B,CAAES,IAAK,MAErEkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACN+F,WAAAA,GACAyD,gBAAAA,MAGEnF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMwE,QAIZ,OAAmBvE,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qbC1B/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMiG,GAAS,CAAC,GAAI,GAAI,GAAI,GAAI,IAC1BrD,IAAOrI,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF1B,CAAC,IAAK,IAAK,IAAK,IAAK,GAEwC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC1H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAC3D8H,KAAAA,KAEI/B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CACN,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,eAC7B,CACEsK,MAAMxD,EAAAA,EAAAA,IAAI,MACVxE,MAAO,SAACY,GAAD,OAAUuL,GAAOvL,EAAK0I,IAAIrM,EAAAA,GAAAA,OAAAA,aAA0B+C,QAC3DvC,KAAM,SAKd,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,6eC7B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,sBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAGMwB,IAAOK,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADhC,CAAC,GAAK,IAAM,GAAK,IAAM,MAEjCmP,IAAclE,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHvC,CAAC,IAAM,GAAM,IAAM,IAAM,OAInCuL,IAAY,UAAQ4D,IACpBC,IAAa,UAAQD,IACrBtD,IAAO9L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+I,GAASgG,SAASxI,KAAI,SAAAF,GAAC,uBAAIA,EAAEwF,YAAN,QAAcrF,QAEhF7C,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAUa,IAEZlG,SAAU,CACRF,OAAQ,CACNmF,KAAAA,GACAuE,YAAAA,GACA5D,aAAAA,GACA6D,cAAAA,OAIAtF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMoB,KACjB3B,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNxD,UAAU,EACVwE,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,YACpDgC,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,kBACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAM0E,IACL,CACD1E,KAAMc,IACL,CACDd,KAAM2E,IACL,CACDrE,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC3D/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,oBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEMlG,IAAY+H,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADhC,CAAC,IAAM,KAAO,IAAM,KAAO,OAG1C2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNvC,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,mBAAoB,CAAE3E,QAAS,KACxC8H,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMvH,WAOlB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,mbC/B/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,mBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMiG,IAAmB/F,EAAAA,EAAAA,IAAM,EAAG,GAE5B0B,IAAW7K,EAAAA,EAAAA,KAAKwJ,EAAAA,EAAAA,IAAOP,IAAarI,EAAAA,EAAAA,GAAasO,IAAkB,SAAA9F,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAKM,EAAAA,KAC1F9J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFM,CAAC,IAAM,KAAO,IAAM,KAAO,OAIvC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,KAAMnB,GAAI,YACVoB,OACElI,OAAOC,YAAYgN,GAAiB9I,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAC/CR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMO,IACL,CACDD,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,gBAMlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,obCvC/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,wBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qcC/B/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEMoG,GAAS,CAAC,IAAK,IAAK,KACpBC,GAAgB,CAAC,IAAM,IAAM,IAAM,IAAM,KACzCC,GAAe,CACnB,EAAK,CAAC,IAAM,GAAK,IAAM,IAAM,KAC7B,EAAK,CAAC,IAAM,GAAK,IAAM,IAAM,KAC7B,EAAK,CAAC,IAAM,IAAM,IAAM,IAAM,MAEhC,IAA6B7H,EAAAA,EAAAA,IAAKlH,GAAK,uBAAvC,iBAAOwM,GAAP,MAAiBC,GAAjB,MACMuC,GAAerN,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MACzD,CAAC,GAAD,OAAIA,EAAJ,UACApB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuP,GAAe,CAAE9O,IAAI,GAAD,OAAKU,EAAL,SAAiBT,QAASS,SAE9EwO,GAAcvN,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MACxD,CAAC,GAAD,OAAIA,EAAJ,UACA8J,EAAAA,EAAAA,IAAMjL,EAAAA,GAAAA,QAAemB,GACnBwI,EAAAA,EAAAA,IAAOuD,IAAUnM,EAAAA,EAAAA,GAAauO,IAAQ,SAAAM,GAAK,OACzC7P,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwP,GAAaI,OAAU/F,EAAAA,GAAQ,CAAEpJ,IAAI,GAAD,OAAKU,EAAL,SAAiBT,QAASS,UAGlG0O,GAAczN,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MACxD,CAAC,GAAD,OAAIA,EAAJ,UACAZ,EAAAA,EAAAA,IAAIkP,GAAa,GAAD,OAAItO,EAAJ,UAAiBwO,GAAY,GAAD,OAAIxO,EAAJ,gBAGjCwC,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,QAAO,UACFoK,MAGD/F,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,QAAO,OACFkF,GAAAA,EAAAA,KAAgB,SAACvO,GAClB,MAAO,CAAEsJ,KAAMgF,GAAa,GAAD,OAAItO,EAAJ,eAG/B+I,YAAa,CACXnH,MAAOmK,GACPzF,KAAMwF,GACN5C,KAAMnB,GAAI,UACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,WACpDoB,OAAQlI,OAAOC,YACbiN,GAAO/I,KAAI,SAAAqJ,GAAK,MAAI,CAACA,EAAO,CAC1BvF,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOgF,SAASF,KACpCpF,OAAQkF,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAK,CAC9BsJ,KAAMkF,GAAY,GAAD,OAAIxO,EAAJ,wBAO7B,OAAmBuJ,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0eC5D/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIM8G,IAAMhQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,GAAK,IAAM,GAAK,IAAM,KAG/BgQ,IAAM7P,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,KAAO,KAAO,KAAO,KAAO,MAEiB,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,IAEtE2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsK,IAAAA,IAEF5H,MAAO,CACL6H,IAAAA,MAGElG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMsF,IAAO,CAAEtF,KAAMuF,QAGpC,OAAmBtF,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kcCxB/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAmCtB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMY,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpC1B,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,MAAQ8I,MAAKM,EAAAA,IAC/HiC,IAAOnC,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,MAAQ8I,MAAKM,EAAAA,IAExHlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACAkB,KAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,SACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMqB,IAAQ,CAAEf,MAAMxD,EAAAA,EAAAA,IAAI,YAAaxE,MAAO,EAAGvC,KAAM,gBAK1F,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,mbC/B/ClD,GAAiB,iBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMO,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChC/I,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiM,GAAO,CAAExL,IAAK,MAAQ8I,MAAKM,EAAAA,IAE1HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNvC,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMvH,eAKzB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,8bC/B/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM8C,IAASjB,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5G,EAAAA,EAAAA,IAAQ,IAE1CmB,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNyG,OAAAA,MAGEpC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCM,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMyB,WAOlB,OAAmBxB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sRCjC/CoF,GAAWC,GACXvI,GAAiB,cACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bCN/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMkD,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpC1B,IAAOK,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,OACrFwP,IAAWhF,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsM,GAAU,CAAE7L,IAAK,OAEzFkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACAqF,SAAAA,MAGEnG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMwF,IACL,CACDlF,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0gBCvC/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,oBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEM6G,IAAWhF,EAAAA,EAAAA,IAAM,KAAM7B,IAAa5G,EAAAA,EAAAA,IAAQ,KAC5CkK,IAAUzB,EAAAA,EAAAA,IAAM,KAAM7B,IAAa5G,EAAAA,EAAAA,IAAQ,KAC3C6I,IAAMJ,EAAAA,EAAAA,IAAM,KAAM7B,IAAa5F,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHlD,CAAC,GAAK,IAAM,GAAK,IAAM,IAG8D,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAClJ6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,gBAEjBZ,IAAYnD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+I,GAASgG,SAASxI,KAAI,SAAAF,GAAC,uBAAIA,EAAEnD,iBAAN,QAAmBsD,QAE1F7C,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNvC,UAAAA,GACA+M,SAAAA,GACAvD,QAAAA,KAED,CAAErB,IAAAA,KACCvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMvH,KACjBgH,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,UACpDgC,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMwF,IACL,CACDxF,KAAMiC,IACL,CACDjC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,eACzB,CACDsK,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,+nBClD/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACA,IAA6CzB,EAAAA,EAAAA,IAAKlH,GAAK,cAAvD,iBAAOmM,GAAP,MAA2BC,GAA3B,MAGME,IAAUhN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,GAAK,IAAM,GAAK,IAAM,KAGnC2L,IAAS5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFV,CAAC,IAAM,IAAM,IAAM,IAAM,MAGlCgN,IAAY7M,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAG0K,EAAAA,EAAAA,IAAM4B,GAAgB,YAAa,KAC1ClD,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MACtD,CAACA,GAAGpJ,EAAAA,EAAAA,IAAKwL,GAAQpC,QAAOM,EAAAA,KAGtBlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsH,QAAAA,GACAnC,KAAMoC,MAGJlD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMsC,KAER7C,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,QACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMuC,IACL,CACDjC,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,cAKb,CACD0J,YAAa,CACXnH,MAAO8J,GACPpF,KAAMmF,GACNzC,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,WACpDmB,MAAMlD,EAAAA,EAAAA,IAAG,qBACTmD,OAAQ,CACNwC,UAAW,CACTtC,OAAQ,CAAC,CACPO,KAAM7B,GAAI,aACVnG,MAAO,IACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2aClE/ClD,GAAiB,oBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEM+G,IAAM/E,EAAAA,EAAAA,IAAM,WAAYjL,EAAAA,GAAAA,SAAe8D,EAAAA,EAAAA,IAAS,KAChD+H,IAAOrI,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKqC,EAAAA,EAAAA,IAAQ,GAAIxC,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC1E6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuK,IAAAA,KAED,CACDnE,KAAAA,KAEI/B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CACN,CACEC,KAAMuF,IAER,CACEvF,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,mBAKnC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bChC/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEM4B,IAAWC,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADnC,CAAC,IAAM,IAAM,IAAM,IAAM,KAC8C,CAAES,IAAK,OAEzFkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ybC/B/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEMiH,GAAU,CAAC,GAAK,IAAM,GAAK,IAAM,IAEjCf,IAAcpP,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkQ,IAClD3E,IAAexL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkQ,IACnD/C,IAAOjJ,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHxB,CAAC,GAAK,GAAK,GAAK,GAAK,GAGyC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,MAE1F2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,YAAAA,GACA5D,aAAAA,KAED,CAAE4B,KAAAA,KACCrD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CACN,CAAEC,KAAM0E,IACR,CAAE1E,KAAMc,IACR,CAAEd,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,iBAIjE,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,obC5B/ClD,GAAiB,WACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEM4C,IAAOrI,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKqC,EAAAA,EAAAA,IAAQ,GAAIxC,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC1E6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAC3D8H,KAAAA,KAEI/B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,mBAG1C,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCnB/ClD,GAAiB,sBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMkE,IAAOjJ,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADxB,CAAC,IAAM,MAAQ,KAAO,MAAQ,KACgC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAC1F2D,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAAEoJ,KAAAA,KAEzDrD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CACN,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,iBAIjE,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,ICA/CwM,GAA6C,CACjDC,gBAAAA,GACAC,cAAAA,GACAC,oBAAAA,GACAC,gBAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,gBAAAA,GACAC,YAAAA,GACAC,aAAAA,GACAC,gBAAAA,GACAC,UAAAA,GACAC,UAAAA,GACAC,qBAAAA,GACAC,qBAAAA,GACAC,iBAAAA,GACAC,eAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,cAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,cAAAA,GACAC,cAAAA,GACAC,SAAAA,GACAC,oBAAAA,IAEF,M,yRCnDMtR,GAAiB,qBACjBsI,GAAWC,GAEJrF,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0bCR/ClD,GAAiB,iBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAOzK,EAAAA,EAAAA,KAAKwJ,EAAAA,EAAAA,IAAOP,IAAarI,EAAAA,EAAAA,GAAa4J,IAAmB,SAAApB,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAK,IACvFxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAMA,MAIJd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,oBACTmD,OACElI,OAAOC,YAAYsI,GAAkBpE,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,gBAMlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCvC/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,GAAK,GAAK,GAAK,MAG9B2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubC/B/ClD,GAAiB,kBACjBsI,GAAWC,GAEjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAmCtB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MAGMG,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAGhCmG,GAAY5P,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAnN,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAcxC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6L,SACtGF,IAASxL,EAAAA,EAAAA,KACb8R,EAAAA,EAAAA,IAAUjS,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAC7B8D,EAAAA,EAAAA,IAAS,EAAG,KACZA,EAAAA,EAAAA,IAAS,EAAG,MACd6F,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAK,IAC/DxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YARC,CAAC,KAAO,IAAM,KAAO,KAAO,MAQG,CAAES,IAAK,OAEtCkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,QAAO,kBACFuM,IADC,IAEJpH,KAAMe,OAGJ7B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQpI,OAAOY,OAAOgP,IAAWzL,KAAI,SAAAkE,GAAI,MAAK,CAAEA,KAAAA,MAChDP,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,KAAMpB,GAAG,eACTqB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMkB,eAKzB,OAAmBjB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ocC3C/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,kBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMvF,IAAMoH,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5F,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,IAAKH,EAAAA,GAAAA,MAAAA,KAAiBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpE,CAAC,GAAK,IAAM,GAAK,IAAM,IAE+E,CAAES,IAAK,OAAS,YAAa,CAChJoD,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,gBAEjBH,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAC3DF,IAAAA,KAGIiG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQuD,GAAK,CAAEpD,IAAI,UAAD,OAAYA,GAAZ,sBAOpC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bCjC/ClD,GAAiB,aACjBsI,GAAWC,GAEjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMwG,GAAY,CAAC,IAAM,GAAK,IAAM,IAAM,KAEpCtH,IAAOjB,EAAAA,EAAAA,IAAO+B,GAAW,CAAE,WAAa3L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADzC,CAAC,IAAM,GAAK,IAAM,IAAM,KACmD,CAAES,IAAK,MAAQ,aAAeV,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkS,GAAW,CAAEzR,IAAK,OAAUoJ,EAAAA,IAClLiC,IAAOb,EAAAA,EAAAA,IAAMS,GAAW,eAAe3L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BkS,GAAW,CAAEzR,IAAK,OAEtFkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACAkB,KAAAA,MAGEhC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACN,UAAa,CACXD,KAAMnB,GAAI,uBACVsB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMqB,MAEnC,YAAe,CACbzB,KAAMnB,GAAI,yBACVsB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMqB,WAM3C,OAAmBpB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCvC/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,uBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,IAAM,IAAM,IAAM,OAGjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ocC/B/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMsD,IAAS/I,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFzB,CAAC,GAAK,IAAM,IAAK,KAAM,KAEwC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC9H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjB0I,IAAchJ,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJ7B,CAAC,EAAG,IAAK,IAAK,IAAK,KAIiD,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACpI6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjBH,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQiM,GAAQ,CAAE9L,IAAI,UAAD,OAAYA,GAAZ,cAC1B,CACDgK,MAAMnK,EAAAA,EAAAA,IAAQkM,GAAa,CAAE/L,IAAI,UAAD,OAAYA,GAAZ,2BAItC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bC3B/ClD,GAAiB,qBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIM2B,IAAOhB,EAAAA,EAAAA,KAAIzJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpB,CAAC,IAAM,IAAM,IAAM,IAAM,OAE2BO,EAAAA,EAAAA,IAAIP,EAAAA,GAAAA,MAAAA,WAAuBwC,EAAAA,EAAAA,KAAS,MAAMzC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrG,CAAC,GAAK,GAAK,EAAG,IAAK,OAIlC,IAAuC2H,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM+I,IAAYlH,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpC,CAAC,GAAK,IAAM,GAAM,IAAM,GAAK,OAIjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACAuH,UAAAA,MAGErI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMG,KAERV,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAM0H,IACL,CACDpH,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,+bChD/ClD,GAAiB,gBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ybCL/ClD,GAAiB,UACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMoC,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADzB,CAAC,IAAK,EAAG,IAAK,IAAK,KACyC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACxH6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjBH,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAIhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wRCvB/ClD,GAAiB,YACjBsI,GAAWC,GAEJrF,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCR/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMuC,IAAazL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADR,CAAC,IAAM,KAAO,IAAM,KAAO,MAE1C2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+F,WAAAA,MAIE1B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMe,QAIZ,OAAmBd,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCrB/ClD,GAAiB,cACjBsI,GAAWC,GAEjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,IAAM,IAAM,IAAM,GAAK,KACjCC,GAAU,CAAC,IAAM,IAAM,IAAM,IAAM,KACnChB,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B2L,GAAQ,CAAElL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC7H3G,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B4L,GAAS,CAAEnL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC5HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACA1H,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,YACnDkD,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,SAAU,CAAE2D,MAAOvB,IAC5BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMvH,eAKzC,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bChC/ClD,GAAiB,4BACjBsI,GAAWC,GAEjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMC,GAAS,CAAC,KAAO,KAAO,KAAO,KAAO,KAEtCf,IAAOjB,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B2L,GAAQ,CAAElL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC7HmB,IAAWC,EAAAA,EAAAA,IAAMS,GAAW,KAAK3L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF/B,CAAC,IAAM,IAAM,IAAM,IAAM,KAE2C,CAAES,IAAK,OAChFkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNmF,KAAAA,GACAI,SAAAA,MAGElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMG,IAAQ,CAAEH,KAAMO,eAKzC,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0bChC/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAmCtB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACM0G,GAAS,CAAC,IAAM,GAAK,IAAM,IAAM,KACjCjD,IAAcxF,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoS,GAAQ,CAAE3R,IAAK,MAAQ8I,MAAKM,EAAAA,IACpI0B,IAAe5B,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoS,GAAQ,CAAE3R,IAAK,MAAQ8I,MAAKM,EAAAA,IAC9HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACN0J,YAAAA,GACA5D,aAAAA,MAGEzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAM0E,IAAe,CAAE1E,KAAMc,eAKhD,OAAmBb,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sbC9B/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMO,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChC/I,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiM,GAAO,CAAExL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC1HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNvC,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMvH,eAKzB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0gBC5B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMyD,IAAUlK,EAAAA,EAAAA,IAAQ,KAClBU,IAAYnD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,IAAM,GAAK,IAAM,IAAM,MAItCqL,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHzB,CAAC,GAAK,IAAM,GAAK,IAAM,GAGqC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACxH6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNvC,UAAAA,GACAwJ,QAAAA,MAIE5C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMvH,IACL,CACDuH,KAAMiC,IACL,CACDjC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAIhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0eCjC/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAKM8G,IAAMhQ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHR,CAAC,GAAK,IAAM,GAAK,IAAM,IAGkB,CAAES,IAAK,MAC9D,IAAuCkH,EAAAA,EAAAA,IAAKlH,GAAK,oBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMiJ,IAAQlS,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJd,CAAC,KAAO,IAAM,KAAO,KAAO,MAIoB,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,IACxEsS,IAAQrH,EAAAA,EAAAA,IAAM,KAAM7B,IAAajJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJlC,CAAC,IAAM,KAAO,KAAO,KAAO,MAI6C,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,IAAkB,CAAES,IAAK,QAC/HkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsK,IAAAA,IAEF5H,MAAO,CACL6H,KAAKzP,EAAAA,EAAAA,IAAI8R,GAAOC,OAIdxI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMsF,IACL,CACDtF,MAAMnK,EAAAA,EAAAA,IAAQ+R,GAAO,CAAE5R,IAAK,UAE9ByJ,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,MAAMlD,EAAAA,EAAAA,IAAG,gBAAiB,CAAE3E,QAAS,KACrC8H,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAM6H,WAOlB,OAAmB5H,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,0bC7C/ClD,GAAiB,WACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMS,IAAa3J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFR,CAAC,IAAM,GAAK,IAAM,IAAM,MAGvCuS,IAAkBxS,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFZ,CAAC,IAAM,KAAO,IAAM,KAAO,MAI3C2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNiE,WAAAA,GACA6I,gBAAAA,MAIEzI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMf,IAAc,CAAEe,KAAM8H,QAG3C,OAAmB7H,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,koBCvB/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM2D,IAAUhN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJR,CAAC,GAAK,IAAM,GAAK,IAAM,KAMzC,IAA6C2H,EAAAA,EAAAA,IAAKlH,GAAK,cAAvD,iBAAOmM,GAAP,MAA2BC,GAA3B,MAEMlB,IAAS5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPV,CAAC,IAAM,IAAM,IAAM,IAAM,MAQlCgN,IAAY7M,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAG0K,EAAAA,EAAAA,IAAM4B,GAAgB,YAAa,KAC1ClD,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MACtD,CAACA,GAAGpJ,EAAAA,EAAAA,IAAKwL,GAAQpC,QAAOM,EAAAA,KAGtBlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsH,QAAAA,GACAnC,KAAMoC,MAIJlD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMsC,KAER7C,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,QACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMuC,IACL,CACDjC,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,cAKb,CACD0J,YAAa,CACXnH,MAAO8J,GACPpF,KAAMmF,GACNzC,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,WACpDmB,MAAMlD,EAAAA,EAAAA,IAAG,qBACTmD,OAAQ,CACNwC,UAAW,CACTtC,OAAQ,CAAC,CACPO,KAAM7B,GAAI,aACVnG,MAAO,IACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCrE/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,uBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMC,IAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAI/C,KAAI,SAAAgD,GAAC,OAAQ,GAAJA,KACpCC,GAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,GAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,IAAaC,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,YAAYgH,GAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,GAAGK,EAAAA,EAAAA,KAAIzJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwJ,GAAO,CAAE/I,IAAK,MAAQ8I,IAAIxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0ByJ,GAAK,CAAEhJ,IAAK,YAAYoJ,EAAAA,IAChNlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNiE,WAAAA,MAIEI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,SACVoB,OAAQlI,OAAOC,YAAYgH,GAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,eAKzB,OAAmBgB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bChC/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMkG,IAAcpP,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADf,CAAC,IAAM,GAAM,IAAM,IAAM,MAElC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,YAAAA,MAIErF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAM0E,QAIZ,OAAmBzE,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,ICR/C6O,GAAiD,CACrDC,mBAAAA,GACAC,eAAAA,GACAC,YAAAA,GACAC,gBAAAA,GACAC,aAAAA,GACAC,WAAAA,GACAC,YAAAA,GACAC,iBAAAA,GACAC,mBAAAA,GACAC,cAAAA,GACAC,QAAAA,GACAC,UAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,0BAAAA,GACAC,qBAAAA,GACAC,WAAAA,GACAC,aAAAA,GACAC,YAAAA,GACAC,SAAAA,GACAC,iBAAAA,GACAC,gBAAAA,GACAC,YAAAA,IAEF,M,mbCtCMtT,GAAiB,cACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMkJ,GAAS,CAAC,IAAK,KAAM,IAAK,KAAM,KAEtC,IAAuCzK,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWrB,EAAAA,EAAAA,IAAOP,IAAD,WAClBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,KAAK,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoS,IAAS7I,OACpFM,EAAAA,IAGGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,IAAI/C,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CACnDR,KAAK,GAAD,OAAKQ,EAAL,KACJL,OAAQ,CAAC,CACPC,KAAMO,eAOhB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,obCrC/ClD,GAAiB,UACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACM8K,GAAa,CAAC,IAAM,IAAM,IAAM,IAAM,KAG5C,IAAuCrM,EAAAA,EAAAA,IAAKlH,GAAK,gBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM+F,IAAcpP,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BgU,GAAY,CAAEvT,IAAK,gBACrE8K,IAAexL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BgU,GAAY,CAAEvT,IAAK,iBAEtE2R,IAASrS,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANL,CAAC,IAAM,GAAM,IAAM,IAAM,MAOvCiU,IAAoBtK,EAAAA,EAAAA,IAAOP,IAAD,WAC3BrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAKiS,GAAQ7I,OAC9CM,EAAAA,GAAQ,CAAEpJ,IAAK,gBACZyT,IAAqBvK,EAAAA,EAAAA,IAAOP,IAAD,WAC5BrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAKiS,GAAQ7I,OAC9CM,EAAAA,GAAQ,CAAEpJ,IAAK,iBAGZkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,aAAa5O,EAAAA,EAAAA,IAAI4O,GAAa8E,IAC9B1I,cAAchL,EAAAA,EAAAA,IAAIgL,GAAc2I,OAI9BpK,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CACN,CAAEC,KAAM0E,IACR,CAAE1E,KAAMc,KAEVrB,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAQvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMwJ,IACL,CACDxJ,KAAMyJ,aAMhB,OAAmBxJ,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCpD/ClD,GAAiB,mBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MACM0C,GAAS,CAAC,IAAK,IAAK,IAAK,IAAK,KAEpC,IAAuChE,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOjB,EAAAA,EAAAA,IAAOP,IAAD,WACdrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B2L,IAASpC,OACnFM,EAAAA,IAGGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,oBACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAClDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,gBAOhB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,gcCxC/ClD,GAAiB,cACvB,IAAkBK,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMH,GAAWC,GAEXmL,GAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,KAC7BC,GAAW,CAAC,KAAO,KAAO,KAAO,KAAO,MAC9C,IAAuCzM,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOjB,EAAAA,EAAAA,IAAOP,IAAD,WACdrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BmU,IAAQ5K,OAClFM,EAAAA,IACG6C,IAAU/C,EAAAA,EAAAA,IAAOP,IAAD,WACjBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BoU,IAAW7K,OACrFM,EAAAA,IAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACA8B,QAAAA,MAIE5C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMiC,eAMhB,OAAmBhC,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ifC3C/ClD,GAAiB,iBACvB,IAAkBK,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMH,GAAWC,GAKjB,IAA6BrB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAvC,iBAAOwM,GAAP,MAAiBC,GAAjB,MACMmH,IAAStU,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALP,CAAC,GAAI,GAAI,GAAI,IAAK,KAK0B,CAAES,IAAK,WAC/D6T,IAAUrJ,EAAAA,EAAAA,IAAMiC,GAAU,MAAMnN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL7B,CAAC,IAAK,IAAK,IAAK,IAAK,KAK8C,CAAES,IAAK,YACvFmK,IAAOK,EAAAA,EAAAA,IAAMiC,GAAU,MAAMnN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL/B,CAAC,GAAM,IAAM,GAAM,IAAM,MAO1B2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACN4O,QAAQ9T,EAAAA,EAAAA,IAAI8T,GAAQC,IACpB1J,KAAAA,MAGEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAM4J,KAERnK,YAAa,CACXnH,MAAOmK,GACPzF,KAAMwF,GACN9C,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,YACpDgC,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAM6J,IACL,CACD7J,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bCnD/ClD,GAAiB,iBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,mbCN/ClD,GAAiB,WACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEMqL,GAAe,CAAC,IAAK,GAAK,IAAK,IAAK,KACpCC,GAAgB,CAAC,IAAK,IAAK,IAAK,IAAK,KAErCC,IAAa1U,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuU,GAAc,CAAE9T,IAAK,gBACtEiU,IAAc3U,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwU,GAAe,CAAE/T,IAAK,iBAE9E,IAAuCkH,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMuL,IAAiB1J,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BuU,GAAc,CAAE9T,IAAK,iBACnGmU,IAAkB3J,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwU,GAAe,CAAE/T,IAAK,kBAErGkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,aAAa5O,EAAAA,EAAAA,IAAIkU,GAAYE,IAC7BpJ,cAAchL,EAAAA,EAAAA,IAAImU,GAAaE,OAI7B9K,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMgK,IACL,CACDhK,KAAMiK,KAERxK,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMkK,IACL,CACDlK,KAAMmK,WAQlB,OAAmBlK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qRCrD/CoF,GAAWC,GACXvI,GAAiB,aACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sbCL/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMoC,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAD3B,CAAC,EAAG,KAAM,IAAK,KAAM,IACwCA,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAE3HH,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAKhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,6bCrB/ClD,GAAiB,oBACvB,IAAaK,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MACMF,GAAWC,GAKjB,IAAmCrB,EAAAA,EAAAA,IAAKlH,GAAK,sBAA7C,iBAAOoU,GAAP,MAAsBC,GAAtB,MACA,IAAqCnN,EAAAA,EAAAA,IAAKlH,GAAK,uBAA/C,iBAAOsU,GAAP,MAAuBC,GAAvB,MAEMxJ,IAAaP,EAAAA,EAAAA,IAAM6J,GAAW,MAAM/U,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANhC,CAAC,GAAK,IAAK,GAAK,IAAK,MAOnCmP,IAAclE,EAAAA,EAAAA,IAAM+J,GAAY,MAAMjV,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANjC,CAAC,GAAK,IAAK,GAAK,IAAK,MAQpC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+F,WAAAA,GACA2D,YAAAA,MAIErF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOiS,GACPvN,KAAMsN,GACN5K,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,eACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAM0E,IACL,CACDpE,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,UAKb,CACD0J,YAAa,CACXnH,MAAO+R,GACPrN,KAAMoN,GACN1K,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,gBACTmD,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDT,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,mbC9D/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,uBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMC,IAAcC,EAAAA,EAAAA,IAAM,EAAG,IAAI/C,KAAI,SAAAgD,GAAC,OAAQ,GAAJA,KACpCC,GAAQ,CAAC,MAAQ,MAAQ,MAAQ,MAAQ,OACzCC,GAAM,CAAC,GAAK,GAAK,GAAK,GAAK,IAC3BC,IAAaC,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,YAAYgH,GAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,GAAGK,EAAAA,EAAAA,KAAIzJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwJ,GAAO,CAAE/I,IAAK,MAAQ8I,IAAIxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0ByJ,GAAK,CAAEhJ,IAAK,YAAYoJ,EAAAA,IAChNlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNiE,WAAAA,MAIEI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,SACVoB,OAAQlI,OAAOC,YAAYgH,GAAY9C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,KAAMd,EAAEgB,WACRC,OAAQ,CAAC,CAAEC,KAAMf,eAKzB,OAAmBgB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ybC/B/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACM+L,GAAS,CAAC,IAAM,IAAM,IAAM,IAAM,KAMxC,IAAuCtN,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEMoC,IAAazL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiV,IACjDvL,IAAa3J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiV,IACjDrK,IAAOjB,EAAAA,EAAAA,IAAOP,GAAa,CAC/B,GAAKrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAVG,CAAC,GAAK,KAAO,IAAM,KAAO,KAUW,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YATpD,CAAC,GAAK,IAAM,GAAK,IAAM,KAUzC,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YATG,CAAC,GAAK,KAAO,IAAM,KAAO,KASW,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YARpD,CAAC,IAAM,GAAK,IAAM,IAAM,OASzC6J,EAAAA,IAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+F,WAAAA,GACA9B,WAAAA,GACAkB,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,KAERQ,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAQvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMG,aAMhB,OAAmBF,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,saCnD/ClD,GAAiB,WACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEMiM,IAAY1S,EAAAA,EAAAA,IAAQ,IACpB2S,IAAa3S,EAAAA,EAAAA,IAAQ,IAC3B,IAAuCmF,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM+F,IAAcxF,EAAAA,EAAAA,IAAOP,IAAD,WACrBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAK+U,GAAW3L,OACjDM,EAAAA,IACG0B,IAAe5B,EAAAA,EAAAA,IAAOP,IAAD,WACtBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAKgV,GAAY5L,OAClDM,EAAAA,IACGmG,IAAM/E,EAAAA,EAAAA,IAAMjL,EAAAA,GAAAA,cAAqB,QAAQ8D,EAAAA,EAAAA,IAAS,KAGlDH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,YAAAA,GACA5D,aAAAA,GACAyE,IAAAA,MAIElG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,cACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAClDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAM0E,IACL,CACD1E,KAAMc,IACL,CACDR,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,gBAOhB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kbClD/ClD,GAAiB,oBACvB,IAAkBK,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMH,GAAWC,GAGjB,IAAuCrB,EAAAA,EAAAA,IAAKlH,GAAK,eAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFlC,CAAC,IAAK,IAAK,IAAK,IAAK,OAG7BiQ,IAAWhF,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5G,EAAAA,EAAAA,IAAQ,KAE5CmB,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACAqF,SAAAA,MAIEnG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMwF,IACL,CACDlF,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kbC1C/ClD,GAAiB,WACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,uBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHlC,CAAC,IAAK,IAAK,IAAK,IAAK,OAKjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAQlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,obCnC/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMmM,IAAUlR,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,IAAKH,EAAAA,GAAAA,MAAAA,IAAgBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAD5C,CAAC,IAAK,GAAK,IAAK,IAAK,QAGjC2D,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ8U,GAAS,CAAE3U,IAAK,oBAAqBC,QAAS,iBAKlE,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ibCpB/ClD,GAAiB,WACvB,IAAkBK,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMH,GAAWC,GAEXqM,GAAa,CAAC,IAAK,GAAK,IAAK,IAAK,KACxC,IAAuC1N,EAAAA,EAAAA,IAAKlH,GAAK,SAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMlG,IAAYyG,EAAAA,EAAAA,IAAOP,IAAD,WACnBrI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BqV,IAAa9L,OACvFM,EAAAA,IAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNvC,UAAAA,MAIE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMvH,eAMhB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ibCpC/ClD,GAAiB,OACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMkG,IAAcpP,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFT,CAAC,GAAI,GAAI,GAAI,GAAI,KAGhCuL,IAAezH,EAAAA,EAAAA,KAAU,IAEzBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,YAAAA,GACA5D,aAAAA,MAIEzB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAM0E,IACL,CACD1E,KAAMc,QAIZ,OAAmBb,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bC7B/ClD,GAAiB,iBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM8C,IAASjB,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5G,EAAAA,EAAAA,IAAQ,IAE1CmB,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNyG,OAAAA,MAIEpC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCK,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMyB,WAOlB,OAAmBxB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,oRClC/CoF,GAAWC,GACXvI,GAAiB,qBACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sbCN/ClD,GAAiB,oBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMqM,IAAevV,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADT,CAAC,IAAK,GAAK,IAAK,IAAK,MAGrC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN6P,aAAAA,MAIExL,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAM6K,QAIZ,OAAmB5K,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,+fCtB/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMsM,IAAU/S,EAAAA,EAAAA,IAAQ,MAClBgT,IAAWzV,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFX,CAAC,GAAK,IAAK,GAAK,IAAK,KAG/BqL,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,IAAKoV,GAASvV,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAExFH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+P,SAAAA,MAIE1L,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAKhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubC3B/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAKA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,aAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMqM,IAAsBxK,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJjC,CAAC,IAAK,IAAK,IAAK,IAAK,KAI8D,CAAES,IAAK,gBAClHiV,IAAuBzK,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJjC,CAAC,IAAK,IAAK,IAAK,IAAK,KAI+D,CAAES,IAAK,iBACpHkV,IAAsBnT,EAAAA,EAAAA,IAAQ,GAAI,CAAE/B,IAAK,gBACzCmV,IAAuBpT,EAAAA,EAAAA,IAAQ,GAAI,CAAE/B,IAAK,iBAE1CkD,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0J,aAAa5O,EAAAA,EAAAA,IAAIkV,GAAqBE,IACtCpK,cAAchL,EAAAA,EAAAA,IAAImV,GAAsBC,OAItC7L,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMkL,IACL,CACDlL,KAAMmL,KAER1L,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMgL,IACL,CACDhL,KAAMiL,WAOlB,OAAmBhL,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kbChD/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEM4M,GAAiB,CAAC,IAAM,GAAM,IAAM,IAAM,KAC1CrK,IAAazL,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6V,IACjDnM,IAAa3J,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6V,IAE1ClS,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACN+F,WAAAA,GACA9B,WAAAA,MAGEI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,QAIZ,OAAmBgB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCzB/ClD,GAAiB,qBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGMoC,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADvB,CAAC,GAAI,GAAI,GAAI,GAAI,KAC4CA,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAAE6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAE/HH,GAAOsE,EAAsBxH,GAAKsI,IAClCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,mBAKhC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4eCnB/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAOA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAO7K,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANR,CAAC,GAAM,IAAM,GAAM,IAAM,KAOlCmP,IAAcxF,EAAAA,EAAAA,IAAOP,GAAa,CACtC,GAAKrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPA,CAAC,IAAM,IAAM,IAAM,IAAM,MAOY,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YANpD,CAAC,IAAM,GAAK,IAAM,IAAM,MAMiE,GAAKD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALxG,CAAC,GAAK,GAAK,GAAK,GAAK,MAMnC6J,EAAAA,IAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACAuE,YAAAA,MAIErF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMG,KAERV,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAQvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAM0E,aAMhB,OAAmBzE,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,kbC9C/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM7B,GAAa,MAAMrJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFlC,CAAC,IAAK,GAAK,IAAK,IAAK,OAI7B2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,MAAMlD,EAAAA,EAAAA,IAAG,kBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,YAQlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,ICrB/CmS,GAAyC,CAC7CC,YAAAA,GACAC,QAAAA,GACAC,iBAAAA,GACAC,YAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,kBAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,SAAAA,GACAC,kBAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,SAAAA,GACAC,KAAAA,GACAC,eAAAA,GACAC,mBAAAA,GACAC,kBAAAA,GACAC,YAAAA,GACAC,UAAAA,GACAC,cAAAA,GACAC,mBAAAA,GACAC,gBAAAA,GACAC,aAAAA,IAEF,M,0RClDM1O,GAAWC,GACXvI,GAAiB,mBACVkD,GAAOsE,EAAsBxH,GAAKsI,IACzCe,IAAmB,kBACpBf,IADoB,IAEvBgB,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bCL/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMuB,IAAoBrB,EAAAA,EAAAA,IAAM,EAAG,GAE7BsB,IAAOzK,EAAAA,EAAAA,KAAKwJ,EAAAA,EAAAA,IAAOP,IAAarI,EAAAA,EAAAA,GAAa4J,IAAmB,SAAApB,GAAC,OAAIzF,EAAAA,EAAAA,IAASyF,MAAK,IACvFxJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAMA,MAIJd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,oBACTmD,OACElI,OAAOC,YAAYsI,GAAkBpE,KAAI,SAAAsE,GAAC,MAAI,CAACA,EAAG,CAChDR,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOD,IAC3BL,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,gBAMlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCzC/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAKA,IAAqCtB,EAAAA,EAAAA,IAAKlH,GAAK,qBAA/C,iBAAOsU,GAAP,MAAuBC,GAAvB,MACA,IAAuCrN,EAAAA,EAAAA,IAAKlH,GAAK,sBAAjD,iBAAOiX,GAAP,MAAwBC,GAAxB,MACMpM,IAAeN,EAAAA,EAAAA,IAAM,KAAM+J,IAAYjV,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALjC,CAAC,IAAM,GAAK,IAAM,IAAM,OAMxC4K,IAAOK,EAAAA,EAAAA,IAAM,KAAM0M,IAAa5X,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALjC,CAAC,GAAK,GAAM,IAAM,IAAM,OAOjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN8F,aAAAA,GACAX,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOiS,GACPvN,KAAMsN,GACN1K,MAAMlD,EAAAA,EAAAA,IAAG,gBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMc,IACL,CACDR,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,UAKb,CACD0J,YAAa,CACXnH,MAAO4U,GACPlQ,KAAMiQ,GACNrN,MAAMlD,EAAAA,EAAAA,IAAG,iBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC9D/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,UAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHjC,CAAC,GAAK,IAAM,GAAK,IAAM,MAKhC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ofCvC/ClD,GAAiB,sBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGA,IAAgBnI,EAAAA,EAAAA,IAAM,SAAUL,IAAhC,iBAASyI,GAAT,MACM6C,IAAgB5L,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrB,CAAC,IAAM,KAAO,IAAM,KAAO,KAE6B,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,IACjF4X,IAAQ7X,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B+I,GAASgG,SAASxI,KAAI,SAAAF,GAAC,uBAAIA,EAAEuR,aAAN,QAAepR,QAC3E7C,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNsG,cAAAA,GACA6L,MAAAA,KAED,CACD7L,cAAAA,KAEIjC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMmN,IACL,CACD7M,KAAM7B,GAAI,QACVuB,KAAMsB,QAIZ,OAAmBrB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC5B/ClD,GAAiB,kBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAGM4C,IAAOrI,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAD1B,CAAC,IAAK,IAAK,EAAG,IAAK,KAC0C,CAAES,IAAK,MAAQT,EAAAA,GAAAA,OAAAA,KAAmB,YAAa,CAC1H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAC3D8H,KAAAA,KAGI/B,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQuL,GAAM,CAAEpL,IAAK,mBAG1C,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bCzB/ClD,GAAiB,gBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCL/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIMsD,IAAS/I,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFzB,CAAC,GAAK,IAAM,IAAK,KAAM,KAEwC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CAC9H6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjB0I,IAAchJ,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJ7B,CAAC,EAAG,IAAK,IAAK,IAAK,KAIiD,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACpI6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAGjBH,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAC3DwI,OAAAA,GACAC,YAAAA,KAEI1C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQiM,GAAQ,CAAE9L,IAAI,UAAD,OAAYA,GAAZ,cAC1B,CACDgK,MAAMnK,EAAAA,EAAAA,IAAQkM,GAAa,CAAE/L,IAAI,UAAD,OAAYA,GAAZ,2BAItC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,qeC5B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,gBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMyO,IAAS9X,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHK,CAAC,GAAK,KAAO,IAAM,KAAO,KAIlD8X,IAAaC,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAeiL,EAAAA,EAAAA,IAAM,QAAS7B,GAAayO,KACrFG,IAAYD,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAeiL,EAAAA,EAAAA,IAAM,OAAQ7B,GAAayO,KACnFI,IAAWF,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAeiL,EAAAA,EAAAA,IAAM,MAAO7B,GAAayO,KACjFK,IAAaH,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAeiL,EAAAA,EAAAA,IAAM,QAAS7B,GAAayO,KACrFM,IAAYJ,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAeiL,EAAAA,EAAAA,IAAM,OAAQ7B,GAAayO,KAEnFO,IAAeL,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAAe2J,EAAAA,EAAAA,IAAOP,GAAa,CAAE,MAASyO,GAAQ,KAAQA,GAAQ,IAAOA,GAAQ,MAASA,GAAQ,KAAQA,IAAUhO,EAAAA,KAEpKlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDpD,SAAU,CACRF,OAAQ,CACNqS,WAAAA,GACAE,UAAAA,GACAI,aAAAA,GACAH,SAAAA,GACAC,WAAAA,GACAC,UAAAA,OAKArO,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,MAAM,UAACgO,GAAA,EAAD,CAAWhR,GAAG,sBAAsBC,MAAM,yBAChDgR,SAASP,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,GACrD2F,UAAU,EACVwE,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACN9I,MAAO,CACL6I,MAAM,UAAC,KAAD,CAAWkO,MAAM,QAAjB,UAA0BhR,EAAAA,EAAAA,IAAI,oBACpCiD,OAAQ,CAAC,CACPC,KAAMqN,IACL,CACDrN,KAAM2N,IACL,CACDE,QAAS,SAAC3U,GAAD,OAAUA,EAAK0I,IAAIrM,EAAAA,GAAAA,eAAqB+C,QAAUY,EAAK0I,IAAIrM,EAAAA,GAAAA,SAAe+C,OACnFgI,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,OAGVsB,KAAM,CACJuI,MAAM,UAAC,KAAD,CAAWkO,MAAM,OAAjB,UAAyBhR,EAAAA,EAAAA,IAAI,2BACnCiD,OAAQ,CAAC,CACPC,KAAMuN,IACL,CACDvN,KAAM2N,IACL,CACDE,QAAS,SAAC3U,GAAD,OAAUA,EAAK0I,IAAIrM,EAAAA,GAAAA,eAAqB+C,QAAUY,EAAK0I,IAAIrM,EAAAA,GAAAA,SAAe+C,OACnFgI,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,OAGV0B,IAAK,CACHmI,MAAM,UAAC,KAAD,CAAWkO,MAAM,MAAjB,UAAwBhR,EAAAA,EAAAA,IAAI,0BAClCiD,OAAQ,CAAC,CACPC,KAAMwN,IACL,CACDxN,KAAM2N,IACL,CACDE,QAAS,SAAC3U,GAAD,OAAUA,EAAK0I,IAAIrM,EAAAA,GAAAA,eAAqB+C,QAAUY,EAAK0I,IAAIrM,EAAAA,GAAAA,SAAe+C,OACnFgI,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,OAGVoB,KAAM,CACJyI,MAAM,UAAC,KAAD,CAAWkO,MAAM,OAAjB,UAAyBhR,EAAAA,EAAAA,IAAI,yBACnCiD,OAAQ,CAAC,CACPC,KAAM0N,IACL,CACD1N,KAAM2N,IACL,CACDE,QAAS,SAAC3U,GAAD,OAAUA,EAAK0I,IAAIrM,EAAAA,GAAAA,eAAqB+C,QAAUY,EAAK0I,IAAIrM,EAAAA,GAAAA,SAAe+C,OACnFgI,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,OAGVwB,MAAO,CACLqI,MAAM,UAAC,KAAD,CAAWkO,MAAM,QAAjB,UAA0BhR,EAAAA,EAAAA,IAAI,6BACpCiD,OAAQ,CAAC,CACPC,KAAMyN,IACL,CACDzN,KAAM2N,IACL,CACDE,QAAS,SAAC3U,GAAD,OAAUA,EAAK0I,IAAIrM,EAAAA,GAAAA,eAAqB+C,QAAUY,EAAK0I,IAAIrM,EAAAA,GAAAA,SAAe+C,OACnFgI,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,6bChH/ClD,GAAiB,gBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAEA,IAA6BtB,EAAAA,EAAAA,IAAKlH,GAAK,eAAvC,iBAAOwM,GAAP,MAAiBC,GAAjB,MACMsL,IAASlP,EAAAA,EAAAA,IAAM,EAAG,GAClBuC,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAChC4M,GAAcD,GAAOjS,KAAI,SAAAgD,GAAC,OAAI0B,EAAAA,EAAAA,IAAMiC,GAAU3D,EAAEgB,YAAYxK,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6L,GAAKtF,KAAI,SAAAmS,GAAC,OAAIA,EAAInP,MAAK,CAAE9I,IAAK,kBAC9HkY,GAAYvW,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAACA,GAAK8J,EAAAA,EAAAA,IAAMiC,GAAU,KAAKnN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6L,UAE9GlI,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,QAAO,QACL+F,WAAYjL,EAAAA,GAAAA,WAAA,UAAOkY,MAChBrW,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBwX,GAAUxX,WAGrE2I,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOmK,GACPzF,KAAMwF,GACN9C,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OACElI,OAAOC,YAAYmW,GAAOjS,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CACrCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAO,CAAE,CACPC,KAAMgO,GAAYlP,EAAI,KADlB,eAGHmG,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAK,CAAEsJ,KAAMkO,GAAUxX,mBAKvD,OAAmBuJ,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,8bCrC/ClD,GAAiB,6BACvB,IAAkBK,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MACMH,GAAWC,GAGjB,IAAuCrB,EAAAA,EAAAA,IAAKlH,GAAK,qBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAEM6G,IAAWzN,EAAAA,EAAAA,IAAQ,IACnBoW,IAAY7Y,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YALV,CAAC,IAAM,IAAM,IAAM,IAAM,MAMrC6Y,GAAezW,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAACA,GAAKwI,EAAAA,EAAAA,IAAOP,IAAD,WACtErI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAKyY,GAAWrP,OACjDM,EAAAA,SAEUlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,QAAO,QACLwK,SAAAA,IACG7N,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgB0X,GAAa1X,WAGxE2I,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CAAEC,KAAMwF,KACjB/F,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAQvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQkF,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAK,CAAEsJ,KAAMoO,GAAa1X,eAK7D,OAAmBuJ,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCvC/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,sBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM4B,IAAWC,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,IAAM,IAAM,IAAM,IAAM,OAGlC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNuF,SAAAA,MAIElB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACViB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMO,WAOlB,OAAmBN,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbChC/ClD,GAAiB,YACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,kBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAGM0P,IAAY/Y,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADX,CAAC,IAAM,GAAK,IAAM,IAAM,MAEnC+Y,IAAUC,EAAAA,EAAAA,IAAkBtJ,GAAAA,GAAa,SAAAnN,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAcoH,EAAAA,EAAAA,IAAOP,IAAD,WACnErI,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,IAAK2Y,GAAWvP,OACjDM,EAAAA,QAEGlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQsT,KAGJjP,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,QAAQvJ,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,MAAK,CACtCc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAO,GAAD,eAAMpI,OAAOY,OAAO+V,IAASxS,KAAI,SAAAkE,GAAI,MAAK,CAAEA,KAAAA,OAA5C,CAAsD,CAC1DM,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,eAMhB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,moBCrC/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,iBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM2D,IAAUhN,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJR,CAAC,GAAK,IAAM,GAAK,IAAM,KAMzC,IAA6C2H,EAAAA,EAAAA,IAAKlH,GAAK,cAAvD,iBAAOmM,GAAP,MAA2BC,GAA3B,MAEMlB,IAAS5L,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAPV,CAAC,IAAM,IAAM,IAAM,IAAM,MAQlCgN,IAAY7M,EAAAA,EAAAA,KAChBI,EAAAA,EAAAA,IAAI,GAAG0K,EAAAA,EAAAA,IAAM4B,GAAgB,YAAa,KAC1ClD,EAAAA,EAAAA,IAAOP,GAAahH,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MACtD,CAACA,GAAGpJ,EAAAA,EAAAA,IAAKwL,GAAQpC,QAAOM,EAAAA,KAGtBlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNsH,QAAAA,GACAnC,KAAMoC,MAIJlD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,KAAMsC,KAER7C,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnDkD,MAAMlD,EAAAA,EAAAA,IAAG,QACTmD,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAC1C,CAACA,EAAG,CACFc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CACPC,KAAMuC,IACL,CACDjC,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,cAKb,CACD0J,YAAa,CACXnH,MAAO8J,GACPpF,KAAMmF,GACNzC,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,GAAYd,GAAI,WACpDmB,MAAMlD,EAAAA,EAAAA,IAAG,qBACTmD,OAAQ,CACNwC,UAAW,CACTtC,OAAQ,CAAC,CACPO,KAAM7B,GAAI,aACVnG,MAAO,IACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbCtE/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAA7B,iBAAOwI,GAAP,MAIA,IAA6CtB,EAAAA,EAAAA,IAAKlH,GAAK,WAAvD,iBAAOwY,GAAP,MAA2BC,GAA3B,MACMC,IAAYpZ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHL,CAAC,IAAM,GAAM,IAAM,IAAM,MAI1CmS,IAAYlH,EAAAA,EAAAA,IAAM,aAAciO,GAAgBC,IAEhDxV,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN0M,UAAAA,MAIErI,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOmW,GACPzR,KAAMwR,GACN9O,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,kBACTmD,OAAQ,CACN8O,WAAY,CACV5O,OAAQ,CAAC,CACPC,KAAM0H,WAOlB,OAAmBzH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bCnC/ClD,GAAiB,oBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAGMkE,IAAOjJ,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAD1B,CAAC,IAAM,MAAQ,KAAO,MAAQ,KACgC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KACjF2D,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAAEoJ,KAAAA,KAChErD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAQ,CAAC,CACPC,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,iBAI/D,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,yRCrB/ClD,GAAiB,iBACjBsI,GAAWC,GACXrF,GAAOsE,EAAsBxH,GAAKsI,IAElCe,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,IAEZ,OAAmBS,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,sbCL/ClD,GAAiB,iBACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAEA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,WAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MAGM+D,IAAOjJ,EAAAA,GAAAA,KAAe/D,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF1B,CAAC,IAAM,KAAO,IAAM,KAAO,KAEmC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KACjF2D,GAAOsE,EAAsBxH,GAAKsI,QAAUhF,EAAW,CAAEoJ,KAAAA,KAChErD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,MAAMlD,EAAAA,EAAAA,IAAG,kBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CAAEC,MAAMnK,EAAAA,EAAAA,IAAQ6M,GAAM,CAAE1M,IAAK,oBAAqBC,QAAS,oBAM9E,OAAmBgK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC3B/ClD,GAAiB,gBACjBsI,GAAWC,GAEjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAmCvB,EAAAA,EAAAA,IAAKlH,GAAK,SAA7C,iBAAOgL,GAAP,MAAsBC,GAAtB,MACMO,GAAQ,CAAC,IAAM,GAAK,IAAM,IAAM,KAChC/I,IAAYyG,EAAAA,EAAAA,IAAO+B,IAAW3K,EAAAA,EAAAA,IAAauI,EAAAA,EAAAA,IAAM,EAAG,IAAI,SAAAC,GAAC,OAAIpJ,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BiM,GAAO,CAAExL,IAAK,MAAQ8I,MAAKM,EAAAA,IAC1HlG,GAAOsE,EAAsBxH,GAAKsI,GAAU,CACvDtD,OAAQ,CACNvC,UAAAA,MAGE4G,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAO2I,GACPjE,KAAMgE,GACNtB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,WACnD+D,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQlI,OAAOC,aAAYiH,EAAAA,EAAAA,IAAM,EAAG,GAAG/C,KAAI,SAAAgD,GAAC,MAAI,CAACA,EAAG,CAClDc,MAAMlD,EAAAA,EAAAA,IAAG,QAAS,CAAE2D,MAAOvB,IAC3BiB,OAAQ,CAAC,CAAEC,KAAMvH,eAKzB,OAAmBwH,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubChC/ClD,GAAiB,uBACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAEA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACM8C,IAASjB,EAAAA,EAAAA,IAAM7B,GAAa,MAAM5G,EAAAA,EAAAA,IAAQ,IAE1CmB,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNyG,OAAAA,MAIEpC,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,KAAMnB,GAAI,YACVoB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMyB,WAOlB,OAAmBxB,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,wbC/B/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAEMoQ,GAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KACpCC,GAAYlX,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAACA,GAAKpB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BqZ,SAGhGhO,IAAM7H,EAAAA,GAAAA,KAAcrD,EAAAA,EAAAA,KAAKJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFzB,CAAC,IAAK,EAAG,IAAK,IAAK,KAEyC,CAAES,IAAK,MAAQT,EAAAA,GAAAA,MAAAA,KAAkB,YAAa,CACxH6D,IAAK,CAAE1C,KAAK2C,EAAAA,EAAAA,IAAS,eAEjBH,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,QAAO,UACFrD,OAAOC,YAAYqN,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBmY,GAAUnY,UAExE,CAAEkK,IAAAA,KAECvB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTqB,cAAclB,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IAAY7C,EAAAA,EAAAA,IAAG,SACzDqD,OAAO,GAAD,eACDkF,GAAAA,EAAAA,KAAgB,SAAAvO,GAAG,MAAK,CAAEsJ,KAAM6O,GAAUnY,QADzC,CAEJ,CACEsJ,MAAMnK,EAAAA,EAAAA,IAAQ+K,GAAK,CAAE5K,IAAK,oBAIlC,OAAmBiK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bC9B/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAIA,IAAqCtB,EAAAA,EAAAA,IAAKlH,GAAK,oBAA/C,iBAAOsU,GAAP,MAAuBC,GAAvB,MACA,IAA6CrN,EAAAA,EAAAA,IAAKlH,GAAK,wBAAvD,iBAAOwY,GAAP,MAA2BC,GAA3B,MACMC,IAAYpZ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJL,CAAC,GAAM,IAAM,GAAM,IAAM,KAK1CwL,IAAaP,EAAAA,EAAAA,IAAM,SAAU+J,GAAYmE,IACzCzP,IAAU,UAAQ8B,IAClB2D,IAAclE,EAAAA,EAAAA,IAAM,aAAciO,GAAgBC,IAElDxV,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACN+F,WAAAA,GACA9B,WAAAA,GACAyF,YAAAA,MAIErF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOiS,GACPvN,KAAMsN,GACN5K,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,gBACTmD,OAAQ,CACNiP,OAAQ,CACN/O,OAAQ,CAAC,CACPC,KAAMe,IACL,CACDf,KAAMf,SAKb,CACDQ,YAAa,CACXnH,MAAOmW,GACPzR,KAAMwR,GACN9O,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAMlD,EAAAA,EAAAA,IAAG,sBACTmD,OAAQ,CACN8O,WAAY,CACV5O,OAAQ,CAAC,CACPC,KAAM0E,WAOlB,OAAmBzE,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,2bC1D/ClD,GAAiB,aACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAGMsQ,GAAuB,CAAC,IAAM,GAAK,IAAM,IAAM,KAGrD,IAAuC7R,EAAAA,EAAAA,IAAKlH,GAAK,SAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM,aAAc7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL9B,CAAC,GAAK,IAAM,GAAK,KAAM,OAM3C8X,IAAa7M,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC5ExB,IAAY/M,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC3EpB,IAAenN,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC9EvB,IAAWhN,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC1EtB,IAAajN,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC5ErB,IAAYlN,EAAAA,EAAAA,IAAM,OAAQ7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BwZ,KAC3EnF,IAASpJ,EAAAA,EAAAA,IAAM,YAAa7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAV5B,CAAC,IAAK,IAAK,IAAK,IAAK,OAY5C2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACAkN,WAAAA,GACAE,UAAAA,GACAI,aAAAA,GACAH,SAAAA,GACAC,WAAAA,GACAC,UAAAA,GACA9D,OAAAA,MAIEvK,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNgB,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BoB,MAAM,UAACgO,GAAA,EAAD,CAAWhR,GAAG,wBAAwBC,MAAM,gBAClDgD,OAAQ,CACNmP,KAAM,CACJpP,KAAMnB,GAAI,QACVsB,OAAQ,CAAC,CACPC,KAAMqN,IACL,CACDrN,KAAMuN,IACL,CACDvN,KAAM2N,IACL,CACD3N,KAAMwN,IACL,CACDxN,KAAMyN,IACL,CACDzN,KAAM0N,IACL,CACDpN,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,OAGVkZ,UAAW,CACTrP,KAAMnB,GAAI,aACVsB,OAAQ,CAAC,CACPC,KAAM4J,IACL,CACDtJ,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,OAGVmZ,WAAY,CACVtP,KAAMnB,GAAI,cACVsB,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,ubCtF/ClD,GAAiB,gCACjBsI,GAAWC,GACjB,IAAkBlI,EAAAA,EAAAA,IAAM,SAAUL,IAAlC,iBAAOwI,GAAP,MAAWC,GAAX,MAIA,IAAuCvB,EAAAA,EAAAA,IAAKlH,GAAK,YAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAMjL,EAAAA,GAAAA,cAAqB4Z,EAAAA,GAAAA,SAAgB3O,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAH5E,CAAC,IAAM,GAAK,IAAM,IAAM,QAKjC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDpD,SAAU,CACRF,OAAQ,CACNmF,KAAAA,OAKAd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,KAAMnB,GAAI,YACVoP,SAASP,EAAAA,EAAAA,IAAQ/X,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,QAAe,GACrD2F,UAAU,EACVwE,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,4bC3C/ClD,GAAiB,eACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAEM4Q,GAAY,CAAC,IAAM,IAAM,IAAM,IAAM,IAE3C,IAAuClS,EAAAA,EAAAA,IAAKlH,GAAK,mBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6Z,KACpE5J,IAAWhF,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B6Z,KAExElW,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,GACAqF,SAAAA,MAIEnG,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,MAAMlD,EAAAA,EAAAA,IAAG,oBACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDH,KAAMwF,IACL,CACDlF,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,GACPvC,KAAM,YAOlB,OAAmBkK,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,I,icC3C/ClD,GAAiB,cACjBsI,GAAWC,GACjB,IAAalI,EAAAA,EAAAA,IAAM,SAAUL,IAAtBwI,IAAP,gBAIA,IAAuCtB,EAAAA,EAAAA,IAAKlH,GAAK,gBAAjD,iBAAO0I,GAAP,MAAwBC,GAAxB,MACMwB,IAAOK,EAAAA,EAAAA,IAAM,KAAM7B,IAAarJ,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHjC,CAAC,GAAK,IAAM,GAAK,IAAM,MAKhC2D,GAAOsE,EAAsBxH,GAAKsI,GAAU,CAChDtD,OAAQ,CACNmF,KAAAA,MAIEd,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTC,YAAa,CACXnH,MAAOqG,GACP3B,KAAM0B,GACNkB,MAAMlD,EAAAA,EAAAA,IAAG,eACTgD,QAAQC,EAAAA,EAAAA,IAAkBnB,GAAIc,GAAMC,IACpCkB,aAAaC,EAAAA,EAAAA,IAAgBlC,IAC7BqB,OAAQ,CACNc,GAAI,CACFZ,OAAQ,CAAC,CACPC,KAAMG,IACL,CACDG,MAAMxD,EAAAA,EAAAA,IAAI,YACVxE,MAAO,EACPvC,KAAM,YCalB,GA5ByD,CACvDsZ,iBAAAA,GACAC,gBAAAA,GACAC,YAAAA,GACAC,WAAAA,GACAC,oBAAAA,GACAC,gBAAAA,GACAC,cAAAA,GACAC,YAAAA,GACAC,aAAAA,GACAC,cAAAA,GACAC,2BAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,aAAAA,GACAC,aAAAA,GACAC,kBAAAA,GACAC,eAAAA,GACAC,eAAAA,GACAC,cAAAA,GACAC,qBAAAA,GACAC,aAAAA,GACAC,WAAAA,GACAC,WAAAA,GACAC,8BAAAA,GACAC,aAAAA,GACAC,YDJF,IAAmB7Q,EAAAA,GAAYjK,GAAKqJ,GAAOf,GAAUpF,KEnCrD,IAPgD,0CAC3CwM,IACA/C,IACAoF,IACAsD,IACA0F,K","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  equalStr(input.hit.move, \"burst\", input.charEle),\r\n  input.infusion,\r\n  input.team.infusion,\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n      // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_,\r\n          }, {\r\n            text: trm(\"resistance\")\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"members\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"member\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg_ = equal(condPassive, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: burst_dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st('hitOp.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def)\r\nconst charged_dmgInc = prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 5), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: all_dmg_stack\r\n          }, {\r\n            text: trm(\"takeMoreDmg\"),\r\n            value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n            unit: \"%\"\r\n          }]\r\n        })),\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"hitOp.normalOrCharged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { text: sgt(\"duration\"), value: 6, unit: \"s\" }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"milMove\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"takeDmg\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: trm(\"generateShield\")\r\n          }, {\r\n            node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: 45,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"hitOp.normalOrCharged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: def_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp)))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: st('afterDefeatEnemy'),\r\n      header: conditionalHeader(tr, icon, iconAwaken, sgt(\"healing\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm('condName'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk))\r\nconst dmg = equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: st('takeDmg'),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"soul\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmgInc\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: st(\"duration\"),\r\n            value: 12,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(dmg_, { key: \"sheet:dmg\" }) },\r\n      {\r\n        text: sgt(\"cd\"),\r\n        value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n        unit: \"s\"\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"milMove\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"sigilsConsumed\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"greaterPercentHP\", { percent: 90 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: critRate_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states:\r\n        Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n    conditional: { // Stacks - Mistsplitter's Emblem\r\n      value: condNode,\r\n      path: condPath,\r\n      name: trm(\"emblem\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"emblem\")),\r\n      states: Object.fromEntries(\r\n        stacks.map(stack => [stack, {\r\n          name: st(\"stack\", { count: parseInt(stack) }),\r\n          fields: allElements.map(ele => ({\r\n            node: stacks_dmg_[`${ele}_dmg_`]\r\n          }))\r\n        }])\r\n      )\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"onHit\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: def_ }, { text: sgt(\"duration\"), value: 6, unit: \"s\" }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"might\")),\r\n      description: conditionaldesc(tr),\r\n      name: st('afterUse.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: moveSPD_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i =>\r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, constant(66))\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      {\r\n        node: atk\r\n      },\r\n      {\r\n        node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  hit\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        \"oneOrNone\": {\r\n          name: trm(\"opponents.oneOrNone\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n        \"moreThanOne\": {\r\n          name: trm(\"opponents.moreThanOne\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"members\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"member\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterUse.skill\"),\r\n      states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1_ = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2_ = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" })\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1_, atk2_)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1_, { key: \"atk\" })\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"lessPercentHP\", { percent: 50 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk2_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet, conditionalHeader, conditionaldesc } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n        name: `${c}s`,\r\n        fields: [{\r\n          node: all_dmg_\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n    ],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_arrow_\r\n        }, {\r\n          node: charged_dmg_arrow_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: 's'\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i)) \r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i)) \r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: atkSPD_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: sum(eleMas, eleMas2),\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"milMove\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: eleMas2\r\n          }, {\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_passive\r\n          }, {\r\n            node: charged_passive\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst [tr] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skill\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }]\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, prod, naught, constant, percent, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", constant(66))\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hitOp.cryo\"),\r\n      states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, percent, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_atk_increase_s = [.46, .52, .58, .64, .70] // Increased by 10% to counteract the decrease\r\nconst charged_atk_increase_s = [.46, .52, .58, .64, .70]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_atk_increase_s), { key: \"normal_dmg_\" })\r\nconst charged_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_atk_increase_s), { key: \"charged_dmg_\" })\r\nconst normal_atk_decrease = percent(.1, { key: \"normal_dmg_\" })\r\nconst charged_atk_decrease = percent(.1, { key: \"charged_dmg_\" })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_atk_increase, normal_atk_decrease),\r\n    charged_dmg_: sum(charged_atk_increase, normal_atk_decrease)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_atk_decrease\r\n    }, {\r\n      node: charged_atk_decrease\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_atk_increase\r\n          }, {\r\n            node: charged_atk_increase\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 3), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.skill\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport WindblumeOde from './WindblumeOde'\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      name: st(\"hitOp.normal\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condCharged,\r\n      path: condChargedPath,\r\n      name: st(\"hitOp.charged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\r\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\r\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\r\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\r\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\r\n\r\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, lookup(condPassive, { \"anemo\": eleDmg, \"cryo\": eleDmg, \"geo\": eleDmg, \"hydro\": eleDmg, \"pyro\": eleDmg }, naught))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: <Translate ns=\"weapon_HakushinRing\" key18=\"afterElectroReaction\" />,\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        anemo: {\r\n          name: <ColorText color=\"anemo\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        cryo: {\r\n          name: <ColorText color=\"cryo\">{sgt(\"reaction.Superconduct\")}</ColorText>,\r\n          fields: [{\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        geo: {\r\n          name: <ColorText color=\"geo\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n          fields: [{\r\n            node: geo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        pyro: {\r\n          name: <ColorText color=\"pyro\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        hydro: {\r\n          name: <ColorText color=\"hydro\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n          fields: [{\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterUse.skill\"),\r\n      states:\r\n        Object.fromEntries(totems.map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: skill_dmg_s[i - 1]\r\n          },\r\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.12, 0.15, 0.18, 0.21, 0.24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s)\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 2), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }))\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterUse.skill\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        normal: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            node: burst_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, { \r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skillOrBurst\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    anemo_dmg_,\r\n    cryo_dmg_,\r\n    electro_dmg_,\r\n    geo_dmg_,\r\n    hydro_dmg_,\r\n    pyro_dmg_,\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\r\n      states: {\r\n        aria: {\r\n          name: trm(\"aria\"),\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            node: geo_dmg_\r\n          }, {\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        interlude: {\r\n          name: trm(\"interlude\"),\r\n          fields: [{\r\n            node: eleMas\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        recitative: {\r\n          name: trm(\"recitative\"),\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_ = equal(input.activeCharKey, target.charKey, equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm('condName'),\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterSprint\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","unit","key","variant","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","reaction","transformativeReactions","multi","ele","variants","asConst","swirl","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","Object","fromEntries","absorbableEle","e","percent","overloaded","electrocharged","superconduct","charCurves","objectMap","_charCurves","value","values","commonBasic","critRate_","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","undefined","customShieldNode","shieldNode","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","st","strKey","ns","key18","sgt","condReadNode","path","customStringRead","cond","subKey","typeKey","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","tr","trm","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","lookup","min","naught","sheet","icon","iconAwaken","document","conditional","header","conditionalHeader","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","all_dmg_","equal","description","conditionaldesc","on","dmg","fieldsHeader","charged_dmg_","skill_dmg_","condStackPath","condStack","atkInc","critInc","dmg_","def_","normal_dmgInc","charged_dmgInc","crit_","cdRed_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","claymore","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","normal_dmg_","plunging_dmg_","eleDmgDealtStack","stacks","passiveRefine","stacksRefine","passive_dmg_","allElements","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","moveSPD_","autoSrc","sword","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","dmg_Nodes","matchFull","atkDefInc","enerRech_","dmgInc","atk1_","atk2_","burst_critRate_","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","atk_s","atkSPD_s","eleMas","eleMas2","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","normal_atk_increase","charged_atk_increase","normal_atk_decrease","charged_atk_decrease","refinementVals","bow","AlleyHunter","AmosBow","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FavoniusWarbow","Hamayumi","HuntersBow","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","WindblumeOde","condChargedPath","condCharged","heal_","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","electro_dmg_","Translate","canShow","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","catalyst"],"sourceRoot":""}