{"version":3,"file":"static/js/320.35e37ffd.chunk.js","mappings":"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","sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/util.ts","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      } as IConditional\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","// import Akuoumaru from './Akuoumaru'\r\n// import BlackcliffSlasher from './BlackcliffSlasher'\r\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\r\n// import DebateClub from './DebateClub'\r\n// import FavoniusGreatsword from './FavoniusGreatsword'\r\n// import FerrousShadow from './FerrousShadow'\r\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\r\n// import LithicBlade from './LithicBlade'\r\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\r\n// import OldMercsPal from './OldMercsPal'\r\n// import PrototypeArchaic from './PrototypeArchaic'\r\n// import Rainslasher from './Rainslasher'\r\n// import RedhornStonethresher from './RedhornStonethresher'\r\n// import RoyalGreatsword from './RoyalGreatsword'\r\n// import SacrificialGreatsword from './SacrificialGreatsword'\r\n// import SerpentSpine from './SerpentSpine'\r\n// import SkyriderGreatsword from './SkyriderGreatsword'\r\n// import SkywardPride from './SkywardPride'\r\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\r\n// import SongOfBrokenPines from './SongOfBrokenPines'\r\n// import TheBell from './TheBell'\r\n// import TheUnforged from './TheUnforged'\r\n// import WasterGreatsword from './WasterGreatsword'\r\n// import Whiteblind from './Whiteblind'\r\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\r\n// import WolfsGravestone from './WolfsGravestone'\r\nconst claymore = {\r\n  // Akuoumaru,\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  // DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  // KatsuragikiriNagamasa,\r\n  // LithicBlade,\r\n  // LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  // PrototypeArchaic,\r\n  // Rainslasher,\r\n  // RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  // SacrificialGreatsword,\r\n  // SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  // SkywardPride,\r\n  // SnowTombedStarsilver,\r\n  // SongOfBrokenPines,\r\n  // TheBell,\r\n  // TheUnforged,\r\n  // WasterGreatsword,\r\n  // Whiteblind,\r\n  // WhiteIronGreatsword,\r\n  // WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { MainStatKey, SubstatKey } from \"../../Types/artifact\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { match, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { sgt } from '../../../Characters/SheetUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst atk_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst plunging_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\n\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: {\r\n        title: tr(`passiveName`),\r\n        icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? icon : iconAwaken} />,\r\n      },\r\n      description: data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`),\r\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import AmenomaKageuchi from './AmenomaKageuchi'\r\n// import AquilaFavonia from './AquilaFavonia'\r\n// import BlackcliffLongsword from './BlackcliffLongsword'\r\n// import CinnabarSpindle from './CinnabarSpindle'\r\n// import CoolSteel from './CoolSteel'\r\n// import DarkIronSword from './DarkIronSword'\r\nimport DullBlade from './DullBlade'\r\n// import FavoniusSword from './FavoniusSword'\r\n// import FesteringDesire from './FesteringDesire'\r\n// import FilletBlade from './FilletBlade'\r\nimport FreedomSworn from './FreedomSworn'\r\n// import HarbingerOfDawn from './HarbingerOfDawn'\r\n// import IronSting from './IronSting'\r\n// import LionsRoar from './LionsRoar'\r\n// import MistsplitterReforged from './MistsplitterReforged'\r\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\r\n// import PrototypeRancour from './PrototypeRancour'\r\n// import RoyalLongsword from './RoyalLongsword'\r\n// import SacrificialSword from './SacrificialSword'\r\n// import SilverSword from './SilverSword'\r\n// import SkyriderSword from './SkyriderSword'\r\n// import SkywardBlade from './SkywardBlade'\r\n// import SummitShaper from './SummitShaper'\r\n// import SwordOfDescension from './SwordOfDescension'\r\n// import TheAlleyFlash from './TheAlleyFlash'\r\n// import TheBlackSword from './TheBlackSword'\r\n// import TheFlute from './TheFlute'\r\n// import TravelersHandySword from './TravelersHandySword'\r\nconst sword = {\r\n  // AmenomaKageuchi,\r\n  // AquilaFavonia,\r\n  // BlackcliffLongsword,\r\n  // CinnabarSpindle,\r\n  // CoolSteel,\r\n  // DarkIronSword,\r\n  DullBlade,\r\n  // FavoniusSword,\r\n  // FesteringDesire,\r\n  // FilletBlade,\r\n  FreedomSworn,\r\n  // HarbingerOfDawn,\r\n  // IronSting,\r\n  // LionsRoar,\r\n  // MistsplitterReforged,\r\n  // PrimordialJadeCutter,\r\n  // PrototypeRancour,\r\n  // RoyalLongsword,\r\n  // SacrificialSword,\r\n  // SilverSword,\r\n  // SkyriderSword,\r\n  // SkywardBlade,\r\n  // SummitShaper,\r\n  // SwordOfDescension,\r\n  // TheAlleyFlash,\r\n  // TheBlackSword,\r\n  // TheFlute,\r\n  // TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: `Stack ${i}`,\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import BeginnersProtector from './BeginnersProtector'\r\n// import BlackcliffPole from './BlackcliffPole'\r\n// import BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\n// import CrescentPike from './CrescentPike'\r\n// import Deathmatch from './Deathmatch'\r\n// import DragonsBane from './DragonsBane'\r\n// import DragonspineSpear from './DragonspineSpear'\r\n// import EngulfingLightning from './EngulfingLightning'\r\n// import FavoniusLance from './FavoniusLance'\r\n// import Halberd from './Halberd'\r\n// import IronPoint from './IronPoint'\r\n// import KitainCrossSpear from './KitainCrossSpear'\r\n// import LithicSpear from './LithicSpear'\r\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\n// import PrototypeStarglitter from './PrototypeStarglitter'\r\n// import RoyalSpear from './RoyalSpear'\r\n// import SkywardSpine from './SkywardSpine'\r\n// import StaffOfHoma from './StaffOfHoma'\r\n// import TheCatch from './TheCatch'\r\n// import VortexVanquisher from './VortexVanquisher'\r\n// import WavebreakersFin from './WavebreakersFin'\r\n// import WhiteTassel from './WhiteTassel'\r\nconst polearm = {\r\n  BeginnersProtector,\r\n  // BlackcliffPole,\r\n  // BlackTassel,\r\n  CalamityQueller,\r\n  // CrescentPike,\r\n  // Deathmatch,\r\n  // DragonsBane,\r\n  // DragonspineSpear,\r\n  // EngulfingLightning,\r\n  // FavoniusLance,\r\n  // Halberd,\r\n  // IronPoint,\r\n  // KitainCrossSpear,\r\n  // LithicSpear,\r\n  // PrimordialJadeWingedSpear,\r\n  // PrototypeStarglitter,\r\n  // RoyalSpear,\r\n  // SkywardSpine,\r\n  // StaffOfHoma,\r\n  // TheCatch,\r\n  // VortexVanquisher,\r\n  // WavebreakersFin,\r\n  // WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","// import AlleyHunter from './AlleyHunter'\r\n// import AmosBow from './AmosBow'\r\n// import BlackcliffWarbow from './BlackcliffWarbow'\r\n// import CompoundBow from './CompoundBow'\r\n// import ElegyForTheEnd from './ElegyForTheEnd'\r\n// import FavoniusWarbow from './FavoniusWarbow'\r\n// import Hamayumi from './Hamayumi'\r\n// import HuntersBow from './HuntersBow'\r\n// import Messenger from './Messenger'\r\n// import MitternachtsWaltz from './MitternachtsWaltz'\r\n// import MouunsMoon from './MouunsMoon'\r\n// import PolarStar from './PolarStar'\r\n// import Predator from './Predator'\r\n// import PrototypeCrescent from './PrototypeCrescent'\r\n// import RavenBow from './RavenBow'\r\n// import RecurveBow from './RecurveBow'\r\n// import RoyalBow from './RoyalBow'\r\n// import Rust from './Rust'\r\n// import SacrificialBow from './SacrificialBow'\r\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\r\n// import SharpshootersOath from './SharpshootersOath'\r\n// import SkywardHarp from './SkywardHarp'\r\n// import Slingshot from './Slingshot'\r\n// import TheStringless from './TheStringless'\r\n// import TheViridescentHunt from './TheViridescentHunt'\r\n// import ThunderingPulse from './ThunderingPulse'\r\n// import WindblumeOde from './WindblumeOde'\r\nconst bow = {\r\n  // AlleyHunter,\r\n  // AmosBow,\r\n  // BlackcliffWarbow,\r\n  // CompoundBow,\r\n  // ElegyForTheEnd,\r\n  // FavoniusWarbow,\r\n  // Hamayumi,\r\n  // HuntersBow,\r\n  // Messenger,\r\n  // MitternachtsWaltz,\r\n  // MouunsMoon,\r\n  // PolarStar,\r\n  // Predator,\r\n  // PrototypeCrescent,\r\n  // RavenBow,\r\n  // RecurveBow,\r\n  // RoyalBow,\r\n  // Rust,\r\n  // SacrificialBow,\r\n  // SeasonedHuntersBow,\r\n  // SharpshootersOath,\r\n  // SkywardHarp,\r\n  // Slingshot,\r\n  // TheStringless,\r\n  // TheViridescentHunt,\r\n  // ThunderingPulse,\r\n  // WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import type { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\n\r\nconst key = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { normal_dmgInc, heal_ }\r\n}, { normal_dmgInc })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: <Translate ns={`\"weapon_${key}\"`} key18=\"name\" />,\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import ApprenticesNotes from './ApprenticesNotes'\r\n// import BlackcliffAgate from './BlackcliffAgate'\r\n// import DodocoTales from './DodocoTales'\r\n// import EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\n// import EyeOfPerception from './EyeOfPerception'\r\n// import FavoniusCodex from './FavoniusCodex'\r\n// import Frostbearer from './Frostbearer'\r\n// import HakushinRing from './HakushinRing'\r\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\n// import MagicGuide from './MagicGuide'\r\n// import MappaMare from './MappaMare'\r\n// import MemoryOfDust from './MemoryOfDust'\r\n// import OtherworldlyStory from './OtherworldlyStory'\r\n// import PocketGrimoire from './PocketGrimoire'\r\n// import PrototypeAmber from './PrototypeAmber'\r\n// import RoyalGrimoire from './RoyalGrimoire'\r\n// import SacrificialFragments from './SacrificialFragments'\r\n// import SkywardAtlas from './SkywardAtlas'\r\n// import SolarPearl from './SolarPearl'\r\n// import TheWidsith from './TheWidsith'\r\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\n// import TwinNephrite from './TwinNephrite'\r\n// import WineAndSong from './WineAndSong'\r\nconst catalyst = {\r\n  // ApprenticesNotes,\r\n  // BlackcliffAgate,\r\n  // DodocoTales,\r\n  // EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  // EyeOfPerception,\r\n  // FavoniusCodex,\r\n  // Frostbearer,\r\n  // HakushinRing,\r\n  // LostPrayerToTheSacredWinds,\r\n  // MagicGuide,\r\n  // MappaMare,\r\n  // MemoryOfDust,\r\n  // OtherworldlyStory,\r\n  // PocketGrimoire,\r\n  // PrototypeAmber,\r\n  // RoyalGrimoire,\r\n  // SacrificialFragments,\r\n  // SkywardAtlas,\r\n  // SolarPearl,\r\n  // TheWidsith,\r\n  // ThrillingTalesOfDragonSlayers,\r\n  // TwinNephrite,\r\n  // WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","values","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","data","sheet","icon","iconAwaken","document","WeaponSheet","tr","autoSrc","condPassivePath","condPassive","atk_","match","normal_dmg_","charged_dmg_","plunging_dmg_","dmg_","addProps","NaN","all_dmg_","teamBuff","fields","node","conditional","header","title","ImgIcon","size","sx","m","src","get","description","name","states","on","text","unit","DullBlade","FreedomSworn","condStackPath","condStack","dmg_Nodes","allElements","e","atkInc","matchFull","lookup","objectKeyMap","range","i","BeginnersProtector","CalamityQueller","normal_dmgInc","heal_","EverlastingMoonglow","sword","claymore","polearm","bow","catalyst"],"sourceRoot":""}