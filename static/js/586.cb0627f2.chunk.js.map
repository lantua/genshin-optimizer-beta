{"version":3,"file":"static/js/586.cb0627f2.chunk.js","mappings":"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","sources":["Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/index.ts","Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx"],"sourcesContent":["import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { ArtifactSetKey } from \"../../Types/consts\";\r\n\r\nexport function dataObjForArtifactSheet(\r\n  key: ArtifactSetKey,\r\n  data: Data = {},\r\n  displayArtifact: DisplaySub = {},\r\n): Data {\r\n  return mergeData([inferInfoMut(data, key), {\r\n    display: {\r\n      [`artifact:${key}`]: displayArtifact\r\n    },\r\n  }])\r\n}\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, percent, prod, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"Adventurer\"\r\nconst set2 = threshold_add(input.artSet.Adventurer, 2, 1000)\r\nconst heal = threshold_add(input.artSet.Adventurer, 4,\r\n  prod(percent(0.3), input.total.hp))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hp: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Adventurer\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { min, percent, prod, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\r\n\r\nconst set2 = threshold_add(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\r\n\r\nconst burstBonus = threshold_add(input.artSet.EmblemOfSeveredFate, 4,\r\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2,\r\n    burst_dmg_: burstBonus,\r\n  },\r\n}, {\r\n  burstBonus,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: burstBonus,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport ImgIcon from '../../../Components/Image/ImgIcon'\r\nimport SqBadge from '../../../Components/SqBadge'\r\nimport { sgt } from '../../Characters/SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { customRead, match, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"NoblesseOblige\"\r\n\r\nconst tr = (strKey: string) => <Translate ns={`artifact_${key}_gen`} key18={strKey} />\r\n\r\nconst set2 = threshold_add(input.artSet.NoblesseOblige, 2, percent(0.2))\r\n\r\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\r\nconst set4TallyWrite = threshold_add(input.artSet.NoblesseOblige, 4, match(condSet4, \"on\", 1))\r\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\r\nconst set4 = threshold_add(set4TallyRead, 1, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    burst_dmg_: set2,\r\n    atk_: set4,\r\n  },\r\n  teamBuff: {\r\n    tally: {\r\n      NO4: set4TallyWrite\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Noblesse Oblige\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{\r\n          node: set2,\r\n        }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condSet4,\r\n          path: condSet4Path,\r\n          header: {\r\n            title: tr(\"setName\"),\r\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\r\n            action: <SqBadge color=\"success\">4-set</SqBadge>\r\n          },\r\n          description: tr(`setEffects.4`),\r\n          name: <Translate ns=\"artifact_NoblesseOblige\" key18=\"condName\" />,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 12,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport ImgIcon from '../../../Components/Image/ImgIcon'\r\nimport SqBadge from '../../../Components/SqBadge'\r\nimport { sgt } from '../../Characters/SheetUtil'\r\nimport { absorbableEle } from '../../Characters/dataUtil'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { Data } from '../../../Formula/type'\r\nimport { match, percent, threshold_add } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport elementalData from '../../ElementalData'\r\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\r\nimport { condReadNode, st, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\r\nconst [tr] = trans(\"artifact\", key)\r\n\r\nconst anemo_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 2, percent(0.15))\r\nconst swirl_dmg_ = threshold_add(input.artSet.ViridescentVenerer, 4, percent(0.6))\r\n\r\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\r\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\r\n\r\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\r\nthreshold_add(input.artSet.ViridescentVenerer, 4,\r\n  match(\"swirl\", condSwirls[e], percent(-0.4))\r\n)])\r\n\r\nconst data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    anemo_dmg_,\r\n    swirl_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...condSwirlNodes\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{ node: anemo_dmg_ }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{ node: swirl_dmg_ }],\r\n      },\r\n      ...absorbableEle.map(eleKey => ({\r\n        conditional: { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          header: {\r\n            title: tr(\"setName\"),\r\n            icon: <ImgIcon size={2} sx={{ m: -1 }} src={icons.flower} />,\r\n            action: <SqBadge color=\"success\">4-set</SqBadge>\r\n          },\r\n          description: tr(`setEffects.4`),\r\n          name: st(\"eleSwirled\"),\r\n          states: {\r\n            swirl: {\r\n              name: <ColorText color={eleKey}>{elementalData[eleKey].name}</ColorText>,\r\n              fields: [{\r\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 10,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        },\r\n      }))\r\n      ]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import { ArtifactSetKey } from '../../Types/consts'\r\nimport { ArtifactSheet } from './ArtifactSheet'\r\n\r\nimport Adventurer from './Adventurer'\r\n// import ArchaicPetra from './ArchaicPetra'\r\n// import Berserker from './Berserker'\r\n// import BlizzardStrayer from './BlizzardStrayer'\r\n// import BloodstainedChivalry from './BloodstainedChivalry'\r\n// import BraveHeart from './BraveHeart'\r\n// import CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\r\n// import DefendersWill from './DefendersWill'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\r\n// import Gambler from './Gambler'\r\n// import GladiatorsFinale from './GladiatorsFinale'\r\n// import HeartOfDepth from './HeartOfDepth'\r\n// import HuskOfOpulentDreams from './HuskOfOpulentDreams'\r\n// import Instructor from './Instructor'\r\n// import Lavawalker from './Lavawalker'\r\n// import LuckyDog from './LuckyDog'\r\n// import MaidenBeloved from './MaidenBeloved'\r\n// import MartialArtist from './MartialArtist'\r\nimport NoblesseOblige from './NoblesseOblige'\r\n// import OceanHuedClam from './OceanHuedClam'\r\n// import PaleFlame from './PaleFlame'\r\n// import PrayersForDestiny from './PrayersForDestiny'\r\n// import PrayersForIllumination from './PrayersForIllumination'\r\n// import PrayersForWisdom from './PrayersForWisdom'\r\n// import PrayersToSpringtime from './PrayersToSpringtime'\r\n// import ResolutionOfSojourner from './ResolutionOfSojourner'\r\n// import RetracingBolide from './RetracingBolide'\r\n// import Scholar from './Scholar'\r\n// import ShimenawasReminiscence from './ShimenawasReminiscence'\r\n// import TenacityOfTheMillelith from './TenacityOfTheMillelith'\r\n// import TheExile from './TheExile'\r\n// import ThunderingFury from './ThunderingFury'\r\n// import Thundersoother from './Thundersoother'\r\n// import TinyMiracle from './TinyMiracle'\r\n// import TravelingDoctor from './TravelingDoctor'\r\nimport ViridescentVenerer from './ViridescentVenerer'\r\n// import WanderersTroupe from './WanderersTroupe'\r\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\r\n  Adventurer,\r\n  // ArchaicPetra,\r\n  // Berserker,\r\n  // BlizzardStrayer,\r\n  // BloodstainedChivalry,\r\n  // BraveHeart,\r\n  // CrimsonWitchOfFlames,\r\n  // DefendersWill,\r\n  EmblemOfSeveredFate,\r\n  // Gambler,\r\n  // GladiatorsFinale,\r\n  // HeartOfDepth,\r\n  // HuskOfOpulentDreams,\r\n  // Instructor,\r\n  // Lavawalker,\r\n  // LuckyDog,\r\n  // MaidenBeloved,\r\n  // MartialArtist,\r\n  NoblesseOblige,\r\n  // OceanHuedClam,\r\n  // PaleFlame,\r\n  // PrayersForDestiny,\r\n  // PrayersForIllumination,\r\n  // PrayersForWisdom,\r\n  // PrayersToSpringtime,\r\n  // ResolutionOfSojourner,\r\n  // RetracingBolide,\r\n  // Scholar,\r\n  // ShimenawasReminiscence,\r\n  // TenacityOfTheMillelith,\r\n  // TheExile,\r\n  // ThunderingFury,\r\n  // Thundersoother,\r\n  // TinyMiracle,\r\n  // TravelingDoctor,\r\n  ViridescentVenerer,\r\n  // WanderersTroupe,\r\n} as const\r\n\r\nexport default artifacts\r\n","/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      } as IConditional\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, prod, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\nexport function singleDmgNode(base: MainStatKey, multiplier: number, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(input.total[base], multiplier,),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\n\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\r\n  ]\r\n}\r\n"],"names":["flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","key","data","displayArtifact","mergeData","inferInfoMut","display","set2","threshold_add","input","heal","prod","percent","premod","hp","sheet","name","rarity","icons","setEffects","document","fields","node","infoMut","variant","ArtifactSheet","burstBonus","min","enerRech_","burst_dmg_","tr","strKey","Translate","ns","key18","cond","condSet4Path","condSet4","set4TallyWrite","match","set4TallyRead","customRead","set4","atk_","teamBuff","tally","NO4","conditional","value","path","header","title","icon","ImgIcon","size","sx","m","src","action","SqBadge","color","description","states","on","text","sgt","unit","trans","anemo_dmg_","swirl_dmg_","condSwirlPaths","objectKeyMap","absorbableEle","e","condSwirls","condReadNode","condSwirlNodes","objectKeyValueMap","eleKey","st","swirl","elementalData","Adventurer","EmblemOfSeveredFate","NoblesseOblige","ViridescentVenerer","Stat","this","Error","printStat","statKey","stats","charCurves","objectMap","_charCurves","Object","values","commonBasic","allSubstats","getTalentType","move","singleDmgNode","base","multiplier","additional","hit","constant","dmgNode","lvlMultiplier","talentType","subscript","dataObjForCharacterSheet","element","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","charEle","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","sum","prefix","asConst","endsWith","info","slice","special","allMainStatKeys","critRate_","customStringRead","subKey","typeKey"],"sourceRoot":""}