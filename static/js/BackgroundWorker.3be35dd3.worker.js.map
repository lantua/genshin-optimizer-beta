{"version":3,"file":"static/js/BackgroundWorker.3be35dd3.worker.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime.js","../webpack/bootstrap","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","Util/Util.ts","Formula/utils.ts","Formula/internal.ts","Formula/optimization.ts","PageBuild/background.ts","Types/consts.ts","PageBuild/common.ts","PageBuild/BackgroundWorker.ts"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\nexport function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n}\nexport function getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n/**\n * Assumes that the object entries are all primitives + objects\n * shallow copy the object,\n * deep copy the\n * @param obj\n * @returns\n */\nexport function deepClone<T>(obj: T): T {\n  if (!obj) return obj\n  if (!Object.keys(obj).length) return {} as T\n  const ret = { ...obj }\n  Object.entries(obj).forEach(([k, v]: any) => {\n    if (typeof v !== \"object\") return\n    ret[k] = JSON.parse(JSON.stringify(v))\n  })\n  return ret\n}\n\nexport const clamp = (val, low, high) => {\n  if (val < low) return low;\n  if (val > high) return high;\n  return val\n}\nexport const getArrLastElement = (arr) =>\n  arr.length ? arr[arr.length - 1] : null\n\nexport const clamp01 = (val) => clamp(val, 0, 1)\nexport const clampPercent = (val) => clamp(val, 0, 100)\n\n//use to pretty print timestamps, or anything really.\nexport function strPadLeft(string, pad, length) {\n  return (new Array(length + 1).join(pad) + string).slice(-length);\n}\n\n//fuzzy compare strings. longer the distance, the higher the mismatch.\nexport function hammingDistance(str1, str2) {\n  var dist = 0;\n  str1 = str1.toLowerCase();\n  str2 = str2.toLowerCase();\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\n    let match = true\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\n      match = false\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\n      match = true\n    if (!match) dist++\n  }\n  return dist;\n}\n\n//multiplies every numerical value in the obj by a multiplier.\nexport function objMultiplication(obj, multi) {\n  if (multi === 1) return obj\n  Object.keys(obj).forEach((prop: any) => {\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\n  })\n  return obj\n}\n\n//assign obj.[keys...] = value\nexport function layeredAssignment(obj, keys: readonly string[], value) {\n  keys.reduce((accu, key, i, arr) => {\n    if (i === arr.length - 1) return (accu[key] = value)\n    if (!accu[key]) accu[key] = {}\n    return accu[key]\n  }, obj)\n  return obj\n}\n//get the value in a nested object, giving array of path\nexport function objPathValue(obj: object | undefined, keys: readonly string[]): any {\n  if (!obj || !keys) return undefined;\n  !Array.isArray(keys) && console.error(keys)\n  return keys.reduce((a, k) => a?.[k], obj)\n}\n//delete the value denoted by the path. Will also delete empty objects as well.\nexport function deletePropPath(obj, path) {\n  const tempPath = [...path]\n  const lastKey = tempPath.pop()\n  const objPathed = objPathValue(obj, tempPath)\n  delete objPathed?.[lastKey];\n}\n\nexport function objClearEmpties(o) {\n  for (const k in o) {\n    if (typeof o[k] !== \"object\") continue\n    objClearEmpties(o[k])\n    if (!Object.keys(o[k]).length) delete o[k];\n  }\n}\nexport function crawlObject(obj, keys, validate, cb) {\n  if (validate(obj)) cb(obj, keys)\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\n}\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\n\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\n  return typeof value === \"function\" ? (value as any)(arg) : value\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyMap<K extends string | number, V>(keys: readonly K[], map: (key: K, i: number) => V): StrictDict<`${K}`, V> {\n  return Object.fromEntries(keys.map((k, i) => [k, map(k, i)])) as any\n}\n//fromEntries doesn't result in StrictDict, this is just a utility wrapper.\nexport function objectKeyValueMap<T, K extends string | number, V>(items: readonly T[], map: (item: T) => [K, V]): StrictDict<`${K}`, V> {\n  return Object.fromEntries(items.map(t => map(t))) as any\n}\n\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>>\nexport function objectMap<K extends string, V, T>(obj: Record<K, V>, fn: (value: V, key: `${K}`, index: number) => T): Record<K, T>\nexport function objectMap<K extends string, V, T>(obj: Partial<Record<K, V>>, fn: (value: V, key: `${K}`, index: number) => T): Partial<Record<K, T>> {\n  return Object.fromEntries(Object.entries(obj).map(\n    ([k, v], i) => [k, fn(v, k, i)]\n  )) as any\n}\n\nconst rangeGen = function* (from: number, to: number): Iterable<number> {\n  for (let i = from; i <= to; i++) yield i;\n};\n\nexport function range(from: number, to: number): number[] {\n  return [...rangeGen(from, to)]\n}\n\nexport function assertUnreachable(value: never): never {\n  throw new Error(`Should not reach this with value ${value}`)\n}\n","\nimport { objectKeyMap } from \"../Util/Util\"\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\n\ntype Num = number | NumNode\ntype Str = string | undefined | StrNode\ntype Any = Num | Str\n\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\nexport const unit = percent(1), naught = percent(0)\n\nexport function constant(value: number, info?: Info): NumNode\nexport function constant(value: string | undefined, info?: Info): StrNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\n  return { operation: \"const\", operands: [], value, info }\n}\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\nexport function percent(value: number, info?: Info): NumNode {\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\n  return constant(value, { key: \"_\", ...info })\n}\n/** Inject `info` to the node in-place */\nexport function infoMut(node: NumNode, info: Info): NumNode\nexport function infoMut(node: StrNode, info: Info): StrNode\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\n  if (info) node.info = { ...node.info, ...info }\n  return node\n}\n\n/** `table[string] ?? defaultNode` */\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\n  return { operation: \"lookup\", operands, table, info }\n}\n\n/** min( x1, x2, ... ) */\nexport function min(...values: Num[]): NumNode {\n  return { operation: \"min\", operands: intoOps(values) }\n}\n/** max( x1, x2, ... ) */\nexport function max(...values: Num[]): NumNode {\n  return { operation: \"max\", operands: intoOps(values) }\n}\n/** x1 + x2 + ... */\nexport function sum(...values: Num[]): NumNode {\n  return { operation: \"add\", operands: intoOps(values) }\n}\n/** x1 * x2 * ... */\nexport function prod(...values: Num[]): NumNode {\n  return { operation: \"mul\", operands: intoOps(values) }\n}\n/** x / (x + c) */\nexport function frac(x: Num, c: Num): NumNode {\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\n}\nexport function res(base: Num): NumNode {\n  return { operation: \"res\", operands: intoOps([base]) }\n}\n\n/** v1 == v2 ? pass : 0 */\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\n}\n/** v1 == v2 ? pass : `undefined` */\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\n}\n/** v1 != v2 ? pass : 0 */\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\n}\n/** v1 >= v2 ? pass : 0 */\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 >= v2 ? pass : `undefined` */\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\n}\n/** v1 < v2 ? pass : 0 */\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\n}\n\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\n  if (nodeList.operation) {\n    if (nodeList.operation !== \"read\")\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\n    return { ...nodeList, path: prefix }\n  } else {\n    return objectKeyMap(Object.keys(nodeList), key =>\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\n  }\n}\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\n  return { operation: \"data\", operands: [base], data }\n}\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\n  return { operation: \"data\", operands: [base], data, reset: true, info }\n}\n\n\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\n}\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\n  return { operation: \"read\", operands: [], path, type: \"string\" }\n}\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\n}\n/**\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\n */\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\n}\nexport function stringPrio(...operands: Str[]): StrNode {\n  return { operation: \"prio\", operands: intoOps(operands) }\n}\n/** list[index] */\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\n  return { operation: \"subscript\", operands: [index], list, info }\n}\n\nfunction intoOps(values: Num[]): NumNode[]\nfunction intoOps(values: Str[]): StrNode[]\nfunction intoOps(values: Any[]): AnyNode[]\nfunction intoOps(values: Any[]): AnyNode[] {\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\n}\nfunction intoV(value: Num): NumNode\nfunction intoV(value: Str): StrNode\nfunction intoV(value: Num | Str): NumNode | StrNode\nfunction intoV(value: Any): AnyNode {\n  return (typeof value !== \"object\") ? constant(value) : value\n}\n\ntype _NodeList = {\n  [key: string]: NodeList\n} & {\n  operation?: never\n}\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\n\n/*\n * Deprecated\n */\n\n/**\n * value >= threshold ? value : emptyValue\n * @deprecated Use `greaterEq`, `lessEq`, or `greaterEqStr` instead\n */\nexport function threshold(value: Num, threshold: Num, pass: Str, fail: Str, info?: Info): StrNode\nexport function threshold(value: Num, threshold: Num, pass: Num, fail: Num, info?: Info): NumNode\nexport function threshold(value: Num, threshold: Num, pass: Num | Str, fail: Num | Str, info?: Info): NumNode | StrNode {\n  const operands = [intoV(value), intoV(threshold), intoV(pass), intoV(fail)] as any\n  return { operation: \"threshold\", operands, info }\n}\n/**\n * value >= threshold ? addition : 0\n * @deprecated Use `greaterEq` or `lessEq` instead\n */\nexport function threshold_add(value: Num, thres: Num, addition: Num, info?: Info): NumNode {\n  return threshold(value, thres, addition, 0, info)\n}\n\n/**\n * `v1` === `v2` ? `match` : 0\n * @deprecated Use `equal` instead\n */\nexport function match(v1: Str, v2: Str, match: Num, info?: Info): NumNode {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(0)], info, emptyOn: \"unmatch\" }\n}\n/**\n * `v1` === `v2` ? 0 : `unmatch`\n * @deprecated Use `unequal` instead\n */\nexport function unmatch(v1: Str, v2: Str, unmatch: Num, info?: Info): NumNode {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(unmatch)], info, emptyOn: \"match\" }\n}\n/**\n * `v1` === `v2` ? `match` : `unmatch`\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\n */\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\n}\n","import { AnyNode, NumNode, StrNode } from \"./type\"\nimport { constant } from \"./utils\"\n\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\n\n  function traverse(formula: (NumNode | StrNode)) {\n    if (visited.has(formula)) return\n\n    if (visiting.has(formula)) {\n      console.error(\"Found cyclical dependency during formula traversal\")\n      return\n    }\n    visiting.add(formula)\n\n    topDown(formula)\n\n    formula.operands.forEach(traverse)\n\n    bottomUp(formula)\n\n    visiting.delete(formula)\n    visited.add(formula)\n  }\n\n  formulas.forEach(traverse)\n}\n\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\n  const visiting = new Set<(NumNode | StrNode)>()\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\n\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    let topDown = topDownMapped.get(formula)\n    if (topDown) return topDown\n    topDown = topDownMap(formula)\n\n    let bottomUp = bottomUpMapped.get(topDown)\n    if (bottomUp) return bottomUp\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n    visiting.add(topDown)\n\n    bottomUp = bottomUpMap(traverse(topDown), formula)\n\n    visiting.delete(topDown)\n\n    topDownMapped.set(formula, bottomUp)\n    bottomUpMapped.set(topDown, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\n    const operands = formula.operands.map(check)\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\n  }\n\n  const result = formulas.map(check)\n  return arrayEqual(result, formulas) ? formulas : result\n}\n\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\n  const visiting = new Set<AnyNode>()\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\n\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\n    let topDownMapping = topDownByContext.get(parentContextId)\n    if (!topDownMapping) {\n      topDownMapping = new Map()\n      topDownByContext.set(parentContextId, topDownMapping)\n    }\n\n    let topDown = topDownMapping.get(formula)\n    if (topDown) return topDown\n    let topDownContextId: number\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\n\n    if (visiting.has(topDown)) {\n      console.error(\"Found cyclical dependency during formula mapping\")\n      return constant(NaN)\n    }\n\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\n    if (!bottomUpMapping) {\n      bottomUpMapping = new Map()\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\n    }\n\n    let bottomUp = bottomUpMapping.get(topDown)\n    if (bottomUp) return bottomUp\n\n    visiting.add(topDown)\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\n    visiting.delete(topDown)\n\n    bottomUpMapping.set(topDown, bottomUp)\n    topDownMapping.set(formula, bottomUp)\n    return bottomUp\n  }\n\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\n    const operands = formula.operands.map(f => check(f, contextId))\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\n  }\n\n  const result = formulas.map(f => check(f, baseContextId))\n  return arrayEqual(formulas, result) ? formulas : result\n}\n\ntype ContextID = number\n\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\n  if (a === undefined) return b === undefined\n  if (b === undefined) return false\n\n  return a.length === b.length && a.every((value, i) => value === b[i])\n}\n","import { assertUnreachable, objPathValue } from \"../Util/Util\"\nimport { forEachNodes, mapFormulas } from \"./internal\"\nimport { constant } from \"./utils\"\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\n\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\n  min: (x: number[]): number => Math.min(...x),\n  max: (x: number[]): number => Math.max(...x),\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\n}\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\n  ...allCommutativeMonoidOperations,\n  res: ([res]: number[]): number => {\n    if (res < 0) return 1 - res / 2\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\n    return 1 - res\n  },\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\n}\n\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\n\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  formulas = constantFold(formulas, topLevelData, shouldFold)\n  formulas = flatten(formulas)\n  formulas = deduplicate(formulas)\n  return formulas\n}\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): (values: Dict<string, number>) => number[] {\n  // TODO: Use min-cut to minimize the size of interim array\n  type Reference = string | number | { ins: Reference[] }\n\n  const uniqueReadStrings = new Set<string>()\n  const uniqueNumbers = new Set<number>()\n  const mapping = new Map<NumNode, Reference>()\n\n  forEachNodes(formulas, _ => { }, f => {\n    const { operation } = f\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\n          throw new Error(`Unsupported ${operation} node in precompute`)\n        const name = binding(f)\n        uniqueReadStrings.add(name)\n        mapping.set(f, name)\n        break\n      case \"add\": case \"min\": case \"max\": case \"mul\":\n      case \"threshold\": case \"res\": case \"sum_frac\":\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\n        break\n      case \"const\":\n        if (typeof f.value !== \"number\")\n          throw new Error(\"Found string constant while precomputing\")\n        const value = f.value\n        uniqueNumbers.add(value)\n        mapping.set(f as ConstantNode<number>, value)\n        break\n      case \"match\": case \"lookup\": case \"subscript\":\n      case \"prio\":\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  /**\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\n   *\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\n   * in the same order as formulas even when they are duplicated. Inputs\n   * are arranged in the same order as the read strings, even when they\n   * overlap with outputs. If an output is a constant or a compute node,\n   * only put the data in the output region.\n   */\n  const locations = new Map<NumNode | number | string, number>()\n\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\n  const constValues = [...uniqueNumbers]\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\n\n  formulas.forEach((f, i) => {\n    locations.set(f, i)\n    if (f.operation === \"const\") locations.set(f.value, i)\n  })\n  // After this line, if some outputs are also read node, `locations`\n  // will point to the one in the read node portion instead.\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\n  let offset = formulas.length + readStrings.length\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\n\n  // `locations` is stable from this point on. We now only append new values.\n  // There is no change to existing values.\n  //\n  // DO NOT read from `location` prior to this line.\n  mapping.forEach((ref, node) => {\n    if (typeof ref !== \"object\") {\n      locations.set(node, locations.get(ref)!)\n      return\n    }\n    if (!locations.has(node)) locations.set(node, offset++)\n    computations.push({\n      out: locations.get(node)!,\n      ins: node.operands.map(op => locations.get(op)!),\n      op: allOperations[node.operation],\n      buff: Array(node.operands.length).fill(0),\n    })\n  })\n\n  const buffer = Array(offset).fill(0)\n  buffer.forEach((_, i, array) => array[i] = NaN)\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\n\n  // Copy target for when some outputs are duplicated\n  const copyList = formulas.map((node, i) => {\n    const src = locations.get(node)!\n    return src !== i ? [src, i] : undefined!\n  }).filter(x => x)\n  const copyFormula = copyList.length ? () => {\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\n  } : undefined\n\n  return values => {\n    readStrings.forEach((id, i) => buffer[readOffset + i] = values[id] ?? 0)\n    computations.forEach(({ out, ins, op, buff }) => {\n      ins.forEach((i, j) => buff[j] = buffer[i])\n      buffer[out] = op(buff)\n    })\n    copyFormula?.()\n    return buffer\n  }\n}\n\nfunction flatten(formulas: NumNode[]): NumNode[] {\n  return mapFormulas(formulas, f => f, _formula => {\n    let result = _formula\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\n      const formula = _formula as ComputeNode\n      const { operation } = formula\n\n      let flattened = false\n      const operands = formula.operands.flatMap(dep =>\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\n      result = flattened ? { ...formula, operands } : formula\n    }\n\n    return result\n  })\n}\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\n    const result = new Map<T, number>()\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\n    return result\n  }\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\n  }\n\n  const wrap = {\n    common: {\n      counts: new Map<NumNode, number>(),\n      formulas: new Set<NumNode>(),\n      operation: \"add\" as Operation\n    }\n  }\n\n  while (true) {\n    let next: typeof wrap.common | undefined\n\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\n\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\n      candidatesByOperation.set(operation, [])\n\n    formulas = mapFormulas(formulas, _formula => {\n      if (wrap.common.formulas.has(_formula as NumNode)) {\n        const formula = _formula as ComputeNode\n        const remainingCounts = new Map(wrap.common.counts)\n        const operands = formula.operands.filter(dep => {\n          const count = remainingCounts.get(dep)\n          if (count) {\n            remainingCounts.set(dep, count - 1)\n            return false\n          }\n          return true\n        })\n\n        if (!operands.length)\n          return factored\n        operands.push(factored)\n        return { ...formula, operands }\n      }\n      return _formula\n    }, _formula => {\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\n      const formula = _formula as ComputeNode\n\n      if (next) {\n        if (next.operation === formula.operation) {\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\n          const nextCounts = next.counts\n          let total = 0\n\n          for (const [dependency, currentCount] of currentCounts.entries()) {\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\n            if (commonCount) {\n              commonCounts.set(dependency, commonCount)\n              total += commonCount\n            } else commonCounts.delete(dependency)\n          }\n          if (total > 1) {\n            next.counts = commonCounts\n            next.formulas.add(formula)\n          }\n        }\n      } else {\n        const candidates = candidatesByOperation.get(formula.operation)!\n        const counts = elementCounts(formula.operands)\n\n        for (const [candidate, candidateCounts] of candidates) {\n          let total = 0\n\n          const commonCounts = new Map<NumNode, number>()\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\n            if (count) {\n              commonCounts.set(dependency, count)\n              total += count\n            }\n          }\n          if (total > 1) {\n            next = {\n              counts: commonCounts,\n              formulas: new Set([formula, candidate]),\n              operation: formula.operation\n            }\n            candidatesByOperation.clear()\n            break\n          }\n        }\n        if (!next) candidates.push([formula, counts])\n      }\n\n      return formula\n    })\n\n    if (next) wrap.common = next\n    else break\n  }\n\n  return formulas\n}\n\n/**\n * Replace nodes with known values with appropriate constants,\n * avoiding removal of any nodes that pass `isFixed` predicate\n */\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\n  const origin: Context = { data: [], processed: new Map() }\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\n\n  function fold(formula: StrNode, context: Context): StrNode\n  function fold(formula: NumNode, context: Context): NumNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\n    const old = context.processed.get(formula)\n    if (old) return old\n\n    const { operation } = formula\n    let result: NumNode | StrNode\n    switch (operation) {\n      case \"const\": return formula\n      case \"add\": case \"mul\": case \"max\": case \"min\":\n        const f = allOperations[operation]\n        const numericOperands: number[] = []\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\n          const folded = fold(formula, context)\n          return (folded.operation === \"const\")\n            ? (numericOperands.push(folded.value), false)\n            : true\n        }).map(x => fold(x, context))\n        const numericValue = f(numericOperands)\n\n        // Fold degenerate cases. This may incorrectly compute NaN\n        // results, which shouldn't appear under expected usage.\n        // - zero\n        //   - 0 * ... = 0\n        // - infinity\n        //   - max(infinity, ...) = infinity\n        //   - infinity + ... = infinity\n        // - (-infinity)\n        //   - min(-infinity, ...) - infinity\n        //   - (-infinity) + ... = -infinity\n        // - NaN\n        //   - operation(NaN, ...) = NaN\n        if (!isFinite(numericValue)) {\n          if ((operation !== \"mul\") &&\n            (operation !== \"max\" || numericValue > 0) &&\n            (operation !== \"min\" || numericValue < 0)) {\n            result = constant(numericValue)\n            break\n          }\n        } else if (operation === \"mul\" && numericValue === 0) {\n          result = constant(numericValue)\n          break\n        }\n\n        if (numericValue !== f([])) // Skip vacuous values\n          formulaOperands.push(constant(numericValue))\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\n        else result = { operation, operands: formulaOperands }\n        break\n      case \"res\": case \"sum_frac\": {\n        const operands = formula.operands.map(x => fold(x, context))\n        const f = allOperations[operation]\n        if (operands.every(x => x.operation === \"const\"))\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\n        else result = { ...formula, operands }\n        break\n      }\n      case \"lookup\": {\n        const index = fold(formula.operands[0], context)\n        if (index.operation === \"const\") {\n          const selected = formula.table[index.value!] ?? formula.operands[1]\n          if (selected) {\n            result = fold(selected, context)\n            break\n          }\n        }\n        throw new Error(`Unsupported ${operation} node while folding`)\n      }\n      case \"prio\": {\n        const first = formula.operands.find(op => {\n          const folded = fold(op, context)\n          if (folded.operation !== \"const\")\n            throw new Error(`Unsupported ${operation} node while folding`)\n          return folded.value !== undefined\n        })\n        if (!first)\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = fold(first, context)\n        break\n      }\n      case \"match\": {\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\n          throw new Error(`Unsupported ${operation} node while folding`)\n        result = (v1.value === v2.value) ? match : unmatch\n        break\n      }\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\n        if (value.operation === \"const\" && threshold.operation === \"const\")\n          result = value.value >= threshold.value ? pass : fail\n        else\n          result = { ...formula, operands: [value, threshold, pass, fail] }\n        break\n      }\n      case \"subscript\": {\n        const [index] = formula.operands.map(x => fold(x, context))\n        result = (index.operation === \"const\")\n          ? constant(formula.list[index.value])\n          : { ...formula, operands: [index] }\n        break\n      }\n      case \"read\": {\n        const operands = context.data\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\n          .filter(x => x)\n\n        if (operands.length === 0) {\n          if (shouldFold(formula)) {\n            const { accu } = formula\n            if (accu === undefined || accu === \"prio\")\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\n            else result = constant(allOperations[accu]([]))\n          } else result = formula\n        } else if (formula.accu === undefined)\n          result = fold(operands[0], context)\n        else\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\n        break\n      }\n      case \"data\":\n        if (formula.reset) context = origin\n        const map = nextContextMap.get(context)!\n        let nextContext = map.get(formula.data)\n        if (!nextContext) {\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\n          nextContextMap.set(nextContext, new Map())\n          map.set(formula.data, nextContext)\n        }\n        result = fold(formula.operands[0], nextContext)\n        break\n      default: assertUnreachable(operation)\n    }\n\n    context.processed.set(formula, result)\n    return result\n  }\n\n  const context = { data: [topLevelData], processed: new Map() }\n  nextContextMap.set(context, new Map())\n  nextContextMap.get(origin)!.set(topLevelData, context)\n  return formulas.map(x => fold(x, context))\n}\n\nexport const testing = {\n  constantFold, flatten, deduplicate\n}\n","import { optimize, precompute } from '../Formula/optimization';\nimport type { NumNode } from '../Formula/type';\nimport type { MainStatKey, SubstatKey } from '../Types/artifact';\nimport { ArtifactSetKey, SlotKey } from '../Types/consts';\nimport { countBuilds, filterArts, mergePlot, pruneAll } from './common';\n\nlet id: string\nlet builds: Build[]\nlet buildValues: number[] | undefined\nlet plotData: PlotData | undefined\nlet threshold: number\n\ntype WorkerStat = {\n  arts: ArtifactsBySlot\n  nodes: NumNode[]\n\n  maxBuilds: number\n  min: number[]\n\n  callback: (interim: InterimResult) => void\n}\nlet shared: WorkerStat = undefined as any\n\nexport function setup(msg: Setup, callback: WorkerStat[\"callback\"]): RequestResult {\n  shared = { ...msg } as any\n  shared.nodes = msg.filters.map(x => x.value)\n  shared.min = msg.filters.map(x => x.min)\n  shared.callback = callback\n  shared.nodes.push(msg.optimizationTarget)\n  if (msg.plotBase) {\n    plotData = {}\n    shared.nodes.push(msg.plotBase)\n  }\n  id = msg.id\n  builds = []\n  buildValues = undefined\n  threshold = -Infinity\n\n  return { command: \"request\", id }\n}\n\nexport function request({ threshold: newThreshold, filter: filters }: Request): RequestResult & { total: number } {\n  if (threshold > newThreshold) threshold = newThreshold\n  let preArts = filterArts(shared.arts, filters)\n  const totalCount = countBuilds(preArts)\n\n  let nodes = optimize(shared.nodes, {}, _ => false);\n  ({ nodes, arts: preArts } = pruneAll(nodes, shared.min, preArts, shared.maxBuilds, new Set(), {\n    pruneArtRange: true, pruneNodeRange: true,\n  }))\n  const compute = precompute(nodes, f => f.path[1])\n  const arts = Object.values(preArts.values).sort((a, b) => a.length - b.length)\n\n  const ids: string[] = Array(arts.length).fill(\"\")\n  let count = { build: 0, failed: 0, skipped: totalCount - countBuilds(preArts) }\n\n  function permute(i: number, stats: Stats) {\n    if (i < 0) {\n      const result = compute(stats)\n      if (shared.min.every((m, i) => (m <= result[i]))) {\n        const value = result[shared.min.length]\n        let build: Build | undefined\n        if (value >= threshold) {\n          build = { value, artifactIds: [...ids] }\n          builds.push(build)\n        }\n        if (plotData) {\n          const x = result[shared.min.length + 1]\n          if (!plotData[x] || plotData[x]!.value < value) {\n            if (!build) build = { value, artifactIds: [...ids] }\n            build.plot = x\n            plotData[x] = build\n          }\n        }\n      }\n      else count.failed += 1\n      return\n    }\n    arts[i].forEach(art => {\n      ids[i] = art.id\n\n      const newStats = { ...stats }\n      Object.entries(art.values).forEach(([key, value]) =>\n        newStats[key] = (newStats[key] ?? 0) + value)\n\n      permute(i - 1, newStats)\n    })\n    if (i === 0) {\n      count.build += arts[0].length\n      if (count.build > 8192)\n        interimReport(count)\n    }\n  }\n\n  permute(arts.length - 1, preArts.base)\n  interimReport(count)\n  return { command: \"request\", id, total: totalCount }\n}\nexport function finalize(): FinalizeResult {\n  refresh(true)\n  return { command: \"finalize\", id, builds, plotData }\n}\n\nexport let interimReport = (count: { build: number, failed: number, skipped: number }): void => {\n  refresh(false)\n  shared.callback({\n    command: \"interim\", id, buildValues,\n    buildCount: count.build, failedCount: count.failed, skippedCount: count.skipped\n  })\n  buildValues = undefined\n  count.build = 0\n  count.failed = 0\n  count.skipped = 0\n}\nfunction refresh(force: boolean): void {\n  if (plotData && Object.keys(plotData).length >= 100000)\n    plotData = mergePlot([plotData])\n\n  if (builds.length >= 100000 || force) {\n    builds = builds\n      .sort((a, b) => b.value - a.value)\n      .slice(0, shared.maxBuilds)\n    buildValues = builds.map(x => x.value)\n    threshold = Math.max(threshold, buildValues[shared.maxBuilds - 1] ?? -Infinity)\n  }\n}\n\ntype Stats = { [key in MainStatKey | SubstatKey]?: number }\nexport type ArtifactBuildData = {\n  id: string\n  set: ArtifactSetKey\n  values: DynStat\n}\n\nexport type Command = Setup | Request | Finalize\nexport type ArtifactsBySlot = { base: DynStat, values: StrictDict<SlotKey, ArtifactBuildData[]> }\nexport type DynStat = { [key in string]: number }\nexport interface Setup {\n  command: \"setup\"\n\n  id: string\n  arts: ArtifactsBySlot\n\n  optimizationTarget: NumNode\n  filters: { value: NumNode, min: number }[]\n  plotBase: NumNode | undefined,\n  maxBuilds: number\n}\nexport interface Request {\n  command: \"request\"\n  threshold: number\n  filter: RequestFilter\n}\nexport type RequestFilter = StrictDict<SlotKey,\n  { kind: \"required\", sets: Set<ArtifactSetKey> } |\n  { kind: \"exclude\", sets: Set<ArtifactSetKey> } |\n  { kind: \"id\", ids: Set<string> }\n>\nexport type PlotData = Dict<number, Build>\nexport interface Finalize {\n  command: \"finalize\"\n}\n\nexport type WorkerResult = InterimResult | RequestResult | FinalizeResult | DebugMsg\nexport interface InterimResult {\n  command: \"interim\"\n  id: string\n  buildValues: number[] | undefined\n  /** The number of builds since last report, including failed builds */\n  buildCount: number\n  /** The number of builds that does not meet the min-filter requirement since last report */\n  failedCount: number\n  skippedCount: number\n}\nexport interface FinalizeResult {\n  command: \"finalize\"\n  id: string\n  builds: Build[]\n  plotData?: PlotData\n}\nexport interface RequestResult {\n  command: \"request\"\n  id: string\n}\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\nexport interface DebugMsg {\n  command: \"debug\"\n  id: string\n  value: any\n}\n","// DO NOT REMOVE ITEMS FROM THESE LISTS\n//        ONLY APPEND NEW ENTRIES\n// The index of items in this list is used to\n// compress the exported data. Removing an item\n// from this list will shift subsequent entries.\nexport const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\nexport const allRegions = [\"mondstadt\", \"liyue\", \"inazuma\", \"sumeru\", \"fontaine\", \"natlan\", \"snezhnaya\", \"khaenriah\"] as const\nexport const allReactionModes = [\"hydro_vaporize\", \"pyro_vaporize\", \"pyro_melt\", \"cryo_melt\",] as const\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\nexport const allRarities = [5, 4, 3, 2, 1] as const\nexport const allArtifactRarities = [5, 4, 3] as const\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo'] as const\nexport const allElementsWithPhy = [\"physical\", ...allElements] as const\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\nexport const allArtifactSets = [\n  \"Adventurer\",\n  \"ArchaicPetra\",\n  \"Berserker\",\n  \"BlizzardStrayer\",\n  \"BloodstainedChivalry\",\n  \"BraveHeart\",\n  \"CrimsonWitchOfFlames\",\n  \"DefendersWill\",\n  \"EmblemOfSeveredFate\",\n  \"Gambler\",\n  \"GladiatorsFinale\",\n  \"HeartOfDepth\",\n  \"HuskOfOpulentDreams\",\n  \"Instructor\",\n  \"Lavawalker\",\n  \"LuckyDog\",\n  \"MaidenBeloved\",\n  \"MartialArtist\",\n  \"NoblesseOblige\",\n  \"OceanHuedClam\",\n  \"PaleFlame\",\n  \"PrayersForDestiny\",\n  \"PrayersForIllumination\",\n  \"PrayersForWisdom\",\n  \"PrayersToSpringtime\",\n  \"ResolutionOfSojourner\",\n  \"RetracingBolide\",\n  \"Scholar\",\n  \"ShimenawasReminiscence\",\n  \"TenacityOfTheMillelith\",\n  \"TheExile\",\n  \"ThunderingFury\",\n  \"Thundersoother\",\n  \"TinyMiracle\",\n  \"TravelingDoctor\",\n  \"ViridescentVenerer\",\n  \"WanderersTroupe\",\n] as const\nexport const allCharacterKeys = [\n  // \"Albedo\",\n  // \"Amber\",\n  // \"Barbara\",\n  // \"Beidou\",\n  // \"Bennett\",\n  // \"Chongyun\",\n  // \"Diluc\",\n  // \"Diona\",\n  // \"Fischl\",\n  // \"Ganyu\",\n  // \"HuTao\",\n  // \"Jean\",\n  // \"Kaeya\",\n  // \"Keqing\",\n  // \"Klee\",\n  // \"Lisa\",\n  // \"Mona\",\n  // \"Ningguang\",\n  // \"Noelle\",\n  // \"Qiqi\",\n  // \"Razor\",\n  \"Sucrose\",\n  // \"Tartaglia\",\n  // \"Traveler\",\n  \"RaidenShogun\",\n  // \"Venti\",\n  \"Xiangling\",\n  // \"Xiao\",\n  \"Xingqiu\",\n  // \"Xinyan\",\n  // \"Zhongli\",\n  // \"Rosaria\",\n  // \"Yanfei\",\n  // \"Eula\",\n  \"KaedeharaKazuha\",\n  \"KamisatoAyaka\",\n  // \"Sayu\",\n  \"Shenhe\",\n  // \"Yoimiya\",\n  // \"KujouSara\",\n  // \"Aloy\",\n  // \"SangonomiyaKokomi\",\n  // \"Thoma\",\n  // \"Gorou\",\n  // \"AratakiItto\"\n  \"YaeMiko\",\n  \"YunJin\",\n] as const\nexport const allWeaponKeys = [\n  \"CalamityQueller\",\n  \"DullBlade\",\n  // \"SilverSword\",\n  // \"CoolSteel\",\n  // \"DarkIronSword\",\n  // \"FilletBlade\",\n  // \"HarbingerOfDawn\",\n  // \"SkyriderSword\",\n  // \"TravelersHandySword\",\n  // \"BlackcliffLongsword\",\n  // \"FavoniusSword\",\n  // \"IronSting\",\n  // \"LionsRoar\",\n  // \"PrimordialJadeCutter\",\n  // \"PrototypeRancour\",\n  // \"RoyalLongsword\",\n  // \"SacrificialSword\",\n  // \"TheAlleyFlash\",\n  // \"TheBlackSword\",\n  // \"TheFlute\",\n  // \"SwordOfDescension\",\n  // \"FesteringDesire\",\n  // \"AquilaFavonia\",\n  // \"SkywardBlade\",\n  // \"SummitShaper\",\n  \"WasterGreatsword\",\n  // \"OldMercsPal\",\n  // \"BloodtaintedGreatsword\",\n  // \"DebateClub\",\n  // \"FerrousShadow\",\n  // \"Akuoumaru\",\n  // \"SkyriderGreatsword\",\n  // \"WhiteIronGreatsword\",\n  // \"BlackcliffSlasher\",\n  // \"FavoniusGreatsword\",\n  // \"LithicBlade\",\n  // \"PrototypeArchaic\",\n  // \"Rainslasher\",\n  // \"RoyalGreatsword\",\n  // \"SerpentSpine\",\n  // \"TheBell\",\n  // \"Whiteblind\",\n  // \"SacrificialGreatsword\",\n  // \"SnowTombedStarsilver\",\n  // \"SkywardPride\",\n  // \"WolfsGravestone\",\n  // \"TheUnforged\",\n  \"BeginnersProtector\",\n  // \"IronPoint\",\n  \"BlackTassel\",\n  // \"Halberd\",\n  // \"WhiteTassel\",\n  \"BlackcliffPole\",\n  \"CrescentPike\",\n  // \"Deathmatch\",\n  // \"DragonsBane\",\n  // \"LithicSpear\",\n  // \"PrototypeStarglitter\",\n  // \"FavoniusLance\",\n  // \"RoyalSpear\",\n  // \"DragonspineSpear\",\n  // \"VortexVanquisher\",\n  // \"PrimordialJadeWingedSpear\",\n  // \"StaffOfHoma\",\n  // \"SkywardSpine\",\n  \"HuntersBow\",\n  // \"SeasonedHuntersBow\",\n  // \"PolarStar\",\n  // \"Messenger\",\n  // \"RavenBow\",\n  // \"RecurveBow\",\n  // \"SharpshootersOath\",\n  // \"Slingshot\",\n  // \"TheStringless\",\n  // \"AlleyHunter\",\n  // \"BlackcliffWarbow\",\n  // \"CompoundBow\",\n  // \"FavoniusWarbow\",\n  // \"PrototypeCrescent\",\n  // \"RoyalBow\",\n  // \"Rust\",\n  // \"SacrificialBow\",\n  // \"TheViridescentHunt\",\n  // \"SkywardHarp\",\n  // \"AmosBow\",\n  // \"ElegyForTheEnd\",\n  // \"WindblumeOde\",\n  \"ApprenticesNotes\",\n  // \"PocketGrimoire\",\n  \"EngulfingLightning\",\n  // \"EmeraldOrb\",\n  // \"MagicGuide\",\n  // \"OtherworldlyStory\",\n  // \"ThrillingTalesOfDragonSlayers\",\n  // \"TwinNephrite\",\n  // \"BlackcliffAgate\",\n  // \"FavoniusCodex\",\n  // \"MappaMare\",\n  // \"PrototypeAmber\",\n  // \"RoyalGrimoire\",\n  // \"SacrificialFragments\",\n  \"SolarPearl\",\n  \"TheWidsith\",\n  // \"WineAndSong\",\n  // \"EyeOfPerception\",\n  // \"Frostbearer\",\n  // \"LostPrayerToTheSacredWinds\",\n  // \"SkywardAtlas\",\n  // \"MemoryOfDust\",\n  // \"SongOfBrokenPines\",\n  // \"DodocoTales\",\n  // \"MitternachtsWaltz\",\n  \"FreedomSworn\",\n  // \"AmenomaKageuchi\",\n  // \"MistsplitterReforged\",\n  // \"KatsuragikiriNagamasa\",\n  // \"KitainCrossSpear\",\n  // \"ThunderingPulse\",\n  // \"Hamayumi\",\n  // \"HakushinRing\",\n  // \"TheCatch\",\n  \"EverlastingMoonglow\",\n  // \"LuxuriousSeaLord\",\n  // \"Predator\",\n  // \"MouunsMoon\",\n  // \"WavebreakersFin\",\n  // \"CinnabarSpindle\",\n  // \"RedhornStonethresher\",\n  \"KagurasVerity\",\n] as const\nexport const characterSpecializedStatKeys = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"] as const\n\nexport type HitModeKey = typeof allHitModes[number]\nexport type Region = typeof allRegions[number]\nexport type ReactionModeKey = typeof allReactionModes[number]\nexport type SetNum = typeof allArtifactSetCount[number]\nexport type Rarity = typeof allRarities[number]\nexport type ArtifactRarity = typeof allArtifactRarities[number]\nexport type SlotKey = typeof allSlotKeys[number]\nexport type ElementKey = typeof allElements[number]\nexport type ElementKeyWithPhy = typeof allElementsWithPhy[number]\nexport type ArtifactSetKey = typeof allArtifactSets[number]\nexport type CharacterKey = typeof allCharacterKeys[number]\nexport type WeaponKey = typeof allWeaponKeys[number]\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]\nexport type CharacterSpecializedStatKey = typeof characterSpecializedStatKeys[number]\n","import { forEachNodes, mapFormulas } from \"../Formula/internal\";\nimport { allOperations, constantFold } from \"../Formula/optimization\";\nimport { ConstantNode, NumNode } from \"../Formula/type\";\nimport { constant, customRead, max, min } from \"../Formula/utils\";\nimport { allSlotKeys, ArtifactSetKey } from \"../Types/consts\";\nimport { assertUnreachable, objectKeyMap, objectMap } from \"../Util/Util\";\nimport type { ArtifactBuildData, ArtifactsBySlot, Build, DynStat, PlotData, RequestFilter } from \"./background\";\n\ntype DynMinMax = { [key in string]: MinMax }\ntype MinMax = { min: number, max: number }\n\ntype MicropassOperation = \"reaffine\" | \"pruneArtRange\" | \"pruneNodeRange\" | \"pruneOrder\"\nexport function pruneAll(nodes: NumNode[], minimum: number[], arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>, forced: Dict<MicropassOperation, boolean>): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true }\n  }\n  let count = 0\n  while (Object.values(should).some(x => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, keepArtifacts)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nfunction reaffine(nodes: NumNode[], arts: ArtifactsBySlot, forceRename: boolean = false): { nodes: NumNode[], arts: ArtifactsBySlot } {\n  const affineNodes = new Set<NumNode>(), topLevelAffine = new Set<NumNode>()\n\n  function visit(node: NumNode, isAffine: boolean) {\n    if (isAffine) affineNodes.add(node)\n    else node.operands.forEach(_op => {\n      const op = _op as NumNode\n      affineNodes.has(op) && topLevelAffine.add(op)\n    })\n  }\n\n  const dynKeys = new Set<string>()\n\n  forEachNodes(nodes, _ => { }, f => {\n    const operation = f.operation\n    switch (operation) {\n      case \"read\":\n        if (f.type !== \"number\" || f.path[0] !== \"dyn\" || f.accu !== \"add\")\n          throw new Error(`Found unsupported ${operation} node at path ${f.path} when computing affine nodes`)\n        dynKeys.add(f.path[1])\n        visit(f, true)\n        break\n      case \"add\": visit(f, f.operands.every(op => affineNodes.has(op))); break\n      case \"mul\": {\n        const nonConst = f.operands.filter(op => op.operation !== \"const\")\n        visit(f, nonConst.length === 0 || (nonConst.length === 1 && affineNodes.has(nonConst[0])))\n        break\n      }\n      case \"const\":\n        if (typeof f.value === \"string\" || f.value === undefined)\n          throw new Error(`Found constant ${f.value} while compacting`)\n        visit(f as NumNode, true); break\n      case \"res\": case \"threshold\": case \"sum_frac\":\n      case \"max\": case \"min\": visit(f, false); break\n      case \"data\": case \"subscript\": case \"lookup\": case \"match\": case \"prio\":\n        throw new Error(`Found unsupported ${operation} node when computing affine nodes`)\n      default: assertUnreachable(operation)\n    }\n  })\n\n  if ([...topLevelAffine].every(({ operation }) => operation === \"read\" || operation === \"const\"))\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  nodes.forEach(node => affineNodes.has(node) && topLevelAffine.add(node))\n  const affine = [...topLevelAffine].filter(f => f.operation !== \"const\")\n  const affineMap = new Map(affine.map(node => [node,\n    !forceRename && node.operation === \"read\" && node.path[0] === \"dyn\"\n      ? node\n      : { ...customRead([\"dyn\", `${nextDynKey()}`]), accu: \"add\" as const }]))\n  nodes = mapFormulas(nodes, f => affineMap.get(f as NumNode) ?? f, f => f)\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold([...affineMap.keys()], {\n      dyn: objectMap(stat, (value) => constant(value))\n    } as any, _ => true)\n    return Object.fromEntries([...affineMap.values()].map((v, i) => [v.path[1], (values[i] as ConstantNode<number>).value]))\n  }\n  const result = {\n    nodes, arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allSlotKeys, slot =>\n        arts.values[slot].map(({ id, set, values }) => ({ id, set, values: reaffineArt(values) })))\n    }\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets)\n        values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nexport function pruneOrder(arts: ArtifactsBySlot, numTop: number, keepArtifacts: Set<ArtifactSetKey>): ArtifactsBySlot {\n  let progress = false\n  const values = objectKeyMap(allSlotKeys, slot => {\n    const list = arts.values[slot]\n    const newList = list.filter(art => {\n      let count = 0\n      return list.every(other => {\n        const greaterEqual = Object.entries(other.values).every(([k, o]) => o >= art.values[k])\n        const greater = Object.entries(other.values).some(([k, o]) => o > art.values[k])\n        if (greaterEqual && (greater || other.id > art.id) &&\n          (!keepArtifacts.has(art.set) || keepArtifacts.has(other.set)))\n          count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(nodes: NumNode[], arts: ArtifactsBySlot, minimum: number[]): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allSlotKeys, slot => computeArtRange(wrap.arts.values[slot]))\n    const otherArtRanges = objectKeyMap(allSlotKeys, key =>\n      addArtRange(Object.entries(artRanges).map(a => a[0] === key ? baseRange : a[1]).filter(x => x)))\n\n    let progress = false\n    const values = objectKeyMap(allSlotKeys, slot => {\n      const result = wrap.arts.values[slot].filter(art => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every((node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity))\n      })\n      if (result.length !== wrap.arts.values[slot].length)\n        progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: NumNode[], arts: ArtifactsBySlot): NumNode[] {\n  const baseRange = Object.fromEntries(Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }]))\n  const reads = addArtRange([baseRange, ...Object.values(arts.values).map(values => computeArtRange(values))])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(nodes, f => {\n    const { operation } = f\n    const operandRanges = f.operands.map(x => nodeRange.get(x)!)\n    switch (operation) {\n      case \"threshold\": {\n        const [value, threshold, pass, fail] = operandRanges\n        if (value.min >= threshold.max) return f.operands[2]\n        else if (value.max < threshold.min) return constant(0)\n        if (pass.max === pass.min &&\n          fail.max === fail.min &&\n          pass.min === fail.min && isFinite(pass.min))\n          return constant(pass.max)\n        break\n      }\n      case \"min\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every((op2, j) => op1.min <= op2.max)\n        })\n        if (newOperands.length < operandRanges.length) return min(...newOperands)\n        break\n      }\n      case \"max\": {\n        const newOperands = f.operands.filter((_, i) => {\n          const op1 = operandRanges[i]\n          return operandRanges.every(op2 => op1.max >= op2.min)\n        })\n        if (newOperands.length < operandRanges.length) return max(...newOperands)\n        break\n      }\n    }\n    return f\n  }, f => f)\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach(range => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}, keys = new Set<string>()\n  arts.forEach(({ values }) => {\n    Object.keys(values).forEach(key => keys.add(key))\n    for (const key of keys) {\n      const value = values[key] ?? 0\n      if (!result[key]) result[key] = { min: value, max: value }\n      else {\n        if (result[key].max < value) result[key].max = value\n        if (result[key].min > value) result[key].min = value\n      }\n    }\n  })\n\n  return result\n}\nfunction computeNodeRange(nodes: NumNode[], reads: DynMinMax): Map<NumNode, MinMax> {\n  const range = new Map<NumNode, MinMax>()\n\n  forEachNodes(nodes, _ => { }, _f => {\n    const f = _f as NumNode\n    const { operation } = f\n    const operands = f.operands.map(op => range.get(op)!)\n    let current: MinMax\n    switch (operation) {\n      case \"read\":\n        if (f.path[0] !== \"dyn\")\n          throw new Error(`Found non-dyn path ${f.path} while computing range`)\n        current = reads[f.path[1]] ?? { min: 0, max: 0 }\n        break\n      case \"const\": current = computeMinMax([f.value]); break\n      case \"subscript\": current = computeMinMax(f.list); break\n      case \"add\": case \"min\": case \"max\":\n        current = {\n          min: allOperations[operation](operands.map(x => x.min)),\n          max: allOperations[operation](operands.map(x => x.max)),\n        }; break\n      case \"res\": current = {\n        min: allOperations[operation]([operands[0].max]),\n        max: allOperations[operation]([operands[0].min]),\n      }; break\n      case \"mul\": current = operands.reduce((accu, current) => computeMinMax([\n        accu.min * current.min, accu.min * current.max,\n        accu.max * current.min, accu.max * current.max,\n      ])); break\n      case \"threshold\":\n        if (operands[0].min >= operands[1].max) current = operands[2]\n        else if (operands[0].max < operands[1].min) current = computeMinMax([0])\n        else current = computeMinMax([0], [operands[2]])\n        break\n      case \"sum_frac\": {\n        const [x, c] = operands, sum = { min: x.min + c.min, max: x.max + c.max }\n        if (sum.min <= 0 && sum.max >= 0)\n          current = (x.min <= 0 && x.max >= 0) ? { min: NaN, max: NaN } : { min: -Infinity, max: Infinity }\n        else\n          // TODO: Check this\n          current = computeMinMax([\n            x.min / sum.min, x.min / sum.max,\n            x.max / sum.min, x.max / sum.max\n          ])\n        break\n      }\n      case \"data\": case \"lookup\": case \"match\":\n        throw new Error(`Unsupported ${operation} node`)\n      default: assertUnreachable(operation)\n    }\n    range.set(f, current)\n  })\n  return range\n}\nfunction computeMinMax(values: readonly number[], minMaxes: readonly MinMax[] = []): MinMax {\n  const max = Math.max(...values, ...minMaxes.map(x => x.max))\n  const min = Math.min(...values, ...minMaxes.map(x => x.min))\n  return { min, max }\n}\n\nexport function filterArts(arts: ArtifactsBySlot, filters: RequestFilter): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allSlotKeys, slot => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case \"id\": return arts.values[slot].filter(art => filter.ids.has(art.id))\n        case \"exclude\": return arts.values[slot].filter(art => !filter.sets.has(art.set))\n        case \"required\": return arts.values[slot].filter(art => filter.sets.has(art.set))\n      }\n    })\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds.flatMap(x => x).sort((a, b) => b.value - a.value).slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01, reductionScaling = 2, maxCount = 1500\n  let keys = new Set(plots.flatMap(x => Object.values(x).map(v => Math.round(v.plot! / scale))))\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map(key => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value)\n        result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allSlotKeys.reduce((_count, slot) => _count * arts.values[slot].length, 1)\n}\n","import { Command, setup, request, finalize } from \"./background\"\nimport { assertUnreachable } from '../Util/Util';\n\nonmessage = ({ data }: { data: Command }) => {\n  const command = data.command\n  switch (command) {\n    case \"setup\": postMessage(setup(data, interim => postMessage(interim, undefined))); break\n    case \"request\": postMessage(request(data)); break\n    case \"finalize\": postMessage(finalize()); break\n    default: assertUnreachable(command)\n  }\n}\n"],"names":["runtime","exports","undefined","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","resolve","reject","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","o","minLen","n","toString","from","test","isArray","_i","_s","_e","_arr","_n","_d","_defineProperty","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","getOwnPropertyDescriptors","defineProperties","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","f","normalCompletion","didErr","step","_e2","objPathValue","console","reduce","a","k","objectKeyMap","map","fromEntries","objectMap","entries","v","assertUnreachable","constant","NaN","percent","operation","operands","Number","MAX_VALUE","Infinity","min","intoOps","max","customRead","path","forEachNodes","formulas","topDown","bottomUp","visiting","Set","visited","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","get","arrayEqual","set","b","every","allCommutativeMonoidOperations","x","Math","mul","allOperations","res","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","flatten","_formula","flattened","flatMap","dep","deduplicate","elementCounts","array","common","counts","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","total","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","constantFold","topLevelData","shouldFold","origin","data","processed","nextContextMap","fold","old","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","v1","v2","match","unmatch","list","accu","nextContext","id","builds","buildValues","plotData","allSlotKeys","reaffine","nodes","arts","forceRename","affineNodes","topLevelAffine","visit","node","isAffine","_op","dynKeys","_","nonConst","current","nextDynKey","affine","affineMap","reaffineArt","stat","dyn","base","slot","offsets","baseValue","pruneOrder","numTop","keepArtifacts","progress","newList","art","other","greaterEqual","greater","some","pruneArtRange","minimum","baseRange","artRanges","computeArtRange","otherArtRanges","addArtRange","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","newOperands","op1","op2","j","ranges","range","reads","_f","computeMinMax","c","sum","minMaxes","countBuilds","_count","shared","request","newThreshold","filters","preArts","kind","ids","sets","filterArts","totalCount","optimize","forced","should","deps","newArts","newNodes","pruneAll","maxBuilds","compute","binding","uniqueReadStrings","uniqueNumbers","mapping","ins","locations","readStrings","readOffset","constValues","computations","str","offset","ref","out","buff","buffer","number","copyList","src","copyFormula","dst","precompute","sort","build","failed","skipped","permute","stats","m","artifactIds","plot","newStats","interimReport","command","refresh","callback","buildCount","failedCount","skippedCount","force","plots","scale","round","size","mergePlot","onmessage","msg","postMessage","interim","optimizationTarget","plotBase"],"sourceRoot":""}