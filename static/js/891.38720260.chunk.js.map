{"version":3,"file":"static/js/891.38720260.chunk.js","mappings":"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","sources":["Data/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n      // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_,\r\n          }, {\r\n            text: trm(\"resistance\")\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"member\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg_ = equal(condPassive, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: burst_dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st('hitOp.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def)\r\nconst charged_dmgInc = prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 5), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: all_dmg_stack\r\n          }, {\r\n            text: trm(\"takeMoreDmg\"),\r\n            value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n            unit: \"%\"\r\n          }]\r\n        })),\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"hitOp.normalOrCharged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { text: sgt(\"duration\"), value: 6, unit: \"s\" }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"dmg\")),\r\n      name: st(\"takeDmg\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            text: trm(\"generateShield\")\r\n          }, {\r\n            node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: 45,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"hitOp.normalOrCharged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: def_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp)))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: st('afterDefeatEnemy'),\r\n      header: conditionalHeader(tr, icon, iconAwaken, sgt(\"healing\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm('condName'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk))\r\nconst dmg = equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: st('takeDmg'),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"soul\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmgInc\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: st(\"duration\"),\r\n            value: 12,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(dmg_, { key: \"sheet:dmg\" }) },\r\n      {\r\n        text: sgt(\"cd\"),\r\n        value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n        unit: \"s\"\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"milMove\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"sigilsConsumed\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: st(\"greaterPercentHP\", { percent: 90 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: critRate_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states:\r\n        Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n    conditional: { // Stacks - Mistsplitter's Emblem\r\n      value: condNode,\r\n      path: condPath,\r\n      name: trm(\"emblem\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"emblem\")),\r\n      states: Object.fromEntries(\r\n        stacks.map(stack => [stack, {\r\n          name: st(\"stack\", { count: parseInt(stack) }),\r\n          fields: allElements.map(ele => ({\r\n            node: stacks_dmg_[`${ele}_dmg_`]\r\n          }))\r\n        }])\r\n      )\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"onHit\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: def_ }, { text: sgt(\"duration\"), value: 6, unit: \"s\" }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"might\")),\r\n      description: conditionaldesc(tr),\r\n      name: st('afterUse.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: moveSPD_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i =>\r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, constant(66))\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      {\r\n        node: atk\r\n      },\r\n      {\r\n        node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  hit\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        \"oneOrNone\": {\r\n          name: trm(\"opponents.oneOrNone\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n        \"moreThanOne\": {\r\n          name: trm(\"opponents.moreThanOne\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"members\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"member\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterUse.skill\"),\r\n      states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1_ = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2_ = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" })\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1_, atk2_)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1_, { key: \"atk\" })\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: st(\"lessPercentHP\", { percent: 50 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk2_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet, conditionalHeader, conditionaldesc } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n        name: `${c}s`,\r\n        fields: [{\r\n          node: all_dmg_\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n    ],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_arrow_\r\n        }, {\r\n          node: charged_dmg_arrow_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: 's'\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i)) \r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i)) \r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: atkSPD_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: sum(eleMas, eleMas2),\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: eleMas2\r\n          }, {\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_passive\r\n          }, {\r\n            node: charged_passive\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst [tr] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skill\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }]\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, prod, naught, constant, percent, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", constant(66))\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hitOp.cryo\"),\r\n      states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }],\r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, percent, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_atk_increase_s = [.46, .52, .58, .64, .70] // Increased by 10% to counteract the decrease\r\nconst charged_atk_increase_s = [.46, .52, .58, .64, .70]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_atk_increase_s), { key: \"normal_dmg_\" })\r\nconst charged_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_atk_increase_s), { key: \"charged_dmg_\" })\r\nconst normal_atk_decrease = percent(.1, { key: \"normal_dmg_\" })\r\nconst charged_atk_decrease = percent(.1, { key: \"charged_dmg_\" })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_atk_increase, normal_atk_decrease),\r\n    charged_dmg_: sum(charged_atk_increase, normal_atk_decrease)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_atk_decrease\r\n    }, {\r\n      node: charged_atk_decrease\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_atk_increase\r\n          }, {\r\n            node: charged_atk_increase\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 3), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.skill\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport WindblumeOde from './WindblumeOde'\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      name: st(\"hitOp.normal\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condCharged,\r\n      path: condChargedPath,\r\n      name: st(\"hitOp.charged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\r\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\r\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\r\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\r\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\r\n\r\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, lookup(condPassive, { \"anemo\": eleDmg, \"cryo\": eleDmg, \"geo\": eleDmg, \"hydro\": eleDmg, \"pyro\": eleDmg }, naught))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: <Translate ns=\"weapon_HakushinRing\" key18=\"afterElectroReaction\" />,\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        anemo: {\r\n          name: <ColorText color=\"anemo\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        cryo: {\r\n          name: <ColorText color=\"cryo\">{sgt(\"reaction.Superconduct\")}</ColorText>,\r\n          fields: [{\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        geo: {\r\n          name: <ColorText color=\"geo\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n          fields: [{\r\n            node: geo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        pyro: {\r\n          name: <ColorText color=\"pyro\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        hydro: {\r\n          name: <ColorText color=\"hydro\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n          fields: [{\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            canShow: (data) => data.get(input.activeCharKey).value !== data.get(input.charKey).value,\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterUse.skill\"),\r\n      states:\r\n        Object.fromEntries(totems.map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: skill_dmg_s[i - 1]\r\n          },\r\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.12, 0.15, 0.18, 0.21, 0.24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s)\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 2), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }))\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterUse.skill\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        normal: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            node: burst_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, { \r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skillOrBurst\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    anemo_dmg_,\r\n    cryo_dmg_,\r\n    electro_dmg_,\r\n    geo_dmg_,\r\n    hydro_dmg_,\r\n    pyro_dmg_,\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\r\n      states: {\r\n        aria: {\r\n          name: trm(\"aria\"),\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            node: geo_dmg_\r\n          }, {\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        interlude: {\r\n          name: trm(\"interlude\"),\r\n          fields: [{\r\n            node: eleMas\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        recitative: {\r\n          name: trm(\"recitative\"),\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_ = equal(input.activeCharKey, target.charKey, equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm('condName'),\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterSprint\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"conditional\")),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["st","strKey","values","ns","key18","sgt","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","Error","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","tr","trm","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","lookup","min","naught","data","sheet","icon","iconAwaken","document","conditional","header","conditionalHeader","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","objectKeyMap","c","count","text","unit","all_dmg_","equal","description","conditionaldesc","on","dmg","customDmgNode","hit","ele","fieldsHeader","charged_dmg_","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","dmg_","def_","normal_dmgInc","charged_dmgInc","crit_","cdRed_","percent","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","teamBuff","shield","customShieldNode","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","customHealNode","undefined","variant","claymore","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","NaN","skill_dmgInc","skill_critRate_","cd_Src","normal_dmg_","plunging_dmg_","eleDmgDealtStack","stacks","passiveRefine","stacksRefine","passive_dmg_","allElements","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","moveSPD_","autoSrc","sword","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","dmg_Nodes","e","matchFull","atkDefInc","enerRech_","dmgInc","atk1_","atk2_","burst_critRate_","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","atk_s","atkSPD_s","eleMas","eleMas2","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","normal_atk_increase","charged_atk_increase","normal_atk_decrease","charged_atk_decrease","refinementVals","bow","AlleyHunter","AmosBow","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FavoniusWarbow","Hamayumi","HuntersBow","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","WindblumeOde","condChargedPath","condCharged","heal_","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","electro_dmg_","Translate","canShow","anemo","color","cryo","geo","pyro","hydro","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","catalyst"],"sourceRoot":""}