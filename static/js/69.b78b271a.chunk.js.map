{"version":3,"file":"static/js/69.b78b271a.chunk.js","mappings":"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","sources":["Components/ConditionalWrapper.tsx","Components/StatIcon.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","Data/Weapons/WeaponSheet.tsx","PageCharacter/CharacterCard.tsx","ReactHooks/useCharSelectionCallback.tsx","Util/CharacterUtil.tsx","ReactHooks/useCharacter.tsx","ReactHooks/useCharacterReducer.tsx","ReactHooks/useTeamData.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\r\n\r\ntype Prop = {\r\n  condition: boolean,\r\n  wrapper: (children: ReactNode) => ReactNode\r\n  falseWrapper?: (children: ReactNode) => ReactNode\r\n  children: ReactNode\r\n}\r\n// Wrap children with element provided by wrapper func when condition is true.\r\nexport default function ConditionalWrapper({ condition, wrapper, falseWrapper, children }: Prop) {\r\n  return (condition ? wrapper(children) : (falseWrapper ? falseWrapper(children) : children)) as JSX.Element;\r\n}","import { faDiceD20 } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAnemo, faAtk, faCdReductionPrimary, faCdReductionSecondary, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRechargePrimary, faEnergyRechargeSecondary, faGeo, faHealingBonus, faHpPrimary, faHpSecondary, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\n\r\nexport function HPIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faHpPrimary as any} />\r\n    <FontAwesomeIcon icon={faHpSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\n\r\nexport function CdRedIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faCdReductionPrimary as any} />\r\n    <FontAwesomeIcon icon={faCdReductionSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\n\r\nexport function EnerRechIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faEnergyRechargePrimary as any} />\r\n    <FontAwesomeIcon icon={faEnergyRechargeSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  characterHP: <HPIcon />,\r\n  finalHP: <HPIcon />,\r\n  hp_: <HPIcon />,\r\n  hp: <HPIcon />,\r\n\r\n  baseATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  characterATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  finalATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  characterDEF: <FontAwesomeIcon icon={faDef as any} />,\r\n  finalDEF: <FontAwesomeIcon icon={faDef as any} />,\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faDiceD20 as any} />,\r\n  enerRech_: <EnerRechIcon />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <CdRedIcon />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [[`${ele}_dmg_`, coloredEleIcon[ele]], [`${ele}_res_`, coloredEleIcon[ele]]]))\r\n}\r\n\r\nexport default StatIcon\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character_WR\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon_WR\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      // TODO: Prayer sets\r\n      // case \"PrayersForDestiny\":\r\n      // case \"PrayersForIllumination\":\r\n      // case \"PrayersForWisdom\":\r\n      // case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, setToSlots: [ArtifactSetKey, number][]) {\r\n    let artifactSetEffect: [ArtifactSetKey, SetNum[]][] = []\r\n    setToSlots.forEach(([set, slots]) => {\r\n      if (!slots) return\r\n      let setNum = Object.keys(sheets[set]?.setEffects ?? {})\r\n        .map(setNum => parseInt(setNum) as SetNum)\r\n        .filter(setNum => setNum <= slots)\r\n      if (setNum.length)\r\n        artifactSetEffect.push([set, setNum])\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n}\r\n","import { Translate } from '../../Components/Translate';\r\nimport { Data } from '../../Formula/type';\r\nimport { Rarity, WeaponKey, WeaponTypeKey } from '../../Types/consts';\r\nimport { DocumentSection } from '../../Types/sheet';\r\nimport { ICachedWeapon } from '../../Types/weapon_WR';\r\nimport { ascensionMaxLevel } from '../LevelData';\r\nimport type { WeaponData } from 'pipeline';\r\nconst weaponSheets = import('.').then(imp => imp.default)\r\n\r\nexport interface IWeaponSheet {\r\n  icon: string,\r\n  iconAwaken: string,\r\n  document: DocumentSection[],\r\n}\r\n\r\nexport default class WeaponSheet {\r\n  readonly key: WeaponKey;\r\n  readonly sheet: IWeaponSheet;\r\n  readonly data: Data;\r\n  readonly rarity: Rarity;\r\n  readonly weaponType: WeaponTypeKey;\r\n  constructor(key: string, weaponSheet: IWeaponSheet, weaponData: WeaponData, data: Data) {\r\n    this.rarity = weaponData.rarity\r\n    this.weaponType = weaponData.weaponType\r\n    this.key = key as WeaponKey\r\n    this.sheet = weaponSheet\r\n    this.data = data\r\n  }\r\n  static get = (weaponKey: WeaponKey | \"\"): Promise<WeaponSheet> | undefined => weaponKey ? weaponSheets.then(w => w[weaponKey]) : undefined\r\n  static get getAll() { return weaponSheets }\r\n  static getWeaponsOfType = (sheets: StrictDict<WeaponKey, WeaponSheet>, weaponType: string): Dict<WeaponKey, WeaponSheet> => Object.fromEntries(Object.entries(sheets).filter(([key, sheet]) => (sheet as WeaponSheet).weaponType === weaponType))\r\n  static getLevelString = (weapon: ICachedWeapon): string => `${weapon.level}/${ascensionMaxLevel[weapon.ascension]}`\r\n  tr = (strKey: string) => <Translate ns={`weapon_${this.key}_gen`} key18={strKey} />\r\n  get name() { return this.tr(\"name\") }\r\n  //when there is no substat, assume there is no passive.\r\n  get passiveName() { return this.rarity > 2 ? this.tr(\"passiveName\") : \"\" }\r\n  get description() { return this.tr(\"description\") }\r\n  passiveDescription = (refineIndex: number) => this.rarity > 2 ? this.tr(`passiveDescription.${refineIndex}`) : \"\"\r\n  get img() { return this.sheet.icon }\r\n  get imgAwaken() { return this.sheet.iconAwaken }\r\n  get document() { return this.sheet.document }\r\n}\r\n","import { Box, CardActionArea, CardContent, Chip, Grid, Skeleton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useMemo } from 'react';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { ascensionMaxLevel } from '../Data/LevelData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport { computeUIData, dataObjForWeapon, valueString } from '../Formula/api';\r\nimport { NumNode } from '../Formula/type';\r\nimport KeyMap from '../KeyMap';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { ICachedArtifact } from '../Types/artifact_WR';\r\nimport { allSlotKeys, CharacterKey, ElementKey, SlotKey } from '../Types/consts';\r\nimport { ICachedWeapon } from '../Types/weapon_WR';\r\nimport WeaponSheet from '../Data/Weapons/WeaponSheet';\r\n\r\ntype CharacterCardProps = {\r\n  characterKey: CharacterKey | \"\",\r\n  onClick?: (characterKey: CharacterKey) => void,\r\n  onClickHeader?: (characterKey: CharacterKey) => void,\r\n  artifactChildren?: Displayable,\r\n  weaponChildren?: Displayable,\r\n  characterChildren?: Displayable,\r\n  footer?: Displayable,\r\n}\r\nexport default function CharacterCard({ characterKey, artifactChildren, weaponChildren, characterChildren, onClick, onClickHeader, footer }: CharacterCardProps) {\r\n  const { teamData: teamDataContext } = useContext(DataContext)\r\n  const teamData = useTeamData(teamDataContext ? \"\" : characterKey) ?? (teamDataContext as TeamData | undefined)\r\n  const { character, characterSheet, target: data } = teamData?.[characterKey] ?? {}\r\n  const onClickHandler = useCallback(() => characterKey && onClick?.(characterKey), [characterKey, onClick])\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickHandler} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClickHandler],\r\n  )\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!teamData || !character || !characterSheet || !data) return null;\r\n  const dataContextObj: dataContextObj = {\r\n    character,\r\n    data,\r\n    characterSheet,\r\n    mainStatAssumptionLevel: 0,\r\n    teamData,\r\n    characterDispatch\r\n  }\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <DataContext.Provider value={dataContextObj}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n          <Header onClick={!onClick ? onClickHeader : undefined} />\r\n          <CardContent sx={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: 1, flexGrow: 1 }}>\r\n            <Weapon weaponId={character.equippedWeapon} />\r\n            {weaponChildren}\r\n            {/* will grow to fill the 100% height */}\r\n            <Box flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <ArtifactDisplay />\r\n              {artifactChildren}\r\n            </Box>\r\n            <Stats />\r\n            {characterChildren}\r\n          </CardContent>\r\n        </ConditionalWrapper>\r\n        {footer}\r\n      </CardLight>\r\n    </DataContext.Provider>\r\n  </Suspense>\r\n}\r\nfunction Header({ onClick }: { onClick?: (characterKey: CharacterKey) => void }) {\r\n  const { data, characterSheet } = useContext(DataContext)\r\n  const characterKey = data.get(input.charKey).value as CharacterKey\r\n  const characterEle = data.get(input.charEle).value as ElementKey\r\n  const characterLevel = data.get(input.lvl).value\r\n  const constellation = data.get(input.constellation).value\r\n  const ascension = data.get(input.asc).value\r\n  const autoBoost = data.get(input.bonus.auto).value\r\n  const skillBoost = data.get(input.bonus.skill).value\r\n  const burstBoost = data.get(input.bonus.burst).value\r\n\r\n  const tAuto = data.get(input.total.auto).value\r\n  const tSkill = data.get(input.total.skill).value\r\n  const tBurst = data.get(input.total.burst).value\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => characterKey && onClick?.(characterKey)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClick, characterKey],\r\n  )\r\n  return <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n    <Box display=\"flex\"\r\n      position=\"relative\"\r\n      className={`grad-${characterSheet.rarity}star`}\r\n      sx={{\r\n        \"&::before\": {\r\n          content: '\"\"',\r\n          display: \"block\", position: \"absolute\",\r\n          left: 0, top: 0,\r\n          width: \"100%\", height: \"100%\",\r\n          opacity: 0.7,\r\n          backgroundImage: `url(${characterSheet.bannerImg})`, backgroundPosition: \"center\", backgroundSize: \"cover\",\r\n        }\r\n      }}\r\n      width=\"100%\" >\r\n      <Box flexShrink={1} sx={{ maxWidth: { xs: \"40%\", lg: \"40%\" } }} alignSelf=\"flex-end\" display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Box\r\n          component=\"img\"\r\n          src={characterSheet.thumbImg}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          maxWidth={256}\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ py: 1, pr: 1 }} display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Chip label={<Typography variant=\"subtitle1\">{characterSheet.name}</Typography>} size=\"small\" color={characterEle} />\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item sx={{ textShadow: \"0 0 5px gray\" }}>\r\n            <Typography component=\"span\" variant=\"h6\" whiteSpace=\"nowrap\" >Lv. {characterLevel}</Typography>\r\n            <Typography component=\"span\" variant=\"h6\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h6\"><SqBadge>C{constellation}</SqBadge></Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item>\r\n            <Chip color={autoBoost ? \"info\" : \"secondary\"} label={<strong >{tAuto}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={skillBoost ? \"info\" : \"secondary\"} label={<strong >{tSkill}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={burstBoost ? \"info\" : \"secondary\"} label={<strong >{tBurst}</strong>} />\r\n          </Grid>\r\n        </Grid>\r\n        <Typography mt={1} ><Stars stars={characterSheet.rarity} colored /></Typography>\r\n      </Box>\r\n    </Box>\r\n  </ConditionalWrapper>\r\n}\r\nfunction Weapon({ weaponId }: { weaponId: string }) {\r\n  const database = useContext(DatabaseContext)\r\n  const weapon = database._getWeapon(weaponId)\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  const name = weaponSheet?.name\r\n  const mainVal = valueString(UIData.get(input.weapon.main).value, UIData.get(input.weapon.main).unit, 0)\r\n  const subKey = UIData.get(input.weapon.sub).key\r\n  const subVal = valueString(UIData.get(input.weapon.sub).value, UIData.get(input.weapon.sub).unit, UIData.get(input.weapon.sub).unit === \"flat\" ? 0 : undefined)\r\n  const levelName = WeaponSheet.getLevelString(weapon as ICachedWeapon)\r\n  return <CardDark>\r\n    <Box display=\"flex\" >\r\n      <Box flexShrink={1} maxWidth=\"35%\" display=\"flex\" flexDirection=\"column\" alignContent=\"flex-end\" className={`grad-${weaponSheet.rarity}star`} >\r\n        <Box\r\n          component=\"img\"\r\n          src={weaponSheet.img}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ p: 1 }}>\r\n        <Typography variant=\"body2\"><strong>{name}</strong></Typography>\r\n        <Typography whiteSpace=\"nowrap\" lineHeight={1}>\r\n          <SqBadge color=\"primary\" sx={{ mr: 1 }}>Lv. {levelName}</SqBadge>\r\n          {subKey && <SqBadge color=\"info\"> Refinement {weapon.refinement}</SqBadge>}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">ATK: {mainVal}</Typography>\r\n        {subKey && <Typography variant=\"subtitle2\" lineHeight={1}>{KeyMap.get(subKey)}: {subVal}</Typography>}\r\n      </Box>\r\n    </Box>\r\n  </CardDark>\r\n}\r\nfunction ArtifactDisplay() {\r\n  const database = useContext(DatabaseContext)\r\n  const { data } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const artifacts = useMemo(() =>\r\n    allSlotKeys.map(k => [k, database._getArt(data.get(input.art[k].id).value ?? \"\")]),\r\n    [data, database]) as Array<[SlotKey, ICachedArtifact | undefined]>;\r\n  if (!artifactSheets) return null\r\n  return <Grid container spacing={1} >\r\n    {artifacts.map(([key, art]) => {\r\n      if (!art) return null\r\n      const { setKey, slotKey, mainStatKey } = art\r\n      return <Grid item key={key} flexGrow={1}>\r\n        <Chip color=\"secondary\" sx={{ width: \"100%\" }} icon={<ImgIcon src={artifactSheets?.[setKey].slotIcons[slotKey]} size={2.5} />}\r\n          label={<span>{KeyMap.get(mainStatKey)}</span>} />\r\n      </Grid>\r\n    })}\r\n  </Grid>\r\n}\r\nfunction Stats() {\r\n  const { data } = useContext(DataContext)\r\n  const statkeys = [\"hp\", \"atk\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  statkeys.push(`${data.get(input.charEle).value}_dmg_`)\r\n  if (data.get(input.weaponType).value !== \"catalyst\")\r\n    statkeys.push(\"physical_dmg_\")\r\n\r\n  return <Box sx={{ width: \"100%\" }} >\r\n    {statkeys.map(statKey => {\r\n      const stat = data.get(input.total[statKey] as NumNode)\r\n      const val = valueString(stat.value, stat.unit, stat.unit === \"flat\" ? 0 : undefined)\r\n      return <Box sx={{ display: \"flex\" }} key={statKey}>\r\n        <Typography flexGrow={1} color={`${stat.variant}.main`}><strong>{StatIcon[statKey]} {KeyMap.get(stat.key!)}</strong></Typography>\r\n        <Typography>{val}</Typography>\r\n      </Box>\r\n    })}\r\n    {data.get(input.special).key && <Box sx={{ display: \"flex\" }} >\r\n      <Typography flexGrow={1}><strong>Specialized:</strong></Typography>\r\n      <Typography>{KeyMap.get(data.get(input.special).key!)}</Typography>\r\n    </Box>}\r\n  </Box>\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { initialCharacter } from \"../Util/CharacterUtil\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { defaultInitialWeapon } from \"../Util/WeaponUtil\";\r\n\r\n/**\r\n * Basically a history hook to go to the dedicated character page. Will create the character if it doesn't exist.\r\n * @returns\r\n */\r\nexport default function useCharSelectionCallback() {\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const cb = useCallback(\r\n    async (characterKey: CharacterKey) => {\r\n      const character = database._getChar(characterKey)\r\n      // Create a new character + weapon, with linking if char isnt in db.\r\n      if (!character) {\r\n        const newChar = initialCharacter(characterKey)\r\n        database.updateChar(newChar)\r\n        const characterSheet = await CharacterSheet.get(characterKey)\r\n        if (!characterSheet) return\r\n        const weapon = defaultInitialWeapon(characterSheet.weaponTypeKey)\r\n        const weaponId = database.createWeapon(weapon)\r\n        database.setWeaponLocation(weaponId, characterKey)\r\n      }\r\n      history.push(`/character/${characterKey}`)\r\n    },\r\n    [history, database],\r\n  )\r\n  return cb\r\n}\r\n","import { initialBuildSettings } from \"../PageBuild/BuildSetting\"\r\nimport { ICachedCharacter } from \"../Types/character_WR\"\r\nimport { allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { objectKeyMap } from \"./Util\"\r\n\r\nexport function initialCharacter(key: CharacterKey): ICachedCharacter {\r\n  return {\r\n    key, // the game character this is based off\r\n    level: 1,\r\n    ascension: 0,\r\n    hitMode: \"avgHit\",\r\n    reactionMode: \"\",\r\n    equippedArtifacts: objectKeyMap(allSlotKeys, () => \"\"),\r\n    equippedWeapon: \"\",\r\n    conditional: {},\r\n    bonusStats: {},\r\n    enemyOverride: {},\r\n    buildSettings: initialBuildSettings(),\r\n    talent: {\r\n      auto: 1,\r\n      skill: 1,\r\n      burst: 1,\r\n    },\r\n    infusionAura: \"\",\r\n    constellation: 0,\r\n    team: [\"\", \"\", \"\"],\r\n    compareData: false,\r\n  }\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\n\r\nexport default function useCharacter(characterKey: CharacterKey | \"\" | undefined = \"\") {\r\n  const database = useContext(DatabaseContext)\r\n  const [character, updateCharacter] = useState(database._getChar(characterKey))\r\n  useEffect(() => updateCharacter(database._getChar(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, updateCharacter) : undefined,\r\n    [characterKey, updateCharacter, database])\r\n  return character\r\n}","import { useCallback, useContext } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { deepClone } from \"../Util/Util\";\r\n\r\ntype characterEquipWeapon = {\r\n  type: \"weapon\", id: string\r\n}\r\ntype characterReducerBonusStatsAction = {\r\n  type: \"editStats\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerenemyOverrideAction = {\r\n  type: \"enemyOverride\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerResetStatsAction = {\r\n  type: \"resetStats\",\r\n  statKey: string\r\n}\r\ntype characterTeamAction = {\r\n  type: \"team\",\r\n  index: number,\r\n  charKey: CharacterKey | \"\"\r\n}\r\nexport type characterReducerAction = characterEquipWeapon | characterReducerBonusStatsAction | characterReducerenemyOverrideAction | characterReducerResetStatsAction | characterTeamAction | Partial<ICachedCharacter>\r\n\r\nexport default function useCharacterReducer(characterKey: CharacterKey | \"\") {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  return useCallback((action: characterReducerAction): void => {\r\n    if (!characterKey) return\r\n\r\n    if (\"type\" in action) switch (action.type) {\r\n      case \"weapon\":\r\n        database.setWeaponLocation(action.id, characterKey)\r\n        break\r\n      case \"enemyOverride\": {\r\n        const character = database._getChar(characterKey)!\r\n        const enemyOverride = character.enemyOverride\r\n        const { statKey, value } = action\r\n        if (enemyOverride[statKey] === value) break\r\n        database.updateChar({ ...character, enemyOverride: { ...enemyOverride, [statKey]: value } })\r\n        break\r\n      }\r\n      case \"editStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey, value } = action\r\n\r\n        const bonusStats = deepClone(character.bonusStats)\r\n\r\n        if (bonusStats[statKey] === value) break\r\n        if (!value) delete bonusStats[statKey]\r\n        else bonusStats[statKey] = value\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"resetStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey } = action\r\n\r\n        const bonusStats = character.bonusStats\r\n        delete bonusStats[statKey]\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"team\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { team } = character\r\n\r\n        const { index, charKey: newCharKey } = action\r\n        const oldCharKey = team[index]\r\n        team[index] = newCharKey\r\n\r\n        // move the old char to \"inventory\"\r\n        if (oldCharKey) {\r\n          const oldChar = database._getChar(oldCharKey)\r\n          if (oldChar) database.updateChar({ ...oldChar, team: [\"\", \"\", \"\"] })\r\n        }\r\n\r\n        // unequip new char from its old teammates\r\n        if (newCharKey) {\r\n          const newChar = database._getChar(newCharKey)\r\n          if (newChar) {\r\n            newChar.team.forEach(t => {\r\n              if (!t) return\r\n              const tChar = database._getChar(t)\r\n              tChar && database.updateChar({ ...tChar, team: tChar.team.map(c => c === newCharKey ? \"\" : c) as ICachedCharacter[\"team\"] })\r\n            })\r\n          }\r\n        }\r\n\r\n        // equip new char to new teammates\r\n        team.forEach((t, tind) => {\r\n          if (!t) return\r\n          const newChar = database._getChar(t)\r\n          if (newChar) database.updateChar({ ...newChar, team: [characterKey, ...team].filter((_, i) => i !== tind + 1) as ICachedCharacter[\"team\"] })\r\n        })\r\n\r\n        // update src character\r\n        database.updateChar({ ...character, team })\r\n      }\r\n    } else\r\n      database.updateChar({ ...database._getChar(characterKey)!, ...action })\r\n  }, [characterKey, database])\r\n\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\";\r\nimport { TeamData } from \"../DataContext\";\r\nimport { common } from \"../Formula\";\r\nimport { dataObjForArtifact, dataObjForCharacter, uiDataForTeam, dataObjForWeapon } from \"../Formula/api\";\r\nimport { Data } from \"../Formula/type\";\r\nimport { ICachedArtifact } from \"../Types/artifact_WR\";\r\nimport { ICachedCharacter } from \"../Types/character_WR\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon_WR\";\r\nimport { objectMap } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport useForceUpdate from \"./useForceUpdate\";\r\n\r\ntype TeamDataBundle = {\r\n  team: CharacterKey[],\r\n  teamData: Dict<CharacterKey, Data[]>\r\n  teamBundle: Dict<CharacterKey, CharBundle>\r\n}\r\n\r\nexport default function useTeamData(characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0): TeamData | undefined {\r\n  const database = useContext(DatabaseContext)\r\n  const [dbDirty, setDbDirty] = useForceUpdate()\r\n  const [teamDataBundle, setTeamdataBundle] = useState(undefined as TeamDataBundle | undefined)\r\n  useEffect(() => {\r\n    getTeamData(database, characterKey, mainStatAssumptionLevel).then(r => setTeamdataBundle(r))\r\n  }, [dbDirty, characterKey, database, mainStatAssumptionLevel])\r\n\r\n  const { team = [], teamData, teamBundle } = teamDataBundle ?? {}\r\n\r\n  const [t1, t2, t3, t4] = team\r\n  useEffect(() =>\r\n    t1 ? database.followChar(t1, setDbDirty) : undefined,\r\n    [t1, setDbDirty, database])\r\n  useEffect(() =>\r\n    t2 ? database.followChar(t2, setDbDirty) : undefined,\r\n    [t2, setDbDirty, database])\r\n  useEffect(() =>\r\n    t3 ? database.followChar(t3, setDbDirty) : undefined,\r\n    [t3, setDbDirty, database])\r\n  useEffect(() =>\r\n    t4 ? database.followChar(t4, setDbDirty) : undefined,\r\n    [t4, setDbDirty, database])\r\n  if (!teamData || !teamBundle) return\r\n  const calcData = uiDataForTeam(teamData, characterKey as CharacterKey)\r\n  const data = objectMap(calcData, (obj, ck) => {\r\n    const { data: _, ...rest } = teamBundle[ck]!\r\n    return { ...obj, ...rest }\r\n  })\r\n\r\n  return data\r\n}\r\n\r\nexport async function getTeamData(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[]):\r\n  Promise<TeamDataBundle | undefined> {\r\n  if (!characterKey) return\r\n  const char1DataBundle = await getCharDataBundle(database, characterKey, mainStatAssumptionLevel, overrideArt)\r\n  if (!char1DataBundle) return\r\n  const team: CharacterKey[] = [characterKey]\r\n  const teamBundle = { [characterKey]: char1DataBundle }\r\n  const teamData: Dict<CharacterKey, Data[]> = { [characterKey]: char1DataBundle.data }\r\n\r\n  await Promise.all(char1DataBundle.character.team.map(async (ck) => {\r\n    if (!ck) return\r\n    const databundle = await getCharDataBundle(database, ck)\r\n    if (!databundle) return\r\n    team.push(ck)\r\n    teamBundle[ck] = databundle\r\n    teamData[ck] = databundle.data\r\n  }))\r\n\r\n  return { team, teamData, teamBundle }\r\n}\r\ntype CharBundle = {\r\n  character: ICachedCharacter,\r\n  weapon: ICachedWeapon,\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  data: Data[]\r\n}\r\nasync function getCharDataBundle(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[])\r\n  : Promise<CharBundle | undefined> {\r\n  if (!characterKey) return\r\n  const character = database._getChar(characterKey)\r\n  if (!character) return\r\n  const weapon = database._getWeapon(character.equippedWeapon)\r\n  if (!weapon) return\r\n  const characterSheet = await CharacterSheet.get(characterKey)\r\n  const weaponSheet = await WeaponSheet.get(weapon.key)\r\n  const artifactSheetsData = await ArtifactSheet.getAllData\r\n  if (!characterSheet || !weaponSheet || !artifactSheetsData) return\r\n  const artifacts = (overrideArt ?? Object.values(character.equippedArtifacts).map(a => database._getArt(a))).filter(a => a) as ICachedArtifact[]\r\n  const data = [\r\n    ...artifacts.map(a => dataObjForArtifact(a, mainStatAssumptionLevel)),\r\n    dataObjForCharacter(character),\r\n    characterSheet.data,\r\n    dataObjForWeapon(weapon),\r\n    weaponSheet.data,\r\n    artifactSheetsData,\r\n    common, // NEED TO PUT THIS AT THE END\r\n  ]\r\n  return { character, weapon, characterSheet, weaponSheet, data }\r\n}\r\n"],"names":["ConditionalWrapper","condition","wrapper","falseWrapper","children","HPIcon","className","icon","faHpPrimary","faHpSecondary","style","color","CdRedIcon","faCdReductionPrimary","faCdReductionSecondary","EnerRechIcon","faEnergyRechargePrimary","faEnergyRechargeSecondary","uncoloredEleIcons","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","coloredEleIcon","objectKeyMap","Object","keys","key","StatIcon","characterHP","finalHP","hp_","hp","baseATK","faAtk","characterATK","finalATK","atk_","atk","characterDEF","faDef","finalDEF","def_","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faDiceD20","enerRech_","heal_","faHealingBonus","cdRed_","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","DataContext","createContext","artifactSheets","then","imp","default","tr","setKey","strKey","ns","key18","allData","as","mergeData","values","map","s","data","ArtifactSheet","sheet","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","this","slots","slotIcons","src","name","rarity","allSlotKeys","icons","set","a","undefined","sheets","grouped","entries","forEach","Math","max","push","setToSlots","artifactSetEffect","parseInt","filter","length","weaponSheets","WeaponSheet","weaponSheet","weaponData","weaponType","passiveDescription","refineIndex","iconAwaken","get","weaponKey","w","getWeaponsOfType","getLevelString","weapon","level","ascensionMaxLevel","ascension","CharacterCard","characterKey","artifactChildren","weaponChildren","characterChildren","onClick","onClickHeader","footer","teamDataContext","useContext","teamData","useTeamData","character","characterSheet","target","onClickHandler","useCallback","actionWrapperFunc","sx","flexGrow","display","flexDirection","characterDispatch","useCharacterReducer","dataContextObj","mainStatAssumptionLevel","Suspense","fallback","variant","width","height","minHeight","value","Header","gap","Weapon","weaponId","equippedWeapon","ArtifactDisplay","Stats","input","characterEle","characterLevel","constellation","autoBoost","skillBoost","burstBoost","tAuto","tSkill","tBurst","position","content","left","top","opacity","backgroundImage","bannerImg","backgroundPosition","backgroundSize","flexShrink","maxWidth","xs","lg","alignSelf","zIndex","component","thumbImg","mt","py","pr","label","size","container","spacing","flexWrap","item","textShadow","whiteSpace","stars","colored","DatabaseContext","_getWeapon","usePromise","UIData","useMemo","computeUIData","dataObjForWeapon","mainVal","valueString","unit","subKey","subVal","levelName","alignContent","img","p","lineHeight","mr","refinement","KeyMap","database","artifacts","k","_getArt","id","art","mainStatKey","statkeys","statKey","stat","val","useCharSelectionCallback","history","useHistory","cb","_getChar","newChar","hitMode","reactionMode","equippedArtifacts","conditional","bonusStats","enemyOverride","buildSettings","initialBuildSettings","talent","auto","skill","burst","infusionAura","team","compareData","updateChar","CharacterSheet","defaultInitialWeapon","weaponTypeKey","createWeapon","setWeaponLocation","useCharacter","useState","updateCharacter","useEffect","followChar","action","type","deepClone","index","newCharKey","charKey","oldCharKey","oldChar","t","tChar","c","tind","_","i","useForceUpdate","dbDirty","setDbDirty","teamDataBundle","setTeamdataBundle","getTeamData","r","teamBundle","t1","t2","t3","t4","calcData","uiDataForTeam","objectMap","obj","ck","rest","overrideArt","getCharDataBundle","char1DataBundle","Promise","all","databundle","artifactSheetsData","dataObjForArtifact","dataObjForCharacter","common"],"sourceRoot":""}