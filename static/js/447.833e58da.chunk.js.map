{"version":3,"file":"static/js/447.833e58da.chunk.js","mappings":"gQAGqBA,EAAAA,EAAAA,IAEnB,aACE,IADa,eACTC,gBAAgBD,EAClB,MAAME,MAAM,6CAETC,UAAY,SAACC,EAASC,GAAV,OAAoC,yBCGlD,IAAMC,EAAK,SAACC,GAAD,OAAoB,SAACC,EAAA,EAAD,CAAWC,GAAG,QAAQC,MAAOH,KAItDI,EAAM,SAACJ,GAAD,OAAoB,SAACC,EAAA,EAAD,CAAWC,GAAG,YAAYC,MAAOH,M,uMCX3DD,EAAK,SAACC,EAAgBK,GAAjB,OAAqC,SAAC,IAAD,CAAWH,GAAG,QAAQC,MAAOH,EAAQK,OAAQA,KACvFD,EAAM,SAACJ,GAAD,OAAoB,SAAC,IAAD,CAAWE,GAAG,YAAYC,MAAOH,KAE3DM,EAAe,SAACC,GAAD,OAAoBC,EAAAA,EAAAA,IAAiB,CAAC,eAAF,eAAoBD,MAC7E,SAASE,EAAKC,EAAgDC,GACnE,IAAMJ,EAAO,CAACG,EAAKC,GAEnB,MAAO,CAACJ,EADKD,EAAaC,IAQrB,SAASK,EAAMC,EAAyCH,GAC7D,MAAO,CACL,SAACV,GAAD,OAAoB,SAAC,IAAD,CAAWE,GAAE,UAAKW,EAAL,YAAgBH,EAAhB,QAA2BP,MAAOH,KACnE,SAACA,EAAgBK,GAAjB,OAAqC,SAAC,IAAD,CAAWH,GAAE,UAAKW,EAAL,YAAgBH,GAAOP,MAAOH,EAAQK,OAAQA,Q,0mnBCb9FS,EAAeC,OAAOC,YAAYD,OAAOE,QAAQC,GAAeC,KAAI,+BAAET,EAAF,KAAOU,EAAP,WAAkB,CAACV,EAAD,CAAO,GAAP,eAAaK,OAAOV,OAAOe,UAEhH,SAASC,EACdX,EACAY,GAGO,IAFPC,EAEM,uDAFa,GACnBC,EACM,uDADsB,GAEtBC,EAAe,CACnBC,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,OAAQ,CACNnB,KAAKoB,EAAAA,EAAAA,IAASpB,GAAMqB,MAAMD,EAAAA,EAAAA,IAASR,EAAIU,aAEzCC,SAAQ,2BACKvB,GAAQc,IAIfU,EAAsBZ,EAAtBY,SAAUC,EAAYb,EAAZa,QACZC,EAAU,CAACX,GAEjB,GAAsB,QAAlBS,EAASH,MAAoC,QAAlBG,EAASH,MAAoC,OAAlBG,EAASH,KAAe,MAAM,IAAIpC,MAAM,gCAClG,IAAM0C,GAAeC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,IAAKN,EAASR,MAAMe,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkB5B,EAAaoB,EAASS,UAAUF,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkBpB,EAAIsB,UAAUzB,KAAI,SAAA0B,GAAC,uBAAIA,EAAEC,SAASZ,EAASH,aAAxB,QAAiC,OAAM,CAAErB,IAAKwB,EAASH,OAGvN,GAFAK,EAAQW,KAAK,CAAErB,MAAK,UAAIQ,EAASH,KAAOW,EAAAA,GAAAA,OAAAA,MAAqBb,OAAQ,CAAEmB,KAAMX,KAEzEF,EAAS,CACX,GAAqB,QAAjBA,EAAQJ,MAAmC,QAAjBI,EAAQJ,MAAmC,OAAjBI,EAAQJ,KAAe,MAAM,IAAIpC,MAAM,2CAC/F,IAAMsD,GAAcX,EAAAA,EAAAA,KAAQE,EAAAA,EAAAA,IAAKL,EAAQT,MAAMe,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,IAAkB5B,EAAaqB,EAAQQ,SAAU,CAAEjC,IAAKyB,EAAQJ,OACzHK,EAAQW,KAAK,CACXpB,QAAO,UAAIQ,EAAQJ,KAAOW,EAAAA,GAAAA,OAAAA,KAC1Bb,OAAQ,CAAEqB,IAAKD,KAGnB,OAAOE,EAAAA,EAAAA,IAAU,GAAD,OAAKf,EAAL,EAAcgB,EAAAA,EAAAA,IAAa7B,EAAYb,M,sSCpCnD2C,EAAWC,EACX5C,EAAiB,mBACV6C,EAAOlC,EAAsBX,EAAK2C,GACzCG,GAAmB,kBACpBH,GADoB,IAEvBI,KAAAA,EACAC,WAAAA,EACAC,SAAU,KAEZ,MAAmBC,EAAAA,GAAYlD,EAAK8C,EAAOH,EAAUE,GCS/CM,EAAW,CAuBfC,iBAAAA,GAKF,I,mRC9CMT,EAAWC,EACX5C,EAAiB,YACV6C,EAAOlC,EAAsBX,EAAK2C,GACzCG,GAAmB,kBACpBH,GADoB,IAEvBI,KAAAA,EACAC,WAAAA,EACAC,SAAU,KAEZ,MAAmBC,EAAAA,GAAYlD,EAAK8C,EAAOH,EAAUE,G,shBCL/C7C,EAAiB,eACjB2C,EAAWC,EACjB,GAAa1C,EAAAA,EAAAA,IAAM,SAAUF,GAA7B,eAAOqD,EAAP,KACMC,EAAU,CAAC,IAAM,GAAM,IAAM,IAAM,KAGzC,GAAuCvD,EAAAA,EAAAA,IAAKC,EAAK,sBAAjD,eAAOuD,EAAP,KAAwBC,EAAxB,KACMC,GAAOC,EAAAA,EAAAA,IAAM,KAAMF,GAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAHhC,CAAC,GAAK,IAAM,GAAK,IAAM,MAIjC2B,GAAcD,EAAAA,EAAAA,IAAM,KAAMF,GAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsB,IAC3EM,GAAeF,EAAAA,EAAAA,IAAM,KAAMF,GAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsB,IAC5EO,GAAgBH,EAAAA,EAAAA,IAAM,KAAMF,GAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BsB,IAE7EQ,GAAO/B,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BW,EAASoB,SAAStD,KAAI,SAAA0B,GAAC,uBAAIA,EAAE2B,YAAN,QAAcE,QAEhFnB,GAAOlC,EAAsBX,EAAK2C,EAAU,CAChD1B,OAAQ,CACNgD,SAAUH,GAEZI,SAAU,CACRjD,OAAQ,CACNwC,KAAAA,EACAE,YAAAA,EACAC,aAAAA,EACAC,cAAAA,MAKAf,GAAsB,CAC1BC,KAAAA,EACAC,WAAAA,EACAC,SAAU,CAAC,CACTkB,OAAQ,CAAC,CAAEC,KAAMN,IACjBO,YAAa,CACX3D,MAAO8C,EACP3D,KAAM0D,EACNW,UAAU,EACVI,QAAQC,EAAAA,EAAAA,IAAkBlB,EAAIN,EAAMC,GACpCwB,aAAaC,EAAAA,EAAAA,IAAgBpB,GAC7BqB,MAAM,SAACnF,EAAA,EAAD,CAAWC,GAAG,sBAAsBC,MAAM,SAChDkF,OAAQ,CACNC,GAAI,CACFT,OAAQ,CAAC,CACPC,KAAMX,GACL,CACDW,KAAMT,GACL,CACDS,KAAMR,GACL,CACDQ,KAAMP,GACL,CACDgB,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,YCPlB,GA9Bc,CAOZC,UAAAA,EAIAC,aDiCF,IAAmB9B,EAAAA,GAAYlD,EAAK8C,GAAOH,EAAUE,K,wBE/D/C7C,GAAiB,qBACjB2C,G,8PAEOE,GAAOlC,EAAsBX,GAAK2C,IACzCG,IAAmB,kBACpBH,IADoB,IAEvBI,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBC,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,scCR/C7C,GAAiB,iBACjB2C,GAAWC,GAEjB,IAAuC7C,EAAAA,EAAAA,IAAKC,GAAK,qBAAjD,iBAAOuD,GAAP,MAAwBC,GAAxB,MACMyB,IAAoBC,EAAAA,GAAAA,IAAM,EAAG,GAE7BzB,IAAO3B,EAAAA,EAAAA,KAAKqD,EAAAA,EAAAA,IAAO3B,IAAa4B,EAAAA,GAAAA,GAAaH,IAAmB,SAAAI,GAAC,OAAIjE,EAAAA,EAAAA,IAASiE,MAAK,IACvFtD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFG,CAAC,IAAM,IAAM,IAAM,IAAM,OAIlCa,GAAOlC,EAAsBX,GAAK2C,GAAU,CAChD1B,OAAQ,CACNwC,KAAMA,MAIJX,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAO8C,GACP3D,KAAM0D,GACNmB,MAAMrF,EAAAA,EAAAA,IAAG,oBACTsF,OACEtE,OAAOC,YAAY2E,GAAkBxE,KAAI,SAAA6E,GAAC,MAAI,CAACA,EAAG,CAChDZ,KAAK,GAAD,OAAKY,GACTnB,OAAQ,CAAC,CACPC,KAAMX,IACL,CACDoB,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,gBAMlB,OAAmB5B,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,wbCrC/C7C,GAAiB,cACjB2C,GAAWC,GACjB,IAAgB1C,EAAAA,EAAAA,IAAM,SAAUF,IAAvBuF,IAAT,gBAGA,IAAuCxF,EAAAA,EAAAA,IAAKC,GAAK,qBAAjD,iBAAOuD,GAAP,MAAwBC,GAAxB,MACMS,IAAWP,EAAAA,EAAAA,IAAM,KAAMF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrC,CAAC,GAAK,GAAK,GAAK,GAAK,MAG9Ba,GAAOlC,EAAsBX,GAAK2C,GAAU,CAChD1B,OAAQ,CACNgD,SAAAA,MAIEnB,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAO8C,GACP3D,KAAM0D,GACNmB,KAAMa,GAAI,YACVZ,OAAQ,CACNC,GAAI,CACFT,OAAQ,CAAC,CACPC,KAAMH,WAOlB,OAAmBf,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,mcC9B/C7C,GAAiB,kBACjB2C,GAAWC,GAEjB,IAAa1C,EAAAA,EAAAA,IAAM,SAAUF,IAAtBqD,IAAP,gBAEA,IAAmCtD,EAAAA,EAAAA,IAAKC,GAAK,SAA7C,iBAAOwF,GAAP,MAAsBC,GAAtB,MAGM3B,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAGhC4B,GAAYrF,OAAOC,YAAYqF,GAAAA,EAAAA,KAAgB,SAAAC,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,UAAc7D,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8B,SACtG+B,IAAS/D,EAAAA,EAAAA,KACbgE,EAAAA,EAAAA,IAAU9D,EAAAA,GAAAA,cAAqBA,EAAAA,GAAAA,SAC7BZ,EAAAA,EAAAA,IAAS,EAAG,KACZA,EAAAA,EAAAA,IAAS,EAAG,MACd+D,EAAAA,EAAAA,IAAOM,IAAWL,EAAAA,GAAAA,IAAaF,EAAAA,GAAAA,IAAM,EAAG,IAAI,SAAAG,GAAC,OAAIjE,EAAAA,EAAAA,IAASiE,MAAK,IAC/DtD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YARC,CAAC,KAAO,IAAM,KAAO,KAAO,MAQG,CAAEhC,IAAK,OAEtC6C,GAAOlC,EAAsBX,GAAK2C,GAAU,CACvD1B,QAAO,kBACFyE,IADC,IAEJjC,KAAMoC,OAGJ/C,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTkB,OAAQ9D,OAAOV,OAAO+F,IAAWjF,KAAI,SAAA2D,GAAI,MAAK,CAAEA,KAAAA,MAChDC,YAAa,CACX3D,MAAO+E,GACP5F,KAAM2F,GACNd,KAAMrB,GAAG,eACTsB,OAAQtE,OAAOC,aAAY4E,EAAAA,GAAAA,IAAM,EAAG,GAAGzE,KAAI,SAAA4E,GAAC,MAAI,CAACA,EAAG,CAClDX,KAAK,SAAD,OAAWW,GACflB,OAAQ,CAAC,CAAEC,KAAMyB,eAKzB,OAAmB3C,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,gdCzC/C7C,GAAiB,eACjB2C,GAAWC,GACjB,IAAgB1C,EAAAA,EAAAA,IAAM,SAAUF,IAAvBuF,IAAT,gBAGA,IAAuCxF,EAAAA,EAAAA,IAAKC,GAAK,kBAAjD,iBAAOuD,GAAP,MAAwBC,GAAxB,MACMuC,IAAMC,EAAAA,GAAAA,KAAclE,EAAAA,EAAAA,IAAKE,EAAAA,GAAAA,MAAAA,KAAiBD,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAF3C,CAAC,GAAK,IAAM,GAAK,IAAM,MAEwD,YAAa,CACzG+D,IAAK,CAAEE,KAAK7E,EAAAA,EAAAA,IAAS,eAEjByB,GAAOlC,EAAsBX,GAAK2C,QAAUuD,EAAW,CAC3DH,IAAAA,KAGIjD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAO8C,GACP3D,KAAM0D,GACNmB,KAAMa,GAAI,YACVZ,OAAQ,CACNC,GAAI,CACFT,OAAQ,CAAC,CACPC,MAAMxC,EAAAA,EAAAA,IAAQmE,GAAK,CAAE/F,IAAI,UAAD,OAAYA,GAAZ,sBAOpC,OAAmBkD,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,2bChC/C7C,GAAiB,qBACjB2C,GAAWC,GAIXa,IAAO0C,EAAAA,EAAAA,KAAIrE,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpB,CAAC,IAAM,IAAM,IAAM,IAAM,OAE2BH,EAAAA,EAAAA,IAAIG,EAAAA,GAAAA,MAAAA,WAAuBoE,EAAAA,EAAAA,KAAS,MAAMrE,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YADrG,CAAC,GAAK,GAAK,EAAG,IAAK,OAIlC,IAAuCjC,EAAAA,EAAAA,IAAKC,GAAK,iBAAjD,iBAAOuD,GAAP,MAAwBC,GAAxB,MACM6C,IAAY3C,EAAAA,EAAAA,IAAM,KAAMF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFpC,CAAC,GAAK,IAAM,GAAM,IAAM,GAAK,OAIjCa,GAAOlC,EAAsBX,GAAK2C,GAAU,CACvD1B,OAAQ,CACNwC,KAAAA,GACA4C,UAAAA,MAGEvD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTkB,OAAQ,CAAC,CACPC,KAAMX,KAERY,YAAa,CACX3D,MAAO8C,GACP3D,KAAM0D,GACNmB,MAAMrF,EAAAA,EAAAA,IAAG,kBACTsF,OAAQ,CACNC,GAAI,CACFT,OAAQ,CAAC,CACPC,KAAMiC,IACL,CACDxB,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,YCElB,GAzBgB,CACdwB,mBAAAA,GACAC,eAAAA,GACAC,YAAAA,GACAC,gBAAAA,GACAC,aAAAA,GAIAC,mBDqBF,IAAmBzD,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,K,qRE7C/CF,GAAWC,GACX5C,GAAiB,aACV6C,GAAOlC,EAAsBX,GAAK2C,IACzCG,IAAmB,kBACpBH,IADoB,IAEvBI,KAAAA,GACAC,WAAAA,GACAC,SAAU,KCyCZ,GA7BY,CAQV2D,WDlBF,IAAmB1D,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,K,0RET/CF,GAAWC,GACX5C,GAAiB,mBACV6C,GAAOlC,EAAsBX,GAAK2C,IACzCG,IAAmB,kBACpBH,IADoB,IAEvBI,KAAAA,GACAC,WAAAA,GACAC,SAAU,KAEZ,OAAmBC,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,wBCN/C7C,GAAiB,sBACjB2C,G,ydAEN,IAAgBzC,EAAAA,EAAAA,IAAM,SAAUF,IAAvBuF,IAAT,gBACMsB,IAAgB/E,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAFrB,CAAC,IAAM,KAAO,IAAM,KAAO,KAE6B,CAAEhC,IAAK,MAAQgC,EAAAA,GAAAA,OAAAA,IACjF8E,IAAQ/E,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0BW,GAASoB,SAAStD,KAAI,SAAA0B,GAAC,uBAAIA,EAAE2E,aAAN,QAAe9C,QAC3EnB,GAAOlC,EAAsBX,GAAK2C,GAAU,CACvD1B,OAAQ,CAAE4F,cAAAA,GAAeC,MAAAA,KACxB,CAAED,cAAAA,KACC/D,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACTkB,OAAQ,CAAC,CACPC,KAAM0C,IACL,CACDjC,KAAMU,GAAI,QACVnB,KAAMyC,QAIZ,OAAmB3D,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,6bCpB/C7C,GAAiB,gBACjB2C,GAAWC,GACXkB,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KACtC,IAA6B/D,EAAAA,EAAAA,IAAKC,GAAK,eAAvC,iBAAO+G,GAAP,MAAiBC,GAAjB,MAEMC,IAAc/B,EAAAA,GAAAA,IAAM,EAAG,GAAGzE,KAAI,SAAA4E,GAAC,OAAI3B,EAAAA,EAAAA,IAAMsD,GAAU3B,EAAE6B,YAAYnF,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8B,GAAKrD,KAAI,SAAA0G,GAAC,OAAIA,EAAI9B,MAAK,CAAErF,IAAK,kBAEnIoH,GAAY/G,OAAOC,YAAYqF,GAAAA,EAAAA,KAAgB,SAAAM,GAAG,MAAI,CAACA,GAAKvC,EAAAA,EAAAA,IAAMsD,GAAU,KAAKjF,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8B,UAE9GjB,GAAOlC,EAAsBX,GAAK2C,GAAU,CACvD1B,QAAO,QACLoG,WAAYxF,EAAAA,GAAAA,WAAA,UAAOoF,MAChB5G,OAAOC,YAAYqF,GAAAA,EAAAA,KAAgB,SAAAM,GAAG,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAgBmB,GAAUnB,WAGrEnD,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAOsG,GACPnH,KAAMkH,GACNrC,KAAM,eACNC,OAAQ,CACN,EAAG,CACDD,KAAM,IACNP,OAAQ,CAAC,CAAEC,KAAM6C,GAAY,MAE/B,EAAG,CACDvC,KAAM,IACNP,OAAQ,CAAC,CAAEC,KAAM6C,GAAY,MAE/B,EAAG,CACDvC,KAAM,IACNP,OAAO,CAAE,CAAEC,KAAM6C,GAAY,KAAvB,eACHtB,GAAAA,EAAAA,KAAgB,SAAAM,GAAG,MAAK,CAAE7B,KAAMgD,GAAUnB,eAOvD,OAAmB/C,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,4bC3C/C7C,GAAiB,aAEjB2C,GAAWC,GAIjB,IAAqC7C,EAAAA,EAAAA,IAAKC,GAAK,oBAA/C,iBAAOsH,GAAP,MAAuBC,GAAvB,MACA,IAA6CxH,EAAAA,EAAAA,IAAKC,GAAK,wBAAvD,iBAAOwH,GAAP,MAA2BC,GAA3B,MACMC,IAAY3F,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAJL,CAAC,GAAM,IAAM,GAAM,IAAM,KAK1CqF,IAAa3D,EAAAA,EAAAA,IAAM,SAAU6D,GAAYG,IACzCC,IAAU,UAAQN,IAClB1D,IAAcD,EAAAA,EAAAA,IAAM,aAAc+D,GAAgBC,IAElD7E,GAAOlC,EAAsBX,GAAK2C,GAAU,CAChD1B,OAAQ,CACNoG,WAAAA,GACAM,WAAAA,GACAhE,YAAAA,MAIEb,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAO6G,GACP1H,KAAMyH,GACN5C,MAAMrF,EAAAA,EAAAA,IAAG,gBACTsF,OAAQ,CACNiD,OAAQ,CACNzD,OAAQ,CAAC,CACPC,KAAMiD,IACL,CACDjD,KAAMuD,SAKb,CACDtD,YAAa,CACX3D,MAAO+G,GACP5H,KAAM2H,GACN9C,MAAMrF,EAAAA,EAAAA,IAAG,sBACTsF,OAAQ,CACNkD,WAAY,CACV1D,OAAQ,CAAC,CACPC,KAAMT,WAOlB,OAAmBT,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,I,2bCrD/C7C,GAAiB,aACjB2C,GAAWC,GACjB,IAAgB1C,EAAAA,EAAAA,IAAM,SAAUF,IAAvBuF,IAAT,gBAGMuC,GAAuB,CAAC,IAAM,GAAK,IAAM,IAAM,KAGrD,IAAuC/H,EAAAA,EAAAA,IAAKC,GAAK,SAAjD,iBAAOuD,GAAP,MAAwBC,GAAxB,MACMC,IAAOC,EAAAA,EAAAA,IAAM,aAAcF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAL9B,CAAC,GAAK,IAAM,GAAK,KAAM,OAM3C+F,IAAarE,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC5EE,IAAYtE,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC3EG,IAAevE,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC9EI,IAAWxE,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC1EK,IAAazE,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC5EM,IAAY1E,EAAAA,EAAAA,IAAM,OAAQF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAA0B8F,KAC3EO,IAAS3E,EAAAA,EAAAA,IAAM,YAAaF,IAAazB,EAAAA,EAAAA,IAAUC,EAAAA,GAAAA,OAAAA,YAV5B,CAAC,IAAK,IAAK,IAAK,IAAK,OAY5Ca,GAAOlC,EAAsBX,GAAK2C,GAAU,CAChD1B,OAAQ,CACNwC,KAAAA,GACAsE,WAAAA,GACAC,UAAAA,GACAC,aAAAA,GACAC,SAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAC,OAAAA,MAIEvF,GAAsB,CAC1BC,KAAAA,GACAC,WAAAA,GACAC,SAAU,CAAC,CACToB,YAAa,CACX3D,MAAO8C,GACP3D,KAAM0D,GACNmB,MAAM,SAACnF,EAAA,EAAD,CAAWC,GAAG,wBAAwBC,MAAM,gBAClDkF,OAAQ,CACN2D,KAAM,CACJ5D,KAAMa,GAAI,QACVpB,OAAQ,CAAC,CACPC,KAAM2D,IACL,CACD3D,KAAM4D,IACL,CACD5D,KAAM6D,IACL,CACD7D,KAAM8D,IACL,CACD9D,KAAM+D,IACL,CACD/D,KAAMgE,IACL,CACDvD,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,OAGVyD,UAAW,CACT7D,KAAMa,GAAI,aACVpB,OAAQ,CAAC,CACPC,KAAMiE,IACL,CACDxD,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,OAGV0D,WAAY,CACV9D,KAAMa,GAAI,cACVpB,OAAQ,CAAC,CACPC,KAAMX,IACL,CACDoB,MAAMnF,EAAAA,EAAAA,IAAI,YACVgB,MAAO,GACPoE,KAAM,YCrClB,GA3BiB,CACf2D,iBAAAA,GAIAC,oBAAAA,GAKAC,cAAAA,GAWAC,WAAAA,GACAC,WDiDF,IAAmB3F,EAAAA,GAAYlD,GAAK8C,GAAOH,GAAUE,KEjFrD,IAPgD,0CAC3CiG,IACA3F,GACA4F,IACAC,IACAC,K","sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\n/**\n * @deprecated\n */\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\n/**\n * @deprecated\n */\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\n  ]\n}\n","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import Akuoumaru from './Akuoumaru'\n// import BlackcliffSlasher from './BlackcliffSlasher'\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\n// import DebateClub from './DebateClub'\n// import FavoniusGreatsword from './FavoniusGreatsword'\n// import FerrousShadow from './FerrousShadow'\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\n// import LithicBlade from './LithicBlade'\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\n// import OldMercsPal from './OldMercsPal'\n// import PrototypeArchaic from './PrototypeArchaic'\n// import Rainslasher from './Rainslasher'\n// import RedhornStonethresher from './RedhornStonethresher'\n// import RoyalGreatsword from './RoyalGreatsword'\n// import SacrificialGreatsword from './SacrificialGreatsword'\n// import SerpentSpine from './SerpentSpine'\n// import SkyriderGreatsword from './SkyriderGreatsword'\n// import SkywardPride from './SkywardPride'\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\n// import SongOfBrokenPines from './SongOfBrokenPines'\n// import TheBell from './TheBell'\n// import TheUnforged from './TheUnforged'\nimport WasterGreatsword from './WasterGreatsword'\n// import Whiteblind from './Whiteblind'\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\n// import WolfsGravestone from './WolfsGravestone'\nconst claymore = {\n  // Akuoumaru,\n  // BlackcliffSlasher,\n  // BloodtaintedGreatsword,\n  // DebateClub,\n  // FavoniusGreatsword,\n  // FerrousShadow,\n  // KatsuragikiriNagamasa,\n  // LithicBlade,\n  // LuxuriousSeaLord,\n  // OldMercsPal,\n  // PrototypeArchaic,\n  // Rainslasher,\n  // RedhornStonethresher,\n  // RoyalGreatsword,\n  // SacrificialGreatsword,\n  // SerpentSpine,\n  // SkyriderGreatsword,\n  // SkywardPride,\n  // SnowTombedStarsilver,\n  // SongOfBrokenPines,\n  // TheBell,\n  // TheUnforged,\n  WasterGreatsword,\n  // Whiteblind,\n  // WhiteIronGreatsword,\n  // WolfsGravestone,\n} as const\nexport default claymore\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { sgt } from '../../../Characters/SheetUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr] = trans(\"weapon\", key)\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst plunging_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\n\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{ node: dmg_ }],\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      teamBuff: true,\n      header: conditionalHeader(tr, icon, iconAwaken),\n      description: conditionaldesc(tr),\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\n      states: {\n        on: {\n          fields: [{\n            node: atk_\n          }, {\n            node: normal_dmg_\n          }, {\n            node: charged_dmg_\n          }, {\n            node: plunging_dmg_\n          }, {\n            text: sgt(\"duration\"),\n            value: 12,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import AmenomaKageuchi from './AmenomaKageuchi'\n// import AquilaFavonia from './AquilaFavonia'\n// import BlackcliffLongsword from './BlackcliffLongsword'\n// import CinnabarSpindle from './CinnabarSpindle'\n// import CoolSteel from './CoolSteel'\n// import DarkIronSword from './DarkIronSword'\nimport DullBlade from './DullBlade'\n// import FavoniusSword from './FavoniusSword'\n// import FesteringDesire from './FesteringDesire'\n// import FilletBlade from './FilletBlade'\nimport FreedomSworn from './FreedomSworn'\n// import HarbingerOfDawn from './HarbingerOfDawn'\n// import IronSting from './IronSting'\n// import LionsRoar from './LionsRoar'\n// import MistsplitterReforged from './MistsplitterReforged'\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\n// import PrototypeRancour from './PrototypeRancour'\n// import RoyalLongsword from './RoyalLongsword'\n// import SacrificialSword from './SacrificialSword'\n// import SilverSword from './SilverSword'\n// import SkyriderSword from './SkyriderSword'\n// import SkywardBlade from './SkywardBlade'\n// import SummitShaper from './SummitShaper'\n// import SwordOfDescension from './SwordOfDescension'\n// import TheAlleyFlash from './TheAlleyFlash'\n// import TheBlackSword from './TheBlackSword'\n// import TheFlute from './TheFlute'\n// import TravelersHandySword from './TravelersHandySword'\nconst sword = {\n  // AmenomaKageuchi,\n  // AquilaFavonia,\n  // BlackcliffLongsword,\n  // CinnabarSpindle,\n  // CoolSteel,\n  // DarkIronSword,\n  DullBlade,\n  // FavoniusSword,\n  // FesteringDesire,\n  // FilletBlade,\n  FreedomSworn,\n  // HarbingerOfDawn,\n  // IronSting,\n  // LionsRoar,\n  // MistsplitterReforged,\n  // PrimordialJadeCutter,\n  // PrototypeRancour,\n  // RoyalLongsword,\n  // SacrificialSword,\n  // SilverSword,\n  // SkyriderSword,\n  // SkywardBlade,\n  // SummitShaper,\n  // SwordOfDescension,\n  // TheAlleyFlash,\n  // TheBlackSword,\n  // TheFlute,\n  // TravelersHandySword,\n} as const\nexport default sword\n","import icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\n\nimport data_gen_json from './data_gen.json'\nimport { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport { dataObjForWeaponSheet } from '../../util'\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: st(\"afterDefeatEnemy\"),\n      states:\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\n          name: `${c}`,\n          fields: [{\n            node: atk_,\n          }, {\n            text: sgt(\"duration\"),\n            value: 30,\n            unit: \"s\"\n          }]\n        }]))\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: trm(\"condName\"),\n      states: {\n        on: {\n          fields: [{\n            node: all_dmg_,\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  matchFull(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { /* TODO: Add key for inactive char */ })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n    conditional: {\n      value: condStack,\n      path: condStackPath,\n      name: tr(\"passiveName\"),\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\n        name: `Stack ${i}`,\n        fields: [{ node: atkInc }]\n      }]))\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc)), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  hit\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: trm(\"condName\"),\n      states: {\n        on: {\n          fields: [{\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{\n      node: atk_,\n    }],\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: st(\"afterUse.burst\"),\n      states: {\n        on: {\n          fields: [{\n            node: enerRech_\n          }, {\n            text: sgt(\"duration\"),\n            value: 12,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\n// import Deathmatch from './Deathmatch'\n// import DragonsBane from './DragonsBane'\n// import DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\n// import FavoniusLance from './FavoniusLance'\n// import Halberd from './Halberd'\n// import IronPoint from './IronPoint'\n// import KitainCrossSpear from './KitainCrossSpear'\n// import LithicSpear from './LithicSpear'\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\n// import PrototypeStarglitter from './PrototypeStarglitter'\n// import RoyalSpear from './RoyalSpear'\n// import SkywardSpine from './SkywardSpine'\n// import StaffOfHoma from './StaffOfHoma'\n// import TheCatch from './TheCatch'\n// import VortexVanquisher from './VortexVanquisher'\n// import WavebreakersFin from './WavebreakersFin'\n// import WhiteTassel from './WhiteTassel'\nconst polearm = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  // Deathmatch,\n  // DragonsBane,\n  // DragonspineSpear,\n  EngulfingLightning,\n  // FavoniusLance,\n  // Halberd,\n  // IronPoint,\n  // KitainCrossSpear,\n  // LithicSpear,\n  // PrimordialJadeWingedSpear,\n  // PrototypeStarglitter,\n  // RoyalSpear,\n  // SkywardSpine,\n  // StaffOfHoma,\n  // TheCatch,\n  // VortexVanquisher,\n  // WavebreakersFin,\n  // WhiteTassel,\n} as const\nexport default polearm\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import AlleyHunter from './AlleyHunter'\n// import AmosBow from './AmosBow'\n// import BlackcliffWarbow from './BlackcliffWarbow'\n// import CompoundBow from './CompoundBow'\n// import ElegyForTheEnd from './ElegyForTheEnd'\n// import FavoniusWarbow from './FavoniusWarbow'\n// import Hamayumi from './Hamayumi'\nimport HuntersBow from './HuntersBow'\n// import Messenger from './Messenger'\n// import MitternachtsWaltz from './MitternachtsWaltz'\n// import MouunsMoon from './MouunsMoon'\n// import PolarStar from './PolarStar'\n// import Predator from './Predator'\n// import PrototypeCrescent from './PrototypeCrescent'\n// import RavenBow from './RavenBow'\n// import RecurveBow from './RecurveBow'\n// import RoyalBow from './RoyalBow'\n// import Rust from './Rust'\n// import SacrificialBow from './SacrificialBow'\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\n// import SharpshootersOath from './SharpshootersOath'\n// import SkywardHarp from './SkywardHarp'\n// import Slingshot from './Slingshot'\n// import TheStringless from './TheStringless'\n// import TheViridescentHunt from './TheViridescentHunt'\n// import ThunderingPulse from './ThunderingPulse'\n// import WindblumeOde from './WindblumeOde'\nconst bow = {\n  // AlleyHunter,\n  // AmosBow,\n  // BlackcliffWarbow,\n  // CompoundBow,\n  // ElegyForTheEnd,\n  // FavoniusWarbow,\n  // Hamayumi,\n  HuntersBow,\n  // Messenger,\n  // MitternachtsWaltz,\n  // MouunsMoon,\n  // PolarStar,\n  // Predator,\n  // PrototypeCrescent,\n  // RavenBow,\n  // RecurveBow,\n  // RoyalBow,\n  // Rust,\n  // SacrificialBow,\n  // SeasonedHuntersBow,\n  // SharpshootersOath,\n  // SkywardHarp,\n  // Slingshot,\n  // TheStringless,\n  // TheViridescentHunt,\n  // ThunderingPulse,\n  // WindblumeOde,\n} as const\nexport default bow\n","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { dataObjForWeaponSheet } from '../../util'\nimport { input } from '../../../../Formula'\nimport data_gen_json from './data_gen.json'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { trans } from '../../../SheetUtil'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { normal_dmgInc, heal_ }\n}, { normal_dmgInc })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\n\nconst skill_dmg_s = range(1, 3).map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\n\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condNode,\n      path: condPath,\n      name: \"Kagura Dance\",\n      states: {\n        1: {\n          name: \"1\",\n          fields: [{ node: skill_dmg_s[0] }]\n        },\n        2: {\n          name: \"2\",\n          fields: [{ node: skill_dmg_s[1] }]\n        },\n        3: {\n          name: \"3\",\n          fields: [{ node: skill_dmg_s[2], },\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))\n          ]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"SolarPearl\"\n\nconst data_gen = data_gen_json as WeaponData\n\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\n\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\nconst burst_dmg_ = { ...skill_dmg_ }\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_,\n    burst_dmg_,\n    normal_dmg_,\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condNormal,\n      path: condNormalPath,\n      name: st(\"hitOp.normal\"),\n      states: {\n        normal: {\n          fields: [{\n            node: skill_dmg_\n          }, {\n            node: burst_dmg_\n          }]\n        }\n      }\n    }\n  }, { \n    conditional: {\n      value: condSkillBurst,\n      path: condSkillBurstPath,\n      name: st(\"hitOp.skillOrBurst\"),\n      states: {\n        skillBurst: {\n          fields: [{\n            node: normal_dmg_\n          }]\n        },\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { sgt } from '../../../Characters/SheetUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    anemo_dmg_,\n    cryo_dmg_,\n    electro_dmg_,\n    geo_dmg_,\n    hydro_dmg_,\n    pyro_dmg_,\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\n      states: {\n        aria: {\n          name: trm(\"aria\"),\n          fields: [{\n            node: anemo_dmg_\n          }, {\n            node: cryo_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            node: geo_dmg_\n          }, {\n            node: hydro_dmg_\n          }, {\n            node: pyro_dmg_\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        },\n        interlude: {\n          name: trm(\"interlude\"),\n          fields: [{\n            node: eleMas\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        },\n        recitative: {\n          name: trm(\"recitative\"),\n          fields: [{\n            node: atk_\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import ApprenticesNotes from './ApprenticesNotes'\n// import BlackcliffAgate from './BlackcliffAgate'\n// import DodocoTales from './DodocoTales'\n// import EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\n// import EyeOfPerception from './EyeOfPerception'\n// import FavoniusCodex from './FavoniusCodex'\n// import Frostbearer from './Frostbearer'\n// import HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\n// import MagicGuide from './MagicGuide'\n// import MappaMare from './MappaMare'\n// import MemoryOfDust from './MemoryOfDust'\n// import OtherworldlyStory from './OtherworldlyStory'\n// import PocketGrimoire from './PocketGrimoire'\n// import PrototypeAmber from './PrototypeAmber'\n// import RoyalGrimoire from './RoyalGrimoire'\n// import SacrificialFragments from './SacrificialFragments'\n// import SkywardAtlas from './SkywardAtlas'\nimport SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\n// import TwinNephrite from './TwinNephrite'\n// import WineAndSong from './WineAndSong'\nconst catalyst = {\n  ApprenticesNotes,\n  // BlackcliffAgate,\n  // DodocoTales,\n  // EmeraldOrb,\n  EverlastingMoonglow,\n  // EyeOfPerception,\n  // FavoniusCodex,\n  // Frostbearer,\n  // HakushinRing,\n  KagurasVerity,\n  // LostPrayerToTheSacredWinds,\n  // MagicGuide,\n  // MappaMare,\n  // MemoryOfDust,\n  // OtherworldlyStory,\n  // PocketGrimoire,\n  // PrototypeAmber,\n  // RoyalGrimoire,\n  // SacrificialFragments,\n  // SkywardAtlas,\n  SolarPearl,\n  TheWidsith,\n  // ThrillingTalesOfDragonSlayers,\n  // TwinNephrite,\n  // WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"names":["Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","values","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","data","sheet","icon","iconAwaken","document","WeaponSheet","claymore","WasterGreatsword","tr","autoSrc","condPassivePath","condPassive","atk_","equal","normal_dmg_","charged_dmg_","plunging_dmg_","dmg_","addProps","NaN","all_dmg_","teamBuff","fields","node","conditional","header","conditionalHeader","description","conditionaldesc","name","states","on","text","unit","DullBlade","FreedomSworn","opponentsDefeated","range","lookup","objectKeyMap","i","c","trm","condStackPath","condStack","dmg_Nodes","allElements","e","atkInc","matchFull","hit","customDmgNode","ele","undefined","min","percent","enerRech_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","EngulfingLightning","HuntersBow","normal_dmgInc","heal_","condPath","condNode","skill_dmg_s","toString","d","ele_dmg_s","skill_dmg_","condNormalPath","condNormal","condSkillBurstPath","condSkillBurst","refineVal","burst_dmg_","normal","skillBurst","refinementEleDmgVals","anemo_dmg_","cryo_dmg_","electro_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","eleMas","aria","interlude","recitative","ApprenticesNotes","EverlastingMoonglow","KagurasVerity","SolarPearl","TheWidsith","sword","polearm","bow","catalyst"],"sourceRoot":""}