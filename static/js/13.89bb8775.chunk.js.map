{"version":3,"sources":["Components/FieldDisplay.tsx","Components/CustomNumberInput.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/ThumbSide.tsx","Components/DocumentDisplay.tsx","Components/ExpandButton.tsx","Components/Character/LocationName.tsx","ReactHooks/useWeapon.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Formula/DisplayUtil.tsx","PageArtifact/RollProbability.ts","PageArtifact/PercentBadge.tsx","Components/TextButton.tsx","PageCharacter/StatInput.tsx","Components/Weapon/WeaponSelectionModal.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","Components/Artifact/SetEffectDisplay.tsx","Components/Character/StatDisplayComponent.tsx","Components/EnemyEditor.tsx","Components/HitModeEditor.tsx","PageWeapon/WeaponDisplayCard.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx"],"names":["FieldDisplay","field","fieldContext","component","useContext","DataContext","data","oldData","useMemo","canShow","node","get","dataNode","target","isEmpty","oldNode","oldValue","value","NodeFieldDisplay","suffix","textSuffix","BasicFieldDisplay","v","evalIfFunc","variant","width","sx","display","justifyContent","color","text","toFixed","fixed","unit","fieldText","key","KeyMap","fieldFormulaText","formula","fieldVal","diff","valueString","formulaTextOverlay","placement","title","cursor","ml","icon","faQuestionCircle","StatIcon","FieldDisplayList","styled","List","theme","borderRadius","shape","overflow","margin","backgroundColor","palette","contentDark","main","contentDarker","StyledInputBase","InputBase","primary","transition","dark","Wrapper","Button","padding","height","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","onChange","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","onKeyDOwn","aria-label","type","onKeyDown","BootstrapTooltip","className","arrow","classes","popper","tooltipClasses","common","black","tooltip","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","t","useTranslation","database","DatabaseContext","characterSheets","usePromise","CharacterSheet","getAll","characterSheet","characterKeys","_getCharKeys","ck","sort","name","startIcon","thumbImg","src","thumbImgSide","onClick","selected","noWrap","CharacterMenuItemArray","selectedCharacterKey","map","characterKey","ThumbSide","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","DocumentDisplay","sections","sectionsDisplay","section","i","talentText","fields","flexDirection","gap","length","ListItem","conditional","hideDesc","s","ExpandButton","expand","other","transform","transitions","create","duration","shortest","LocationName","location","nameWIthIcon","useWeapon","weaponID","_getWeapon","weapon","setWeapon","followWeapon","undefined","Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","ConditionalSelector","conditionalValue","character","characterDispatch","setConditional","conditionalValues","deepClone","layeredAssignment","path","Object","keys","states","entries","stateKey","badge","SqBadge","fullWidth","size","CheckBox","CheckBoxOutlineBlank","state","DropdownButton","MenuItem","Divider","ConditionalDisplay","hideHeader","condVal","description","header","action","CardDark","CardHeader","avatar","titleTypographyProps","CardContent","Box","mb","m","errHeader","talentMap","normal","charged","plunging","skill","burst","passive","passive1","passive2","passive3","fromEntries","range","getDisplayHeader","sectionKey","a","includes","split","namespace","ArtifactSheet","sheet","defIconSrc","WeaponSheet","asc","input","img","imgAwaken","cKey","charKey","cEle","charEle","talentKey","talent","getTalentOfKey","actionText","getDisplaySections","getDisplay","basic","reaction","startsWith","artifact","rest","k","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","3","4","6","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","b","probability","_target","rarity","NaN","level","substats","required","Set","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","M","rolls","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","currentCount","sum","calculatePFillerRolls","values","PercentBadge","valid","clamp","floor","badgeColor","DisabledButton","secondary","TextButton","FlexButtonGroup","ButtonGroup","StatInput","placeholder","defaultValue","onValueChange","percent","onReset","restProps","whiteSpace","flexBasis","flexGrow","px","inputProps","textAlign","endAdornment","WeaponSelectionModal","show","onHide","onSelect","propWeaponFilter","weaponFilter","weaponSheets","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","open","onClose","py","container","item","weaponKey","weaponSheet","lg","md","Assets","weaponTypes","stars","colored","large","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","artifactID","_getArt","setArtifact","followArt","useArtifact","setKey","editable","localDatabase","art","id","lock","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","Typography","faInfoCircle","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","fallback","Skeleton","minHeight","CardLight","pt","pb","pr","alignItems","Chip","label","pl","IconButton","updateArt","Lock","LockOpen","Grid","flexWrap","maxWidth","mt","alignSelf","CardMedia","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","mr","opacity","my","CardActions","xs","flexShrink","setArtLocation","faEdit","Tooltip","faBan","faChartLine","faTrashAlt","BusinessCenter","Replay","ListItemIcon","WeaponCard","weaponId","canEquip","cs","weaponTypeKey","actionWrapperFunc","CardActionArea","equipOnChar","setWeaponLocation","UIData","computeUIData","dataObjForWeapon","ascension","refinement","sub","sub2","ConditionalWrapper","condition","wrapper","ImgIcon","fontSize","updateWeapon","ascensionMaxLevel","alignContent","displayVal","SetEffectDisplay","setEffectText","document","setEffectDocument","StatDisplayComponent","columns","sm","Nodes","Section","displayNs","displayNsReads","objectMap","nodeKey","customRead","every","EnemyExpandCard","expanded","setexpanded","toggle","eLvlNode","enemy","eDefRed","defRed","eDefIgn","defIgn","allElementsWithPhy","element","EnemyResText","aria-expanded","p","in","timeout","unmountOnExit","EnemyEditor","content","isFinite","uncoloredEleIcons","bsProps","href","rel","bgcolor","contentLight","getStr","lvl","eleKey","elementImmunity","Number","MAX_VALUE","faCheckSquare","faSquare","infusionVals","pyro","cryo","InfusionAuraDropdown","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","exclusive","baseColor","hydro","HitModeToggle","hitMode","DamageOptionsCard","WeaponDisplayCard","propWeaponId","footer","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","ws","initialWeaponFilter","showModal","setshowModal","weaponUIData","startAdornment","ambiguousLevel","milestoneLevels","lv","as","lvlstr","SwapBtn","onChangeId","minWidth","process","getLevelString","passiveName","gutterBottom","passiveDescription","refineIndex","setShow","close","clickHandler","weapons","dbWeapon","FormulaCalcCard","ExpandMore","Collapse","CalculationDisplay","FormulaCalc","Accordion","AccordionSummary","expandIcon","AccordionDetails","formulas","subform","CharacterArtifactPane","newBuild","history","useHistory","edit","artid","pathname","artToEditId","artifactSheets","useForceUpdate","followAnyArt","equipArts","window","confirm","allSlotKeys","equipArtifacts","unequipArts","objectKeyMap","artIds","Card","warning","setNumKeyArr","CharacterTeamBuffsPane","TeamBuffDisplay","TeammateDisplay","statBreakpoint","teamBuffs","getTeamBuff","nodes","premod","columnSpacing","rowSpacing","objPathValue","dataContext","active","teamData","activeCharacterDispatch","activeCharacterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","PersonAdd","Provider","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","DisplaySectionsTeamCond","getTalent","sheets","sts","teamBuff","CharacterOverviewPane","constellation","tlvl","auto","tBoost","bonus","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","constellationName","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","mainEditKeys","otherStatReadNodes","ele","otherStatKeys","info","miscStatReadNodes","all_dmg_","normal_dmg_","normal_critRate_","charged_dmg_","charged_critRate_","plunging_dmg_","plunging_critRate_","skill_dmg_","skill_critRate_","burst_dmg_","burst_critRate_","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","rn","specialNode","special","StatDisplayCard","editContent","bonusStats","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","subtitle","enabled","style","onClickTitle","ReactionComponents","superconduct","electro","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","shattered","information","Ele","anemo","geo","talentLimits","actionWrapeprFunc","levelBoost","newTalentLevelKey","talentSheet","TabPanel","role","hidden","aria-labelledby","CharacterDisplayCard","newteamData","tabName","isFlex","useTeamData","charUIData","tab","settab","onTab","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","ToggleButton","CloseButton","Tabs","Tab","setCharacter","elementKey","CharacterSelectionModal","talents"],"mappings":"+HAAA,+OAee,SAASA,EAAT,GAAmJ,IAA3HC,EAA0H,EAA1HA,MAAOC,EAAmH,EAAnHA,aAAcC,EAAqG,EAArGA,UAAqG,EACrIC,qBAAWC,KAA7BC,EADuJ,EACvJA,KAAMC,EADiJ,EACjJA,QAEd,IADgBC,mBAAQ,2CAAMP,QAAN,IAAMA,GAAN,UAAMA,EAAOQ,eAAb,aAAM,OAAAR,EAAiBK,UAAvB,WAAsC,CAACL,EAAOK,IACxD,OAAO,KACrB,GAAI,SAAUL,EAAO,CAEnB,IAAMS,EAAOR,EAAeI,EAAKK,IAAIC,YAASX,EAAMS,KAAM,CAAEG,OAAQX,EAAaI,KAAKA,KAAK,MAAiBA,EAAKK,IAAIV,EAAMS,MAC3H,GAAIA,EAAKI,QAAS,OAAO,KACzB,GAAIP,EAAS,CACX,IAAMQ,EAAUb,EAAeK,EAAQI,IAAIC,YAASX,EAAMS,KAAM,CAAEG,OAAQX,EAAaK,QAASD,KAAK,MAAiBC,EAAQI,IAAIV,EAAMS,MAClIM,EAAWD,EAAQD,QAAU,EAAIC,EAAQE,MAC/C,OAAO,cAACC,EAAD,CAAkBR,KAAMA,EAAMM,SAAUA,EAAUG,OAAQlB,EAAMmB,WAAYjB,UAAWA,IAE3F,OAAO,cAACe,EAAD,CAAkBR,KAAMA,EAAMS,OAAQlB,EAAMmB,WAAYjB,UAAWA,IAEjF,OAAO,cAACkB,EAAD,CAAmBpB,MAAOA,EAAOE,UAAWA,IAGrD,SAASkB,EAAT,GAAgH,IAAD,EAAlFpB,EAAkF,EAAlFA,MAAOE,EAA2E,EAA3EA,UAC1BG,EAASF,qBAAWC,KAApBC,KACFgB,EAAIC,YAAWtB,EAAMgB,MAAOX,GAC5BkB,EAAUD,YAAWtB,EAAMuB,QAASlB,GAC1C,OAAO,eAAC,IAAD,CAAKmB,MAAM,OAAOC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAAmBzB,UAAWA,EAAvF,UACL,cAAC,IAAD,CAAW0B,MAAOL,EAAlB,SAA2B,4BAAIvB,EAAM6B,SACrC,eAAC,IAAD,WAA2B,kBAANR,EAAP,UAAwBA,EAAES,eAA1B,aAAwB,OAAAT,EAAYrB,EAAM+B,OAASV,EAAGrB,EAAMgC,WAIvE,SAASf,EAAT,GAAiK,IAArIR,EAAoI,EAApIA,KAAMM,EAA8H,EAA9HA,SAAUG,EAAoH,EAApHA,OAAQhB,EAA4G,EAA5GA,UACzD,GAAIO,EAAKI,QAAS,OAAO,KAEzBK,EAASA,GAAU,qCAAQA,KAC3B,IAAMe,EAAYxB,EAAKyB,IAAMC,IAAOzB,IAAID,EAAKyB,KAAO,GAC9CE,EAAmB3B,EAAK4B,QAC1BC,EAAW,GACf,GAAIvB,EAAU,CACZ,IAAMwB,EAAO9B,EAAKO,MAAQD,EAC1BuB,EAAW,iCAAOE,YAAYzB,EAAUN,EAAKuB,MAAOO,EAAO,eAAC,IAAD,CAAWX,MAAOW,EAAO,EAAI,UAAY,QAAzC,cAAoDA,EAAO,EAAI,IAAM,GAAIC,YAAYD,EAAM9B,EAAKuB,SAAqB,WAC3KM,EAAWE,YAAY/B,EAAKO,MAAOP,EAAKuB,MAC/C,IAAMS,IAAuBhC,EAAK4B,SAAW,cAAC,IAAD,CAAkBK,UAAU,MAAMC,MAAO,cAAC,IAAD,UAAaP,IAAtD,SAC3C,cAAC,IAAD,CAAKlC,UAAU,OAAOuB,GAAI,CAAEmB,OAAQ,OAAQC,GAAI,GAAhD,SAAqD,cAAC,IAAD,CAAiBC,KAAMC,UAE9E,OAAO,eAAC,IAAD,CAAKvB,MAAM,OAAOC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,iBAAmBzB,UAAWA,EAAvF,UACL,eAAC,IAAD,CAAW0B,MAAOnB,EAAKc,QAAvB,UAAiCd,EAAKyB,KAAQ,iCAAOc,IAASvC,EAAKyB,KAArB,OAAoC,4BAAID,IAAef,EAAQuB,KAC7G,cAAC,IAAD,UAAcH,OAIX,IAAMW,EAAmBC,YAAOC,IAAPD,EAAa,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC3DC,aAAcD,EAAME,MAAMD,aAC1BE,SAAU,SACVC,OAAQ,EACR,wCAAyC,CACvCC,gBAAiBL,EAAMM,QAAQC,YAAYC,MAE7C,uCAAwC,CACtCH,gBAAiBL,EAAMM,QAAQG,cAAcD,W,0MC7DpCE,EAAkBZ,YAAOa,IAAPb,EAAkB,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC/DK,gBAAiBL,EAAMM,QAAQM,QAAQJ,KACvCK,WAAY,gBACZ,UAAW,CACTR,gBAAiBL,EAAMM,QAAQM,QAAQE,MAEzC,gBAAiB,CACfT,gBAAiBL,EAAMM,QAAQM,QAAQE,MAEzC,iBAAkB,CAChBT,gBAAiBL,EAAMM,QAAQM,QAAQE,UAIrCC,EAAUjB,YAAOkB,IAAPlB,EAAe,kBAAgB,CAC7CO,gBAD6B,EAAGL,MACTM,QAAQM,QAAQJ,KACvCS,QAAS,EACTd,SAAU,SACV,IAAO,CACL/B,MAAO,OACP8C,OAAQ,YAKL,SAASC,EAAT,GAA0I,IAA3FC,EAA0F,EAA1FA,SAAoEC,GAAsB,EAAhFC,cAAgF,EAAjEC,mBAAiE,EAA7CC,mBAA6C,uFAC9I,OAAO,cAACT,EAAD,yBAASO,eAAa,EAACC,oBAAkB,EAACC,oBAAkB,GAAKH,GAAjE,aAAyED,KAGnE,SAASK,EAAT,GAAuG,IAAD,IAAzE7D,aAAyE,MAAjE,EAAiE,EAA9D8D,EAA8D,EAA9DA,SAA8D,IAApDC,gBAAoD,aAAlCC,aAAkC,SAAhBP,EAAgB,yDACvFQ,mBAASjE,GAD8E,mBAC5GkE,EAD4G,KACpGC,EADoG,OAEvFF,oBAAS,GAF8E,mBAE5GG,EAF4G,KAEnGC,EAFmG,KAG7GC,EAAY/E,mBAAQ,kBAAMyE,EAAQO,WAAaC,WAAU,CAACR,IAC1DS,EAASC,uBACb,WACEZ,EAASI,GACTG,GAAS,KAEX,CAACP,EAAUI,EAAQG,IAEfM,EAAUD,uBACd,WACEL,GAAS,KAEX,CAACA,IAEHO,qBAAU,kBAAMT,EAAUnE,KAAQ,CAACA,EAAOmE,IAC1C,IAAMU,EAAgBH,uBAAY,SAAAI,GAAC,OAAIX,EAAUG,EAAUQ,EAAElF,OAAOI,QAAU,KAAI,CAACmE,EAAWG,IACxFS,EAAYL,uBAAY,SAAAI,GAAC,MAAc,UAAVA,EAAE5D,KAAmBuD,MAAU,CAACA,IACnE,OAAO,cAAC3B,EAAD,aACL9C,MAAQoE,IAAYF,EAAU,GAAKA,EACnCc,aAAW,eACXC,KAAK,SACLnB,SAAUe,EACVJ,OAAQA,EACRE,QAASA,EACTZ,SAAUA,EACVmB,UAAWH,GACPtB,M,6FClEF0B,EAAmBjD,aAAO,gBAAGkD,EAAH,EAAGA,UAAc3B,EAAjB,oCAC9B,cAAC,IAAD,2BAAaA,GAAb,IAAoB4B,OAAK,EAACC,QAAS,CAAEC,OAAQH,QADtBlD,EAEtB,kBAAGE,EAAH,EAAGA,MAAH,uCACMoD,IAAeH,OAAU,CAC9BzE,MAAOwB,EAAMM,QAAQ+C,OAAOC,QAF7B,2BAIMF,IAAeG,SAAY,CAChClD,gBAAiBL,EAAMM,QAAQ+C,OAAOC,QALvC,KAQYP,O,mQCSA,SAASS,EAAT,GAAuL,IAAD,EAAnJ5F,EAAmJ,EAAnJA,MAAO8D,EAA4I,EAA5IA,SAAU+B,EAAkI,EAAlIA,aAAcC,EAAoH,EAApHA,aAAoH,IAAtGC,iBAAsG,aAAnFC,kBAAmF,aAA/DC,cAA+D,MAAtD,kBAAM,GAAgD,EAAvCxC,EAAuC,oGAC3LyC,EAAMC,YAAe,MAArBD,EACFE,EAAWjH,qBAAWkH,KACtBC,EAAkBC,YAAWC,IAAeC,OAAQ,IACpDC,EAAiBH,YAAWC,IAAe9G,IAAIM,GAAQ,CAACA,IACxD2G,EAAgBP,EAASQ,eAAeX,QAAO,SAAAY,GAAE,OAAmB,OAAfP,QAAe,IAAfA,OAAA,EAAAA,EAAkBO,KAAOZ,EAAOK,EAAgBO,GAAKA,MAAKC,OACrH,OAAO,eAAC,IAAD,2BACDrD,GADC,IAEL9B,MAAK,iBAAE+E,QAAF,IAAEA,OAAF,EAAEA,EAAgBK,YAAlB,QAA2BhB,EAAYG,EAAH,0CAAmBL,QAAnB,IAAmBA,IAAgBK,EAAnC,kCACzCtF,MAAOZ,EAAQ,UAAY,UAC3BgH,WAAyB,OAAdN,QAAc,IAAdA,OAAA,EAAAA,EAAgBO,UAAW,cAAC,IAAD,CAAWC,IAAKR,EAAeS,eAAoBpB,EAAY,cAAC,IAAD,IAAH,OAAyBD,QAAzB,IAAyBA,IAAgB,cAAC,IAAD,IAJtI,WAKHE,IAAeD,EAAY,eAAC,IAAD,CAAUqB,QAAS,kBAAMtD,EAAS,KAAKuD,SAAoB,KAAVrH,EAAc+D,SAAoB,KAAV/D,EAAzE,UAC3B,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAYO,QAAQ,UAAU+G,QAAM,EAApC,SACGpB,EADH,wCAGY,eAAC,IAAD,CAAUkB,QAAS,kBAAMtD,EAAS,KAAKuD,SAAoB,KAAVrH,EAAc+D,SAAoB,KAAV/D,EAAzE,UACZ,cAAC,IAAD,UACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAYO,QAAQ,UAAU+G,QAAM,EAApC,SACGpB,EADH,yCAIAF,GAAc,cAAC,IAAD,GAAa,SAC1BM,GAAmBiB,EAAuBjB,EAAiBK,EAAe7C,EAAU9D,OAKpF,SAASuH,EAAuBjB,EAA2DK,EAA+B7C,GAAqF,IAA/C0D,EAA8C,uDAAJ,GAC/M,OAAOb,EAAcc,KAAI,SAAAC,GAAY,eACnC,eAAC,IAAD,CAAUN,QAAS,kBAAMtD,EAAS4D,IAAkCL,SAAUG,IAAyBE,EAAc3D,SAAUyD,IAAyBE,EAAxJ,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAWR,IAAG,UAAEZ,EAAgBoB,UAAlB,aAAE,EAA+BP,iBAEjD,cAAC,IAAD,CAAY5G,QAAQ,UAAU+G,QAAM,EAApC,gBACGhB,QADH,IACGA,GADH,UACGA,EAAkBoB,UADrB,aACG,EAAiCX,SALgBW,Q,iCCvD1D,aAEMC,EAAYzF,YAAO,MAAPA,EAAc,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC9C1B,QAAS,eACTF,MAAO,OACP8C,OAAO,QACPsE,WAAY,EACZC,cAAe,cACfC,UAAW1F,EAAM2F,SAAS,GAC1BC,WAAY5F,EAAM2F,SAAS,MAC3BE,YAAa7F,EAAM2F,SAAS,GAC5BG,aAAc9F,EAAM2F,SAAS,OAGhBJ,O,iCCdf,yGAQe,SAASQ,EAAT,GAAyE,IAA9CC,EAA6C,EAA7CA,SAChC/I,EAASF,qBAAWC,KAApBC,KACFgJ,EAAe,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAUX,KAAI,SAACa,EAASC,GAAO,IAAD,IACpD,GAAID,EAAQ9I,UAAY8I,EAAQ9I,QAAQH,GAAO,OAAO,KACtD,IAAMmJ,EAAalI,YAAWgI,EAAQzH,KAAMxB,GACtCoJ,EAAM,UAAGH,EAAQG,cAAX,QAAqB,GACjC,OAAO,eAAC,IAAD,CAAyB/H,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAApE,UACJH,GAAc,8BAAMA,IACpBC,EAAOG,OAAS,GAAK,cAAC,IAAD,iBACnBH,QADmB,IACnBA,GADmB,UACnBA,EAAQhB,WADW,aACnB,OAAAgB,GAAc,SAACzJ,EAAOuJ,GAAR,OAAc,cAAC,IAAD,CAAsBvJ,MAAOA,EAAOE,UAAW2J,KAA5BN,UAE/CD,EAAQQ,aAAe,cAAC,IAAD,CAAoBA,YAAaR,EAAQQ,YAAaC,UAAQ,MALzE,UAAYR,MAO5BtC,QAAO,SAAA+C,GAAC,OAAIA,KACf,OAAKX,EAAgBO,OACd,cAAC,IAAD,CAAKlI,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAhD,SAAoDN,IADvB,O,6ECjBhCY,EAAe/G,aAAO,SAACuB,GACEA,EAArByF,OAD+C,IACpCC,EADmC,YACzB1F,EADyB,YAEtD,OAAO,cAAC,IAAD,eAAgB0F,MAFJjH,EAGlB,gBAAGE,EAAH,EAAGA,MAAH,MAAwB,CACzBgH,UADC,EAAUF,OAC2B,iBAAjB,eACrBlB,WAAY,OACZ/E,WAAab,EAAciH,YAAYC,OAAO,YAAa,CACzDC,SAAWnH,EAAciH,YAAYE,SAASC,eAInCP,O,oICVA,SAASQ,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SAC7BxD,EAAMC,YAAe,MAArBD,EACFQ,EAAiBH,YAAWC,IAAe9G,IAAf,OAAmBgK,QAAnB,IAAmBA,IAAY,IAAK,CAACA,IACvE,OAAO,cAAC,IAAD,CAAYxK,UAAU,OAAtB,UACU,OAAdwH,QAAc,IAAdA,OAAA,EAAAA,EAAgBK,MAAOL,EAAeiD,aAAe,iCAAM,cAAC,IAAD,CAAgBlJ,GAAI,CAAEoH,cAAe,iBAA3C,IAAgE3B,EAAhE,0C,8FCP3C,SAAS0D,IAA8C,IAApCC,EAAmC,uDAAJ,GACzDzD,EAAWjH,qBAAWkH,KADuC,EAEvCpC,mBAASmC,EAAS0D,WAAWD,IAFU,mBAE5DE,EAF4D,KAEpDC,EAFoD,KAOnE,OAJApF,qBAAU,kBAAMoF,EAAU5D,EAAS0D,WAAWD,MAAY,CAACzD,EAAUyD,IACrEjF,qBAAU,kBACRiF,EAAWzD,EAAS6D,aAAaJ,EAAUG,QAAaE,IACxD,CAACL,EAAUG,EAAW5D,IACjB2D,I,oLCPYI,EAEnB,aACE,GADa,oBACTC,gBAAgBD,EAClB,MAAME,MAAM,2CAJGF,EAMZG,UAAY,SAACC,EAASC,GAAV,OAAoC,8BCAlD,IAAMC,EAAK,SAACC,GAAD,OAAoB,cAACC,EAAA,EAAD,CAAWC,GAAG,QAAQC,MAAOH,KACtDI,EAAM,SAACJ,GAAD,OAAoB,cAACC,EAAA,EAAD,CAAWC,GAAG,YAAYC,MAAOH,M,gNCDzD,SAASK,EAAT,GACkE,IADnCjC,EACkC,EADlCA,YAAakC,EACqB,EADrBA,iBACqB,IADHjH,gBACG,WACrC5E,qBAAWC,KAA5C6L,EADsE,EACtEA,UAAWC,EAD2D,EAC3DA,kBACbC,EAAiBzG,uBAAY,SAACrE,GAClC,IAAM+K,EAAoBC,YAAUJ,EAAUnC,aAC9CwC,YAAkBF,EAAmBtC,EAAYyC,KAAMlL,GACvD6K,EAAkB,CAAEpC,YAAasC,MAChC,CAACtC,EAAamC,EAAWC,IAE5B,GAA+C,IAA3CM,OAAOC,KAAK3C,EAAY4C,QAAQ9C,OAAc,CAAC,IAAD,cACzB4C,OAAOG,QAAQ7C,EAAY4C,QAAQ,GADV,GACzCE,EADyC,KAC/BnB,EAD+B,KAE1CoB,EAAQpB,EAAG1D,MAAQ,cAAC+E,EAAA,EAAD,CAASlL,MAAO,UAAhB,SAA4B6J,EAAG1D,OACxD,OAAO,eAAC3D,EAAA,EAAD,CAAQ2I,WAAS,EAACC,KAAK,QAAQ5E,QAAS,kBAAM+D,EAAeH,OAAmBd,EAAY0B,IAAW7H,SAAUA,EAAUiD,UAAWgE,EAAmB,cAACiB,EAAA,EAAD,IAAe,cAACC,EAAA,EAAD,IAAxK,UACJpD,EAAY/B,KADR,IACe8E,KAGtB,IAAMM,EAAQnB,EAAmBlC,EAAY4C,OAAOV,QAAoBd,EAClE2B,GAAa,OAALM,QAAK,IAALA,OAAA,EAAAA,EAAOpF,OAAQ,cAAC+E,EAAA,EAAD,CAASlL,MAAOuL,EAAQ,UAAY,YAApC,SAAkDA,EAAQA,EAAMpF,KAAO,eACpG,OAAO,eAACqF,EAAA,EAAD,CAAgBL,WAAS,EAACC,KAAK,QAAQrK,MAAO,iCAAOmH,EAAY/B,KAAnB,IAA0B8E,KAAe9H,SAAUA,EAAjG,UACL,cAACsI,EAAA,EAAD,CAAUjF,QAAS,kBAAM+D,KAAkB9D,UAAW8E,EAAOpI,UAAWoI,EAAxE,SACE,gDAEF,cAACG,EAAA,EAAD,IACCd,OAAOG,QAAQ7C,EAAY4C,QAAQjE,KAAI,mCAAEmE,EAAF,KAAYnB,EAAZ,YACtC,cAAC4B,EAAA,EAAD,CAAyBjF,QAAS,kBAAM+D,EAAeS,IAAWvE,SAAU2D,IAAqBY,EAAU7H,SAAUiH,IAAqBY,EAA1I,SAAsJnB,EAAG1D,MAA1I6E,S,+BCfR,SAASW,EAAT,GAA2H,IAAD,IAA5FzD,EAA4F,EAA5FA,YAA4F,IAA/E0D,kBAA+E,aAA3DzD,gBAA2D,SAAzC9J,EAAyC,EAAzCA,aAEtFI,EADYF,qBAAWC,KACvBC,KAGR,MADgByJ,EAAYtJ,WAAYP,EAAeI,EAAKK,IAAIC,YAASmJ,EAAYtJ,QAAS,CAAEI,OAAQX,EAAaI,KAAKA,KAAK,MAAeQ,QAAUR,EAAKK,IAAIoJ,EAAYtJ,SAASK,UACxK,OAAO,KACrB,IAAM4M,EAAUpN,EAAKK,IAAIoJ,EAAY9I,OAAOA,MAEtC0M,GAAe3D,GAAYzI,YAAWwI,EAAY4D,YAAarN,GARkE,YASzGyJ,EAAY6D,cAT6F,QASnF,GAA9C7K,EATiI,EASjIA,KAAMH,EAT2H,EAS3HA,MAAOiL,EAToH,EASpHA,OACnB9K,EAAOxB,YAAWwB,EAAMzC,GACxB,IAAMoJ,EAASgE,IAAO,UAAI3D,EAAY4C,OAAOe,UAAvB,aAAI,EAA6BhE,QAEvD,OAAO,eAACoE,EAAA,EAAD,YACHL,GAAc1D,EAAY6D,QAAU,cAACG,EAAA,EAAD,CAAYC,OAAQjL,EAAMH,MAAOA,EAAOiL,OAAQA,EAAQI,qBAAsB,CAAEzM,QAAS,gBAC7HiM,GAAc1D,EAAY6D,QAAU,cAACL,EAAA,EAAD,MACnCxD,EAAY/B,MAAQ,eAACkG,EAAA,EAAD,WACpBP,GAAe,cAACQ,EAAA,EAAD,CAAKC,GAAI,EAAT,SAAaT,IAC7B,cAAC3B,EAAD,CACEjC,YAAaA,EACbkC,iBAAkByB,OAErBhE,GACC,cAAC1J,EAAA,EAAD,CAAkB0B,GAAI,CAAE2M,EAAG,GAA3B,SACG3E,EAAOhB,KAAI,SAACzI,EAAOuJ,GAAR,OAAc,cAACxJ,EAAA,EAAD,CAAsBC,MAAOA,EAAOC,aAAcA,EAAcC,UAAW2J,KAAxDN,a,uOC9B/C8E,EAAY,CAChB1L,MAAO,cAAC,IAAD,CAAWf,MAAM,UAAjB,oBAGH0M,EAAS,aACbC,OAAQ,cACRC,QAAS,eACTC,SAAU,gBACVC,MAAO,aACPC,MAAO,aACPC,QAAS,UACTC,SAAU,iBACVC,SAAU,iBACVC,SAAU,eACPvC,OAAOwC,YAAYC,YAAM,EAAG,GAAGxG,KAAI,SAAAc,GAAC,MAAI,CAAC,gBAAD,OAAiBA,GAAjB,iBAAgCA,SAEtE,SAAe2F,EAAtB,oC,4CAAO,WAAgC7O,EAAc8O,GAA9C,uCAAAC,EAAA,yDAKAD,EALA,yCAKmBd,GALnB,UAMc,UAAfc,EANC,yCAM8B,CAAExM,MAAO,gBANvC,UAOmB,aAAfwM,EAPJ,0CAOsC,CAAExM,MAAO,6BAP/C,YAQIwM,EAAWE,SAAS,KARxB,sBASsBF,EAAWG,MAAM,KATvC,mBASIC,EATJ,KASerN,EATf,KAUe,aAAdqN,EAVD,kCAWmBC,IAAc9O,IAAIwB,GAXrC,WAWKuN,EAXL,iDAYkBpB,GAZlB,iCAaM,CACL1L,MAAO8M,EAAM1H,KACbjF,KAAM2M,EAAMC,aAfb,WAiBsB,WAAdH,EAjBR,kCAkBmBI,IAAYjP,IAAIwB,GAlBnC,WAkBKuN,EAlBL,iDAmBkBpB,GAnBlB,eAoBKuB,EAAMvP,EAAKK,IAAImP,IAAM9E,OAAO6E,KAAK5O,MApBtC,kBAqBM,CACL2B,MAAO8M,EAAM1H,KACbjF,KAAM8M,EAAM,EAAIH,EAAMK,IAAML,EAAMM,YAvBnC,mCA2BGC,EAAO3P,EAAKK,IAAImP,IAAMI,SAASjP,MAC/BkP,EAAO7P,EAAKK,IAAImP,IAAMM,SAASnP,MAChCgP,GAASE,EA7BX,0CA6BwB7B,GA7BxB,yBA8BiB7G,IAAe9G,IAAIsP,GA9BpC,WA8BGP,EA9BH,OA+BGW,EAAY,CAAC,SAAU,UAAW,YAAYf,SAASF,GAAc,OAASA,EAC9EkB,EAhCH,OAgCYZ,QAhCZ,IAgCYA,OAhCZ,EAgCYA,EAAOa,eAAeF,EAAkBF,GAhCpD,0CAiCiB7B,GAjCjB,eAkCGkC,EAAajC,EAAUa,GAlC1B,kBAmCI,CACLrM,KAAMuN,EAAOP,IACbnN,MAAO0N,EAAOtI,KACd6F,OAAQ2C,EAAa,cAAC,IAAD,UAAU,cAAC,IAAD,CAAYhP,QAAQ,YAApB,SAAiCgP,WAAqCrF,IAtCpG,iCAyCEmD,GAzCF,6C,sBAgDA,SAASmC,EAAmBnQ,GACjC,IAAMqB,EAAUrB,EAAKoQ,aACfrH,EAAWoD,OAAOG,QAAQjL,GAC1BgP,EAAQtH,EAASnC,QAAO,kBAAe,UAAf,uBACxB0J,EAAWvH,EAASnC,QAAO,kBAAe,aAAf,uBAC3B8D,EAAS3B,EAASnC,QAAO,uCAAW2J,WAAW,aAC/CC,EAAWzH,EAASnC,QAAO,uCAAW2J,WAAW,eACjDE,EAAO1H,EAASnC,QAAO,gBAAE8J,EAAF,0BAAe,UAANA,GAAuB,aAANA,IAAqBA,EAAEH,WAAW,YAAcG,EAAEH,WAAW,eAEpH,MAAM,GAAN,mBACKF,GADL,YAEKI,GAFL,YAGK/F,GAHL,YAIK8F,GAJL,YAKKF,M,sIC9DDK,EAAa,CAAC,EAAG,EAAG,GAOpBC,EAA0C,CAC9CC,GAAI,EAAGC,IAAK,EAAGC,IAAK,EACpBC,IAAK,EAAGC,KAAM,EAAGC,KAAM,EAAGC,OAAQ,EAAGC,UAAW,EAChDC,UAAW,EAAGC,SAAU,GAQpBC,EAA+F,GACrG,SAASC,EAAmBC,EAAwBC,EAAmCC,EAAiBC,GACtG,GAAsB,IAAlBH,EAAOlI,OAKX,cAAgBoH,EAAhB,gBAAK,IAAMzH,EAAC,KACNwI,EAAKxI,GAAK,GACZsI,EAAmB,GAAD,mBAAKC,GAAL,CAAavI,IAAb,YAAC,eAAqBwI,GAAtB,kBAA6BxI,EAAIwI,EAAKxI,GAAKA,IAAKyI,EAAUzI,EAAG0I,EAAUF,EAAKxI,GAAKyI,QANrG1F,YAAkBsF,EAAYE,EAAeG,GAQjDJ,EAAmB,CAAC,GAAI,CAAEK,EAAG,EAAGC,EAAG,GAAIC,EAAG,IAAM,GAAI,GAEpDP,EAAmB,CAAC,GAAI,CAAEK,EAAG,EAAGC,EAAG,GAAIC,EAAG,IAAM,GAAI,GACpDP,EAAmB,CAAC,GAAI,CAAEK,EAAG,EAAGC,EAAG,GAAIC,EAAG,IAAM,GAAI,GACpDP,EAAmB,CAAC,GAAI,CAAEK,EAAG,EAAGC,EAAG,GAAIC,EAAG,IAAM,GAAI,GA0BpD,IAnBA,IAAMC,EAAMC,MAAM,GAAGC,KAAK,GAAG9J,KAAI,SAAC+J,EAAGC,GAGnC,IAFA,IAAMC,EAAS,CAAC,GACZC,EAAI,EAAG3R,EAAQ,IACV2R,GAAKF,GACZzR,GAASyR,EAAIE,EAAI,EACjB3R,GAAS2R,EACTD,EAAOE,KAAK5R,GAGd,OAAO0R,KASHG,EAAU,CAAC,CAAC,I,aAEhB,IAAMC,EAAOD,EAAQA,EAAQjJ,OAAS,GAChCmJ,EAAOT,MAAMQ,EAAKlJ,OAAS,GAAG2I,KAAK,GACzCO,EAAKE,SAAQ,SAAChS,EAAOuI,GACnB,cAAgB,CAAC,EAAG,EAAG,EAAG,GAA1B,eAA8B,CAC5BwJ,EAAKxJ,EADK,OACKvI,MAInB6R,EAAQD,KAAKG,EAAKtK,KAAI,SAAAwK,GAAC,OAAIA,EAAI,OAT1BJ,EAAQjJ,OAAS,GAAI,IAW5B,I,iBAAK,IAAMsJ,EAAK,KACVC,EAAOD,EAAME,QAAO,SAAChE,EAAGiE,GAAJ,OAAUjE,EAAIiE,KACtCH,EAAMF,SAAQ,SAACC,EAAG1J,EAAG2J,GACnBA,EAAM3J,GAAK4J,EACXA,GAAQF,MAJZ,MAAoBJ,EAApB,eAA8B,IAS9B,SAASS,EAAYzC,EAAqB0C,GACxC,GAAI1C,EAAS2C,QAAU,EAAG,OAAOC,IAD0D,IAGnFD,EAA4B3C,EAA5B2C,OAAQE,EAAoB7C,EAApB6C,MAAOC,EAAa9C,EAAb8C,SAIjB/S,EAAM,eAAQ2S,GAAWK,EAAW,IAAIC,IAAIrH,OAAOC,KAAK7L,IAC1DkT,EAAiB,EAEb5R,EAAM2O,EAASkD,YACrB,GAAI7R,KAAOtB,EAAQ,CACjB,IAAMoT,EAAoB,EAATR,EAEjB,GADyBS,EAAsBT,GAAQtR,GAAK8R,GACrCpT,EAAOsB,GAAO,OAAO,SAErCtB,EAAOsB,GACd0R,EAASM,OAAOhS,GAjBuE,oBAoB9DyR,GApB8D,IAoB3F,2BAAuC,CAAC,IAAD,UAA1BzR,EAA0B,EAA1BA,IAAKlB,EAAqB,EAArBA,MACZkB,EACE0R,EAASO,IAAIjS,KACf0R,EAASM,OAAOhS,GACZtB,EAAOsB,GAAQlB,EACjBJ,EAAOsB,IAASlB,SACNJ,EAAOsB,IAEhB4R,GAAkB,GA5BgE,8BAgC3F,GAFAA,GAAkB,EAAIH,EAAS/J,OAE3BgK,EAAS5G,KAAO8G,GAAkBtH,OAAOC,KAAK7L,GAAQgJ,OAAS,EAAG,OAAO,EAK7E,IAHA,IAAMwK,EAAkBC,IAASC,eAAeZ,EAAOF,GAAUM,EAGjE,MAA2BtH,OAAOG,QAAQ/L,GAA1C,0CAAYsB,EAAZ,KAAiBlB,EAAjB,KACEJ,EAAOsB,GAAOqS,KAAKC,IAAID,KAAKE,KAAK,GAAKzT,EAAQqT,IAASK,iBAAiBxS,EAAKsR,IAAU,GAEzF,IAAImB,EAAmB,EACjBC,EAAgBpI,OAAOG,QAAQ/L,GAAQ6H,KAAI,YAAoB,IAAD,mBAAjBvG,EAAiB,KAAZtB,EAAY,KAC5DiU,EAASjB,EAASO,IAAIjS,GAAO,EAAI,EACjC4S,EAAaP,KAAKE,KAAK7T,EAAS,IAAMiU,EAE5C,OADAF,GAAoBG,EACb,CAAElU,SAAQiU,SAAQC,iBACxBC,UAEH,GAAIJ,EAAmBP,EAAiB,OAAO,EA2B/C,IAAI1B,EAAM,eAAM0B,EAAkB,GAAKY,EAAyBZ,EAAkBO,EAsClF,OAlCAC,EAAc5B,SAAQ,WAAiCiC,GAGrD,IAHsE,IA0CvD7G,EAAWqE,EAAWyC,EA1CdtU,EAA8C,EAA9CA,OAAQiU,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,WACjC/B,EAAsB,GAEnBoC,EAAQL,EAAYK,GAASL,EAAaE,EAAwBG,IASzE,IALA,IAAMC,EAAQxU,EAAS,GAAKuU,EAAQN,GAG9BQ,EAAUD,EAAQ,EAAIvC,EAAQsC,EAAQN,GAAQO,GAAS,EAE7D,MAAwC5I,OAAOG,QAAQ+F,GAAvD,eAAgE,CAAC,IAAD,wBAApD4C,EAAoD,KAAxChC,EAAwC,KACxDiC,EAAY/P,SAAS8P,GAC3B,KAAIC,EAAYJ,GAAhB,CAQA,IAAMK,GAoBgB/C,EApBc0C,EAoBHD,EApBU,EAAID,EAqB9C5C,EADUjE,EApBcmH,GAqBjB9C,GAAK8B,KAAKkB,IAAIP,EAAI,EAAG9G,EAAIqE,GAAK8B,KAAKkB,IAAIP,EAAG9G,IApB5CsH,EAAQH,EAAYJ,EAG1BpC,EAAK2C,IAAS,UAAC3C,EAAK2C,UAAN,QAAgB,GAAKpC,EAAc+B,EAASG,GAG9D9C,EAASK,KAkBb,SAA+B4C,EAAuBhC,EAAsBC,GAA4B,IAAD,IAM/FgC,EAAa,UAAG3E,EAAQ0E,UAAX,QAAwB,EACvCE,EAAe,EAEbC,EAAoB,CAAE5D,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACvC2D,EAAwBnE,EAAWgE,GAV8D,cAW/EjC,GAX+E,IAWrG,2BAAgC,CAAC,IAApBzR,EAAmB,QAAnBA,IACX,GAAIA,EAAK,CACP,IAAM8T,EAAQ/E,EAAQ/O,GACtB6T,EAAmBA,EAAiBC,GACpCF,EAAkBE,IAAU,IAfqE,8BAkBjGJ,IAAeE,EAAkBF,IAAkB,GAEvD,IApBqG,EAoB/FK,EAAgB,CAAE/D,EAAG,EAAGC,EAAG,EAAGC,EAAG,GApB8D,cAqBnFwB,GArBmF,IAqBrG,gCAAW1R,EAAX,QAA4B+T,EAAchF,EAAQ/O,KAAS,GArB0C,8BAuBrG,IAAIgU,EAAQ,EACZC,YAAYJ,EAAkB,IAAI,SAAAK,GAAG,MAAmB,kBAARA,KAAkB,SAACrE,EAAcxF,GAC/E2J,GAASnE,EACT,IAFkG,EAE5FsE,EAAe,CAAEnE,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAF4D,cAGhF7F,GAHgF,IAGlG,4BAAwB8J,EAAxB,UAA6C,GAHqD,8BAKlG,IALkG,EAK9FC,EAAMvE,EALwF,cAMlFf,GANkF,IAMlG,2BAA4B,CAAC,IAAlBzH,EAAiB,QACpB0I,EAAUoE,EAAa9M,GAAIqK,EAAWqC,EAAc1M,GAC1D,GAAI0I,EAAU2B,EAAU,OACxB0C,GAAOjE,EAAIJ,GAAS2B,IAT4E,8BAYlGiC,GAAgBS,KApCmF,oBAuCrFtF,GAvCqF,IAuCrG,gCAAWzH,EAAX,QACEsM,GAAgBxD,EAAIyD,EAAkBvM,IAAI0M,EAAc1M,KAxC2C,8BAyCrG,OAAOsM,EAAeK,EAtDfK,CAAsB1F,EAASkD,YAAaJ,EAAUC,GAAYpH,OAAOgK,OAAO9D,GAAQU,QAAO,SAAChE,EAAGiE,GAAJ,OAAUjE,EAAIiE,O,sGCzNvG,SAASoD,EAAT,GAA+C,IAAvBzV,EAAsB,EAAtBA,MAAO0V,EAAe,EAAfA,MAAe,EACjB,kBAAV1V,EAC9B,CAAC,OAAD,OAAQ2V,YAAMpC,KAAKqC,MAAc,IAAR5V,GAAgB,EAAG,EAAG,IAAMA,EAAMc,QAAQ,GAAK,KAAO,CAAC,YAAad,GAFpC,mBACtD6V,EADsD,KAC1ChV,EAD0C,KAI3D,OADK6U,IAAOG,EAAa,SAClB,cAAC,IAAD,CAASjV,MAAOiV,EAAhB,SAA8BhV,M,+GCLjCiV,EAAiB5T,YAAOkB,IAAPlB,EAAe,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CACpD,iBAAkB,CAChBK,gBAAiBL,EAAMM,QAAQM,QAAQE,KACvCtC,MAAOwB,EAAMM,QAAQ7B,KAAKkV,eAIf,SAASC,EAAT,GAAoE,IAA9CxS,EAA6C,EAA7CA,SAAuBC,GAAsB,EAAnCM,SAAmC,wCAChF,OAAO,cAAC+R,EAAD,2BAAoBrS,GAApB,IAA2BM,UAAQ,EAAnC,SACJP,O,mJCMCyS,EAAkB/T,YAAOgU,IAAPhU,CAAoB,CAC1CxB,QAAS,SAGI,SAASyV,EAAT,GAAuK,IAAlJpP,EAAiJ,EAAjJA,KAAMvD,EAA2I,EAA3IA,SAAUxD,EAAiI,EAAjIA,MAAOoW,EAA0H,EAA1HA,YAA0H,IAA7GC,oBAA6G,MAA9F,EAA8F,EAA3FC,EAA2F,EAA3FA,cAA2F,IAA5EC,eAA4E,aAA3DxS,gBAA2D,SAAzCyS,EAAyC,EAAzCA,QAAYC,EAA6B,uHAEnL,OAAO,eAACR,EAAD,2BAAqBQ,GAArB,cACJjT,EACD,cAAC,IAAD,CAAY/C,GAAI,CAAEiW,WAAY,UAA9B,SACG3P,IAEH,cAAC,IAAD,CAAqCtG,GAAI,CAAEkW,UAAW,GAAIC,SAAU,GAApE,SACE,cAAC,IAAD,CACEnW,GAAI,CAAEoW,GAAI,GACVC,WAAY,CACVrW,GAAI,CAAEsW,UAAW,UAEnB/S,MAAOuS,EACPH,YAAaA,EACbpW,MAAOA,EACP8D,SAAUwS,EACVvS,SAAUA,EACViT,aAAcT,EAAU,SAAMrM,MAGlC,cAAC,IAAD,CAAQ9C,QAAS,kBAAMoP,EAAUA,IAAYF,EAAcD,IAAetS,SAAUA,GAAY/D,IAAUqW,EAA1G,SACE,cAAC,IAAD,Y,2PCrBS,SAASY,EAAT,GAA2I,IAA3GC,EAA0G,EAA1GA,KAAMC,EAAoG,EAApGA,OAAQC,EAA4F,EAA5FA,SAA4F,IAAlFnR,cAAkF,MAAzE,kBAAM,GAAmE,EAA/CoR,EAA+C,EAA7DC,aACpFC,EAAehR,YAAWoI,IAAYlI,OAAQ,IADmG,EAE/GxC,mBAAQ,OAAqBoT,QAArB,IAAqBA,IAAoB,IAF8D,mBAEhJC,EAFgJ,KAElIE,EAFkI,KAIvJ5S,qBAAU,kBAAMyS,GAAoBG,EAAgBH,KAAmB,CAACA,IAExE,IAAMI,EAAgBF,EAAoB,YAAI,IAAI1E,IAAI6E,MAAgBzR,QAAO,SAAA0R,GAAI,OAAI1R,EAAOsR,EAAaI,OACtG1R,QAAO,SAAA0R,GAAS,IAAD,EACd,OAAIL,GAAgBA,KAAY,OAAKC,QAAL,IAAKA,GAAL,UAAKA,EAAeI,UAApB,aAAK,EAAsBC,eAG5D9Q,MAAK,SAACsH,EAAGiE,GAAJ,mBAAU,iBAACkF,QAAD,IAACA,GAAD,UAACA,EAAelF,UAAhB,aAAC,EAAmBG,cAApB,QAA8B,IAA9B,iBAAoC+E,QAApC,IAAoCA,GAApC,UAAoCA,EAAenJ,UAAnD,aAAoC,EAAmBoE,cAAvD,QAAiE,MAL9C,GAOrC,OAAK+E,EAEE,cAAC,IAAD,CAAcM,KAAMX,EAAMY,QAASX,EAAnC,SACL,eAAC,IAAD,WACE,cAAC,IAAD,CAAa1W,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAAC,IAAD,CAAMC,WAAS,EAAf,UACE,cAAC,IAAD,CAAMC,MAAI,EAACrB,SAAU,EAArB,SACE,cAAC,IAAD,CAAc5W,MAAOsX,EAAcxT,SAAU0T,EAAiBzT,WAAYsT,EAAkBrL,KAAK,YAEnG,cAAC,IAAD,CAAMiM,MAAI,EAAV,SACE,cAAC,IAAD,CAAa7Q,QAAS+P,WAI5B,cAAC,IAAD,IACA,cAAC,IAAD,UAAa,cAAC,IAAD,CAAMa,WAAS,EAACjQ,QAAS,EAAzB,SACV0P,EAAahQ,KAAI,SAAAyQ,GAAc,IAAD,EACvBC,EAAcZ,EAAaW,GACjC,OAAO,cAAC,IAAD,CAAMD,MAAI,EAAiBG,GAAI,EAAGC,GAAI,EAAtC,SACL,cAAC,IAAD,CAAW5X,GAAI,CAAE6C,OAAQ,QAAzB,SACE,eAAC,IAAD,CAAgB8D,QAAS,WAAQ+P,IAAUC,EAASc,IAAczX,GAAI,CAAEC,QAAS,QAAjF,UACE,cAAC,IAAD,CAAKxB,UAAU,MAAMgI,IAAKiR,EAAYrJ,IAAKrO,GAAI,CAAED,MAAO,IAAK8C,OAAQ,QAAU8B,UAAS,gBAAW+S,EAAY3F,OAAvB,UACxF,eAAC,IAAD,CAAK/R,GAAI,CAAEmW,SAAU,EAAGC,GAAI,GAA5B,UACE,cAAC,IAAD,CAAYtW,QAAQ,YAApB,SAAiC4X,EAAYpR,OAC7C,eAAC,IAAD,WAAY,cAAC,IAAD,CAASG,IAAG,UAAEoR,IAAOC,mBAAT,aAAE,EAAqBJ,EAAYP,cAA3D,IAA2E,cAAC,IAAD,CAAOY,MAAOL,EAAY3F,OAAQiG,SAAO,gBANrGP,UAa3B,cAAC,IAAD,IACA,cAAC,IAAD,CAAazX,GAAI,CAAEsX,GAAI,GAAvB,SACE,cAAC,IAAD,CAAaW,OAAK,EAACtR,QAAS+P,WAjCR,O,kaCAtBwB,EAAmB,IAAI9F,IAAI+F,KAElB,SAASC,EAAT,GAA8K,IAAD,QAArJC,EAAqJ,EAArJA,WAAYC,EAAyI,EAAzIA,YAAaC,EAA4H,EAA5HA,OAAQC,EAAoH,EAApHA,SAAoH,IAA1GC,+BAA0G,MAAhF,EAAgF,MAA7EC,kBAA6E,MAAjER,EAAiE,EAA/CS,GAA+C,EAA/CA,kBACnIlT,GAAMC,YAAe,CAAC,aAAtBD,EACFE,GAAWjH,qBAAWkH,KACtBgT,GCrCO,WAA2D,IAAtCC,EAAqC,uDAAJ,GAC7DlT,EAAWjH,qBAAWkH,KAD2C,EAEvCpC,mBAASmC,EAASmT,QAAQD,IAFa,mBAEhEzJ,EAFgE,KAEtD2J,EAFsD,KAOvE,OAJA5U,qBAAU,kBAAM4U,EAAYpT,EAASmT,QAAQD,MAAc,CAAClT,EAAUkT,IACtE1U,qBAAU,kBACR0U,EAAalT,EAASqT,UAAUH,EAAYE,QAAetP,IAC3D,CAACoP,EAAYE,EAAapT,IACrByJ,ED8BkB6J,CAAYZ,GAC/BrK,GAAQlI,YAAWiI,IAAc9O,IAAd,iBAAmBqZ,QAAnB,IAAmBA,IAAeM,UAAlC,aAAkB,EAAmCM,QAAS,CAACZ,EAAaM,KAG/FO,IAAYb,GAAe3S,KAAayT,IACxCC,GAAG,OAAGf,QAAH,IAAGA,IAAeM,GAC3B,IAAKS,GAAK,OAAO,KATyK,IAWlLC,GAAoFD,GAApFC,GAAIC,GAAgFF,GAAhFE,KAAMC,GAA0EH,GAA1EG,QAASzH,GAAiEsH,GAAjEtH,OAAQE,GAAyDoH,GAAzDpH,MAAOK,GAAkD+G,GAAlD/G,YAAaJ,GAAqCmH,GAArCnH,SAAUuH,GAA2BJ,GAA3BI,QAXyH,GAW9FJ,GAAlBpQ,iBAXgH,OAWrG,GAXqG,GAYpLyQ,GAAgB5G,KAAKC,IAAID,KAAK6G,IAAIlB,EAAkC,EAAT1G,IAAaE,IACxE2H,GAAe,QAAU9G,KAAKqC,MAAMrC,KAAKC,IAAId,GAAO,GAAK,GAAK,GAC9D4H,GAAc,cAAC,IAAD,CAAW1Z,MAAOuZ,KAAkBzH,GAAQ,eAAYxI,EAAxD,SAAoEqQ,YAAmB,UAAClH,IAASmH,cAAczH,GAAaP,GAAQ2H,WAA7C,QAA+D,EAAGhZ,IAAOH,KAAK+R,OAdC,GAe7IM,IAASoH,sBAAsBX,GAAKX,IAAzEuB,GAfkL,GAelLA,kBAAmBC,GAf+J,GAe/JA,cACrBC,GAAkC,IAAlBD,GAChBE,IAAgB,OAALpM,SAAK,IAALA,QAAA,EAAAA,GAAOqM,YAAYb,MAAY,qBAC1Cc,GAAQ,OAAGtM,SAAH,IAAGA,QAAH,EAAGA,GAAOuM,YAAYf,IAC9BgB,GAAkBF,IAAY,cAAC5V,EAAA,EAAD,CAAkBzD,UAAU,MAAMC,MAAO,cAACuZ,EAAA,EAAD,UAAaH,KAAtD,SAClC,+BAAM,cAAC,IAAD,CAAiBjZ,KAAMqZ,UAEzBC,GAAU,OAAG3M,SAAH,IAAGA,QAAH,EAAGA,GAAO2M,WACpBC,GAAiB5M,IAAS2M,IAAc,cAACjW,EAAA,EAAD,CAAkBzD,UAAU,MAAMC,MAC9E,+BACG6J,OAAOC,KAAK2P,IAAY3T,KAAI,SAAA6T,GAAS,OAAI,iCACxC,cAACJ,EAAA,EAAD,CAAY3a,QAAQ,KAApB,SAAyB,cAACuL,EAAA,EAAD,CAASlL,MAAM,UAAf,SAA0BsF,GAAE,eAAgB,CAAEqV,OAAQD,QAC/E,cAACJ,EAAA,EAAD,UAAazM,GAAM+M,cAAcF,OAFkBA,QAFX,SAQ5C,+BAAM,cAAC,IAAD,CAAiBxZ,KAAMqZ,UAG/B,OAAO,cAAC,WAAD,CAAUM,SAAU,cAACC,EAAA,EAAD,CAAUnb,QAAQ,cAAcE,GAAI,CAAED,MAAO,OAAQ8C,OAAQ,OAAQqY,UAAW,OAApG,SACL,eAACC,EAAA,EAAD,CAAWnb,GAAI,CAAE6C,OAAQ,OAAQ5C,QAAS,OAAQgI,cAAe,UAAjE,UACE,eAACuE,EAAA,EAAD,CAAa7H,UAAS,eAAUoN,GAAV,QAAwB/R,GAAI,CAAEob,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAtE,UACE,eAAC7O,EAAA,EAAD,CAAKhO,UAAU,MAAMuB,GAAI,CAAEC,QAAS,OAAQsb,WAAY,SAAUD,GAAI,GAAtE,UACE,cAACE,EAAA,EAAD,CAAMjQ,KAAK,QAAQkQ,MAAO,6CAAcxJ,MAAmB9R,MAAOyZ,KAClE,eAACa,EAAA,EAAD,CAAYza,GAAI,CAAE0b,GAAI,EAAGvF,SAAU,GAAnC,UAAyCiE,GAAzC,IAAoDI,MACpD,cAACmB,EAAA,EAAD,CAAYxb,MAAM,UAAUmD,UAAW6V,GAAUxS,QAAS,kBAAMhB,GAASiW,UAAU,CAAErC,MAAOA,IAAQD,KAApG,SACGC,GAAO,cAACsC,EAAA,EAAD,IAAW,cAACC,EAAA,EAAD,SAGvB,eAACC,EAAA,EAAD,CAAMxE,WAAS,EAACvX,GAAI,CAAEgc,SAAU,UAAhC,UACE,eAACD,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAArB,UACE,cAACsE,EAAA,EAAD,CAAYta,MAAM,iBAAiBL,QAAQ,QAA3C,SACE,cAAC,IAAD,CAAkB0Z,QAASA,OAE7B,cAACiB,EAAA,EAAD,CAAY3a,QAAQ,KAApB,SACGY,IAAOzB,IAAIqT,MAEd,cAACmI,EAAA,EAAD,CAAY3a,QAAQ,KAApB,SACE,iCAAS+Z,OAEX,cAAC,IAAD,CAAO9B,MAAOhG,GAAQiG,SAAO,OAG/B,cAAC+D,EAAA,EAAD,CAAMvE,MAAI,EAACyE,SAAS,MAAMjc,GAAI,CAAEkc,IAAK,EAAGxP,IAAK,EAAGgP,IAAK,GAAKS,UAAU,WAApE,SACE,cAACC,EAAA,EAAD,CACE3d,UAAU,MACV4d,MAAK,iBAAErO,SAAF,IAAEA,QAAF,EAAEA,GAAOsO,UAAU9C,WAAnB,QAA+B,GACpCzZ,MAAM,OACN8C,OAAO,iBAKf,eAAC2J,EAAA,EAAD,CAAaxM,GAAI,CAAEmW,SAAU,EAAGlW,QAAS,OAAQgI,cAAe,SAAUmT,GAAI,EAAGC,GAAI,GAArF,UACGnJ,GAASlL,KAAI,SAACuV,EAAsBzU,GAAO,IAAD,MACzC,IAAKyU,EAAKhd,MAAO,OAAO,KACxB,IAAMid,EAAQ,oBAAGD,EAAK7I,aAAR,aAAG,EAAYvL,cAAf,QAAyB,EACjCsU,EAAS,cAAUvH,YAAMsH,EAAU,EAAG,IACtCE,EAAU,UAAGH,EAAKG,kBAAR,QAAsB,EAChCC,EAAa,GAAOD,EAAa,IAAO,GACxCE,EAAWlc,IAAOzB,IAAIsd,EAAK9b,KACjC,OAAQ,eAACgM,EAAA,EAAD,CAAazM,GAAI,CAAEC,QAAS,QAA5B,UACN,eAACwM,EAAA,EAAD,CAAKzM,GAAI,CAAEmW,SAAU,GAArB,UACE,cAAC9K,EAAA,EAAD,CAASlL,MAAQqc,EAAWC,EAAY,QAAiBzc,GAAI,CAAE6c,GAAI,GAAnE,SAAwE,iCAASL,GAAsB,QACvG,eAAC/B,EAAA,EAAD,CAAYta,MAAQqc,EAAQ,UAAMC,EAAN,SAAyB,aAAsBhe,UAAU,OAArF,UAA6Fme,EAA7F,WAA2G9C,YAAoByC,EAAKhd,MAAOmB,IAAOH,KAAKgc,EAAK9b,aAE9J,cAACga,EAAA,EAAD,CAAYza,GAAI,CAAE8c,QAASH,GAA3B,SAA0CJ,EAAK9b,KAAOiY,GAAUhG,IAAI6J,EAAK9b,KAAOqZ,YAAoB4C,EAAY,OAAS,QALzG5U,MAQpB,eAAC2E,EAAA,EAAD,CAAKzM,GAAI,CAAEC,QAAS,OAAQ8c,GAAI,GAAhC,UACE,cAACtC,EAAA,EAAD,CAAYta,MAAM,iBAAiB1B,UAAU,OAAOqB,QAAQ,UAAUE,GAAI,CAAEmW,SAAU,GAAtF,SAA4F1Q,GAA5F,4CACA,cAACuP,EAAA,EAAD,CAAczV,MAAO0a,GAAmBhF,MAAOkF,QAEhDF,KAAsBC,IAAiB,eAACzN,EAAA,EAAD,CAAKzM,GAAI,CAAEC,QAAS,OAAQyM,GAAI,GAAhC,UACtC,cAAC+N,EAAA,EAAD,CAAYta,MAAM,iBAAiB1B,UAAU,OAAOqB,QAAQ,UAAUE,GAAI,CAAEmW,SAAU,GAAtF,SAA4F1Q,GAA5F,4CACA,cAACuP,EAAA,EAAD,CAAczV,MAAO2a,GAAejF,MAAOkF,QAE7C,cAAC1N,EAAA,EAAD,CAAK0J,SAAU,IACdwC,IAAqB,oDAA6D,IAAtC9G,YAAYwH,GAAKV,KAA0BtY,QAAQ,GAA1E,OACtB,eAACoa,EAAA,EAAD,CAAYta,MAAM,eAAlB,2BAAkC6N,SAAlC,IAAkCA,QAAlC,EAAkCA,GAAO1H,YAAzC,QAAiD,eAAjD,IAAkEsU,SAEpE,cAACoC,EAAA,EAAD,UACE,eAACjB,EAAA,EAAD,CAAMxE,WAAS,EAACvX,GAAI,CAAEgc,SAAU,UAAhC,UACE,cAACD,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAG,OAAOC,WAAY,EAAjC,SACG/D,GACC,cAAChU,EAAA,EAAD,CAAyBoG,KAAK,QAAQjG,WAAS,EAAC/F,MAAO0J,GAAU5F,SA/FzD,SAACmL,GAAD,OAAgC7I,GAASwX,eAAe9E,EAAa7J,MA+FgB,cAACxF,EAAA,EAAD,CAAcC,SAAUA,OAEzH,cAAC8S,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAAGnW,GAAI,CAAE6c,GAAI,KACjC1D,IAAY,cAAC4C,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAG,OAAd,SACX,eAACxH,EAAA,EAAD,CAAazV,GAAI,CAAE6C,OAAQ,QAA3B,YACK0V,GAAU,cAAC5V,EAAA,EAAD,CAAQxC,MAAM,OAAOwG,QAAS,kBAAM4R,EAAOe,KAAK/N,KAAK,QAArD,SACX,cAAC,IAAD,CAAiBlK,KAAM+b,IAAQzY,UAAU,YAE3C,cAAC0Y,EAAA,EAAD,CAASnc,MAAO,cAACuZ,EAAA,EAAD,UAAahV,GAAb,8CAAkDxE,UAAU,MAAM2D,OAAK,EAAvF,SACE,cAACjC,EAAA,EAAD,CAAQgE,QAAS,kBAAMhB,GAASiW,UAAU,CAAEnC,SAAUA,IAAWH,KAAKnZ,MAAOsZ,GAAU,QAAU,UAAWlO,KAAK,QAAjH,SACE,cAAC,IAAD,CAAiBlK,KAAMoY,GAAU6D,IAAQC,IAAa5Y,UAAU,gBAGjE6T,GAAY,cAAC7V,EAAA,EAAD,CAAQxC,MAAM,QAAQoL,KAAK,QAAQ5E,QAAS,kBAAM6R,EAASc,KAAKhW,SAAUiW,GAA1E,SACb,cAAC,IAAD,CAAiBlY,KAAMmc,IAAY7Y,UAAU,6B,sWElI9C,SAASQ,EAAT,GAAuL,IAAD,EAAnJ5F,EAAmJ,EAAnJA,MAAO8D,EAA4I,EAA5IA,SAAU+B,EAAkI,EAAlIA,aAAcC,EAAoH,EAApHA,aAAoH,IAAtGC,iBAAsG,aAAnFC,kBAAmF,aAA/DC,cAA+D,MAAtD,kBAAM,GAAgD,EAAvCxC,EAAuC,oGAC3LyC,EAAMC,YAAe,MAArBD,EACFE,EAAWjH,qBAAWkH,KACtBC,EAAkBC,YAAWC,IAAeC,OAAQ,IACpDC,EAAiBH,YAAWC,IAAe9G,IAAIM,GAAQ,CAACA,IACxD2G,EAAgBP,EAASQ,eAAeX,QAAO,SAAAY,GAAE,OAAmB,OAAfP,QAAe,IAAfA,OAAA,EAAAA,EAAkBO,KAAOZ,EAAOK,EAAgBO,GAAKA,MAAKC,OACrH,OAAO,eAACsF,EAAA,EAAD,2BACD3I,GADC,IAEL9B,MAAK,iBAAE+E,QAAF,IAAEA,OAAF,EAAEA,EAAgBK,YAAlB,QAA2BhB,EAAYG,EAAH,0CAAmBL,QAAnB,IAAmBA,IAAgBK,EAAnC,kCACzCtF,MAAOZ,EAAQ,UAAY,UAC3BgH,WAAyB,OAAdN,QAAc,IAAdA,OAAA,EAAAA,EAAgBO,UAAW,cAACU,EAAA,EAAD,CAAWT,IAAKR,EAAeS,eAAoBpB,EAAY,cAACmY,EAAA,EAAD,IAAH,OAAyBpY,QAAzB,IAAyBA,IAAgB,cAACqY,EAAA,EAAD,IAJtI,WAKHnY,IAAeD,EAAY,eAACsG,EAAA,EAAD,CAAUjF,QAAS,kBAAMtD,EAAS,KAAKuD,SAAoB,KAAVrH,EAAc+D,SAAoB,KAAV/D,EAAzE,UAC3B,cAACoe,EAAA,EAAD,UACE,cAACF,EAAA,EAAD,MAEF,cAAChD,EAAA,EAAD,CAAY3a,QAAQ,UAAU+G,QAAM,EAApC,SACGpB,EADH,wCAGY,eAACmG,EAAA,EAAD,CAAUjF,QAAS,kBAAMtD,EAAS,KAAKuD,SAAoB,KAAVrH,EAAc+D,SAAoB,KAAV/D,EAAzE,UACZ,cAACoe,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,MAEF,cAACjD,EAAA,EAAD,CAAY3a,QAAQ,UAAU+G,QAAM,EAApC,SACGpB,EADH,yCAIAF,GAAc,cAACsG,EAAA,EAAD,GAAa,SAC1BhG,GAAmBiB,EAAuBjB,EAAiBK,EAAe7C,EAAU9D,OAKpF,SAASuH,EAAuBjB,EAA2DK,EAA+B7C,GAAqF,IAA/C0D,EAA8C,uDAAJ,GAC/M,OAAOb,EAAcc,KAAI,SAAAC,GAAY,aACnC,eAAC2E,EAAA,EAAD,CAAUjF,QAAS,kBAAMtD,EAAS4D,IAAkCL,SAAUG,IAAyBE,EAAc3D,SAAUyD,IAAyBE,EAAxJ,UACE,cAAC0W,EAAA,EAAD,UACE,cAACzW,EAAA,EAAD,CAAWT,IAAKZ,EAAgBoB,GAAcP,iBAEhD,cAAC+T,EAAA,EAAD,CAAY3a,QAAQ,UAAU+G,QAAM,EAApC,gBACGhB,QADH,IACGA,GADH,UACGA,EAAkBoB,UADrB,aACG,EAAiCX,SALgBW,M,sGC9B3C,SAAS2W,EAAT,GAAiG,IAAD,EAA1EC,EAA0E,EAA1EA,SAAUlX,EAAgE,EAAhEA,QAAS4R,EAAuD,EAAvDA,OAAQC,EAA+C,EAA/CA,SAA+C,IAArCsF,gBAAqC,SACvGnY,EAAWjH,qBAAWkH,KAEtB0D,EADiBH,YAAU0U,GAE3BnG,EAAc5R,aAAiB,OAANwD,QAAM,IAANA,OAAA,EAAAA,EAAQ7I,KAAMyN,IAAYjP,IAAIqK,EAAO7I,UAAOgJ,EAAW,QAACH,QAAD,IAACA,OAAD,EAACA,EAAQ7I,MAEzF+E,EAASvB,uBACb,SAAC8Z,GAAD,OAAwBA,EAAGC,iBAAH,OAAqBtG,QAArB,IAAqBA,OAArB,EAAqBA,EAAaP,cAC1D,CAACO,IAGGuG,EAAoBha,uBACxB,SAAAlB,GAAQ,OAAI,cAACmb,EAAA,EAAD,CAAgBvX,QAAS,yBAAMA,QAAN,IAAMA,OAAN,EAAMA,EAAUkX,IAAW7d,GAAI,CAAE6C,OAAQ,QAAlE,SAA6EE,MACzF,CAAC4D,EAASkX,IAGNM,EAAcla,uBAAY,SAACuK,GAAD,OAAgC7I,EAASyY,kBAAkBP,EAAUrP,KAAU,CAAC7I,EAAUkY,IAEpHQ,EAASvf,mBAAQ,kBAAM4Y,GAAepO,GAAUgV,YAAc,CAAC5G,EAAY9Y,KAAM2f,YAAiBjV,OAAW,CAACoO,EAAapO,IAEjI,IAAKA,IAAWoO,IAAgB2G,EAAQ,OAAO,KApB8D,IAqBrGpM,EAA0D3I,EAA1D2I,MAAOuM,EAAmDlV,EAAnDkV,UAAWC,EAAwCnV,EAAxCmV,WAAYnF,EAA4BhQ,EAA5BgQ,GArBuE,EAqB3ChQ,EAAxBL,gBArBmE,MAqBxD,GArBwD,EAqBpDsQ,EAASjQ,EAATiQ,KACnDyE,GAAgBK,EAAOpf,IAAImP,IAAM9E,OAAO9E,MAAMjF,MAC9CwK,GAAQ,CAACqE,IAAM9E,OAAOnH,KAAMiM,IAAM9E,OAAOoV,IAAKtQ,IAAM9E,OAAOqV,MAAM3X,KAAI,SAAAwK,GAAC,OAAI6M,EAAOpf,IAAIuS,MACrFnD,GAAMmQ,EAAY,EAAZ,OAAgB9G,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAarJ,IAA7B,OAAmCqJ,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAapJ,UAE5D,OAAO,cAAC,WAAD,CAAU0M,SAAU,cAACC,EAAA,EAAD,CAAUnb,QAAQ,cAAcE,GAAI,CAAED,MAAO,OAAQ8C,OAAQ,OAAQqY,UAAW,OAApG,SACL,cAAC0D,EAAA,EAAD,CAAoBC,YAAalY,EAASmY,QAASb,EAAnD,SACE,eAAC9C,EAAA,EAAD,CAAWnb,GAAI,CAAE6C,OAAQ,OAAQ5C,QAAS,OAAQgI,cAAe,UAAjE,UACE,sBAAKtD,UAAS,eAAU+S,EAAY3F,OAAtB,QAAd,UACE,cAAC1F,EAAA,EAAD,CAAYnL,MAAOwW,EAAYpR,KAAMgG,OAAQ,cAACyS,EAAA,EAAD,CAAS/e,GAAI,CAAEgf,SAAU,OAASvY,IAAG,UAAEoR,IAAOC,mBAAT,aAAE,EAAqBkG,MAAoBzR,qBAAsB,CAAEzM,QAAS,MAC5JqM,QAASxF,GAAW,cAACgV,EAAA,EAAD,CAAYxb,MAAM,UAAUwG,QAAS,kBAAMhB,EAASsZ,aAAa,CAAE1F,MAAOA,GAAQD,IAAlF,SACjBC,EAAO,cAACsC,EAAA,EAAD,IAAW,cAACC,EAAA,EAAD,QAEvB,eAACC,EAAA,EAAD,CAAMxE,WAAS,EAACvX,GAAI,CAAEgc,SAAU,SAAUN,GAAI,GAA9C,UACE,eAACK,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAArB,UACE,eAACsE,EAAA,EAAD,CAAYhc,UAAU,OAAOqB,QAAQ,KAArC,iBAA+CmS,KAC/C,eAACwI,EAAA,EAAD,CAAYhc,UAAU,OAAOqB,QAAQ,KAAKK,MAAM,iBAAhD,cAAmE+e,IAAkBV,MACrF,eAAC/D,EAAA,EAAD,CAAY3a,QAAQ,KAApB,wBAAoC,iCAAS2e,OAC7C,cAAChE,EAAA,EAAD,UAAY,cAAC,IAAD,CAAO1C,MAAOL,EAAY3F,OAAQiG,SAAO,SAGvD,cAAC+D,EAAA,EAAD,CAAMvE,MAAI,EAACD,WAAS,EAAC0E,SAAS,MAAMkD,aAAa,WAAWnf,GAAI,CAAEkc,IAAK,GAAvE,SACE,cAACzP,EAAA,EAAD,CAAKhO,UAAU,MAAMgI,IAAK4H,GAAKtO,MAAM,OAAO8C,OAAO,iBAIzD,cAAC2J,EAAA,EAAD,UACGzC,GAAM/C,KAAI,SAAAhI,GACT,IAAKA,EAAKyB,IAAK,OAAO,KACtB,IAAM2e,EAAare,YAAY/B,EAAKO,MAAOP,EAAKuB,KAAoB,SAAdvB,EAAKuB,KAAkB,OAAIkJ,GACjF,OAAO,eAACgD,EAAA,EAAD,CAAoBzM,GAAI,CAAEC,QAAS,QAAnC,UACL,eAACwa,EAAA,EAAD,CAAYtE,SAAU,EAAtB,UAA0B5U,IAASvC,EAAKyB,KAAxC,IAA+CC,IAAOzB,IAAID,EAAKyB,QAC/D,cAACga,EAAA,EAAD,UAAa2E,MAFEpgB,EAAKyB,UAO1B,cAACgM,EAAA,EAAD,CAAK0J,SAAU,IACf,cAAC3J,EAAA,EAAD,CAAaxM,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAACyE,EAAA,EAAD,CAAMxE,WAAS,EAACvX,GAAI,CAAEgc,SAAU,UAAhC,UACE,cAACD,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAG,OAAOC,WAAY,EAAjC,SACGY,EAAW,cAAC3Y,EAAD,CAAyBoG,KAAK,QAAQhG,YAAU,EAACD,WAAS,EAAC/F,MAAO0J,EAAU5F,SAAU8a,EAAa3Y,OAAQA,IAAa,cAACwD,EAAA,EAAD,CAAcC,SAAUA,MAE9J,cAAC8S,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAAGnW,GAAI,CAAE6c,GAAI,KAClC,cAACd,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAG,OAAd,SACE,eAACxH,EAAA,EAAD,CAAazV,GAAI,CAAE6C,OAAQ,QAA3B,YACK0V,GAAU,cAAC5V,EAAA,EAAD,CAAQxC,MAAM,OAAOoL,KAAK,QAAQ5E,QAAS,kBAAM4R,EAAOe,IAAxD,SACX,cAAC,IAAD,CAAiBjY,KAAM+b,IAAQzY,UAAU,cAExC6T,GAAY,cAAC7V,EAAA,EAAD,CAAQxC,MAAM,QAAQoL,KAAK,QAAQ5E,QAAS,kBAAM6R,EAASc,IAAKhW,WAAY2F,GAAYsQ,EAAxF,SACb,cAAC,IAAD,CAAiBlY,KAAMmc,IAAY7Y,UAAU,+B,iCChG/D,oHAae,SAAS0a,EAAT,GAAwD,IAA5BnG,EAA2B,EAA3BA,OAAQ2B,EAAmB,EAAnBA,UAC3C7M,EAAQlI,YAAWiI,IAAc9O,IAAIia,GAAS,CAACA,IACrD,IAAKlL,EAAO,OAAO,KAEnB,IAAMsR,EAAgBtR,EAAM+M,cAAcF,GACpC0E,EAAWvR,EAAMwR,kBAAkB3E,GACzC,OAAO,eAAC,IAAD,CAAK5a,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAhD,UACL,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WAAY,eAAC,IAAD,CAAS/H,MAAM,UAAf,UAA0B0a,EAA1B,UAAZ,IAAgEyE,SAGnEC,EAAW,cAAC,IAAD,CAAiB5X,SAAU4X,IAAe,U,gNCV3C,SAASE,IAAwB,IACtC7gB,EAASF,qBAAWC,KAApBC,KACF+I,EAAWoH,YAAmBnQ,GACpC,OAAO,cAAC,IAAD,CAAKoB,GAAI,CAAE6c,IAAK,EAAGnQ,IAAK,GAAxB,SACL,cAAC,IAAD,CAASgT,QAAS,CAAEzC,GAAI,EAAG0C,GAAI,EAAG/H,GAAI,GAAKtQ,QAAS,EAApD,SACGK,EAASX,KAAI,mCAAEvG,EAAF,KAAOmf,EAAP,YACZ,cAACC,EAAD,CAAmBC,UAAWF,EAAOlS,WAAYjN,GAAnCA,UAKtB,SAASof,EAAT,GAAyG,IAAtFC,EAAqF,EAArFA,UAAWpS,EAA0E,EAA1EA,WAA0E,EAC5EhP,qBAAWC,KAA7BC,EAD8F,EAC9FA,KAAMC,EADwF,EACxFA,QACRqN,EAASpG,YAAW2H,YAAiB7O,EAAM8O,GAAa,CAAC9O,EAAM8O,IAC/DqS,EAAiBjhB,mBAAQ,kBAAMkhB,YAAUF,GAAW,SAAC9O,EAAGiP,GAAJ,OAAgBC,YAAW,CAAC,UAAWxS,EAAYuS,SAAY,CAACH,EAAWpS,IAErI,IAAKxB,GAAUnB,OAAOgK,OAAO+K,GAAWK,OAAM,SAAA3O,GAAC,OAAIA,EAAEpS,WAAU,OAAO,KALgC,IAM9F8B,EAAwBgL,EAAxBhL,MAAOG,EAAiB6K,EAAjB7K,KAAM8K,EAAWD,EAAXC,OACrB,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,CAAYG,OAAQjL,GAAQ,cAAC,IAAD,CAASkK,KAAM,EAAGvL,GAAI,CAAE2M,GAAI,GAAKlG,IAAKpF,IAAUH,MAAOA,EAAOiL,OAAQA,EAAQI,qBAAsB,CAAEzM,QAAS,eAC3I,cAAC,IAAD,IACA,cAAC,IAAD,UACGiL,OAAOG,QAAQ4U,GAAW9Y,KAAI,mCAAEiZ,EAAF,KAAWjP,EAAX,YAAkB,cAAC,IAAD,CAAgChS,KAAMgS,EAAG1R,SAAUT,EAAUA,EAAQI,IAAI8gB,EAAeE,IAAW1gB,WAAQkK,GAApFwW,a,8UCrBvE,SAASG,IAAmB,IACzBxhB,EAASF,qBAAWC,KAApBC,KADwB,EAEA4E,oBAAS,GAFT,mBAEzB6c,EAFyB,KAEfC,EAFe,KAG1BC,EAAStc,uBAAY,kBAAMqc,GAAaD,KAAW,CAACC,EAAaD,IACjEG,EAAW5hB,EAAKK,IAAImP,IAAMqS,MAAMxO,OAChCyO,EAAU9hB,EAAKK,IAAImP,IAAMqS,MAAME,QAC/BC,EAAUhiB,EAAKK,IAAImP,IAAMqS,MAAMI,QACrC,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,UACE,eAAC,IAAD,CAAMtJ,WAAS,EAAf,UACE,cAAC,IAAD,CAAMC,MAAI,EAACrB,SAAU,EAAGoF,WAAW,SAAnC,SACE,eAAC,IAAD,CAAMhE,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMkQ,MAAI,EAAV,SACE,cAAC,IAAD,CAAMjM,KAAK,QAAQpL,MAAM,UAAUsb,MAAO,iCAAO/a,IAAOzB,IAAIuhB,EAAS/f,KAA3B,IAAiC,iCAAS+f,EAASjhB,eAE9FuhB,IAAmB9Z,KAAI,SAAA+Z,GAAO,OAAI,cAAC,IAAD,CAAMvJ,MAAI,EAAV,SACjC,cAAC,IAAD,UAA2B,cAACwJ,EAAD,CAAcD,QAASA,KAAjCA,IADgCA,MAGnD,cAAC,IAAD,CAAMvJ,MAAI,EAAV,SACE,eAAC,IAAD,4BAA2BzW,YAAY2f,EAAQnhB,MAAOmhB,EAAQngB,WAEhE,cAAC,IAAD,CAAMiX,MAAI,EAAV,SACE,eAAC,IAAD,yBAAwBzW,YAAY6f,EAAQrhB,MAAOqhB,EAAQrgB,gBAIjE,cAAC,IAAD,CAAMiX,MAAI,EAAV,SACE,cAAC,IAAD,CACE/O,OAAQ4X,EACR1Z,QAAS4Z,EACTU,gBAAeZ,EACf9b,aAAW,YACXgH,KAAK,QACLvL,GAAI,CAAEkhB,EAAG,GANX,SAQE,cAAC,IAAD,aAKR,cAAC,IAAD,CAAUC,GAAId,EAAUe,QAAQ,OAAOC,eAAa,EAApD,SACE,cAAC,IAAD,CAAarhB,GAAI,CAAEob,GAAI,GAAvB,SACE,cAACkG,EAAD,WAMD,SAASN,EAAT,GAAoE,IAA5CD,EAA2C,EAA3CA,QAEvB/hB,EADWN,qBAAWC,KAApBC,KACUK,IAAImP,IAAMqS,MAAN,UAAeM,EAAf,WAEhBQ,GADUC,SAASxiB,EAAKO,OACL,iCAAQkiB,IAAkBV,GAA1B,aACvB,iCAAQU,IAAkBV,GAA1B,OAAuC,iCAAShgB,YAAY/B,EAAKO,MAAOP,EAAKuB,WAC/E,OAAO,cAAC,IAAD,CAAWJ,MAAO4gB,EAAlB,SAA4BQ,IAG9B,SAASD,EAAT,GAA6E,IAAD,IAArDI,eAAqD,MAA3C,CAAEzE,GAAI,GAAIrF,GAAI,GAA6B,IAC7ClZ,qBAAWC,KAAvCC,EADyE,EACzEA,KAAM6L,EADmE,EACnEA,kBAGR+V,EAAW5hB,EAAKK,IAAImP,IAAMqS,MAAMxO,OAChCyO,EAAU9hB,EAAKK,IAAImP,IAAMqS,MAAME,QAC/BC,EAAUhiB,EAAKK,IAAImP,IAAMqS,MAAMI,QACrC,OAAO,eAAC,IAAD,CAAMtJ,WAAS,EAACjQ,QAAS,EAAzB,UACL,cAAC,IAAD,yBAAMkQ,MAAI,GAAKkK,GAAf,aACE,cAAC,IAAD,CAAQpW,WAAS,EAACtL,GAAI,CAAE6C,OAAQ,QAAU0I,KAAK,QAAQ9M,UAAU,IAAI0B,MAAM,UAAUwhB,KAAK,2EAA2ExiB,OAAO,SAASyiB,IAAI,aAAzL,yFAIF,cAAC,IAAD,yBAAMpK,MAAI,GAAKkK,GAAf,aACE,cAAC,IAAD,CACE1hB,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQ6f,aAAa3f,MAAMpC,MAAO,QACxDuG,KAAM,4BAAI5F,IAAOzB,IAAIuhB,EAAS/f,OAC9BlB,MAAOihB,EAASjhB,MAChBoW,YAAajV,IAAOqhB,OAAOvB,EAAS/f,KACpCmV,aAAchX,EAAKK,IAAImP,IAAM4T,KAAKziB,MAClCsW,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,gBAAiBsF,QAAS,aAAcvK,WAC1FwW,QAAS,kBAAMtL,EAAkB,CAAEjG,KAAM,gBAAiBsF,QAAS,aAAcvK,WAAOkK,UAG3FqX,IAAmB9Z,KAAI,SAAAib,GACtB,IAAMnY,EAAO,UAAMmY,EAAN,cACPjjB,EAAOJ,EAAKK,IAAImP,IAAMqS,MAAN,UAAewB,EAAf,WAChBC,GAAmBV,SAASxiB,EAAKO,OACvC,OAAO,cAAC,IAAD,yBAAMiY,MAAI,GAAkBkK,GAA5B,aACL,cAAC,IAAD,CACE1hB,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQ6f,aAAa3f,MAAMpC,MAAO,QACxDuG,KAAM,4BAAI5F,IAAOzB,IAAID,EAAKyB,OAC1BlB,MAAoB,IAAbP,EAAKO,MACZoW,YAAajV,IAAOqhB,OAAO/iB,EAAKyB,KAChCmV,aAhCW,GAiCXC,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,gBAAiBsF,UAASvK,WAC5E+D,SAAU4e,EACVpM,SAAO,EART,SAUE,eAAC,IAAD,CAAQ3V,MAAO8hB,EAAQtb,QAAS,kBAAM8D,EAAkB,CAAEjG,KAAM,gBAAiBsF,UAASvK,MAAO2iB,EArCtF,GAqCqHC,OAAOC,aAAvI,UACE,cAAC,IAAD,CAAiB/gB,KAAM6gB,EAAkBG,IAAgBC,IAAU3d,UAAU,UAD/E,mBAXmBsd,MAiBzB,cAAC,IAAD,yBAAMzK,MAAI,GAAKkK,GAAf,aACE,cAAC,IAAD,CACE1hB,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQ6f,aAAa3f,MAAMpC,MAAO,QACxDuG,KAAM,4BAAI5F,IAAOzB,IAAIyhB,EAAQjgB,OAC7BlB,MAAOmhB,EAAQnhB,MACfoW,YAAajV,IAAOqhB,OAAOrB,EAAQjgB,KACnCmV,aAAc,EACdC,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,gBAAiBsF,QAAS,eAAgBvK,WAC5FuW,SAAO,OAGX,cAAC,IAAD,yBAAM0B,MAAI,GAAKkK,GAAf,aACE,cAAC,IAAD,CACE1hB,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQ6f,aAAa3f,MAAMpC,MAAO,QACxDuG,KAAM,4BAAI5F,IAAOzB,IAAI2hB,EAAQngB,OAC7BlB,MAAOqhB,EAAQrhB,MACfoW,YAAajV,IAAOqhB,OAAOnB,EAAQngB,KACnCmV,aAAc,EACdC,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,gBAAiBsF,QAAS,eAAgBvK,WAC5FuW,SAAO,OAGX,cAAC,IAAD,CAAM0B,MAAI,EAACyF,GAAI,GAAf,SACE,2M,4SCnIAsF,EAAe,CACnB,GAAI,wDACJ,KAAQ,iCAAQd,IAAkBe,KAA1B,oBACR,KAAQ,iCAAQf,IAAkBgB,KAA1B,qBAGH,SAASC,EAAqB1f,GAAmC,IAAD,EACMtE,qBAAWC,KAA9EsH,EAD6D,EAC7DA,eAA6B0c,EADgC,EAC7CnY,UAAamY,aAAgBlY,EADgB,EAChBA,kBACrD,OAAI,OAACxE,QAAD,IAACA,OAAD,EAACA,EAAgB2c,WACd,cAAC,IAAD,yBAAgB1hB,MAAOqhB,EAAaI,GAAexiB,MAAOwiB,GAAgB,aAAiB3f,GAA3F,aACJ+H,OAAOG,QAAQqX,GAAcvb,KAAI,mCAAEvG,EAAF,KAAOL,EAAP,YAChC,cAAC,IAAD,CAAoBJ,GAAIS,EAAM,CAAEN,MAAM,GAAD,OAAKM,EAAL,eAAoBgJ,EACvD7C,SAAUnG,IAAQkiB,EAAcrf,SAAU7C,IAAQkiB,EAClDhc,QAAS,kBAAM8D,EAAkB,CAAEkY,aAAcliB,KAFnD,SAE4DL,GAF7CK,SAHoB,KAUlC,SAASoiB,EAAe7f,GAA6B,IAAD,EACsBtE,qBAAWC,KAAlFC,EADiD,EACjDA,KADiD,IAC3C4L,UAAasY,EAD8B,EAC9BA,aAAcH,EADgB,EAChBA,aAAgBlY,EADA,EACAA,kBACnDsY,EAAankB,EAAKK,IAAImP,IAAMM,SAASnP,MAC3C,MAAK,CAAC,OAAQ,QAAS,QAAQqO,SAASmV,IAAgB,CAAC,OAAQ,QAAS,QAAQnV,SAAS+U,GACpF,eAAC,IAAD,yBAAwBK,WAAS,EAACC,UAAU,YACjD1jB,MAAOujB,EAAczf,SAAU,SAACgB,EAAGye,GAAJ,OAAqBrY,EAAkB,CAAEqY,mBAAqB9f,GADxF,cAEL,cAAC,IAAD,CAAczD,MAAM,GAApB,2BACiB,SAAfwjB,GAA0C,SAAjBJ,IAA4B,cAAC,IAAD,CAAcpjB,MAAM,gBAApB,SACrD,eAAC,IAAD,CAAWY,MAAM,WAAjB,2BAA2CoB,IAAS2hB,MAApD,IAA4D3hB,IAASihB,WAEtD,SAAfO,GAA0C,SAAjBJ,IAA4B,cAAC,IAAD,CAAcpjB,MAAO,YAArB,SACrD,eAAC,IAAD,CAAWY,MAAM,OAAjB,wBAAoCoB,IAASkhB,KAA7C,IAAoDlhB,IAASihB,WAE9C,UAAfO,GAA2C,UAAjBJ,IAA6B,cAAC,IAAD,CAAcpjB,MAAO,iBAArB,SACvD,eAAC,IAAD,CAAWY,MAAM,WAAjB,6BAA6CoB,IAASihB,KAAtD,IAA6DjhB,IAAS2hB,YAEvD,SAAfH,GAA0C,SAAjBJ,IAA4B,cAAC,IAAD,CAAcpjB,MAAO,YAArB,SACrD,eAAC,IAAD,CAAWY,MAAM,OAAjB,wBAAoCoB,IAASihB,KAA7C,IAAoDjhB,IAASkhB,cAdgD,KAmB5G,SAASU,EAAcngB,GAA4B,IAAD,EACDtE,qBAAWC,KAA5CykB,EADkC,EAC/C5Y,UAAa4Y,QAAW3Y,EADuB,EACvBA,kBAChC,OAAO,eAAC,IAAD,yBAAwBuY,WAAS,EAACC,UAAU,YACjD1jB,MAAO6jB,EAAS/f,SAAU,SAACgB,EAAG+e,GAAJ,OAAgB3Y,EAAkB,CAAE2Y,cAAgBpgB,GADzE,cAEL,cAAC,IAAD,CAAczD,MAAM,SAApB,sBACA,cAAC,IAAD,CAAcA,MAAM,MAApB,0BACA,cAAC,IAAD,CAAcA,MAAM,UAApB,8BAKG,SAAS8jB,IACd,OAAO,cAAC,IAAD,UACL,cAAC,IAAD,UACE,eAAC,IAAD,CAAM9L,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMkQ,MAAI,EAAV,SAAW,cAAC2L,EAAD,CAAe5X,KAAK,YAC/B,cAAC,IAAD,CAAMiM,MAAI,EAAV,SAAW,cAACkL,EAAD,MACX,cAAC,IAAD,CAAMlL,MAAI,EAAV,SAAW,cAACqL,EAAD,CAAgBtX,KAAK,qB,mcC9BzB,SAAS+X,EAAT,GAIiB,IAAD,EAHnBC,EAGmB,EAH7B1F,SAG6B,IAF7B2F,cAE6B,SAD7BnM,EAC6B,EAD7BA,QAEQzY,EAASF,qBAAWC,KAApBC,KAEF+G,EAAWjH,qBAAWkH,KACtB0D,EAASH,YAAUoa,GAJI,SAKuDja,QALvD,IAKuDA,IAAU,GALjE,IAKrB7I,WALqB,MAKf,GALe,EAKXwR,EALW,EAKXA,MALW,IAKJwM,kBALI,MAKS,EALT,MAKYD,iBALZ,MAKwB,EALxB,EAK2BjF,GAL3B,EAK2BA,KAL3B,KAKiCtQ,iBALjC,OAK4C,GAL5C,GAKgDqQ,GALhD,EAKgDA,GACvE5B,GAAc5R,YAAWoI,IAAYjP,IAAIwB,GAAM,CAACA,IAChDud,GAAa,OAAGtG,SAAH,IAAGA,QAAH,EAAGA,GAAaP,WAE7BsM,GAAiBxf,uBAAY,SAACyf,GAClC/d,EAASsZ,aAAayE,EAAWH,KAChC,CAACA,EAAc5d,IAEZge,GAAW1f,uBAAY,SAAAgO,GAC3BA,EAAQiD,YAAMjD,EAAO,EAAG,IACxB,IAAMuM,EAAYU,IAAkB0E,WAAU,SAAAC,GAAO,OAAI5R,GAAS4R,KAClEJ,GAAe,CAAExR,QAAOuM,gBACvB,CAACiF,KAEEK,GAAe7f,uBAAY,WAC/B,IAAM8f,EAAiB7E,IAAkB0E,WAAU,SAAAC,GAAO,OAAc,KAAV5R,GAAgBA,IAAU4R,KACtDJ,GAA9BjF,IAAcuF,EAA+B,CAAEvF,UAAWA,EAAY,GACtD,CAAEA,UAAWuF,MAChC,CAACN,GAAgBjF,EAAWvM,IAEzBhM,GAAiBH,YAAWmD,GAAWlD,IAAe9G,IAAIgK,SAAYQ,EAAW,CAACR,KAClF4N,GAAe5Q,GAAiB,SAAC+d,GAAD,OAAQA,EAAG7M,aAAelR,GAAe+X,oBAAgBvU,EACzFwa,GAAsBhe,IAAkBA,GAAe+X,cAEvDG,GAAcla,uBAAY,SAACuK,GAAD,OAAgC8K,IAAM3T,EAASyY,kBAAkB9E,GAAI9K,KAAU,CAAC7I,EAAU2T,KACpH9T,GAASvB,uBACb,SAAC8Z,GAAD,OAAwBA,EAAGC,iBAAH,OAAqBtG,SAArB,IAAqBA,QAArB,EAAqBA,GAAaP,cAC1D,CAACO,KAhC0B,GAkCKlU,oBAAS,GAlCd,qBAkCtB0gB,GAlCsB,MAkCXC,GAlCW,MAmCvB9V,GAAMmQ,EAAY,EAAZ,OAAgB9G,SAAhB,IAAgBA,QAAhB,EAAgBA,GAAarJ,IAA7B,OAAmCqJ,SAAnC,IAAmCA,QAAnC,EAAmCA,GAAapJ,UAEtD8V,GAAetlB,mBAAQ,kBAAM4Y,IAAepO,GAAUgV,YAAc,CAAC5G,GAAY9Y,KAAM2f,YAAiBjV,OAAW,CAACoO,GAAapO,IACvI,OAAO,eAAC,IAAD,WACL,cAAC,IAAD,CAAatJ,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAAC,IAAD,CAAMC,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAAC,IAAD,CAAMkQ,MAAI,EAACrB,SAAU,EAArB,SACE,eAAC,IAAD,CAAMoB,WAAS,EAACjQ,QAAS,EAAzB,UACE,eAAC,IAAD,CAAMkQ,MAAI,EAAV,UACE,cAAC,IAAD,CAAsBf,KAAMyN,GAAWxN,OAAQ,kBAAMyN,IAAa,IAAQxN,SAAU,SAAArH,GAAC,OAAImU,GAAe,CAAEhjB,IAAK6O,KAAM9J,OAAQqR,GAAcA,aAAcoN,KACzJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAQtd,QAAS,kBAAMwd,IAAa,IAApC,0BAA6CzM,SAA7C,IAA6CA,QAA7C,EAA6CA,GAAapR,YAA1D,QAAkE,oBAClE,eAAC,IAAD,CAAgBpF,MAAK,qBAAgBud,GAArC,UACE,cAAC,IAAD,uCACA,cAAC,IAAD,IACC,YAAI5N,MAAM,GAAG7F,QAAQhE,KAAI,SAAAvG,GAAG,OAC3B,cAAC,IAAD,CAAoBkG,QAAS,kBAAM8c,GAAe,CAAEhF,WAAYhe,EAAM,KAAMmG,SAAU6X,IAAgBhe,EAAM,EAAI6C,SAAUmb,IAAgBhe,EAAM,EAAhJ,8BACiBA,EAAM,IADRA,eAMvB,cAAC,IAAD,CAAM+W,MAAI,EAAV,SACE,eAAC,IAAD,CAAaxX,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQ6f,aAAa3f,OAAxD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAmBkB,SAAUsgB,GAAUpkB,MAAO0S,EAC5CoS,eAAe,QACfhO,WAAY,CAAEsD,IAAK,EAAG5G,IAAK,GAAI/S,GAAI,CAAEsW,UAAW,WAChDtW,GAAI,CAAED,MAAO,OAAQ8C,OAAQ,OAAQ6Y,GAAI,OAG7C,cAAC,IAAD,CAAQ1b,GAAI,CAAE0b,GAAI,GAAKpY,UAAWghB,YAAerS,GAAQtL,QAASmd,GAAlE,SAAgF,wCAAW5E,IAAkBV,QAC7G,cAAC,IAAD,CAAgBtd,MAAO,eAAvB,SACGqjB,IAAgBvd,KAAI,YAAe,IAAD,mBAAZwd,EAAY,KAARC,EAAQ,KAE3BC,EADYF,IAAOtF,IAAkBuF,GACnB,cAAUD,GAAV,cAAwBA,EAAxB,YAA8BtF,IAAkBuF,IAClE7d,EAAW4d,IAAOvS,GAASwS,IAAOjG,EACxC,OAAO,cAAC,IAAD,CAA8B5X,SAAUA,EAAUtD,SAAUsD,EAAUD,QAAS,kBAAM8c,GAAe,CAAExR,MAAOuS,EAAIhG,UAAWiG,KAA5H,SAAoIC,GAApI,UAAkBF,EAAlB,YAAwBC,cAKvC,cAAC,IAAD,CAAMjN,MAAI,EAAV,SACE,cAAC,IAAD,CAAQrX,MAAM,QAAQwG,QAAS,kBAAM2S,IAAM3T,EAASsZ,aAAa,CAAE1F,MAAOA,IAAQD,KAAK/S,UAAWgT,GAAO,cAAC,IAAD,IAAW,cAAC,IAAD,IAApH,SACGA,GAAO,SAAW,sBAKxBlC,GAAW,cAAC,IAAD,CAAMG,MAAI,EAAV,SACZ,cAAC,IAAD,CAAa7Q,QAAS0Q,MAEvB1R,IAAayT,KAAiB,cAAC,IAAD,CAAM5B,MAAI,EAAV,SAC7B,cAACmN,EAAD,CAAS3G,cAAeA,GAAe4G,WAAY,SAAAtL,GAAE,OAAI3T,EAASyY,kBAAkB9E,EAAI1a,EAAKK,IAAImP,IAAMI,SAASjP,iBAItH,cAAC,IAAD,IACA,cAAC,IAAD,UACGmY,IAAe0M,IAAgB,eAAC,IAAD,CAAKnkB,QAAQ,OAAOiI,IAAK,CAAE+U,GAAI,EAAGrF,GAAI,IAAKD,GAAI,GAA/C,UAC9B,eAAC,IAAD,CAAK3X,GAAI,CAAEic,SAAU,KAAOiB,WAAY,EAAG2H,SAAS,MAApD,UACE,cAAC,IAAD,CAAKpmB,UAAU,MAAMgI,IAAK4H,GAAK1J,UAAS,eAAU+S,GAAY3F,OAAtB,QAAoC/R,GAAI,CAAEic,SAAU,IAAKlc,MAAO,OAAQ8C,OAAQ,OAAQjB,aAAc,KAC9I,cAAC,IAAD,UAAY,gCAAQ8V,GAAYzL,mBAElC,eAAC,IAAD,CAAKjM,GAAI,CAAE0M,IAAK,GAAKyJ,SAAU,EAA/B,UACE,eAAC,IAAD,CAAYrW,QAAQ,KAApB,WAA2BglB,EAAgGpN,GAAYpR,KAAvI,QAAkJgD,GAAU4E,IAAY6W,eAAezb,GAAvL,IAAiMoO,GAAY3F,OAAS,GAAK,eAAC,IAAD,CAAS5R,MAAM,OAAf,wBAAkCse,QAC7P,cAAC,IAAD,UAAY,cAAC,IAAD,CAAO1G,MAAOL,GAAY3F,WACtC,cAAC,IAAD,CAAYjS,QAAQ,YAApB,SAAiC4X,GAAYsN,cAC7C,cAAC,IAAD,CAAYC,cAAY,EAAxB,SAA0BvN,GAAYsN,aAAetN,GAAYwN,mBAAmBd,GAAanlB,IAAImP,IAAM9E,OAAO6b,aAAa5lB,SAC/H,eAAC,IAAD,CAAKU,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAhD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,2BAEF,cAAC,IAAD,UACG,CAACkG,IAAM9E,OAAOnH,KAAMiM,IAAM9E,OAAOoV,IAAKtQ,IAAM9E,OAAOqV,MAAM3X,KAAI,SAAChI,EAAM8I,GACnE,IAAMkJ,EAAIoT,GAAanlB,IAAID,GAC3B,OAAIgS,EAAE5R,UAAY4R,EAAEzR,MAAc,KAC3B,cAAC,IAAD,CAA0BP,KAAMgS,EAAGvS,UAAW2J,KAAvBN,WAInClJ,GAAQ8Y,GAAY6H,UAAY,cAAC,IAAD,CAAiB5X,SAAU+P,GAAY6H,sBAK/EiE,GAAUlK,IAAM,cAAC,IAAD,CAAatZ,GAAI,CAAEsX,GAAI,GAAvB,SACf,eAAC,IAAD,CAAMC,WAAS,EAAf,UACE,cAAC,IAAD,CAAMC,MAAI,EAACrB,SAAU,EAArB,SACE,cAAC,IAAD,CAAyB5Q,YAAU,EAACD,WAAS,EAAC/F,MAAO0J,GAAU5F,SAAU8a,GAAa3Y,OAAQA,SAE7F6R,GAAW,cAAC,IAAD,CAAMG,MAAI,EAAV,SAAW,cAAC,IAAD,CAAaS,OAAK,EAACtR,QAAS0Q,cAK7D,SAASsN,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,WAAY5G,EAAiB,EAAjBA,cACvBrY,EAAWjH,qBAAWkH,KADkB,EAEtBpC,oBAAS,GAFa,mBAEvCiT,EAFuC,KAEjC2O,EAFiC,KAIxCC,EAAQ,kBAAMD,GAAQ,IAEtBE,EAAe,SAAChM,GACpBsL,EAAWtL,GACX+L,KAGIvO,EAAehR,YAAWoI,IAAYlI,OAAQ,IAE9CgR,EAAerR,EAAS4f,QAAQva,KAAKxF,QAAO,SAAA0R,GAAS,IAAD,EAClDsO,EAAW7f,EAAS0D,WAAW6N,GACrC,QAAKsO,KACDxH,GAAiBA,KAAa,OAAKlH,QAAL,IAAKA,GAAL,UAAKA,EAAe0O,EAAS/kB,YAA7B,aAAK,EAA8B0W,gBAKvE,OAAO,qCACL,cAAC,IAAD,CAAQhX,MAAM,OAAOwG,QAnBV,kBAAMye,GAAQ,IAmBW7e,UAAW,cAAC,IAAD,IAA/C,yBACA,cAAC,IAAD,CAAc6Q,KAAMX,EAAMY,QAASgO,EAAnC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAarlB,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAAC,IAAD,CAAMC,WAAS,EAAf,UACE,cAAC,IAAD,CAAMC,MAAI,EAACrB,SAAU,EAArB,SACE,eAAC,IAAD,CAAYrW,QAAQ,KAApB,UAA0Bke,EAAgB,cAAC,IAAD,CAASvX,IAAKoR,IAAOC,YAAYkG,KAAqB,KAAhG,oBAEF,cAAC,IAAD,CAAMxG,MAAI,EAAV,SACE,cAAC,IAAD,CAAa7Q,QAAS0e,WAI5B,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAM9N,WAAS,EAACjQ,QAAS,EAAzB,SACG0P,EAAahQ,KAAI,SAAA6W,GAAQ,OACxB,cAAC,IAAD,CAAMrG,MAAI,EAAgByF,GAAI,EAAG0C,GAAI,EAAG/H,GAAI,EAAGD,GAAI,EAAnD,SACE,cAAC,IAAD,CACEkG,SAAUA,EACVlX,QAAS2e,KAHGzH,oB,obCrMf,SAAS4H,IAAmB,IAAD,EACRjiB,oBAAS,GADD,mBACjC6c,EADiC,KACvBC,EADuB,KAElCC,EAAStc,uBAAY,kBAAMqc,GAAaD,KAAW,CAACC,EAAaD,IACvE,OAAO,eAAClF,EAAA,EAAD,WACL,cAAC3O,EAAA,EAAD,UACE,eAACuP,EAAA,EAAD,CAAMxE,WAAS,EAAf,UACE,eAACwE,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAArB,UACE,eAACsE,EAAA,EAAD,uBAAsB,IAAtB,mBACA,cAACA,EAAA,EAAD,CAAY3a,QAAQ,UAAUK,MAAM,iBAApC,wEAEF,cAAC4b,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACE,cAAChP,EAAA,EAAD,CACEC,OAAQ4X,EACR1Z,QAAS4Z,EACTU,gBAAeZ,EACf9b,aAAW,YAJb,SAME,cAACmhB,EAAA,EAAD,aAKR,cAACC,EAAA,EAAD,CAAUxE,GAAId,EAAUe,QAAQ,OAAOC,eAAa,EAApD,SACE,cAAC7U,EAAA,EAAD,CAAaxM,GAAI,CAAEob,GAAI,GAAvB,SACE,cAACwK,EAAD,WAMR,SAASA,IAAsB,IACrBhnB,EAASF,qBAAWC,KAApBC,KACF+I,EAAWoH,YAAmBnQ,GACpC,OAAO,cAAC,WAAD,CAAUoc,SAAU,cAACC,EAAA,EAAD,CAAUnb,QAAQ,cAAcC,MAAM,OAAO8C,OAAQ,MAAzE,SACL,cAAC4J,EAAA,EAAD,CAAKzM,GAAI,CAAE6c,IAAK,EAAGnQ,IAAK,GAAxB,SACG/E,EAASX,KAAI,mCAAEvG,EAAF,KAAOmf,EAAP,YACZ,cAACiG,EAAD,CAAuB/F,UAAWF,EAAOlS,WAAYjN,GAAnCA,UAI1B,SAASolB,EAAT,GAA6G,IAAtFnY,EAAqF,EAArFA,WAAYoS,EAAyE,EAAzEA,UACzBlhB,EAASF,qBAAWC,KAApBC,KACFsN,EAASpG,YAAW2H,YAAiB7O,EAAM8O,GAAa,CAAC9O,EAAM8O,IACrE,IAAKxB,EAAQ,OAAO,KAHsF,IAIlGhL,EAAwBgL,EAAxBhL,MAAOG,EAAiB6K,EAAjB7K,KAAM8K,EAAWD,EAAXC,OACrB,OAAO,eAACC,EAAA,EAAD,CAAUpM,GAAI,CAAE0M,GAAI,GAApB,UACL,cAACL,EAAA,EAAD,CAAYC,OAAQjL,GAAQ,cAAC0d,EAAA,EAAD,CAASxT,KAAM,EAAGvL,GAAI,CAAE2M,GAAI,GAAKlG,IAAKpF,IAAUH,MAAOA,EAAOiL,OAAQA,EAAQI,qBAAsB,CAAEzM,QAAS,eAC3I,cAAC+L,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,UACGzB,OAAOG,QAAQ4U,GAAW9Y,KAAI,qCAAEvG,EAAF,KAAOzB,EAAP,YAC5BA,EAAKI,SAAW,eAAC0mB,EAAA,EAAD,CAAW9lB,GAAI,CAAE6hB,QAAS,qBAA1B,UACf,cAACkE,EAAA,EAAD,CAAkBC,WAAY,cAACN,EAAA,EAAD,IAA9B,SACE,eAACjL,EAAA,EAAD,WAAY,cAAC,IAAD,CAAWta,MAAOnB,EAAKc,QAAvB,SAAiCY,IAAOzB,IAAP,UAAWD,EAAKyB,WAAhB,QAAuB,MAApE,IAAqF,iCAASM,YAAY/B,EAAKO,MAAOP,EAAKuB,aAE7H,cAAC0lB,EAAA,EAAD,UACGjnB,EAAKknB,SAASlf,KAAI,SAACmf,EAASre,GAAV,OAAgB,cAAC2S,EAAA,EAAD,UAAqB0L,GAAJre,UALerH,W,kKCsBhE2lB,OAtEf,YAA8E,IAAD,IAA5CC,gBAA4C,WACb3nB,qBAAWC,KAAjEC,EADmE,EACnEA,KAAMC,EAD6D,EAC7DA,QAAS2L,EADoD,EACpDA,UAAWiO,EADyC,EACzCA,wBAE5B9S,EAAWjH,qBAAWkH,MACtB0gB,EAAUC,eACVC,EAAOviB,uBACX,SAAAwiB,GAAK,OAAIH,EAAQnV,KAAK,CACpBuV,SAAU,YACVC,YAAaF,MACJ,CAACH,IACRM,EAAiB9gB,YAAWiI,KAAc/H,OAAQ,IAVmB,EAarD6gB,eAAbjL,EAbkE,oBAc3EzX,qBAAU,kBAAMwB,EAASmhB,aAAalL,MAEtC,IAAMmL,EAAY9iB,uBAAY,WAC5B,GAAK+iB,OAAOC,QAAQ,gEACfpoB,EAAL,CACA,IAAMwnB,EAAWtb,OAAOwC,YAAY2Z,KAAYlgB,KAAI,SAAAuB,GAAC,MAAI,CAACA,EAAG3J,EAAKK,IAAImP,KAAMiL,IAAI9Q,GAAG+Q,IAAI/Z,WACvFoG,EAASwhB,eAAe3c,EAAU/J,IAAK4lB,MACtC,CAAC7b,EAAW5L,EAAMC,EAAS8G,IAExByhB,EAAcnjB,uBAAY,WACzBuG,GACAwc,OAAOC,QAAQ,uEACpBthB,EAASwhB,eAAe3c,EAAU/J,IAAK4mB,YAAaH,MAAa,SAAAnW,GAAC,MAAI,SACrE,CAACvG,EAAW7E,IACT2hB,EAASJ,KAAYlgB,KAAI,SAAAwS,GAAO,OAAI5a,EAAKK,IAAImP,KAAMiL,IAAIG,GAASF,IAAI/Z,SACpEob,EAAa7b,mBAAQ,kBAAM8nB,GAAkB7Y,KAAc4M,WAAWiM,EAAgBhoB,KAAO,CAACgoB,EAAgBhoB,IACpH,OAAO,qCACL,eAACuc,EAAA,EAAD,CAAWnb,GAAI,CAAE0M,GAAI,GAArB,UACE,cAACF,EAAA,EAAD,UACE,cAACiT,GAAA,EAAD,MAEF,cAAC5T,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,CAAaxM,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAACyE,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAACyU,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACG6O,EAAW,cAAC1jB,EAAA,EAAD,CAAQgE,QAASogB,EAAWpiB,UAAU,OAAtC,6BAAyEgB,IAAayT,MAAiB,cAACzW,EAAA,EAAD,CAAQxC,MAAM,QAAQwG,QAASygB,EAA/B,qCAErH,cAACrL,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,IACrB,cAAC4F,EAAA,EAAD,CAAMvE,MAAI,EAAV,WAAciB,GAA2B,cAAC8O,EAAA,EAAD,CAAMvnB,GAAI,CAAEkhB,EAAG,EAAGW,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQulB,QAAQ/kB,OAAlD,SAA0D,cAACgY,EAAA,EAAD,UAAY,kEAAqChC,mBAI1J,eAACsD,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAACyU,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAI0C,GAAI,EAAG/H,GAAI,EAAG3X,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAA5E,SACG0e,GAAkBjM,GAAc5P,OAAOG,QAAQyP,GAAY3T,KAAI,mCAAEkS,EAAF,KAAUuO,EAAV,YAC9D,eAACtM,EAAA,EAAD,CAAwBnb,GAAI,CAAEmW,SAAU,GAAxC,UACE,cAAC9J,EAAA,EAAD,CAAYC,OAAQ,cAACyS,EAAA,EAAD,CAASxT,KAAM,EAAGvL,GAAI,CAAE2M,GAAI,GAAKlG,IAAKmgB,EAAe1N,GAAQjL,aAAgB/M,MAAO0lB,EAAe1N,GAAQ5S,KAAMiG,qBAAsB,CAAEzM,QAAS,eACtK,cAAC+L,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,UACE,cAACuP,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAGW,cAAc,SAASpF,OAAO,OAA1D,SACE,cAACkZ,EAAA,EAAD,CAAMvE,MAAI,EAACvX,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAtD,SACGuf,EAAazgB,KAAI,SAAA6T,GAAS,OAAI,cAACwE,GAAA,EAAD,CAA2CnG,OAAQA,EAAQ2B,UAAWA,GAA/C3B,EAAS2B,cANvD3B,QAanBoO,EAAOtgB,KAAI,SAACsS,EAAIxR,GAAL,QACRwR,GAAM,cAACyC,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,EAAGrF,GAAI,EAAtB,SACN,cAACQ,GAAA,EAAD,CAAcC,WAAYiB,EAAIb,wBAAyBA,EAAyBF,OAAQ,kBAAMiO,EAAKlN,OAD/DxR,a,0LC3D/B,SAAS4f,KACtB,OAAO,eAAC,KAAD,CAAKznB,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAGqT,WAAW,UAA9D,UACL,cAACoM,GAAD,IAEA,cAAC5L,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,SACGkG,YAAM,EAAG,GAAGxG,KAAI,SAAAc,GAAC,OAAI,cAACiU,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAIrF,GAAI,EAAGD,GAAI,EAA9B,SACpB,cAACiQ,GAAD,CAAiB3T,MAAOnM,KADkCA,WAMlE,IAAM+f,GAAiB,CACrB5K,GAAI,GAAI0C,GAAI,EAAG/H,GAAI,EAAGD,GAAI,GAErB,SAASgQ,KAAmB,IAAD,QACNjpB,qBAAWC,KAA7BC,EADwB,EACxBA,KAAMC,EADkB,EAClBA,QACRipB,EAAYlpB,EAAKmpB,cACjBC,EAAgD,GAItD,OAHAjd,OAAOG,QAAP,UAAe4c,EAAUrT,aAAzB,QAAkC,IAAIlD,SAAQ,mCAAE9Q,EAAF,KAAOzB,EAAP,YAAiBgpB,EAAM7W,KAAK,CAAC,CAAC,QAAS1Q,GAAMzB,OAC3F+L,OAAOG,QAAP,UAAe4c,EAAUG,cAAzB,QAAmC,IAAI1W,SAAQ,mCAAE9Q,EAAF,KAAOzB,EAAP,YAAiBgpB,EAAM7W,KAAK,CAAC,CAAC,SAAU1Q,GAAMzB,OAC7F+L,OAAOG,QAAP,UAAe4c,EAAUrH,aAAzB,QAAkC,IAAIlP,SAAQ,mCAAE9Q,EAAF,KAAOzB,EAAP,YAAiBgpB,EAAM7W,KAAK,CAAC,CAAC,QAAS1Q,GAAMzB,OACtFgpB,EAAM7f,OACJ,eAACgT,EAAA,EAAD,WACL,cAAC3O,EAAA,EAAD,yBAGA,cAACX,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,UACE,cAACuP,EAAA,EAAD,CAAMxE,WAAS,EAAC2Q,cAAe,EAAGC,WAAY,EAA9C,SACGH,EAAMhhB,KAAI,WAAYc,GAAZ,yBAAEgD,EAAF,KAAQkG,EAAR,YAAkBA,IAAMA,EAAE5R,SAAW,wBAAC2c,EAAA,EAAD,yBAAMvE,MAAI,GAAKqQ,IAAf,IAA+BpnB,IAAKuQ,EAAEvQ,MACpF,cAAC,KAAD,CAAkBzB,KAAMgS,EAAG1R,SAAQ,UAAE8oB,YAAY,OAACvpB,QAAD,IAACA,OAAD,EAACA,EAASkpB,cAAejd,UAAvC,aAAE,EAA4CvL,mBAT/D,KA0C5B,SAASqoB,GAAT,GAAwD,IAA7B3T,EAA4B,EAA5BA,MACnBoU,EAAc3pB,qBAAWC,KACZ2pB,EAAiED,EAA5E7d,UAAmB+d,EAAyDF,EAAzDE,SAA6BC,EAA4BH,EAA/C5d,kBAC/Bge,EAAqBH,EAAO7nB,IAC5BwG,EAAeqhB,EAAOI,KAAKzU,GAC3BxJ,EAAoBke,YAAoB1hB,GAExC2hB,EAAiBC,cAEjBC,EAAaP,EAASthB,GACtB8hB,EAAkDD,GAAcre,GAAqB,CACzFD,UAAWse,EAAWte,UACtBvE,eAAgB6iB,EAAW7iB,eAC3BrH,KAAMkqB,EAAW3pB,OACjBopB,SAAUA,EACV9P,wBAAyB,EACzBhO,qBAEF,OAAO,eAAC0Q,EAAA,EAAD,WACL,cAAC3O,EAAA,EAAD,UACE,cAACrH,GAAA,EAAD,CAAyBmG,WAAS,EAAC/L,MAAO0H,EACxC5D,SAAU,SAAAmL,GAAO,OAAIga,EAAwB,CAAEhkB,KAAM,OAAQyP,QAAOzF,aACpEhJ,OAAQ,SAACuL,EAAG3K,GAAJ,OAAWA,IAAOqiB,IAAuBH,EAAOI,KAAK9a,SAASxH,IAAKhB,aAAY,mBAAc6O,EAAQ,GAAK5O,aAAc,cAAC2jB,GAAA,EAAD,QAEnID,GAAuB,cAACpqB,EAAA,EAAYsqB,SAAb,CAAsB1pB,MAAOwpB,EAA7B,SACtB,cAACG,GAAA,EAAD,CAAejiB,aAAcA,EAC3BkiB,cAAeP,EACfQ,iBAAkB,cAACC,GAAD,CAAyBhB,YAAaA,IACxDiB,eAAgB,cAACC,GAAD,CAAuBlB,YAAaA,IACpDmB,kBAAmB,cAACC,GAAD,CAAuBpB,YAAaA,WAM/D,SAASgB,GAAT,GAAoF,IAAjDhB,EAAgD,EAAhDA,YACzBzpB,EAAUF,qBAAWC,KAArBC,KACFgoB,EAAiB9gB,YAAWiI,KAAc/H,OAAQ,IAClD2B,EAAW7I,mBAAQ,kBAAM8nB,GAC7B7b,OAAOG,QAAQ6C,KAAc4M,WAAWiM,EAAgBhoB,IACrD8qB,SAAQ,mCAAExQ,EAAF,iBACCwQ,SAAQ,SAAAC,GAAE,OAAI/C,EAAe1N,GAASsG,kBAAkBmK,WAClE,CAAC/C,EAAgBhoB,IACrB,OAAK+I,EACE,cAACiiB,GAAD,CAAyBjiB,SAAUA,EAAU0gB,YAAaA,IAD3C,KAGxB,SAASkB,GAAT,GAAkF,IAAjDlB,EAAgD,EAAhDA,YAAgD,EACvB3pB,qBAAWC,KAC7D+Y,GAFyE,EACvE9Y,KADuE,EACjE2pB,SADiE,EACvD/d,UAAa/J,KACEiX,aAEvC,OAAO,cAACkS,GAAD,CAAyBjiB,SAAU+P,EAAY6H,SAAU8I,YAAaA,IAE/E,SAASoB,GAAT,GAAkF,IAAjDpB,EAAgD,EAAhDA,YAAgD,EACvB3pB,qBAAWC,KAA3DC,EADuE,EACvEA,KAEFgQ,EAHyE,EACjE2Z,SADiE,EACvD/d,UAAa/J,KACKwF,eACZ4jB,UAAUjrB,EAAKK,IAAImP,KAAMM,SAASnP,OAC1DoI,EAAWoD,OAAOgK,OAAOnG,EAAOkb,QAAQJ,SAAQ,SAAAK,GAAG,OAAIA,EAAIpiB,YACjE,OAAO,cAACiiB,GAAD,CAAyBjiB,SAAUA,EAAU0gB,YAAaA,IAGnE,SAASuB,GAAT,GAA2H,IAAxFjiB,EAAuF,EAAvFA,SAAU0gB,EAA6E,EAA7EA,YAC3C,OAAO,cAAC,KAAD,CAAKpoB,QAAQ,OAAOgI,cAAc,SAASC,IAAK,EAAGkT,GAAI,EAAvD,SACJzT,EAASX,KAAI,SAAAa,GAAO,aAAI,UAAAA,EAAQQ,mBAAR,eAAqB2hB,WAAY,cAACle,GAAA,EAAD,CAAoBzD,YAAaR,EAAQQ,YAAa7J,aAAc6pB,SC1HnH,SAAS4B,KAAyB,IAAD,IACgCvrB,qBAAWC,KAAjFC,EADsC,EACtCA,KAAMqH,EADgC,EAChCA,eAAgBuE,EADgB,EAChBA,UAA6BvD,EADb,EACLuD,UAAa/J,IAChDgK,EAAoBke,YAAoB1hB,GACxCyH,EAAU9P,EAAKK,IAAImP,KAAMM,SAASnP,MAClCye,EAAgB/X,EAAe+X,cAC/B/L,EAAQrT,EAAKK,IAAImP,KAAM4T,KAAKziB,MAC5Bif,EAAY5f,EAAKK,IAAImP,KAAMD,KAAK5O,MAChC2qB,EAAgBtrB,EAAKK,IAAImP,KAAM8b,eAAe3qB,MAC9C4qB,EAAO,CACXC,KAAMxrB,EAAKK,IAAImP,KAAMqG,MAAM2V,MAAM7qB,MACjC0N,MAAOrO,EAAKK,IAAImP,KAAMqG,MAAMxH,OAAO1N,MACnC2N,MAAOtO,EAAKK,IAAImP,KAAMqG,MAAMvH,OAAO3N,OAE/B8qB,EAAS,CACbD,KAAMxrB,EAAKK,IAAImP,KAAMkc,MAAMF,MAAM7qB,MACjC0N,MAAOrO,EAAKK,IAAImP,KAAMkc,MAAMrd,OAAO1N,MACnC2N,MAAOtO,EAAKK,IAAImP,KAAMkc,MAAMpd,OAAO3N,OAErC,OAAO,eAACwc,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,UACL,cAACyU,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAIrF,GAAI,EAAvB,SAEE,eAACuD,EAAA,EAAD,WACE,cAACiB,GAAA,EAAD,CAAW3V,IAAKR,EAAeskB,QAAS9rB,UAAU,MAAMsB,MAAM,OAAO8C,OAAO,SAC5E,eAAC2J,EAAA,EAAD,WACE,eAACiO,EAAA,EAAD,CAAY3a,QAAQ,KAApB,UAA2BmG,EAAeK,KAA1C,IAAgD,cAACyY,EAAA,EAAD,CAAStY,IAAG,UAAEoR,KAAOC,mBAAT,aAAE,EAAqBkG,KAAnF,IAAuGzc,KAASmN,GAAhH,OACA,cAAC+L,EAAA,EAAD,CAAY3a,QAAQ,KAApB,SAAyB,cAAC,KAAD,CAAOiY,MAAO9R,EAAe8L,OAAQiG,SAAO,MACrE,eAACyC,EAAA,EAAD,CAAY3a,QAAQ,KAApB,kBAA+BiG,KAAegf,eAAe9S,EAAOuM,MACpE,cAACzC,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAG4U,GAAI,EAAhC,SACI,CAAC,OAAQ,QAAS,SAAqClV,KAAI,SAAAwjB,GAAI,aAC/D,cAACzO,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,EAAf,SACE,cAACwN,GAAA,EAAD,CAAOC,aAAcP,EAAKK,GAAOrqB,MAAOkqB,EAAOG,GAAQ,OAAS,YAC9DG,QAAQ,WACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEd9qB,GAAI,CACFD,MAAO,OACP8C,OAAQ,OACR,sBAAuB,CACrBmc,SAAU,SACVpc,QAAS,aACThB,aAAc,OACduF,WAAY,EACZtE,OAAQ,WAdd,SAiBE,cAAC4J,EAAA,EAAD,CAAKhO,UAAU,MAAMgI,IAAG,UAAER,EAAe4I,eAAe2b,EAAM9b,UAAtC,aAAE,EAA8CL,IAAKtO,MAAM,OAAO8C,OAAO,YAlB9E2nB,QAsB3B,cAAC/P,EAAA,EAAD,CAAYza,GAAI,CAAEsW,UAAW,SAAU4F,GAAI,GAAKpc,QAAQ,KAAxD,SAA8DmG,EAAe8kB,oBAC7E,cAAChP,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,SACG,aAAIuJ,MAAM,GAAG7F,QAAQhE,KAAI,SAAAc,GAAC,aACzB,cAACiU,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,EAAf,SACE,cAACxQ,EAAA,EAAD,CAAKhO,UAAU,MAAMgI,IAAG,UAAER,EAAe4I,eAAf,uBAA8C/G,EAAI,GAA8B4G,UAAlF,aAAE,EAA0FL,IAClHrO,GAAE,aACAmB,OAAQ,WACJ+oB,EAAgBpiB,EAAI,GAAK,CAAEtC,OAAQ,oBAEzCzF,MAAM,OAAO8C,OAAO,OACpB8D,QAAS,kBAAM8D,EAAkB,CAAEyf,cAAgBpiB,EAAI,IAAOoiB,EAAgBpiB,EAAIA,EAAI,QAPnEA,gBAajC,eAACiU,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAIrF,GAAI,EAAG5X,GAAI,CAC5B,yBAA0B,CAAE0M,GAAI,IADlC,UAGE,cAAC4W,GAAA,QAAD,CAAmBzF,SAAUrT,EAAUwgB,iBACvC,cAACC,GAAD,UAIN,IAIMC,GAAc,CAAC,SAAU,YAAa,WAAY,YAAa,SAC/DC,GAAgB,UAFD,CAAC,MAAO,KAAM,OAEQD,IAAalkB,KAAI,SAAAsI,GAAC,OAAIlB,KAAMqG,MAAMnF,MACvE8b,GAAY,CAAI,OAAQ,MAAO,MAAO,KAAM,OAAQ,OAAxC,OAAkDF,IAE9DG,GAAkB,uBACnBvK,KAAmB9Z,KAAI,SAAAskB,GAAG,OAAIld,KAAMqG,MAAN,UAAe6W,EAAf,cADX,aAEnBxK,KAAmB9Z,KAAI,SAAAskB,GAAG,OAAIld,KAAMqG,MAAN,UAAe6W,EAAf,cAFX,aAGlB,CAAC,UAAW,WAAY,UAAW,UAAoBtkB,KAAI,SAAAwK,GAAC,OAAIpD,KAAMqG,MAAMjD,QAE5E+Z,GAAgBF,GAAmBrkB,KAAI,SAAAwK,GAAC,OAAIA,EAAEga,KAAM/qB,OAEpDgrB,GAAiB,CACrBrd,KAAMqG,MAAMiX,UADS,oBAElB5K,KAAmB9Z,KAAI,SAAAwK,GAAC,OAAIpD,KAAMqG,MAAN,UAAejD,EAAf,mBAFV,CAGrBpD,KAAMqG,MAAMkX,YAAavd,KAAMqG,MAAMmX,iBACrCxd,KAAMqG,MAAMoX,aAAczd,KAAMqG,MAAMqX,kBACtC1d,KAAMqG,MAAMsX,cAAe3d,KAAMqG,MAAMuX,mBACvC5d,KAAMqG,MAAMwX,WAAY7d,KAAMqG,MAAMyX,gBACpC9d,KAAMqG,MAAM0X,WAAY/d,KAAMqG,MAAM2X,iBAPf,aAQlBrhB,OAAOC,KAAKqhB,MAAyBrlB,KAAI,SAAAwK,GAAC,OAAIpD,KAAMqG,MAAN,UAAejD,EAAf,cAR5B,aASlBzG,OAAOC,KAAKshB,MAAqBtlB,KAAI,SAAAwK,GAAC,OAAIpD,KAAMqG,MAAN,UAAejD,EAAf,cATxB,aAUjB,CAAC,WAAY,UAAW,gBAA0BxK,KAAI,SAAAwK,GAAC,OAAIpD,KAAMqG,MAAMjD,QAEvE+a,GAAed,GAAkBzkB,KAAI,SAAAwK,GAAC,OAAIA,EAAEga,KAAM/qB,OAElDonB,GAAiB,CACrB5K,GAAI,GAAI0C,GAAI,EAAG/H,GAAI,EAAGD,GAAI,GAG5B,SAAS6U,GAAT,GAA2I,IAA7GxE,EAA4G,EAA5GA,MAAOH,EAAqG,EAArGA,eAAgBlU,EAAqF,EAArFA,MAAqF,EAC9GjV,qBAAWC,KAA7BC,EADgI,EAChIA,KAAMC,EAD0H,EAC1HA,QACd,OAAO,eAACkd,EAAA,EAAD,CAAMxE,WAAS,EAAC2Q,cAAe,CAAEjL,GAAI,EAAGtF,GAAI,GAAKwQ,WAAY,EAA7D,UACJH,EAAMhhB,KAAI,SAACylB,EAAI3kB,GAAL,aAAW,cAACiU,EAAA,EAAD,yBAAMvE,MAAI,GAAaqQ,GAAvB,aACnB,cAAC,KAAD,CAAkB7oB,KAAMJ,EAAKK,IAAIwtB,GAAKntB,SAAQ,OAAET,QAAF,IAAEA,GAAF,UAAEA,EAASI,IAAIwtB,UAAf,aAAE,EAAkBltB,UAD/BuI,MAGrC6L,KAIL,SAASsX,KAAkB,IAAD,EACsCvsB,qBAAWC,KAAjEC,EADgB,EAChBA,KAAM4L,EADU,EACVA,UAA6BvD,EADnB,EACCuD,UAAa/J,IAChCgK,EAAoBke,YAAoB1hB,GACxCylB,EAAc9tB,EAAKK,IAAImP,KAAMue,SAEnC,OAAO,qCACL,cAAChF,GAAD,IACA,cAACiF,GAAD,CACE1rB,MAAM,aACNqgB,QAAS,cAACiL,GAAD,CAAoB3E,eAAgBA,GAAgBG,MAAOmD,GAClExX,MAAO+Y,GAAe,eAAC3Q,EAAA,EAAD,yBAAMvE,MAAI,GAAKqQ,IAAf,IAA+B5nB,QAAQ,OAAOgI,cAAc,MAAM/H,eAAe,gBAAjF,UACpB,iCAAM,yCAAN,IAAsB,eAAC,IAAD,CAAWC,MAAOusB,EAAY5sB,QAA9B,UAAwC4sB,EAAYjsB,KAAOc,KAASmrB,EAAYjsB,KAAhF,IAAuFisB,EAAYjsB,KAAOC,IAAOzB,IAAIytB,EAAYjsB,WACvJ,+BAAQM,aAAY2rB,EAAYntB,MAAOmtB,EAAYnsB,cAGvDssB,YAAa,cAAC9Q,EAAA,EAAD,CAAMxE,WAAS,EAAC2Q,cAAe,EAAGC,WAAY,EAA9C,SACViD,GAAapkB,KAAI,SAAA8C,GAAY,IAAD,EACrB8S,EAAWlc,IAAOzB,IAAI6K,GAC5B,OAAO,cAACiS,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAItF,GAAI,EAAvB,SACL,cAACjC,GAAA,EAAD,CACEpP,KAAM,iCAAO/E,KAASuI,GAAhB,IAA2B8S,KACjCjH,YAAajV,IAAOqhB,OAAOjY,GAC3BvK,MAAK,UAAEiL,EAAUsiB,WAAWhjB,UAAvB,QAAmC,EACxCgM,QAAkC,MAAzBpV,IAAOH,KAAKuJ,GACrB+L,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,YAAasF,UAASvK,cANtCuK,UAY5C,cAAC8iB,GAAD,CACE1rB,MAAM,cACNqgB,QAAS,cAACiL,GAAD,CAAoB3E,eAAgBA,GAAgBG,MAAOqD,KACpEwB,YAAa,cAAC9Q,EAAA,EAAD,CAAMxE,WAAS,EAAC2Q,cAAe,EAAGC,WAAY,EAA9C,SACVoD,GAAcvkB,KAAI,SAAA8C,GAAY,IAAD,EACtB8S,EAAWlc,IAAOzB,IAAI6K,GAC5B,OAAO,cAACiS,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAItF,GAAI,EAAvB,SACL,cAACjC,GAAA,EAAD,CACEpP,KAAM,iCAAO/E,KAASuI,GAAhB,IAA2B8S,KACjCjH,YAAajV,IAAOqhB,OAAOjY,GAC3BvK,MAAK,UAAEiL,EAAUsiB,WAAWhjB,UAAvB,QAAmC,EACxCgM,QAAkC,MAAzBpV,IAAOH,KAAKuJ,GACrB8L,kBAAcnM,EACdoM,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,YAAasF,UAASvK,cAPtCuK,UAa5C,cAAC8iB,GAAD,CACE1rB,MAAM,aACNqgB,QAAS,cAACiL,GAAD,CAAoB3E,eAAgB,CAC3C5K,GAAI,GAAI0C,GAAI,EAAG/H,GAAI,GAClBoQ,MAAOyD,KACVoB,YAAa,cAAC9Q,EAAA,EAAD,CAAMxE,WAAS,EAAC2Q,cAAe,EAAGC,WAAY,EAA9C,SACVoE,GAAavlB,KAAI,SAAA8C,GAAY,IAAD,EACrB8S,EAAWlc,IAAOzB,IAAI6K,GAC5B,OAAO,cAACiS,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAItF,GAAI,EAAvB,SACL,cAACjC,GAAA,EAAD,CACEpP,KAAM,iCAAO/E,KAASuI,GAAhB,IAA2B8S,KACjCjH,YAAajV,IAAOqhB,OAAOjY,GAC3BvK,MAAK,UAAEiL,EAAUsiB,WAAWhjB,UAAvB,QAAmC,EACxCgM,QAAkC,MAAzBpV,IAAOH,KAAKuJ,GACrB+L,cAAe,SAAAtW,GAAK,OAAIkL,EAAkB,CAAEjG,KAAM,YAAasF,UAASvK,cANtCuK,aAchD,SAAS8iB,GAAT,GAA2D,IAAhC1rB,EAA+B,EAA/BA,MAAOqgB,EAAwB,EAAxBA,QAASsL,EAAe,EAAfA,YAAe,EAChCrpB,oBAAS,GADuB,mBACjDgjB,EADiD,KAC3CuG,EAD2C,KAExD,OAAO,eAAC5R,EAAA,EAAD,WACL,cAAC3O,EAAA,EAAD,CAAaxM,GAAI,CAAEsX,GAAI,GAAvB,SACE,eAAC7K,EAAA,EAAD,CAAKxM,QAAQ,OAAOC,eAAe,gBAAnC,UACE,cAACua,EAAA,EAAD,CAAY3a,QAAQ,YAApB,SAAiCoB,IACjC,cAACyB,EAAA,EAAD,CAAQ4I,KAAK,QAAQpL,MAAOqmB,EAAO,QAAU,OAAQ7f,QAAS,kBAAMomB,GAASvG,IAA7E,SACE,iCAAM,cAAC,KAAD,CAAiBnlB,KAAMmlB,EAAOwG,KAAS5P,OAA7C,IAAyDoJ,EAxHtD,OADA,uBA6HT,cAAC3a,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,UACGga,EAAOqG,EAActL,O,4CC9Mb,SAAS0L,KAAuB,IAAD,EACAvuB,qBAAWC,KAA/CC,EADoC,EACpCA,KAAM4L,EAD8B,EAC9BA,UAAWvE,EADmB,EACnBA,eACnBwE,EAAoBke,YAAoBne,EAAU/J,KAGlDiO,EAAU9P,EAAKK,IAAImP,KAAMM,SAASnP,MAClCif,EAAY5f,EAAKK,IAAImP,KAAMD,KAAK5O,MAChC2qB,EAAgBtrB,EAAKK,IAAImP,KAAM8b,eAAe3qB,MACpD,OAAO,qCACL,cAAC2tB,GAAD,IACA,eAACnR,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAGtH,GAAI,CAAE0M,GAAI,GAAtC,UAPqB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBAS/E1F,KAAI,mCAAEwjB,EAAF,KAAQ2C,EAAR,YAClB,cAACpR,EAAA,EAAD,CAAMvE,MAAI,EAAYyF,GAAI,GAAIrF,GAAI,EAAGD,GAAI,EAAzC,SACE,cAACyV,GAAD,CACEze,UAAW6b,EACX6C,SAAUF,KAHE3C,QAMfvkB,EAAe4I,eAAe,SAAUH,IAAY,cAACqN,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAIrF,GAAI,EAAGD,GAAI,EAA9B,SACrD,cAACyV,GAAD,CACEze,UAAU,SACV0e,SAAS,2BAGVpnB,EAAe4I,eAAe,UAAWH,IAAY,cAACqN,EAAA,EAAD,CAAMvE,MAAI,EAACyF,GAAI,GAAIrF,GAAI,EAAGD,GAAI,EAA9B,SACtD,cAACyV,GAAD,CACEze,UAAU,UACV0e,SAAS,iBAIf,cAACtR,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,SA5BgF,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IA8B7LN,KAAI,YAAyB,IAAD,mBAAtBwjB,EAAsB,KAAhB2C,EAAgB,KAAThf,EAAS,KACpCmf,EAAU9O,GAAarQ,EAC3B,OAAKlI,EAAe4I,eAAe2b,EAAM9b,GAClC,cAACqN,EAAA,EAAD,CAAMvE,MAAI,EAAY+V,MAAO,CAAEzQ,QAASwQ,EAAU,EAAI,IAAOrQ,GAAI,GAAIrF,GAAI,EAAzE,SACL,cAACwV,GAAD,CACEze,UAAW6b,EACX6C,SAAUF,KAHS3C,GADmC,UAS9D,eAAC/P,EAAA,EAAD,CAAY3a,QAAQ,KAAKE,GAAI,CAAEsW,UAAW,UAA1C,+BAAyE4T,KACzE,cAACnO,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,SAEG,aAAIuJ,MAAM,GAAG7F,QAAQhE,KAAI,SAAAc,GACxB,IAAI0iB,EAAI,uBAAmB1iB,EAAI,GAC/B,OAAO,cAACiU,EAAA,EAAD,CAAMvE,MAAI,EAASyF,GAAI,GAAIrF,GAAI,EACpC5X,GAAI,CAAE8c,QAASoN,EAAgBpiB,EAAI,EAAI,IADlC,SAEL,cAACslB,GAAD,CACEze,UAAW6b,EACX6C,SAAQ,2BAAsBvlB,EAAI,GAClC0lB,aAAc,kBAAM/iB,EAAkB,CAAEyf,cAAgBpiB,EAAI,IAAOoiB,EAAgBpiB,EAAIA,EAAI,QALxEA,WAY/B,IAAM2lB,GAAqB,CACzBC,aAsBF,YAA4D,IAAhC1uB,EAA+B,EAA/BA,KAC1B,OAAO,cAACoN,EAAA,EAAD,UAAU,cAACI,EAAA,EAAD,CAAaxM,GAAI,CAAEkhB,EAAG,GAAtB,SACf,eAACzG,EAAA,EAAD,CAAYta,MAAM,oBAAlB,UAAuCO,IAAOzB,IAAID,EAAKyB,KAAvD,IAA+Dc,KAASosB,QAAxE,IAAkFpsB,KAASkhB,KAA3F,IAAiG,iCAAS1hB,YAAY/B,EAAKO,MAAOP,EAAKuB,gBAvBzIqtB,eA0BF,YAA8D,IAAhC5uB,EAA+B,EAA/BA,KAC5B,OAAO,cAACoN,EAAA,EAAD,UAAU,cAACI,EAAA,EAAD,CAAaxM,GAAI,CAAEkhB,EAAG,GAAtB,SACf,eAACzG,EAAA,EAAD,CAAYta,MAAM,sBAAlB,UAAyCO,IAAOzB,IAAID,EAAKyB,KAAzD,IAAiEc,KAASosB,QAA1E,IAAoFpsB,KAAS2hB,MAA7F,IAAoG,iCAASniB,YAAY/B,EAAKO,MAAOP,EAAKuB,gBA3B5IstB,WA8BF,YAA0D,IAAhC7uB,EAA+B,EAA/BA,KACxB,OAAO,cAACoN,EAAA,EAAD,UAAU,cAACI,EAAA,EAAD,CAAaxM,GAAI,CAAEkhB,EAAG,GAAtB,SACf,eAACzG,EAAA,EAAD,CAAYta,MAAM,kBAAlB,UAAsCO,IAAOzB,IAAID,EAAKyB,KAAtD,IAA8Dc,KAASosB,QAAvE,IAAiFpsB,KAASihB,KAA1F,IAAgG,iCAASzhB,YAAY/B,EAAKO,MAAOP,EAAKuB,gBA/BxIutB,UAyCF,WAAsB,IAAD,EACGtqB,mBAASuH,OAAOC,KAAK+iB,IAAmB,IAD3C,mBACZzC,EADY,KACP0C,EADO,KAGbhvB,EADWN,qBAAWC,KAApBC,KACUoQ,aAAaE,SAAlB,UAA+Boc,EAA/B,UACb,OAAO,eAAClf,EAAA,EAAD,CAAUpM,GAAI,CAAEC,QAAS,QAAzB,UACL,cAAC0L,EAAA,EAAD,CAAgBJ,KAAK,QAAQrK,MAAO6sB,GAAkBzC,GAAMnrB,MAAM,UAAlE,SACG4K,OAAOG,QAAQ6iB,IAAmB/mB,KAAI,mCAAEvG,EAAF,KAAOsgB,EAAP,YAAoB,cAACnV,EAAA,EAAD,CAAoBhF,SAAU0kB,IAAQ7qB,EAAK6C,SAAUgoB,IAAQ7qB,EAAKkG,QAAS,kBAAMqnB,EAAOvtB,IAAxF,SAA+FsgB,GAAhFtgB,QAE5E,cAACgM,EAAA,EAAD,CAAKzM,GAAI,CAAEG,MAAM,GAAD,OAAKmrB,EAAL,SAAiBpK,EAAG,GAApC,SAAyC,iCAASngB,YAAY/B,EAAKO,MAAOP,EAAKuB,cAhDjF0tB,UAmDF,YAAyD,IAAhCjvB,EAA+B,EAA/BA,KACjBkvB,EAAc,cAACxpB,GAAA,EAAD,CAAkBzD,UAAU,MAAMC,MAAO,eAACuZ,EAAA,EAAD,8CAA4C,cAAC,IAAD,CAAWta,MAAM,MAAjB,wBAArF,SAClB,cAACsM,EAAA,EAAD,CAAKhO,UAAU,OAAOuB,GAAI,CAAEmB,OAAQ,QAApC,SAA8C,cAAC,KAAD,CAAiBE,KAAMC,WAGvE,OAAO,cAAC8K,EAAA,EAAD,UAAU,cAACI,EAAA,EAAD,CAAaxM,GAAI,CAAEkhB,EAAG,GAAtB,SACf,eAAC,IAAD,CAAW/gB,MAAM,YAAjB,UAA8BO,IAAOzB,IAAID,EAAKyB,KAA9C,IAAsDc,KAAS2hB,MAA/D,IAAuE3hB,KAASkhB,KAAhF,KAAuF,cAAC,IAAD,CAAWtiB,MAAM,WAAjB,SAA4B,iDAAoB+tB,EAApB,SAAnH,IAAyK,iCAASntB,YAAY/B,EAAKO,MAAOP,EAAKuB,iBAtDnN,SAAS2sB,KAAmB,IAEpBhe,EADWxQ,qBAAWC,KAApBC,KACcoQ,aAAaE,SACnC,OAAO,cAACiM,EAAA,EAAD,CAAWnb,GAAI,CAAE0M,GAAI,GAArB,SACL,cAACF,EAAA,EAAD,UACE,cAACuP,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,SACGyD,OAAOG,QAAQgE,GAAUlI,KAAI,YAAkB,IAAD,mBAAfvG,EAAe,KAAVzB,EAAU,KACvCmvB,EAAMV,GAAmBhtB,GAC/B,OAAK0tB,EACE,cAACpS,EAAA,EAAD,CAAMvE,MAAI,EAAV,SAAqB,cAAC2W,EAAD,CAAKnvB,KAAMA,KAAhByB,GADN,cAuB3B,IAAMstB,GAAoB,CACxB,KAAQ,iCAAM,cAAC,IAAD,CAAW5tB,MAAM,OAAjB,SAAyBO,IAAOzB,IAAI,oBAA1C,IAA0EsC,KAASihB,KAAnF,MAA4FjhB,KAAS6sB,SAC7G,QAAW,iCAAM,cAAC,IAAD,CAAWjuB,MAAM,UAAjB,SAA4BO,IAAOzB,IAAI,uBAA7C,IAAgFsC,KAASosB,QAAzF,IAAmGpsB,KAAS6sB,SACvH,KAAQ,iCAAM,cAAC,IAAD,CAAWjuB,MAAM,OAAjB,SAAyBO,IAAOzB,IAAI,oBAA1C,IAA0EsC,KAASkhB,KAAnF,MAA4FlhB,KAAS6sB,SAC7G,MAAS,iCAAM,cAAC,IAAD,CAAWjuB,MAAM,QAAjB,SAA0BO,IAAOzB,IAAI,qBAA3C,IAA4EsC,KAAS2hB,MAArF,MAA+F3hB,KAAS6sB,UAwBrG,IAA8B1tB,IAAOzB,IAAI,kBAAoBsC,KAASosB,QAAUpsB,KAAS2hB,MAAQ3hB,KAASihB,KAAOjhB,KAASkhB,KAAOlhB,KAAS8sB,IACvI3tB,IAAOzB,IAAI,uBAAyBsC,KAASihB,KAAOjhB,KAAS8sB,IAC1D3tB,IAAOzB,IAAI,0BAA4BsC,KAASosB,QAAUpsB,KAAS8sB,IACtE3tB,IAAOzB,IAAI,uBAAyBsC,KAASkhB,KAAOlhB,KAAS8sB,IAC5D3tB,IAAOzB,IAAI,wBAA0BsC,KAAS2hB,MAAQ3hB,KAAS8sB,IAajF,IAAMC,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAMxC,SAASlB,GAAT,GAAyF,IAA7Dze,EAA4D,EAA5DA,UAAW0e,EAAiD,EAAjDA,SAAUG,EAAuC,EAAvCA,aAAuC,EACX9uB,qBAAWC,KAA9EC,EAD8E,EAC9EA,KAAmBgQ,EAD2D,EACxEpE,UAAaoE,OAAU3I,EADiD,EACjDA,eAAgBwE,EADiC,EACjCA,kBAE/C8jB,EAAoBtqB,uBACxB,SAAAlB,GAAQ,OAAI,cAACmb,GAAA,EAAD,CAAgBvX,QAAS6mB,EAAzB,SAAwCzqB,MACpD,CAACyqB,IAGCthB,EAA6B,KAEjC,GAAIyC,KAAaC,EAAQ,CACvB,IAAM4f,EAAa5vB,EAAKK,IAAImP,KAAMkc,MAAM3b,IAAuBpP,MACzD0S,EAAQrT,EAAKK,IAAImP,KAAMqG,MAAM9F,IAAYpP,MACzC4O,EAAMvP,EAAKK,IAAImP,KAAMD,KAAK5O,MAKhC2M,EAAS,qCACP,cAACM,EAAA,EAAD,CAAaxM,GAAI,CAAEsX,GAAI,GAAvB,SACE,cAAC3L,EAAA,EAAD,CAAgBL,WAAS,EAACpK,MAAK,qBAAgB+Q,GAAS9R,MAAOquB,EAAa,OAAS,UAArF,SACG,aAAI3d,MAAMyd,GAAangB,IAAMnD,QAAQhE,KAAI,SAAAc,GAAC,OACzC,eAAC8D,EAAA,EAAD,CAAkBhF,SAAUgI,EAAOD,KAAgB7G,EAAI,EAAIxE,SAAUsL,EAAOD,KAAgB7G,EAAI,EAAInB,QAAS,kBARvF8nB,EAQuH3mB,EAAI,EAPvJ8G,EAOwID,GAPzH8f,OACfhkB,EAAkB,CAAEmE,WAFC,IAAO6f,GAQtB,wBAAiK3mB,EAAI0mB,EAAa,IAAnK1mB,UAGrB,cAAC+D,EAAA,EAAD,OAGJ,IAAM6iB,EAAczoB,EAAe4I,eAAeF,EAAW/P,EAAKK,IAAImP,KAAMM,SAASnP,OAErF,OAAO,eAAC4b,EAAA,EAAD,CAAWnb,GAAI,CAAE6C,OAAQ,QAAzB,UACJqJ,EACD,eAACM,EAAA,EAAD,WACE,cAACoS,GAAA,EAAD,CAAoBC,YAAa2O,EAAc1O,QAASyP,EAAxD,SACE,eAACxS,EAAA,EAAD,CAAMxE,WAAS,EAACvX,GAAI,CAAEgc,SAAU,UAAhC,UACE,cAACD,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACE,cAAC/K,EAAA,EAAD,CAAKhO,UAAU,MAAMgI,IAAG,OAAEioB,QAAF,IAAEA,OAAF,EAAEA,EAAargB,IAAKrO,GAAI,CAAED,MAAO,GAAI8C,OAAQ,YAEvE,eAACkZ,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,EAAGnW,GAAI,CAAE0b,GAAI,GAAlC,UACE,cAACjB,EAAA,EAAD,CAAY3a,QAAQ,KAApB,gBAA0B4uB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAapoB,OACvC,cAACmU,EAAA,EAAD,CAAY3a,QAAQ,YAApB,SAAiCutB,aAK3B,OAAXqB,QAAW,IAAXA,OAAA,EAAAA,EAAa/mB,UAAW,cAACD,GAAA,EAAD,CAAiBC,SAAU+mB,EAAY/mB,WAAe,WCxLrF,SAASgnB,GAAT,GAA0E,IAAtD5rB,EAAqD,EAArDA,SAAUyN,EAA2C,EAA3CA,QAASjR,EAAkC,EAAlCA,MAAUmJ,EAAwB,8CACvE,OAAInJ,IAAUiR,EAAgB,KACvB,cAAC,WAAD,CAAUwK,SAAU,cAACC,EAAA,EAAD,CAAUnb,QAAQ,cAAcC,MAAM,OAAO8C,OAAQ,MAAzE,SACL,6CACE+rB,KAAK,WACLC,OAAQtvB,IAAUiR,EAClB8I,GAAE,0BAAqB/Z,GACvBuvB,kBAAA,qBAA+BvvB,IAC3BmJ,GALN,aAOG3F,OAcQ,SAASgsB,GAAT,GAAwJ,IAAD,IAAvH9nB,EAAuH,EAAvHA,aAAcuc,EAAyG,EAAzGA,OAAQwL,EAAiG,EAAjGA,YAAiG,IAApFvW,+BAAoF,MAA1D,EAA0D,EAAvDpB,EAAuD,EAAvDA,QAAS4X,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,OACzH3G,EAAW4G,YAAYloB,EAAcwR,GADyH,mBAE1G8P,QAF0G,IAE1GA,OAF0G,EAE1GA,EAAWthB,UAF+F,QAE9E,GAA9EuD,EAF4J,EAE5JA,UAAWvE,EAFiJ,EAEjJA,eAAwBmpB,EAFyH,EAEjIjwB,OAFiI,EAK9IqE,mBAA2ByrB,IAAqBD,EAAc,eAAiB,cAL+D,mBAK7JK,EAL6J,KAKxJC,EALwJ,KAM9JC,EAAQtrB,uBAAY,SAACI,EAAGzE,GAAJ,OAAU0vB,EAAO1vB,KAAI,CAAC0vB,IAE1C7kB,EAAoBke,YAAmB,iBAACne,QAAD,IAACA,OAAD,EAACA,EAAW/J,WAAZ,QAAmB,IAChE,IAAK8nB,IAAa/d,IAAcvE,IAAmBmpB,EAAY,OAAO,6BAT8F,IAU5JI,EAAgBhlB,EAAhBglB,YAEFC,EAAmC,CACvCjlB,YACAvE,iBACAwS,0BACA7Z,KAAOowB,EAAcA,EAAY/nB,GAAe9H,OAASiwB,EACzD7G,SAAWyG,GAA4BzG,EACvC1pB,QAAU2wB,GAAeR,EAAeI,OAAa3lB,EACrDgB,qBAEF,OAAO,cAAC2B,EAAA,EAAD,UACL,eAACzN,EAAA,EAAYsqB,SAAb,CAAsB1pB,MAAOkwB,EAA7B,UACE,eAACjjB,EAAA,EAAD,CAAaxM,GAAI,CACf,yBAA0B,CAAE0M,GAAI,IADlC,UAGE,eAACqP,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAACyU,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACE,cAACkY,GAAD,MAEF,cAAC3T,EAAA,EAAD,CAAMvE,MAAI,EAAV,WAEKwX,GAAe,eAACW,EAAA,EAAD,CAAwB3M,WAAS,EAACzjB,MAAOiwB,EAAansB,SAAU,SAACgB,EAAGzE,GAAJ,OAAU6K,EAAkB,CAAE+kB,YAAa5vB,KAAM2L,KAAK,QAAtH,UAChB,cAACqkB,EAAA,EAAD,CAAcrwB,OAAO,EAAO+D,UAAWksB,EAAvC,SACE,8DAEF,cAACI,EAAA,EAAD,CAAcrwB,OAAO,EAAM+D,SAAUksB,EAArC,SACE,8EAIN,cAACzT,EAAA,EAAD,CAAMvE,MAAI,EAACrB,SAAU,MAClBsC,GAA2B,cAACsD,EAAA,EAAD,CAAMvE,MAAI,EAAV,SAAW,cAAC+P,EAAA,EAAD,CAAMvnB,GAAI,CAAEkhB,EAAG,EAAGW,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQulB,QAAQ/kB,OAAlD,SAA0D,cAACgY,EAAA,EAAD,UAAY,kEAAqChC,aACjJpB,GAAW,cAAC0E,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACZ,cAACqY,EAAA,EAAD,CAAalpB,QAAS0Q,SAG1B,cAAC8D,EAAA,EAAD,UACE,eAAC2U,EAAA,EAAD,CACEzsB,SAAUksB,EACVhwB,MAAO8vB,EACPvvB,QAAQ,YAHV,UAKE,cAACiwB,EAAA,EAAD,CAAKxwB,MAAM,YAAYkc,MAAM,gBAC1BuT,GAAe,cAACe,EAAA,EAAD,CAAKxwB,MAAM,eAAekc,MAAM,kBAClD,cAACsU,EAAA,EAAD,CAAKxwB,MAAM,YAAYkc,MAAOuT,EAAc,oBAAsB,eAChEE,GAAU,cAACa,EAAA,EAAD,CAAKxwB,MAAM,QAAQkc,MAAM,eACrC,cAACsU,EAAA,EAAD,CAAKxwB,MAAM,SAASkc,MAAM,iBAG9B,cAAC,IAAD,IACA,cAACgK,EAAD,IACA,cAAC,IAAD,IAGA,cAACkJ,GAAD,CAAUpvB,MAAM,YAAYiR,QAAS6e,EAArC,SAA0C,cAACpF,GAAD,MAE1C,cAACtrB,EAAA,EAAYsqB,SAAb,CAAsB1pB,MAAK,2BAAOkwB,GAAP,IAAyB7wB,KAAMwwB,EAAYvwB,aAAS4K,IAA/E,SACE,cAACklB,GAAD,CAAUpvB,MAAM,YAAYiR,QAAS6e,EAArC,SAA2C,cAAC,GAAD,QAG7C,cAACV,GAAD,CAAUpvB,MAAM,eAAeiR,QAAS6e,EAAxC,SAA8C,cAAC,GAAD,CAAuBhJ,UAAQ,MAE7E,cAACsI,GAAD,CAAUpvB,MAAM,QAAQiR,QAAS6e,EAAjC,SAAsC,cAAC3H,GAAD,MAEtC,cAACiH,GAAD,CAAUpvB,MAAM,SAASiR,QAAS6e,EAAlC,SACE,cAACpC,GAAD,WAGDzJ,GAAU,cAAC3X,EAAA,EAAD,IACZ2X,GAAU,cAAChX,EAAA,EAAD,UACRgX,SAOT,SAASkM,KAAsB,IAAD,IAC6BhxB,qBAAWC,KAA5D6L,EADoB,EACpBA,UAAWvE,EADS,EACTA,eAAgBwE,EADP,EACOA,kBADP,EAEMjH,oBAAS,GAFf,mBAErB0gB,EAFqB,KAEVC,EAFU,KAGtB6L,EAAenH,cACflF,EAAW1f,uBAAY,SAACgO,GAC5BA,EAAQiD,YAAMjD,EAAO,EAAG,IACxB,IAAMuM,EAAYU,IAAkB0E,WAAU,SAAAC,GAAO,OAAI5R,GAAS4R,KAClEpZ,EAAkB,CAAEwH,QAAOuM,gBAC1B,CAAC/T,IACEqZ,EAAe7f,uBAAY,WAC/B,GAAKuG,EAAL,CADqC,MAEAA,EAA7ByH,aAF6B,MAErB,EAFqB,IAEAzH,EAAlBgU,iBAFkB,MAEN,EAFM,EAG/BuF,EAAiB7E,IAAkB0E,WAAU,SAAAC,GAAO,OAAc,KAAV5R,GAAgBA,IAAU4R,KACtDpZ,EAA9B+T,IAAcuF,EAAkC,CAAEvF,UAAWA,EAAY,GACtD,CAAEA,UAAWuF,OACnC,CAACtZ,EAAmBD,IAfK,EAgB+BA,EAAnDylB,kBAhBoB,MAgBP,QAhBO,IAgB+BzlB,EAA7ByH,aAhBF,MAgBU,EAhBV,IAgB+BzH,EAAlBgU,iBAhBb,MAgByB,EAhBzB,EAiB5B,OAAO,qCACL,cAAC0R,EAAA,EAAD,CAAyBzZ,KAAMyN,EAAWxN,OAAQ,kBAAMyN,GAAa,IAAQxN,SAAUqZ,IACvF,eAACjU,EAAA,EAAD,CAAMxE,WAAS,EAACjQ,QAAS,EAAzB,UACE,cAACyU,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACE,cAAC7U,EAAA,EAAD,CAAQgE,QAAS,kBAAMwd,GAAa,IAAO5d,UAAW,cAACW,EAAA,EAAD,CAAWT,IAAG,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAAgBS,eAAtF,0BAA0GT,QAA1G,IAA0GA,OAA1G,EAA0GA,EAAgBK,YAA1H,QAAkI,yBAEpI,cAACyV,EAAA,EAAD,CAAMvE,MAAI,EAAV,SACE,eAAC/B,EAAA,EAAD,CAAazV,GAAI,CAAE6hB,QAAS,SAAApc,GAAC,OAAIA,EAAExD,QAAQC,YAAYC,OAAvD,WACiB,OAAd8D,QAAc,IAAdA,OAAA,EAAAA,EAAgB+H,QAAS,mBAAa/H,QAAb,IAAaA,OAAb,EAAaA,EAAgB+H,QAAS,cAACrC,EAAA,EAAD,CAAgBzK,MAAO,iCAAQ,cAAC,IAAD,CAAWf,MAAO8vB,EAAlB,SAA+B5lB,YAAI,WAAD,OAAY4lB,QAA7E,SAC7DllB,OAAOC,KAAK/E,EAAe+H,MAAMmiB,SAASnpB,KAAI,SAAAib,GAAM,OACnD,cAACrW,EAAA,EAAD,CAAuBhF,SAAUqpB,IAAehO,EAAQ3e,SAAU2sB,IAAehO,EAAQtb,QAAS,kBAAM8D,EAAkB,CAAEwlB,WAAYhO,KAAxI,SACE,iCAAQ,cAAC,IAAD,CAAW9hB,MAAO8hB,EAAlB,SAA2B5X,YAAI,WAAD,OAAY4X,SADrCA,QAGnB,cAAC7e,EAAA,EAAD,UACE,cAACA,EAAA,EAAD,CAAmBC,SAAUsgB,EAAUpkB,MAAO0S,EAC5CoS,eAAe,QACfhO,WAAY,CAAEsD,IAAK,EAAG5G,IAAK,GAAI/S,GAAI,CAAEsW,UAAW,WAChDtW,GAAI,CAAED,MAAO,OAAQ8C,OAAQ,OAAQ6Y,GAAI,GACzCpY,UAAW2C,MAEf,cAACtD,EAAA,EAAD,CAAQ3C,GAAI,CAAE0b,GAAI,GAAKpY,UAAWghB,YAAerS,KAAWhM,EAAgBU,QAASmd,EAArF,SAAmG,wCAAW5E,IAAkBV,QAChI,cAAC7S,EAAA,EAAD,CAAgBzK,MAAO,eAAgBoC,UAAW2C,EAAlD,SACGse,IAAgBvd,KAAI,YAAe,IAAD,mBAAZwd,EAAY,KAARC,EAAQ,KAE3BC,EADYF,IAAOtF,IAAkBuF,GACnB,cAAUD,GAAV,cAAwBA,EAAxB,YAA8BtF,IAAkBuF,IAClE7d,EAAW4d,IAAOvS,GAASwS,IAAOjG,EACxC,OAAO,cAAC5S,EAAA,EAAD,CAA8BhF,SAAUA,EAAUtD,SAAUsD,EAAUD,QAAS,kBAAM8D,EAAkB,CAAEwH,MAAOuS,EAAIhG,UAAWiG,KAA/H,SAAuIC,GAAvI,UAAkBF,EAAlB,YAAwBC","file":"static/js/13.89bb8775.chunk.js","sourcesContent":["import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, List, styled, Typography } from \"@mui/material\";\nimport React, { useContext, useMemo } from 'react';\nimport { DataContext, dataContextObj } from \"../DataContext\";\nimport { NodeDisplay, valueString } from \"../Formula/api\";\nimport KeyMap from \"../KeyMap\";\nimport { IBasicFieldDisplay, IFieldDisplay } from \"../Types/IFieldDisplay_WR\";\nimport { evalIfFunc } from \"../Util/Util\";\nimport BootstrapTooltip from \"./BootstrapTooltip\";\nimport ColorText from \"./ColoredText\";\nimport StatIcon from \"./StatIcon\";\nimport { data as dataNode } from '../Formula/utils'\nimport { Data } from \"../Formula/type\";\n\nexport default function FieldDisplay({ field, fieldContext, component }: { field: IFieldDisplay, fieldContext?: dataContextObj, component?: React.ElementType }) {\n  const { data, oldData } = useContext(DataContext)\n  const canShow = useMemo(() => field?.canShow?.(data) ?? true, [field, data])\n  if (!canShow) return null\n  if (\"node\" in field) {\n    // TODO: remove as Data\n    const node = fieldContext ? data.get(dataNode(field.node, { target: fieldContext.data.data[0] } as Data)) : data.get(field.node)\n    if (node.isEmpty) return null\n    if (oldData) {\n      const oldNode = fieldContext ? oldData.get(dataNode(field.node, { target: fieldContext.oldData!.data[0] } as Data)) : oldData.get(field.node)\n      const oldValue = oldNode.isEmpty ? 0 : oldNode.value\n      return <NodeFieldDisplay node={node} oldValue={oldValue} suffix={field.textSuffix} component={component} />\n    }\n    else return <NodeFieldDisplay node={node} suffix={field.textSuffix} component={component} />\n  }\n  return <BasicFieldDisplay field={field} component={component} />\n}\n\nfunction BasicFieldDisplay({ field, component }: { field: IBasicFieldDisplay, component?: React.ElementType }) {\n  const { data } = useContext(DataContext)\n  const v = evalIfFunc(field.value, data)\n  const variant = evalIfFunc(field.variant, data)\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\n    <ColorText color={variant}><b>{field.text}</b></ColorText>\n    <Typography >{typeof v === \"number\" ? v.toFixed?.(field.fixed) : v}{field.unit}</Typography>\n  </Box>\n}\n\nexport function NodeFieldDisplay({ node, oldValue, suffix, component }: { node: NodeDisplay, oldValue?: number, suffix?: Displayable, component?: React.ElementType }) {\n  if (node.isEmpty) return null\n\n  suffix = suffix && <span> {suffix}</span>\n  const fieldText = node.key ? KeyMap.get(node.key) : \"\"\n  const fieldFormulaText = node.formula\n  let fieldVal = \"\" as Displayable\n  if (oldValue) {\n    const diff = node.value - oldValue\n    fieldVal = <span>{valueString(oldValue, node.unit)}{diff ? <ColorText color={diff > 0 ? \"success\" : \"error\"}> {diff > 0 ? \"+\" : \"\"}{valueString(diff, node.unit)}</ColorText> : \"\"}</span>\n  } else fieldVal = valueString(node.value, node.unit)\n  const formulaTextOverlay = !!node.formula && <BootstrapTooltip placement=\"top\" title={<Typography>{fieldFormulaText}</Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\", ml: 1 }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\n    <ColorText color={node.variant}>{node.key && (<span>{StatIcon[node.key]} </span>)}<b>{fieldText}</b>{suffix}{formulaTextOverlay}</ColorText>\n    <Typography >{fieldVal}</Typography>\n  </Box>\n}\n\nexport const FieldDisplayList = styled(List)(({ theme }) => ({\n  borderRadius: theme.shape.borderRadius,\n  overflow: \"hidden\",\n  margin: 0,\n  '> .MuiListItem-root:nth-of-type(even)': {\n    backgroundColor: theme.palette.contentDark.main\n  },\n  '> .MuiListItem-root:nth-of-type(odd)': {\n    backgroundColor: theme.palette.contentDarker.main\n  },\n}));\n","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\ntype props = Omit<InputProps, \"onChange\"> & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  transition: \"all 0.5s ease\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-focused\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}))\n\nconst Wrapper = styled(Button)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  padding: 0,\n  overflow: \"hidden\",\n  \"div\": {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}))\n\n// wrap the Input with this when using the input in a buttongroup\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\n}\n\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\n  const [number, setNumber] = useState(value)\n  const [focused, setFocus] = useState(false)\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\n  const onBlur = useCallback(\n    () => {\n      onChange(number)\n      setFocus(false)\n    },\n    [onChange, number, setFocus],\n  )\n  const onFocus = useCallback(\n    () => {\n      setFocus(true)\n    },\n    [setFocus],\n  )\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n  return <StyledInputBase\n    value={(focused && !number) ? \"\" : number}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={onInputChange}\n    onBlur={onBlur}\n    onFocus={onFocus}\n    disabled={disabled}\n    onKeyDown={onKeyDOwn}\n    {...props}\n  />\n}","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\n\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} arrow classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.arrow}`]: {\n    color: theme.palette.common.black,\n  },\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.common.black,\n  },\n}));\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { styled } from \"@mui/system\";\n\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\n  display: \"inline-block\",\n  width: \"auto\",\n  height: `2.3em`,\n  lineHeight: 1,\n  verticalAlign: \"text-bottom\",\n  marginTop: theme.spacing(-3),\n  marginLeft: theme.spacing(-1.25),\n  marginRight: theme.spacing(-1),\n  marginBottom: theme.spacing(-1),\n}))\n\nexport default ThumbSide","import { Box, ListItem } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { DocumentSection } from \"../Types/sheet\"\nimport { evalIfFunc } from \"../Util/Util\"\nimport ConditionalDisplay from \"./ConditionalDisplay\"\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\n\nexport default function DocumentDisplay({ sections }: { sections: DocumentSection[] }) {\n  const { data } = useContext(DataContext)\n  const sectionsDisplay = sections?.map((section, i) => {\n    if (section.canShow && !section.canShow(data)) return null\n    const talentText = evalIfFunc(section.text, data)\n    const fields = section.fields ?? []\n    return <Box key={\"section\" + i} display=\"flex\" flexDirection=\"column\" gap={1}>\n      {talentText && <div>{talentText}</div>}\n      {fields.length > 0 && <FieldDisplayList>\n        {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} component={ListItem} />)}\n      </FieldDisplayList>}\n      {!!section.conditional && <ConditionalDisplay conditional={section.conditional} hideDesc />}\n    </Box>\n  }).filter(s => s)\n  if (!sectionsDisplay.length) return null\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sectionsDisplay}</Box>\n}\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\nconst ExpandButton = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: (theme as any).transitions.create('transform', {\n    duration: (theme as any).transitions.duration.shortest,\n  }),\n}));\n\nexport default ExpandButton","import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\n\nexport default function LocationName({ location }) {\n  const { t } = useTranslation(\"ui\");\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\n  </Typography>\n\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\nimport { Button, Divider, MenuItem } from '@mui/material';\nimport React, { useCallback, useContext } from 'react';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport SqBadge from '../Components/SqBadge';\nimport { DataContext } from '../DataContext';\nimport IConditional from '../Types/IConditional_WR';\nimport { deepClone, layeredAssignment } from '../Util/Util';\n\nexport default function ConditionalSelector({ conditional, conditionalValue, disabled = false, }:\n  { conditional: IConditional, conditionalValue?: string, disabled?: boolean }) {\n  const { character, characterDispatch } = useContext(DataContext)\n  const setConditional = useCallback((v?: string) => {\n    const conditionalValues = deepClone(character.conditional)\n    layeredAssignment(conditionalValues, conditional.path, v)\n    characterDispatch({ conditional: conditionalValues })\n  }, [conditional, character, characterDispatch])\n\n  if (Object.keys(conditional.states).length === 1) {\n    const [stateKey, st] = Object.entries(conditional.states)[0]\n    const badge = st.name && <SqBadge color={\"success\"}>{st.name}</SqBadge>\n    return <Button fullWidth size=\"small\" onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\n      {conditional.name} {badge}\n    </Button>\n  } else {//complex conditional\n    const state = conditionalValue ? conditional.states[conditionalValue] : undefined\n    const badge = state?.name && <SqBadge color={state ? \"success\" : \"secondary\"}>{state ? state.name : \"Not Active\"}</SqBadge>\n    return <DropdownButton fullWidth size=\"small\" title={<span>{conditional.name} {badge}</span>} disabled={disabled}>\n      <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\n        <span>Not Active</span>\n      </MenuItem>\n      <Divider />\n      {Object.entries(conditional.states).map(([stateKey, st]) =>\n        <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\n    </DropdownButton>\n  }\n}\n","import { Box, CardContent, CardHeader, Divider, ListItem } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\nimport { DataContext, dataContextObj } from \"../DataContext\"\nimport IConditional from \"../Types/IConditional_WR\"\nimport { evalIfFunc } from \"../Util/Util\"\nimport CardDark from \"./Card/CardDark\"\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\nimport { data as dataNode } from '../Formula/utils'\nimport { Data } from \"../Formula/type\"\n\ntype ConditionalDisplayProps = {\n  conditional: IConditional,\n  hideHeader?: boolean,\n  hideDesc?: boolean,\n  fieldContext?: dataContextObj\n}\n\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false, fieldContext }: ConditionalDisplayProps) {\n  const dataContext = useContext(DataContext)\n  const { data } = dataContext\n  // TODO: as Data\n  const canShow = conditional.canShow ? !(fieldContext ? data.get(dataNode(conditional.canShow, { target: fieldContext.data.data[0] } as Data)).isEmpty : data.get(conditional.canShow).isEmpty) : true\n  if (!canShow) return null\n  const condVal = data.get(conditional.value).value\n\n  const description = !hideDesc && evalIfFunc(conditional.description, data)\n  let { icon, title, action } = conditional.header ?? {}\n  icon = evalIfFunc(icon, data)\n  const fields = condVal && conditional.states[condVal]?.fields\n\n  return <CardDark>\n    {!hideHeader && conditional.header && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\n    {!hideHeader && conditional.header && <Divider />}\n    {!!conditional.name && <CardContent>\n      {description && <Box mb={1}>{description}</Box>}\n      <ConditionalSelector\n        conditional={conditional}\n        conditionalValue={condVal} />\n    </CardContent>}\n    {fields &&\n      <FieldDisplayList sx={{ m: 0 }}>\n        {fields.map((field, i) => <FieldDisplay key={i} field={field} fieldContext={fieldContext} component={ListItem} />)}\n      </FieldDisplayList>\n    }\n  </CardDark>\n}\n","import { Typography } from \"@mui/material\";\nimport { input } from \".\";\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\nimport ColorText from \"../Components/ColoredText\";\nimport SqBadge from \"../Components/SqBadge\";\nimport { ArtifactSetKey, CharacterKey, ElementKey, WeaponKey } from \"../Types/consts\";\nimport { range } from \"../Util/Util\";\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\nimport { DisplaySub } from \"./type\";\nimport { NodeDisplay, UIData } from \"./uiData\";\n\nconst errHeader = {\n  title: <ColorText color=\"warning\">ERROR</ColorText>\n}\n\nconst talentMap = {\n  normal: \"Normal Atk.\",\n  charged: \"Charged Atk.\",\n  plunging: \"Plunging Atk.\",\n  skill: \"Ele. Skill\",\n  burst: \"Ele. Burst\",\n  passive: \"Passive\",\n  passive1: \"1st Asc. Pass.\",\n  passive2: \"4th Asc. Pass.\",\n  passive3: \"Util. Pass.\",\n  ...Object.fromEntries(range(1, 6).map(i => [`constellation${i}`, `Const. ${i}`]))\n}\nexport async function getDisplayHeader(data: UIData, sectionKey: string): Promise<{\n  title: Displayable,\n  icon?: string,\n  action?: Displayable\n}> {\n  if (!sectionKey) return errHeader\n  if (sectionKey === \"basic\") return { title: \"Basic Stats\" }\n  else if (sectionKey === \"reaction\") return { title: \"Transformative Reactions\" }\n  else if (sectionKey.includes(\":\")) {\n    const [namespace, key] = sectionKey.split(\":\")\n    if (namespace === \"artifact\") {\n      const sheet = await ArtifactSheet.get(key as ArtifactSetKey)\n      if (!sheet) return errHeader\n      return {\n        title: sheet.name,\n        icon: sheet.defIconSrc\n      }\n    } else if (namespace === \"weapon\") {\n      const sheet = await WeaponSheet.get(key as WeaponKey)\n      if (!sheet) return errHeader\n      const asc = data.get(input.weapon.asc).value\n      return {\n        title: sheet.name,\n        icon: asc < 2 ? sheet.img : sheet.imgAwaken\n      }\n    }\n  } else {\n    const cKey = data.get(input.charKey).value\n    const cEle = data.get(input.charEle).value\n    if (!cKey || !cEle) return errHeader\n    const sheet = await CharacterSheet.get(cKey as CharacterKey)\n    const talentKey = [\"normal\", \"charged\", \"plunging\"].includes(sectionKey) ? \"auto\" : sectionKey\n    const talent = sheet?.getTalentOfKey(talentKey as any, cEle as ElementKey)\n    if (!talent) return errHeader\n    const actionText = talentMap[sectionKey]\n    return {\n      icon: talent.img,\n      title: talent.name,\n      action: actionText ? <SqBadge ><Typography variant=\"subtitle2\">{actionText}</Typography></SqBadge> : undefined\n    }\n  }\n  return errHeader\n}\n/**\n * Use this function to reorganize the sections to have basic stats at the beginning, and reation at the end.\n * @param data\n * @returns\n */\nexport function getDisplaySections(data: UIData,): [string, DisplaySub<NodeDisplay>][] {\n  const display = data.getDisplay()\n  const sections = Object.entries(display)\n  const basic = sections.filter(([k]) => k === \"basic\")\n  const reaction = sections.filter(([k]) => k === \"reaction\")\n  const weapon = sections.filter(([k]) => k.startsWith(\"weapon\"))\n  const artifact = sections.filter(([k]) => k.startsWith(\"artifact\"))\n  const rest = sections.filter(([k]) => k !== \"basic\" && k !== \"reaction\" && !k.startsWith(\"weapon\") && !k.startsWith(\"artifact\"))\n\n  return [\n    ...basic,\n    ...rest,\n    ...weapon,\n    ...artifact,\n    ...reaction\n  ]\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import SqBadge from '../Components/SqBadge';\nimport { clamp } from '../Util/Util';\n\nexport default function PercentBadge({ value, valid }: Data) {\n  let [badgeColor, text] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n\ntype Data = {\n  valid: boolean,\n  value: number | string,\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\nimport { ReactNode } from \"react\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport TextButton from \"../Components/TextButton\"\n\ntype StatInputInput = ButtonGroupProps & {\n  name: Displayable,\n  children?: ReactNode,\n  value: number,\n  placeholder?: string,\n  defaultValue?: number,\n  onValueChange: (newValue: number | undefined) => void,\n  percent?: boolean,\n  disabled?: boolean,\n  onReset?: () => void\n}\nconst FlexButtonGroup = styled(ButtonGroup)({\n  display: \"flex\"\n})\n\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\n\n  return <FlexButtonGroup {...restProps} >\n    {children}\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\n      {name}\n    </TextButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n      <CustomNumberInput\n        sx={{ px: 1 }}\n        inputProps={{\n          sx: { textAlign: \"right\" }\n        }}\n        float={percent}\n        placeholder={placeholder}\n        value={value}\n        onChange={onValueChange}\n        disabled={disabled}\n        endAdornment={percent ? \"%\" : undefined}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\n      <Replay />\n    </Button>\n  </FlexButtonGroup>\n}\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport Assets from \"../../Assets/Assets\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport { Stars } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponFilter?: WeaponTypeKey,\n}\n\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\n\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\n\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\n    .filter(wKey => {\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\n      return true\n    })\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets[weaponKey]\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport React, { Suspense, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport SqBadge from '../Components/SqBadge';\nimport { Stars } from '../Components/StarDisplay';\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey } from '../Types/consts';\nimport { valueStringWithUnit } from '../Util/UIUtil';\nimport { clamp } from '../Util/Util';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport PercentBadge from './PercentBadge';\nimport { probability } from './RollProbability';\nimport KeyMap from '../KeyMap';\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onEdit?: (string) => void,\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  probabilityFilter?: Dict<SubstatKey, number>\n}\nconst allSubstatFilter = new Set(allSubstats)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\"]);\n  const database = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\n\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\n  const art = artifactObj ?? databaseArtifact\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  }>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>\n        </Box>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item flexGrow={1}>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\">\n              {KeyMap.get(mainStatKey)}\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>{mainStatVal}</strong>\n            </Typography>\n            <Stars stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Grid>\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\n            <CardMedia\n              component=\"img\"\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"100%\"\n              height=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\n        {substats.map((stat: ICachedSubstat, i) => {\n          if (!stat.value) return null\n          const numRolls = stat.rolls?.length ?? 0\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\n          const efficiency = stat.efficiency ?? 0\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\n          const statName = KeyMap.get(stat.key)\n          return (<Box key={i} sx={{ display: \"flex\" }}>\n            <Box sx={{ flexGrow: 1 }}>\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, KeyMap.unit(stat.key))}`}</Typography>\n            </Box>\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\n          </Box>)\n        })}\n        <Box sx={{ display: \"flex\", my: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\n        </Box>\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\n        </Box>}\n        <Box flexGrow={1} />\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n      </CardContent>\n      <CardActions>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item xs=\"auto\" flexShrink={1}>\n            {editable ?\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\n          </Grid>\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\n          {editable && <Grid item xs=\"auto\">\n            <ButtonGroup sx={{ height: \"100%\" }}>\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n              </Button>}\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n                </Button>\n              </Tooltip>\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n              </Button>}\n            </ButtonGroup>\n          </Grid>}\n        </Grid>\n      </CardActions>\n    </CardLight >\n  </Suspense>\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, valueString, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport KeyMap from \"../KeyMap\"\nimport { CharacterKey } from \"../Types/consts\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\n  const database = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const actionWrapperFunc = useCallback(\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\n    [onClick, weaponId],\n  )\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div className={`grad-${weaponSheet.rarity}star`} >\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\n              {lock ? <Lock /> : <LockOpen />}\n            </IconButton>} />\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\n            <Grid item flexGrow={1}>\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n            </Grid>\n            {/* use flex-end here to align the image to the bottom. */}\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\n            </Grid>\n          </Grid>\n        </div>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.key) return null\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n        {/* grow to fill the 100% heigh */}\n        <Box flexGrow={1} />\n        <CardContent sx={{ py: 1 }}>\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\n            <Grid item xs=\"auto\" flexShrink={1}>\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\n            </Grid>\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\n            <Grid item xs=\"auto\">\n              <ButtonGroup sx={{ height: \"100%\" }}>\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n                </Button>}\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n                </Button>}\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n      </CardLight>\n    </ConditionalWrapper>\n  </Suspense>\n}\n","import { Box, CardContent, Typography } from \"@mui/material\"\nimport CardDark from \"../Card/CardDark\"\nimport DocumentDisplay from \"../DocumentDisplay\"\nimport SqBadge from \"../SqBadge\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\n\ntype Data = {\n  setKey: ArtifactSetKey,\n  setNumKey: SetNum\n}\n\nexport default function SetEffectDisplay({ setKey, setNumKey }: Data) {\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\n  if (!sheet) return null\n\n  const setEffectText = sheet.setEffectDesc(setNumKey)\n  const document = sheet.setEffectDocument(setNumKey)\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    <CardDark>\n      <CardContent>\n        <Typography><SqBadge color=\"success\">{setNumKey}-Set</SqBadge> {setEffectText}</Typography>\n      </CardContent>\n    </CardDark>\n    {document ? <DocumentDisplay sections={document} /> : null}\n  </Box>\n}\n","import { Masonry } from \"@mui/lab\"\nimport { CardContent, CardHeader, Divider } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { useContext, useMemo } from \"react\"\nimport CardDark from \"../Card/CardDark\"\nimport { NodeFieldDisplay } from \"../FieldDisplay\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport { DataContext } from \"../../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../../Formula/type\"\nimport { NodeDisplay } from \"../../Formula/uiData\"\nimport { customRead } from \"../../Formula/utils\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { objectMap } from \"../../Util/Util\"\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Box sx={{ mr: -1, mb: -1 }}>\n    <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\n      {sections.map(([key, Nodes]) =>\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Masonry >\n  </Box>\n}\n\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data, oldData } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\n  // TODO: Should still show the section if `oldData` contains some non-empty entries\n  if (!header || Object.values(displayNs).every(x => x.isEmpty)) return null\n  const { title, icon, action } = header\n  return <CardDark >\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([nodeKey, n]) => <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} />)}\n    </CardContent>\n  </CardDark>\n}\n","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ExpandMore } from \"@mui/icons-material\";\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useState } from 'react';\nimport StatInput from \"../PageCharacter/StatInput\";\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport { valueString } from \"../Formula/uiData\";\nimport KeyMap from '../KeyMap';\nimport { allElementsWithPhy, ElementKeyWithPhy } from \"../Types/consts\";\nimport CardLight from \"./Card/CardLight\";\nimport ColorText from \"./ColoredText\";\nimport ExpandButton from \"./ExpandButton\";\nimport { uncoloredEleIcons } from \"./StatIcon\";\n\nexport function EnemyExpandCard() {\n  const { data } = useContext(DataContext)\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1} alignItems=\"center\">\n          <Grid container spacing={1}>\n            <Grid item>\n              <Chip size=\"small\" color=\"success\" label={<span>{KeyMap.get(eLvlNode.key)} <strong>{eLvlNode.value}</strong></span>} />\n            </Grid>\n            {allElementsWithPhy.map(element => <Grid item key={element}>\n              <Typography key={element} ><EnemyResText element={element} /></Typography>\n            </Grid>)}\n            <Grid item>\n              <Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography>\n            </Grid>\n            <Grid item>\n              <Typography>DEF Ignore {valueString(eDefIgn.value, eDefIgn.unit)}</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n            size=\"small\"\n            sx={{ p: 0 }}\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <EnemyEditor />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\n  const { data } = useContext(DataContext)\n  const node = data.get(input.enemy[`${element}_res_`])\n  const immune = !isFinite(node.value)\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\n    <span >{uncoloredEleIcons[element]}RES <strong>{valueString(node.value, node.unit)}</strong></span>\n  return <ColorText color={element}>{content}</ColorText>\n}\n\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\n  const { data, characterDispatch } = useContext(DataContext)\n  const defaultVal = 10\n\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  return <Grid container spacing={1}>\n    <Grid item {...bsProps}>\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\n        To get the specific resistance values of enemies, please visit the wiki.\n      </Button>\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eLvlNode.key)}</b>}\n        value={eLvlNode.value}\n        placeholder={KeyMap.getStr(eLvlNode.key)}\n        defaultValue={data.get(input.lvl).value}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\n      />\n    </Grid>\n    {allElementsWithPhy.map(eleKey => {\n      const statKey = `${eleKey}_enemyRes_`\n      const node = data.get(input.enemy[`${eleKey}_res_`])\n      const elementImmunity = !isFinite(node.value)\n      return <Grid item key={eleKey} {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n          name={<b>{KeyMap.get(node.key)}</b>}\n          value={node.value * 100}\n          placeholder={KeyMap.getStr(node.key)}\n          defaultValue={defaultVal}\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\n          disabled={elementImmunity}\n          percent\n        >\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} >\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\n          </Button>\n        </StatInput>\n      </Grid>\n    })}\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eDefRed.key)}</b>}\n        value={eDefRed.value}\n        placeholder={KeyMap.getStr(eDefRed.key)}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eDefIgn.key)}</b>}\n        value={eDefIgn.value}\n        placeholder={KeyMap.getStr(eDefIgn.key)}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item xs={12}>\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\n    </Grid>\n  </Grid>\n}\n","import { CardContent, Grid, MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\nimport { useContext } from 'react';\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport { ElementKey } from \"../Types/consts\";\nimport CardLight from \"./Card/CardLight\";\nimport ColorText from \"./ColoredText\";\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\nimport StatIcon, { uncoloredEleIcons } from \"./StatIcon\";\nconst infusionVals = {\n  \"\": <span>No External Infusion</span>,\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\n}\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\">\nexport function InfusionAuraDropdown(props: InfusionAuraDropdownProps) {\n  const { characterSheet, character: { infusionAura }, characterDispatch } = useContext(DataContext)\n  if (!characterSheet?.isMelee()) return null\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} {...props}>\n    {Object.entries(infusionVals).map(([key, text]) =>\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\n        selected={key === infusionAura} disabled={key === infusionAura}\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\n  </DropdownButton>\n}\n\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nexport function ReactionToggle(props: ReactionToggleProps) {\n  const { data, character: { reactionMode, infusionAura }, characterDispatch } = useContext(DataContext)\n  const charEleKey = data.get(input.charEle).value as ElementKey\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={reactionMode} onChange={(e, reactionMode) => characterDispatch({ reactionMode })} {...props}>\n    <ToggleButton value=\"\" >No Reactions</ToggleButton >\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value=\"pyro_vaporize\"  >\n      <ColorText color=\"vaporize\">Vaporize(Pyro){StatIcon.hydro}+{StatIcon.pyro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"}  >\n      <ColorText color=\"melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"}  >\n      <ColorText color=\"vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"}  >\n      <ColorText color=\"melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</ColorText>\n    </ToggleButton >}\n  </SolidToggleButtonGroup>\n}\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nexport function HitModeToggle(props: HitModeToggleProps) {\n  const { character: { hitMode }, characterDispatch } = useContext(DataContext)\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={hitMode} onChange={(e, hitMode) => characterDispatch({ hitMode })} {...props} >\n    <ToggleButton value=\"avgHit\">Avg. DMG</ToggleButton>\n    <ToggleButton value=\"hit\">Non Crit DMG</ToggleButton>\n    <ToggleButton value=\"critHit\">Crit Hit DMG</ToggleButton>\n  </SolidToggleButtonGroup>\n}\n\n\nexport function DamageOptionsCard() {\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1}>\n        <Grid item><HitModeToggle size=\"small\" /></Grid>\n        <Grid item><InfusionAuraDropdown /></Grid>\n        <Grid item><ReactionToggle size=\"small\" /></Grid>\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\nimport { useCallback, useContext, useMemo, useState } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\nimport CloseButton from \"../Components/CloseButton\"\nimport ColorText from \"../Components/ColoredText\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../Components/ModalWrapper\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport { CharacterKey } from \"../Types/consts\"\nimport { ICachedWeapon } from \"../Types/weapon\"\nimport { clamp } from \"../Util/Util\"\nimport WeaponCard from \"./WeaponCard\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\nimport { DataContext } from \"../DataContext\"\n\ntype WeaponStatsEditorCardProps = {\n  weaponId: string\n  footer?: boolean\n  onClose?: () => void\n}\nexport default function WeaponDisplayCard({\n  weaponId: propWeaponId,\n  footer = false,\n  onClose\n}: WeaponStatsEditorCardProps) {\n  const { data } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const weapon = useWeapon(propWeaponId)\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\n  const weaponTypeKey = weaponSheet?.weaponType\n\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\n    database.updateWeapon(newWeapon, propWeaponId)\n  }, [propWeaponId, database])\n\n  const setLevel = useCallback(level => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    weaponDispatch({ level, ascension })\n  }, [weaponDispatch])\n\n  const setAscension = useCallback(() => {\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\n    else weaponDispatch({ ascension: lowerAscension })\n  }, [weaponDispatch, ascension, level])\n\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n  const [showModal, setshowModal] = useState(false)\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1}>\n          <Grid container spacing={1}>\n            <Grid item >\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\n              <ButtonGroup>\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\n                <DropdownButton title={`Refinement ${refinement}`}>\n                  <MenuItem>Select Weapon Refinement</MenuItem>\n                  <Divider />\n                  {[...Array(5).keys()].map(key =>\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\n                      {`Refinement ${key + 1}`}\n                    </MenuItem>)}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item >\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\n                <CustomNumberInputButtonGroupWrapper >\n                  <CustomNumberInput onChange={setLevel} value={level}\n                    startAdornment=\"Lvl. \"\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n                  />\n                </CustomNumberInputButtonGroupWrapper>\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n                <DropdownButton title={\"Select Level\"} >\n                  {milestoneLevels.map(([lv, as]) => {\n                    const sameLevel = lv === ascensionMaxLevel[as]\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n                    const selected = lv === level && as === ascension\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n                  })}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item>\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\n                {lock ? \"Locked\" : \"Unlocked\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        {!!onClose && <Grid item  >\n          <CloseButton onClick={onClose} />\n        </Grid>}\n        {database === localDatabase && <Grid item >\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\n        </Grid>}\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\n          <Typography><small>{weaponSheet.description}</small></Typography>\n        </Box>\n        <Box sx={{ mb: -1 }} flexGrow={1} >\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n            <CardDark >\n              <CardContent>\n                <Typography>Main Stats</Typography>\n              </CardContent>\n              <FieldDisplayList>\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return <NodeFieldDisplay key={i} node={n} component={ListItem} />\n                })}\n              </FieldDisplayList>\n            </CardDark>\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\n          </Box>\n        </Box>\n      </Box>}\n    </CardContent>\n    {footer && id && <CardContent sx={{ py: 1 }}>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\n        </Grid>\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\n      </Grid>\n    </CardContent>}\n  </CardLight>\n}\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\n  const database = useContext(DatabaseContext)\n  const [show, setShow] = useState(false)\n  const open = () => setShow(true)\n  const close = () => setShow(false)\n\n  const clickHandler = (id) => {\n    onChangeId(id)\n    close()\n  }\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const weaponIdList = database.weapons.keys.filter(wKey => {\n    const dbWeapon = database._getWeapon(wKey)\n    if (!dbWeapon) return false\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\n    return true\n  })\n\n\n  return <>\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\n    <ModalWrapper open={show} onClose={close} >\n      <CardDark>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={close} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Grid container spacing={1}>\n            {weaponIdList.map(weaponId =>\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  </>\n}\n","import { ExpandMore } from \"@mui/icons-material\"\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useState } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../Formula/type\"\nimport { NodeDisplay, valueString } from \"../Formula/uiData\"\nimport KeyMap from \"../KeyMap\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport CardDark from \"./Card/CardDark\"\nimport CardLight from \"./Card/CardLight\"\nimport ColorText from \"./ColoredText\"\nimport ExpandButton from \"./ExpandButton\"\nimport ImgIcon from \"./Image/ImgIcon\"\n\nexport default function FormulaCalcCard() {\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <Typography>Formulas {\"&\"} Calculations</Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <CalculationDisplay />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\n    <Box sx={{ mr: -1, mb: -1 }}>\n      {sections.map(([key, Nodes]) =>\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Box>\n  </Suspense>\n}\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  if (!header) return null\n  const { title, icon, action } = header\n  return <CardDark sx={{ mb: 1 }}>\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([key, node]) =>\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\n          </AccordionDetails>\n        </Accordion>)}\n    </CardContent>\n  </CardDark>\n}\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\nimport CardLight from '../../Components/Card/CardLight';\nimport ImgIcon from '../../Components/Image/ImgIcon';\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from '../../Formula';\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\nimport { objectKeyMap } from '../../Util/Util';\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\n\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\n  const { data, oldData, character, mainStatAssumptionLevel } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const history = useHistory()\n  const edit = useCallback(\n    artid => history.push({\n      pathname: \"/artifact\",\n      artToEditId: artid\n    } as any), [history])\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  // TODO: We can also listen only to equipped artifacts\n  const [, updateArt] = useForceUpdate()\n  useEffect(() => database.followAnyArt(updateArt))\n\n  const equipArts = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\n    if (!oldData) return\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\n    database.equipArtifacts(character.key, newBuild)\n  }, [character, data, oldData, database])\n\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\n  }, [character, database])\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\n  return <>\n    <CardLight sx={{ mb: 1 }}>\n      <CardContent>\n        <StatDisplayComponent />\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\n          </Grid>\n          <Grid item flexGrow={1}></Grid>\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\n        </Grid>\n      </CardContent>\n    </CardLight>\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\n            <Divider />\n            <CardContent >\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n        )}\n      </Grid>\n      {artIds.map((id, i) =>\n        !!id && <Grid item xs={6} md={4} key={i} >\n          <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(id)} />\n        </Grid>\n      )}\n    </Grid>\n  </>\n}\nexport default CharacterArtifactPane\n","import { PersonAdd } from \"@mui/icons-material\";\nimport { CardContent, Divider, Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useContext, useMemo } from 'react';\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport resonanceSheets from \"../../Conditional/Resonance\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport { DataContext, dataContextObj } from \"../../DataContext\";\nimport { uiInput as input } from \"../../Formula\";\nimport { NodeDisplay } from \"../../Formula/uiData\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ElementKey } from \"../../Types/consts\";\nimport { DocumentSection } from \"../../Types/sheet\";\nimport { objPathValue, range } from \"../../Util/Util\";\nimport CharacterCard from \"../CharacterCard\";\n\nexport default function CharacterTeamBuffsPane() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <TeamBuffDisplay />\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\n    <Grid container spacing={1}>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) => nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) => nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) => nodes.push([[\"enemy\", key], node]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      Team Buffs\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container columnSpacing={2} rowSpacing={1}>\n        {nodes.map(([path, n], i) => n && !n.isEmpty && <Grid item {...statBreakpoint} key={n.key} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { data, characterDispatch } = useContext(DataContext)\n  return <CardLight>\n    <CardContent>\n      Team Resonance\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container spacing={1}>\n        {/* {resonanceSheets.map((doc, i) =>\n          <Grid item key={i} xs={12} md={6} lg={4} >\n            <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\n              <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\n              <Divider />\n              <CardContent>\n                {doc.description}\n              </CardContent>\n              {doc.conditionals.map(cond =>\n                <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\n              )}\n            </CardDark>\n          </Grid>\n        )} */}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const dataContext = useContext(DataContext)\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\n  const activeCharacterKey = active.key\n  const characterKey = active.team[index]\n  const characterDispatch = useCharacterReducer(characterKey)\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\n  const onClickHandler = useCharSelectionCallback()\n\n  const dataBundle = teamData[characterKey]\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\n    character: dataBundle.character,\n    characterSheet: dataBundle.characterSheet,\n    data: dataBundle.target,\n    teamData: teamData,\n    mainStatAssumptionLevel: 0,\n    characterDispatch\n  }\n  return <CardLight>\n    <CardContent>\n      <CharacterDropdownButton fullWidth value={characterKey}\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\n    </CardContent>\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n      <CharacterCard characterKey={characterKey}\n        onClickHeader={onClickHandler}\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\n      />\n    </DataContext.Provider>}\n  </CardLight>\n\n}\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, } = useContext(DataContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sections = useMemo(() => artifactSheets &&\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\n    , [artifactSheets, data])\n  if (!sections) return null\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\n}\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\n\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\n  </Box >\n}\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\nimport React, { useContext, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport { Stars } from \"../../Components/StarDisplay\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport { DataContext } from \"../../DataContext\";\nimport { valueString } from \"../../Formula/api\";\nimport { uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport KeyMap from \"../../KeyMap\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport StatInput from \"../StatInput\";\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\nexport default function CharacterOverviewPane() {\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const charEle = data.get(input.charEle).value as ElementKey\n  const weaponTypeKey = characterSheet.weaponTypeKey\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.bonus.auto).value,\n    skill: data.get(input.bonus.skill).value,\n    burst: data.get(input.bonus.burst).value,\n  }\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={3}  >\n      {/* Image card with star and name and level */}\n      <CardLight >\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\n        <CardContent>\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\n          <Grid container spacing={1} mt={1}>\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\n              <Grid item xs={4} key={tKey}>\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\n                  overlap=\"circular\"\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    \"& > .MuiBadge-badge\": {\n                      fontSize: \"1.25em\",\n                      padding: \".25em .4em\",\n                      borderRadius: \".5em\",\n                      lineHeight: 1,\n                      height: \"1.25em\"\n                    }\n                  }}>\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\n                </Badge>\n              </Grid>)}\n          </Grid>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\n          <Grid container spacing={1}>\n            {[...Array(6).keys()].map(i =>\n              <Grid item xs={4} key={i}>\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}` as TalentSheetElementKey, charEle)?.img}\n                  sx={{\n                    cursor: \"pointer\",\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\n                  }}\n                  width=\"100%\" height=\"auto\"\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardLight>\n    </Grid>\n    <Grid item xs={12} md={9} sx={{\n      \"> div:not(:last-child)\": { mb: 1 }\n    }} >\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\n      <MainStatsCards />\n    </Grid>\n  </Grid >\n}\nconst EDIT = \"Edit Stats\"\nconst EXIT = \"EXIT\"\n\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatReadNodes = [\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\n]\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\n\nconst miscStatReadNodes = [\n  input.total.all_dmg_,\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\n  input.total.normal_dmg_, input.total.normal_critRate_,\n  input.total.charged_dmg_, input.total.charged_critRate_,\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\n  input.total.skill_dmg_, input.total.skill_critRate_,\n  input.total.burst_dmg_, input.total.burst_critRate_,\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x])\n]\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\n\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\n\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\n    {nodes.map((rn, i) => <Grid item key={i} {...statBreakpoint} >\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\n    </Grid>)}\n    {extra}\n  </Grid>\n}\n\nfunction MainStatsCards() {\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const specialNode = data.get(input.special)\n\n  return <>\n    <TeamBuffDisplay />\n    <StatDisplayCard\n      title=\"Main Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\n        </Grid>}\n      />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {mainEditKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Other Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {otherStatKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              defaultValue={undefined}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Misc Stats\"\n      content={<StatDisplayContent statBreakpoint={{\n        xs: 12, sm: 6, md: 6,\n      }} nodes={miscStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {miscStatkeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n  </>\n}\nfunction StatDisplayCard({ title, content, editContent }) {\n  const [edit, setedit] = useState(false)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\n        </Button>\n      </Box>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {edit ? editContent : content}\n    </CardContent>\n  </CardLight>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\nimport React, { useCallback, useContext, useState } from 'react';\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from \"../../Formula\";\nimport { ElementKey } from \"../../Types/consts\";\nimport KeyMap from '../../KeyMap'\nimport { NodeDisplay, valueString } from '../../Formula/uiData'\nimport { NumNode } from \"../../Formula/type\";\nexport default function CharacterTalentPane() {\n  const { data, character, characterSheet } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1} sx={{ mb: 1 }}>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>)}\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Grid>}\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"passive\"\n          subtitle=\"Passive\"\n        />\n      </Grid>}\n    </Grid>\n    <Grid container spacing={1}>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>\n      })}\n    </Grid>\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\n    <Grid container spacing={1}>\n      {/* constellations */}\n      {[...Array(6).keys()].map(i => {\n        let tKey = `constellation${i + 1}` as TalentSheetElementKey\n        return <Grid item key={i} xs={12} md={4}\n          sx={{ opacity: constellation > i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i + 1}`}\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\n          />\n        </Grid>\n      })}\n    </Grid>\n  </>\n}\nconst ReactionComponents = {\n  superconduct: SuperConductCard,\n  electrocharged: ElectroChargedCard,\n  overloaded: OverloadedCard,\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\n  shattered: ShatteredCard,\n  // crystalize_hit: CrystalizeCard, // TODO: crystallize\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight sx={{ mb: 1 }}>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).map(([key, node]) => {\n          const Ele = ReactionComponents[key]\n          if (!Ele) return null\n          return <Grid item key={key}><Ele node={node} /></Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\n\nconst swirlEleToDisplay = {\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\n} as const\nfunction SwirlCard() {\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\n  const { data } = useContext(DataContext)\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\n  </CardDark>\n}\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\n  </CardContent></CardDark>\n}\n// TODO: crystallize\nconst crystalizeEleToDisplay = {\n  \"default\": <ColorText color=\"crystalize\">{KeyMap.get(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\n  \"pyro\": <span>{KeyMap.get(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\n  \"electro\": <span>{KeyMap.get(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\n  \"cryo\": <span>{KeyMap.get(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\n  \"hydro\": <span>{KeyMap.get(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\n} as const\nfunction CrystalizeCard() {\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    {/* <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box> */}\n  </CardDark>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\n      talent[tKey] = newTalentLevelKey\n      characterDispatch({ talent })\n    }\n    header = <>\n      <CardContent sx={{ py: 1 }}>\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\n          {[...Array(talentLimits[asc]).keys()].map(i =>\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\n        </DropdownButton>\n      </CardContent>\n      <Divider />\n    </>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\nimport { Suspense, useCallback, useContext, useState } from 'react';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\nimport ThumbSide from '../Components/Character/ThumbSide';\nimport CloseButton from '../Components/CloseButton';\nimport ColorText from '../Components/ColoredText';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport { sgt } from '../Data/Characters/SheetUtil';\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useTeamData from '../ReactHooks/useTeamData';\nimport { CharacterKey } from '../Types/consts';\nimport { clamp } from '../Util/Util';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  value: string;\n  current: string | boolean;\n}\n\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\n  if (value !== current) return null\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n    <div\n      role=\"tabpanel\"\n      hidden={value !== current}\n      id={`simple-tabpanel-${value}`}\n      aria-labelledby={`simple-tab-${value}`}\n      {...other}\n    >\n      {children}\n    </div>\n  </Suspense>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  footer?: JSX.Element\n  newteamData?: TeamData,\n  mainStatAssumptionLevel?: number,\n  onClose?: (any) => void,\n  tabName?: string,\n  isFlex?: boolean,\n}\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName, isFlex }: CharacterDisplayCardProps) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\n\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\n  const onTab = useCallback((e, v) => settab(v), [settab])\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n  if (!teamData || !character || !characterSheet || !charUIData) return <></>\n  const { compareData } = character\n  // main CharacterDisplayCard\n  const dataContextValue: dataContextObj = {\n    character,\n    characterSheet,\n    mainStatAssumptionLevel,\n    data: (newteamData ? newteamData[characterKey]!.target : charUIData),\n    teamData: (newteamData ? newteamData : teamData),\n    oldData: (compareData && newteamData) ? charUIData : undefined,\n    characterDispatch\n  }\n  return <CardDark >\n    <DataContext.Provider value={dataContextValue}>\n      <CardContent sx={{\n        \"> div:not(:last-child)\": { mb: 1 },\n      }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <CharSelectDropdown />\n          </Grid>\n          <Grid item>\n            {/* Compare against new build toggle */}\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>\n                <small>Show New artifact Stats</small>\n              </ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>\n                <small>Compare against equipped artifacts</small>\n              </ToggleButton>\n            </SolidToggleButtonGroup>}\n          </Grid>\n          <Grid item flexGrow={1} />\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\n          {!!onClose && <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>}\n        </Grid>\n        <CardLight>\n          <Tabs\n            onChange={onTab}\n            value={tab}\n            variant=\"fullWidth\"\n          >\n            <Tab value=\"character\" label=\"Character\" />\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\n            <Tab value=\"talent\" label=\"Talents\" />\n          </Tabs>\n        </CardLight>\n        <DamageOptionsCard />\n        <FormulaCalcCard />\n        <EnemyExpandCard />\n\n        {/* Character Panel */}\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\n        {/* Artifacts Panel */}\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\n        </DataContext.Provider>\n        {/* new build panel */}\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\n        {/* Buffs panel */}\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\n        {/* talent panel */}\n        <TabPanel value=\"talent\" current={tab}>\n          <CharacterTalentPane />\n        </TabPanel >\n      </CardContent>\n      {!!footer && <Divider />}\n      {footer && <CardContent >\n        {footer}\n      </CardContent>}\n    </DataContext.Provider>\n  </CardDark>\n}\n\n\nfunction CharSelectDropdown() {\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  const setLevel = useCallback((level) => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    characterDispatch({ level, ascension })\n  }, [characterDispatch])\n  const setAscension = useCallback(() => {\n    if (!character) return\n    const { level = 1, ascension = 0 } = character\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\n    else characterDispatch({ ascension: lowerAscension })\n  }, [characterDispatch, character])\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\n  return <>\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\n    <Grid container spacing={1}>\n      <Grid item>\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\n      </Grid>\n      <Grid item>\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\n          </DropdownButton>}\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setLevel} value={level}\n              startAdornment=\"Lvl. \"\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n              disabled={!characterSheet} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\n            {milestoneLevels.map(([lv, as]) => {\n              const sameLevel = lv === ascensionMaxLevel[as]\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n              const selected = lv === level && as === ascension\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n            })}\n          </DropdownButton>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  </>\n}\n"],"sourceRoot":""}