{"version":3,"file":"static/js/490.3e436fb6.chunk.js","mappings":"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","sources":["Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P,\r\n    unequal(target.charKey, key, datamine.constellation2.elemas)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cd}s - 10%` : `${datamine.skill.cd}s`,\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cdHold}s - 10%` : `${datamine.skill.cdHold}s`,\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: greaterEq(input.constellation, 2, 1,),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: c2PEleMas,\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Skill Absorption\r\n            value: condSkillAbsorption,\r\n            path: condSkillAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }],\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(`a4.name_${eleKey}`),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: {\r\n        name: tr(\"passive3.name\"),\r\n        img: passive3,\r\n        sections: [{\r\n          text: tr(\"passive3.description\"),\r\n          fields: [{ //TODO: put into subsection since this is teambuff\r\n            //   header: conditionalHeader(\"passive3\", tr, passive3),\r\n            //   description: tr(\"passive3.description\"),\r\n            node: passive\r\n          }]\r\n        }],\r\n      },\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: {\r\n        name: tr(\"constellation6.name\"),\r\n        img: c6,\r\n        sections: [{\r\n          text: tr(\"constellation6.description\"),\r\n          conditional: {//Crimson Momiji\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6.after\"),\r\n            states: {\r\n              c6: {\r\n                fields: [\r\n                  // { // TODO:\r\n                  //   node: c6infusion\r\n                  // },\r\n                  {\r\n                    canShow: data => data.get(c6infusion).value === \"anemo\",\r\n                    text: <ColorText color=\"anemo\">Anemo Infusion</ColorText>\r\n                  },\r\n                  {\r\n                    node: c6NormDmg_\r\n                  }, {\r\n                    node: c6ChargedDmg_\r\n                  }, {\r\n                    node: c6PlungingDmg_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: datamine.constellation6.duration,\r\n                    unit: \"s\",\r\n                  }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, \"cryo\")\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(\"cryo\") } })\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const adata = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((percentArr, i) =>\r\n          ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 3 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span>\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n          }],\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            text: tr(\"burst.cutting\"),\r\n            node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.bloom\"),\r\n            node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.burst.duration,\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: datamine.burst.cd,\r\n          }, {\r\n            text: sgt(\"energyCost\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }]\r\n      },\r\n      sprint: {\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === \"cryo\",\r\n                  text: <ColorText color=\"cryo\">Cryo Infusion</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: {//After using Kamisato Art: Hyouka\r\n            canShow: greaterEq(input.asc, 1, 1),\r\n            value: condAfterSkillA1,\r\n            path: condAfterSkillA1Path,\r\n            name: trm(\"afterSkill\"),\r\n            states: {\r\n              afterSkill: {\r\n                fields: [{\r\n                  node: a1NormDmg_\r\n                },\r\n                {\r\n                  node: a1ChargedDmg_\r\n                },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive1.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n          conditional: { //sprint\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                },\r\n                {\r\n                  node: afterApplySprintCryo\r\n                },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"snowflakeDMG\"),\r\n        value: datamine.constellation2.snowflake,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n          conditional: {\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            value: condAfterBurst,\r\n            path: condAfterBurstPath,\r\n            name: trm(\"dmgBySnowflake\"),\r\n            states: {\r\n              c4: {\r\n                fields: [{\r\n                  node: afterBurst\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: \"6s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: {\r\n        name: tr(\"constellation6.name\"),\r\n        img: c6,\r\n        sections: [{\r\n          text: tr(\"constellation6.description\"),\r\n          conditional: {\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"afterSkill\"),\r\n            states: {\r\n              c6: {\r\n                fields: [{\r\n                  text: sgt(\"cd\"),\r\n                  value: datamine.constellation6.cd,\r\n                  unit: \"s\"\r\n                },\r\n                {\r\n                  node: c6ChargedDmg_,\r\n                },]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, adata);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.total.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: greaterEq(input.constellation, 5, 3),\r\n    burst: greaterEq(input.constellation, 3, 3),\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.9\"),\r\n            value: `${datamine.burst.stam}`,\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.12\"),\r\n            value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.13\"),\r\n            value: `${datamine.burst.duration}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.14\"),\r\n            value: `${datamine.burst.cd}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.15\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }],\r\n          conditional: {\r\n            value: condResolveStack,\r\n            path: condResolveStackPath,\r\n            name: trm(\"burst.resolves\"),\r\n            states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: []\r\n            }]))\r\n          }\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n          fields: [{\r\n            canShow: data => data.get(input.asc).value >= 4,\r\n            text: trm(\"a4.enerRest\"),\r\n            value: (data) => {\r\n              return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n            },\r\n            unit: \"%\"\r\n          }, {\r\n            node: passive2ElecDmgBonus,\r\n          }]\r\n        }]\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n          conditional: {\r\n            value: condC4,\r\n            path: condC4Path,\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4.expires\"),\r\n            states: {\r\n              c4: {\r\n                fields: [{\r\n                  node: c4AtkBonus_,\r\n                }, {\r\n                  text: tr(\"skill.skillParams.2\"),\r\n                  value: `${datamine.constellation4.duration}s`\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1 = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 2 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.3\"),\r\n            value: `${datamine.skill.duration}s / ${datamine.skill.durationHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.trigger}s / ${datamine.skill.triggerHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.5\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"skill.skillParams.6\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: st(\"charges\"),\r\n            value: (data) => data.get(input.constellation).value >= 1 ? 3 : 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            description: tr(\"skill.description\"),\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: nodeSkill\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(\"asc4Cond\"),\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: nodeAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: nodeAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: nodeAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // CONSTELLATION4\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            value: condC4,\r\n            path: condC4Path,\r\n            header: conditionalHeader(\"constellation4\", tr, passive2),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4\"),\r\n            states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n              name: i.toString(),\r\n              fields: [{ node: c4Inc }]\r\n            }))\r\n          }\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: nodeBurstCryo_enemyRes_\r\n                }, {\r\n                  node: nodeBurstPhysical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: greaterEq(input.asc, 1, equal(input.activeCharKey, input.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"activeCharField\"),\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: nodeAsc1\r\n                }, {\r\n                  node: nodeC2\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1 = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, datamine.passive1.eleMas)))\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((percentArr, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSwirlReaction,\r\n            path: condSwirlReactionPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"eleSwirled\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: asc1,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSkillHitOpponent,\r\n            path: condSkillHitOpponentPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: trm(\"asc4\"),\r\n            states: {\r\n              hit: {\r\n                fields: [{\r\n                  node: asc4,\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }],\r\n              }\r\n            }\r\n          },\r\n        }]\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, equal, percent, prod, greaterEq, lessThan } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.premod.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: datamine.skill.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"skill.skillParams.5\"),\r\n            value: datamine.skill.cd,\r\n          }],\r\n        },],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n          conditional: {\r\n            value: condC4,\r\n            path: condC4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"constellation4\", tr, passive1),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4\"),\r\n            states: {\r\n              hit: {\r\n                fields: [{\r\n                  node: nodeC4,\r\n                },]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(-1, ...allElements.map(ele => greaterEq(tally[ele], 1, 1))), datamine.passive2.dmgInc, { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value < 1 ? `${datamine.skill.cd}s` : `${datamine.skill.cd}s - 18%`,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        description: tr(\"burst.description\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\n// import AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\n// import Beidou from './Beidou'\r\n// import Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\n// import Diluc from './Diluc'\r\n// import Diona from './Diona'\r\n// import Eula from './Eula'\r\n// import Fischl from './Fischl'\r\n// import Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\n// import HuTao from './HuTao'\r\n// import Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\n// import Keqing from './Keqing'\r\n// import Klee from './Klee'\r\n// import KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\n// import Mona from './Mona'\r\n// import Ningguang from './Ningguang'\r\n// import Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\n// import SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\n// import Venti from './Venti'\r\n// import Xiao from './Xiao'\r\n// import Xiangling from './Xiangling'\r\n// import Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\n// import Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\n// import Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  // AratakiItto,\r\n  // Barbara,\r\n  // Beidou,\r\n  // Bennett,\r\n  // Chongyun,\r\n  // Diluc,\r\n  // Diona,\r\n  // Eula,\r\n  // Fischl,\r\n  // Ganyu,\r\n  // Gorou,\r\n  // HuTao,\r\n  // Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  // Keqing,\r\n  // Klee,\r\n  // KujouSara,\r\n  // Lisa,\r\n  // Mona,\r\n  // Ningguang,\r\n  // Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  // SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  // Venti,\r\n  // Xiao,\r\n  // Xiangling,\r\n  // Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  // Yoimiya,\r\n  YunJin,\r\n  // Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["data_gen","data_gen_src","key","trans","tr","trm","a","s","b","p1","p2","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","press","cd","hold","cdHold","burst","dot","add","duration","enerCost","passive1","asorbAdd","passive2","elemas_dmg_","constellation2","elemas","constellation6","auto_","cond","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","Object","fromEntries","absorbableEle","e","condSwirls","condReadNode","asc4","ele","greaterEq","input","equal","prod","percent","condC2Path","condC2","c2EleMas","condC2PPath","condC2P","c2PEleMas","unequal","target","condC6Path","condC6","c6infusion","greaterEqStr","equalStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","dmgFormulas","map","arr","i","dmgNode","entries","value","pdmg","hit","constant","plow","phigh","customDmgNode","normal_dmg_","charged_dmg_","plunging_dmg_","nodeC3","nodeC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","staminaSprintDec_","total","eleMas","infusion","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","weaponTypeKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","infoMut","textSuffix","Translate","ns","key18","values","count","get","canShow","unit","conditional","path","st","states","eleKey","color","sgt","c2","header","conditionalHeader","description","c2p","swirl","passive3","constellation1","talentTemplate","c1","constellation3","c3","constellation4","c4","constellation5","c5","c6","CharacterSheet","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","condAfterBurstPath","condAfterBurst","afterBurst","cutting","bloom","adata","enemyDefRed_","sum","cryo_dmg_","percentArr","afterSprint","afterSkill","afterApplySprint","skillDmg","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","stam","plunge","plungeLow","plungeHigh","enerGen","er","energyGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","subscript","x","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","lookup","objectKeyMap","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","initial","resolveBonus","passive2ElecDmgBonus","condC4Path","condC4","c4AtkBonus_","burst_dmg_","electro_dmg_","atk_","skillEye","c","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","durationInc","dmg_","maxStacks","condQuillPath","condQuill","nodeSkill","condBurstPath","condBurst","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2","c4Inc","range","dmgBonus","quillDmg","all_dmgInc","cryo_enemyRes_","physical_enemyRes_","skill_dmg_","cryo_critDMG_","quill","toString","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1","c6Base","c6Bonus","slice","dmg3","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","nodeC4","nodeC6","lessThan","shield_","shield","dmgInc","triggerNum","normalInc","def_","atkSpd","nodeA4","allElements","tally","shieldNodeTalent","atkSPD_","normal_dmgInc","on","undefined","KaedeharaKazuha","KamisatoAyaka","RaidenShogun","Shenhe","Sucrose","YaeMiko","YunJin","strKey","customStringRead","subKey","typeKey"],"sourceRoot":""}