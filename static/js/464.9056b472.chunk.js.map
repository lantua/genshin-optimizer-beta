{"version":3,"file":"static/js/464.9056b472.chunk.js","mappings":"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","sources":["Components/Character/CharacterSelectionModal.tsx","ReactHooks/useCharUIData.tsx","Components/SortByButton.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/ToggleButton/WeaponToggle.tsx","PageFlex/FlexDisplay.tsx","ReactHooks/useWeapon.tsx","Util/CharacterSort.ts","Util/SortByFilters.ts"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\";\r\nimport { useContext, useMemo, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport useCharUIData from \"../../ReactHooks/useCharUIData\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ICachedCharacter } from \"../../Types/character_WR\";\r\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\r\nimport CardDark from \"../Card/CardDark\";\r\nimport CardLight from \"../Card/CardLight\";\r\nimport CloseButton from \"../CloseButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport ModalWrapper from \"../ModalWrapper\";\r\nimport SortByButton from \"../SortByButton\";\r\nimport SqBadge from \"../SqBadge\";\r\nimport { Stars } from \"../StarDisplay\";\r\nimport StatIcon from \"../StatIcon\";\r\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\r\n\r\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  newFirst?: boolean\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\r\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(sortKeys[0])\r\n  const [ascending, setascending] = useState(false)\r\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\r\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n\r\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(characterSheets), [characterSheets])\r\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\r\n    [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey]))\r\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter }, filterConfigs))\r\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number) : [],\r\n    [database, characterSheets, filter, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs])\r\n\r\n  if (!characterSheets) return null\r\n  return <ModalWrapper open={show} onClose={onHide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1} >\r\n          <Grid item>\r\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\r\n          </Grid>\r\n\r\n          <Grid item flexGrow={1} />\r\n\r\n          <Grid item >\r\n            <SortByButton sx={{ height: \"100%\" }}\r\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\r\n              ascending={ascending} onChangeAsc={setascending} />\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\r\n          <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\r\n        </Grid>)}\r\n      </Grid></CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }: { onClick: () => void, characterKey: CharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const UIDataBundle = useCharUIData(characterKey)\r\n  if (!characterSheet) return null\r\n  const rarity = characterSheet.rarity\r\n  return <CardActionArea onClick={onClick} >\r\n    <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\r\n      <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\r\n      <Box sx={{ pl: 1 }}>\r\n        <Typography><strong>{characterSheet.name}</strong></Typography>\r\n        {UIDataBundle ? <>\r\n          <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{CharacterSheet.getLevelString(UIDataBundle.data.get(input.lvl).value, UIDataBundle.data.get(input.asc).value)}</Typography>\r\n          <Typography >\r\n            <SqBadge color=\"success\">{`C${UIDataBundle.data.get(input.constellation).value}`}</SqBadge>{` `}\r\n            <SqBadge color={UIDataBundle.data.get(input.bonus.auto).value ? \"info\" : \"secondary\"}><strong >{UIDataBundle.data.get(input.total.auto).value}</strong></SqBadge>{` `}\r\n            <SqBadge color={UIDataBundle.data.get(input.bonus.skill).value ? \"info\" : \"secondary\"}><strong >{UIDataBundle.data.get(input.total.skill).value}</strong></SqBadge>{` `}\r\n            <SqBadge color={UIDataBundle.data.get(input.bonus.burst).value ? \"info\" : \"secondary\"}><strong >{UIDataBundle.data.get(input.total.burst).value}</strong></SqBadge>\r\n          </Typography>\r\n        </> : <>\r\n          <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\r\n        </>}\r\n        <small><Stars stars={rarity} colored /></small>\r\n      </Box>\r\n    </CardLight>\r\n  </CardActionArea >\r\n}\r\n","import { useContext, useEffect, useMemo } from \"react\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { common } from \"../Formula\";\r\nimport { computeUIData, dataObjForArtifact, dataObjForCharacter, dataObjForWeapon } from \"../Formula/api\";\r\nimport { ICachedArtifact } from \"../Types/artifact_WR\";\r\nimport { CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { objectMap } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport useCharacter from \"./useCharacter\";\r\nimport useForceUpdate from \"./useForceUpdate\";\r\nimport usePromise from \"./usePromise\";\r\nimport useWeapon from \"./useWeapon\";\r\n\r\n/**\r\n * @deprecated\r\n * @param characterKey\r\n * @param mainStatAssumptionLevel\r\n * @returns\r\n */\r\nexport default function useCharUIData(characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = useCharacter(characterKey)\r\n  const weapon = useWeapon(character?.equippedWeapon)\r\n\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const artifactSheetsData = usePromise(ArtifactSheet.getAllData, [])\r\n\r\n  const weaponSheet = usePromise(weapon && WeaponSheet.get(weapon.key), [weapon])\r\n  const artifacts = useMemo(() => character && database && objectMap(character.equippedArtifacts, a => database._getArt(a)), [character, database])\r\n\r\n  const [dbDirty, setDbDirty] = useForceUpdate()\r\n  //follow updates from team\r\n  const [teammate1, teammate2, teammate3] = character?.team ?? []\r\n  useEffect(() =>\r\n    teammate1 ? database.followChar(teammate1, setDbDirty) : undefined,\r\n    [teammate1, setDbDirty, database])\r\n  useEffect(() =>\r\n    teammate2 ? database.followChar(teammate2, setDbDirty) : undefined,\r\n    [teammate2, setDbDirty, database])\r\n  useEffect(() =>\r\n    teammate3 ? database.followChar(teammate3, setDbDirty) : undefined,\r\n    [teammate3, setDbDirty, database])\r\n\r\n  const dataWoArt = useMemo(() => dbDirty && character && characterSheet && weapon && weaponSheet && artifacts && artifactSheetsData && [\r\n    dataObjForCharacter(character),\r\n    characterSheet.data,\r\n    dataObjForWeapon(weapon),\r\n    weaponSheet.data,\r\n    artifactSheetsData,\r\n    common, // NEED TO PUT THIS AT THE END\r\n  ], [dbDirty, character, characterSheet, weapon, weaponSheet, artifacts, artifactSheetsData])\r\n\r\n  const data = useMemo(() => dataWoArt && artifacts && computeUIData([\r\n    ...Object.values(artifacts).filter(a => a).map(a => dataObjForArtifact(a, mainStatAssumptionLevel)),\r\n    ...dataWoArt,\r\n  ]),\r\n    [dataWoArt, artifacts, mainStatAssumptionLevel])\r\n  if (!data || !character || !characterSheet || !weapon || !weaponSheet || !artifacts || !artifactSheetsData || !database || !dataWoArt)\r\n    return undefined\r\n  return { data, character, characterSheet, weapon, weaponSheet, artifacts, artifactSheetsData, database, dataWoArt }\r\n}\r\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\r\n\r\ntype SolidColoredToggleButtonPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\r\n\r\n\r\nconst SolidColoredToggleButton = styled(ToggleButton, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '&': {\r\n    backgroundColor: theme.palette[baseColor].main,\r\n    color: theme.palette[baseColor].contrastText,\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected': {\r\n    backgroundColor: theme.palette[selectedColor].main,\r\n    color: theme.palette[selectedColor].contrastText,\r\n  },\r\n  '&.Mui-selected:hover': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n  '&.Mui-disabled': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected.Mui-disabled': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n}));\r\n\r\nexport default SolidColoredToggleButton","import { Box, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport { allElements, ElementKey } from \"../../Types/consts\";\r\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\r\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\nimport { uncoloredEleIcons } from \"../StatIcon\";\r\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: ElementKey | \"\") => void\r\n  value: ElementKey | \"\"\r\n}\r\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\r\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\r\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\r\n    </SolidColoredToggleButton>)}\r\n  </ToggleButtonGroup>\r\n}\r\n","import { ToggleButton } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: WeaponTypeKey | \"\") => void\r\n  value: WeaponTypeKey | \"\"\r\n}\r\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\r\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\r\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\r\n    </ToggleButton>)}\r\n  </SolidToggleButtonGroup>\r\n}","import { faLink } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Alert, Box, Button, ButtonGroup, Snackbar } from \"@mui/material\";\r\nimport { useCallback, useContext, useState } from \"react\";\r\nimport { Redirect, useLocation } from \"react-router-dom\";\r\nimport CharacterDisplayCard from \"../PageCharacter/CharacterDisplayCard\";\r\nimport CardDark from \"../Components/Card/CardDark\";\r\nimport { CustomNumberInputButtonGroupWrapper, StyledInputBase } from \"../Components/CustomNumberInput\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"pipeline\";\r\n\r\nexport default function FlexDisplay() {\r\n  const location = useLocation()\r\n  const database = useContext(DatabaseContext)\r\n  const sheets = {} as any\r\n  const searchStr = location.search\r\n  const charKey: CharacterKey = \"Sucrose\" // TODO: hardcoded character\r\n  if (!sheets) return null\r\n  if (searchStr) {\r\n    // const flexResult = importFlex(searchStr.substring(1))\r\n    // if (!flexResult) return <Redirect to={`/`} />\r\n    // const [database, charKey, version] = flexResult\r\n    // if (version !== 4)\r\n    //   return <Redirect to={`/flex?${exportFlex(charKey, database, sheets)}`} />\r\n    return <DatabaseContext.Provider value={database}><Display characterKey={charKey} /></DatabaseContext.Provider>\r\n  } else {\r\n    const characterKey = (location as any).characterKey\r\n    if (!characterKey) return <Redirect to={`/`} />\r\n    const flexObj = undefined// exportFlex(characterKey, database, sheets)\r\n    if (!flexObj) return <Redirect to={`/`} />\r\n    window.scrollTo(0, 0)//sometimes the window isnt scrolled to the top on redirect.\r\n    return <Redirect to={`/flex?${flexObj}`} />\r\n  }\r\n}\r\nfunction Display({ characterKey }) {\r\n  const [open, setOpen] = useState(false);\r\n  const handleClick = useCallback(() => setOpen(true), [setOpen],)\r\n  const handleClose = useCallback(\r\n    (event, reason) => {\r\n      if (reason === 'clickaway') return;\r\n      setOpen(false);\r\n    }, [setOpen])\r\n  const copyToClipboard = useCallback(() => {\r\n    const url = window.location.href\r\n    navigator.clipboard.writeText(url).then(handleClick).catch(console.error)\r\n  }, [handleClick])\r\n  const isUpToDate = false\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={theme => theme.spacing(1)} mt={1} mb={1}>\r\n    <Snackbar open={open} autoHideDuration={5000} onClose={handleClose}>\r\n      <Alert variant=\"filled\" severity=\"success\" sx={{ width: '100%' }}>\r\n        URL copied to clipboard.\r\n      </Alert>\r\n    </Snackbar>\r\n    <CardDark>\r\n      <ButtonGroup sx={{ width: \"100%\" }}>\r\n        <Button color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeIcon icon={faLink} />}>Copy URL to clipboard</Button>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n          <StyledInputBase readOnly value={window.location.href} onClick={e => {\r\n            const target = e.target as HTMLInputElement;\r\n            target.selectionStart = 0;\r\n            target.selectionEnd = target.value.length;\r\n          }} sx={{ px: 2 }} />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n      </ButtonGroup>\r\n      {!!isUpToDate && <Alert variant=\"outlined\" sx={{ m: 1, mt: 2 }} severity=\"warning\" >This URL is generated on an older database version of Genshin Optimizer. The character data below might not be displayed as intended.</Alert>}\r\n    </CardDark>\r\n    <CharacterDisplayCard characterKey={characterKey} isFlex />\r\n  </Box>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const database = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\r\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}","import CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\r\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\r\nexport type CharacterSortKey = typeof characterSortKeys[number]\r\n\r\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\r\n  return {\r\n    new: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\r\n      tieBreaker: \"name\"\r\n    },\r\n    name: {\r\n      getValue: (ck) => ck,\r\n    },\r\n    level: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\r\n      tieBreaker: \"rarity\"\r\n    },\r\n    rarity: {\r\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\r\n      tieBreaker: \"level\"\r\n    }\r\n  }\r\n}\r\n\r\nexport function characterFilterConfigs(characterSheets: Record<CharacterKey, CharacterSheet>): FilterConfigs<\"element\" | \"weaponType\", CharacterKey> {\r\n  return {\r\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\r\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\r\n  }\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\r\n}"],"names":["defaultSortKeys","CharacterSelectionModal","show","onHide","onSelect","filter","newFirst","sortKeys","useMemo","database","useContext","DatabaseContext","useState","sortBy","setsortBy","ascending","setascending","elementalFilter","setelementalFilter","weaponFilter","setweaponFilter","characterSheets","usePromise","CharacterSheet","sortConfigs","characterSortConfigs","filterConfigs","characterFilterConfigs","characterKeyList","Set","allCharacterKeys","cKey","_getChar","filterFunction","element","weaponType","sort","sortFunction","ModalWrapper","open","onClose","CardDark","CardContent","sx","py","Grid","container","spacing","item","WeaponToggle","height","onChange","value","size","flexGrow","ElementToggle","SortByButton","onChangeAsc","CloseButton","onClick","Divider","map","characterKey","xs","md","lg","CharacterBtn","characterSheet","UIDataBundle","mainStatAssumptionLevel","character","useCharacter","weapon","useWeapon","equippedWeapon","artifactSheetsData","ArtifactSheet","weaponSheet","WeaponSheet","key","artifacts","objectMap","equippedArtifacts","a","_getArt","useForceUpdate","dbDirty","setDbDirty","team","teammate1","teammate2","teammate3","useEffect","followChar","undefined","dataWoArt","dataObjForCharacter","data","dataObjForWeapon","common","computeUIData","Object","values","dataObjForArtifact","useCharUIData","rarity","CardActionArea","CardLight","display","alignItems","Box","component","src","thumbImg","width","className","pl","Typography","name","variant","elementKey","StatIcon","ImgIcon","Assets","weaponTypeKey","get","input","SqBadge","color","stars","colored","props","t","useTranslation","title","i18nKey","selected","disabled","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","palette","main","contrastText","dark","cb","useCallback","e","newVal","ToggleButtonGroup","exclusive","allElements","ele","fontSize","lineHeight","uncoloredEleIcons","allWeaponTypeKeys","wt","FlexDisplay","location","useLocation","searchStr","search","Display","to","setOpen","handleClick","handleClose","event","reason","copyToClipboard","url","window","href","navigator","clipboard","writeText","then","catch","console","error","flexDirection","gap","mt","mb","autoHideDuration","severity","faLink","flexBasis","readOnly","target","selectionStart","selectionEnd","length","px","isFlex","weaponID","_getWeapon","setWeapon","followWeapon","characterSortKeys","new","getValue","ck","tieBreaker","level","sortby","configs","Sort","b","config","aV","bV","localeCompare","filterOption","diff","filterOptions","obj","entries","every","optionKey","optionVal"],"sourceRoot":""}