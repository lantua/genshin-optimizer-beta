{"version":3,"file":"static/js/496.9f89a3c2.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/SqBadge.tsx","Database/exim/good.ts","PageSettings/Components/DownloadCard.tsx","PageSettings/Components/LanguageCard.tsx","PageSettings/Components/TCToggleCard.tsx","../node_modules/@mui/icons-material/esm/Upload.js","Database/exim/mona.ts","PageSettings/Components/UploadCard.tsx","Database/exim/go.ts","PageSettings/SettingsDisplay.tsx","ReactHooks/useForceUpdate.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/material/Alert/alertClasses.js","../node_modules/@mui/material/Alert/Alert.js","../node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js","../node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@mui/material/internal/svg-icons/ErrorOutline.js","../node_modules/@mui/material/internal/svg-icons/InfoOutlined.js","../node_modules/@mui/material/internal/svg-icons/Close.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character_WR\";\r\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { DBStorage, SandboxStorage } from \"../DBStorage\";\r\nimport { currentDBVersion } from \"../migration\";\r\nimport { setDBVersion } from \"../utils\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"../validation\";\r\n\r\nconst GOSource = \"Genshin Optimizer\" as const\r\n\r\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data, oldDatabase)\r\n  }\r\n}\r\n\r\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const source = data.source, storage = new SandboxStorage(oldDatabase.storage)\r\n  const result: ImportResult = { type: \"GOOD\", storage, source }\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (data.artifacts) {\r\n    const counter = newCounter()\r\n    const artifacts = data.artifacts.flatMap(a => {\r\n      const parsed = parseArtifact(a)\r\n      if (!parsed) counter.invalid.push(a)\r\n      return parsed ? [parsed] : []\r\n    })\r\n    const hasLocations = artifacts.some(art => art.location)\r\n    const idsToRemove = new Set(oldDatabase._getArts().map(a => a.id))\r\n    for (const artifact of artifacts) {\r\n      let { duplicated, upgraded } = oldDatabase.findDuplicates(artifact)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedArtifact | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in artifact) && key !== \"location\")\r\n            artifact[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          artifact.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) counter.unchanged++\r\n      else if (upgraded.length) counter.updated++\r\n      else counter.new++\r\n    }\r\n\r\n    counter.total = data.artifacts.length\r\n    counter.removed = idsToRemove.size\r\n    result.artifacts = counter\r\n\r\n    storage.removeForKeys(k => k.startsWith(\"artifact_\"))\r\n    artifacts.forEach((a, i) => storage.set(`artifact_${i}`, a))\r\n  }\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (data.weapons) {\r\n    const counter = newCounter()\r\n    const weapons = data.weapons.flatMap(w => {\r\n      const parsed = parseWeapon(w)\r\n      if (!parsed) counter.invalid.push(w)\r\n      return parsed ? [parsed] : []\r\n    })\r\n    const hasLocations = weapons.some(weapon => weapon.location)\r\n    const idsToRemove = new Set(oldDatabase._getWeapons().map(w => w.id))\r\n    for (const weapon of weapons) {\r\n      let { duplicated, upgraded } = oldDatabase.findDuplicateWeapons(weapon)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\r\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in weapon) && key !== \"location\")\r\n            weapon[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          weapon.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) counter.unchanged++\r\n      else if (upgraded.length) counter.updated++\r\n      else counter.new++\r\n    }\r\n\r\n    counter.total = data.weapons!.length\r\n    counter.removed = idsToRemove.size\r\n    result.weapons = counter\r\n\r\n    storage.removeForKeys(k => k.startsWith(\"weapon_\"))\r\n    weapons.forEach((w, i) => storage.set(`weapon_${i}`, w))\r\n  }\r\n\r\n  if (data.characters) {\r\n    const invalid: any[] = []\r\n    const characters = data.characters.flatMap(c => {\r\n      const old = oldDatabase._getChar(c.key) ?? {}\r\n      const parsed = parseCharacter({ ...old, ...c })\r\n      if (!parsed) invalid.push(c)\r\n      return parsed ? [parsed] : []\r\n    })\r\n    const newCharKeys = new Set(characters.map(x => x.key))\r\n    const oldCharKeys = new Set(oldDatabase._getCharKeys())\r\n\r\n    result.characters = {\r\n      total: data.characters!.length,\r\n      new: [...newCharKeys].filter(x => !oldCharKeys.has(x)).length,\r\n      updated: [...newCharKeys].filter(x => oldCharKeys.has(x)).length,\r\n      removed: [...oldCharKeys].filter(x => !newCharKeys.has(x)).length,\r\n      unchanged: 0,\r\n      invalid\r\n    }\r\n\r\n    storage.removeForKeys(k => k.startsWith(\"char_\"))\r\n    characters.forEach((c => storage.set(`char_${c.key}`, c)))\r\n  }\r\n\r\n  // We invalidate build results here because we need to do\r\n  // it regardless of whether the file has character/art data.\r\n  for (const key of storage.keys) {\r\n    if (key.startsWith(\"char_\")) {\r\n      const character = storage.get(key)\r\n      if (character.buildSettings) {\r\n        character.buildSettings.builds = []\r\n        character.buildSettings.buildDate = 0\r\n        storage.set(key, character)\r\n      }\r\n    }\r\n  }\r\n\r\n  if (source === GOSource) {\r\n    const { dbVersion, artifactDisplay, characterDisplay, buildsDisplay } = data as unknown as IGO\r\n    if (dbVersion < 8) return // Something doesn't look right here\r\n    setDBVersion(storage, dbVersion)\r\n    artifactDisplay && storage.set(\"ArtifactDisplay.state\", artifactDisplay)\r\n    characterDisplay && storage.set(\"CharacterDisplay.state\", characterDisplay)\r\n    buildsDisplay && storage.set(\"BuildsDisplay.state\", buildsDisplay)\r\n  } else {\r\n    // DO NOT CHANGE THE DB VERSION\r\n    // Standard GOODv1 matches dbv8.\r\n    setDBVersion(storage, 8)\r\n  }\r\n\r\n  new ArtCharDatabase(storage) // validate storage entries\r\n  return result\r\n}\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => {\r\n        // Invalidate build results since we won't use it on imports either\r\n        const result = JSON.parse(value)\r\n        if (result.buildSettings) {\r\n          result.buildSettings.builds = []\r\n          result.buildSettings.buildDate = 0\r\n        }\r\n        return result\r\n      }),\r\n    artifacts: storage.entries\r\n      .filter(([key]) => key.startsWith(\"artifact_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n\r\n    artifactDisplay: storage.get(\"ArtifactDisplay.state\") ?? {},\r\n    characterDisplay: storage.get(\"CharacterDisplay.state\") ?? {},\r\n    buildsDisplay: storage.get(\"BuildsDisplay.state\") ?? {},\r\n  }\r\n}\r\n\r\ntype IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: ICharacter[]\r\n  artifacts?: IArtifact[]\r\n  weapons?: IWeapon[]\r\n}\r\ntype IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  artifactDisplay: any\r\n  characterDisplay: any\r\n  buildsDisplay: any\r\n}\r\n\r\nexport type ImportResultCounter = {\r\n  total: number, // total # in file\r\n  new: number,\r\n  updated: number,\r\n  unchanged: number,\r\n  removed: number,\r\n  invalid: any[],\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  storage: DBStorage,\r\n  source: string,\r\n  artifacts?: ImportResultCounter,\r\n  weapons?: ImportResultCounter,\r\n  characters?: ImportResultCounter,\r\n}\r\nfunction newCounter(): ImportResultCounter {\r\n  return { total: 0, invalid: [], new: 0, updated: 0, unchanged: 0, removed: 0, }\r\n}\r\n","import { faClipboard, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Download } from '@mui/icons-material'\r\nimport { Button, CardContent, Divider, Grid, Typography } from '@mui/material'\r\nimport { useContext } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../../Database/Database\"\r\nimport { dbStorage } from '../../Database/DBStorage'\r\nimport { exportGOOD } from '../../Database/exim/good'\r\n\r\nfunction download(JSONstr: string, filename = \"data.json\") {\r\n  const contentType = \"application/json;charset=utf-8\"\r\n  const a = document.createElement('a');\r\n  a.download = filename\r\n  a.href = `data:${contentType},${encodeURIComponent(JSONstr)}`\r\n  a.target = \"_blank\"\r\n  document.body.appendChild(a)\r\n  a.click()\r\n  document.body.removeChild(a)\r\n}\r\n\r\nfunction deleteDatabase(t, database: ArtCharDatabase) {\r\n  if (!window.confirm(t(\"uploadCard.goUpload.deleteDatabasePrompt\"))) return\r\n  dbStorage.clear()\r\n  database.reloadStorage()\r\n}\r\nfunction copyToClipboard() {\r\n  navigator.clipboard.writeText(JSON.stringify(exportGOOD(dbStorage)))\r\n    .then(() => alert(\"Copied database to clipboard.\"))\r\n    .catch(console.error)\r\n}\r\nexport default function DownloadCard({ forceUpdate }) {\r\n  const database = useContext(DatabaseContext)\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database._getCharKeys().length\r\n  const numArt = database._getArts().length\r\n  const numWeapon = database._getWeapons().length\r\n  const downloadValid = Boolean(numChar || numArt)\r\n  const deleteDB = () => {\r\n    deleteDatabase(t, database);\r\n    forceUpdate()\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"downloadCard.databaseDownload\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container mb={2} spacing={2}>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.chars\" /> {numChar}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.arts\" /> {numArt}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.weapons\" /> {numWeapon}</Typography></Grid>\r\n      </Grid>\r\n      <Typography variant=\"caption\"><Trans t={t} i18nKey=\"downloadCard.databaseDisclaimer\" /></Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item><Button disabled={!downloadValid} onClick={() => download(JSON.stringify(exportGOOD(dbStorage)))} startIcon={<Download />}><Trans t={t} i18nKey=\"downloadCard.button.download\" /></Button></Grid>\r\n        <Grid item flexGrow={1} ><Button disabled={!downloadValid} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeIcon icon={faClipboard} />}><Trans t={t} i18nKey=\"downloadCard.button.copy\" /></Button></Grid>\r\n        <Grid item><Button disabled={!downloadValid} color=\"error\" onClick={deleteDB} startIcon={<FontAwesomeIcon icon={faTrashAlt} />}><Trans t={t} i18nKey=\"downloadCard.button.delete\" /></Button></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../../Components/SqBadge'\r\nimport { languageCodeList } from \"../../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport { GlobalSettingsContext } from \"../../GlobalSettings\";\r\n\r\nexport default function TCToggleCard() {\r\n  const { globalSettings: { tcMode }, globalSettingsDispatch } = useContext(GlobalSettingsContext)\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => globalSettingsDispatch({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import { ArtCharDatabase } from '../Database';\r\nimport { IArtifact, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { parseArtifact } from '../../Database/validation';\r\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\r\nimport { importGOOD, ImportResult } from './good';\r\n\r\nconst DefaultVersion = \"1\";\r\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: IArtifact[], invalid: any[] }> = {\r\n  \"1\": importMona1\r\n};\r\n\r\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const version = dataObj.version ?? DefaultVersion\r\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\r\n\r\n  if (!converted)\r\n    return // TODO: Maybe add failure reason, or throws here\r\n\r\n  const { artifacts, invalid } = converted\r\n\r\n  const result = importGOOD({\r\n    format: \"GOOD\",\r\n    source: \"mona-uranai\",\r\n    version: 1,\r\n    artifacts: artifacts\r\n  }, oldDatabase)\r\n  result?.artifacts!.invalid.push(...invalid)\r\n  return result\r\n}\r\n\r\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\r\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\r\n\r\nfunction importMona1(dataObj: any): { artifacts: IArtifact[], invalid: any[] } {\r\n  const invalid: any[] = [], artifacts: IArtifact[] = []\r\n\r\n  for (const property in dataObj) {\r\n    if (!(property in ArtifactSlotKeyMap))\r\n      continue\r\n\r\n    for (const genshinArtArtifact of dataObj[property]) {\r\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\r\n      const raw = {\r\n        setKey: ArtifactSetKeyMap[setName],\r\n        rarity: star,\r\n        level,\r\n        slotKey: ArtifactSlotKeyMap[position],\r\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\r\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\r\n          const key = ArtifactSubStatKeyMap[name]\r\n          return {\r\n            key,\r\n            value: key?.endsWith(\"_\") ?\r\n              Math.round(value * 1000) / 10 : // decimal to percentage\r\n              value,\r\n          }\r\n        }),\r\n      }\r\n      const flex = parseArtifact(raw)\r\n\r\n      if (!flex) {\r\n        invalid.push(raw)\r\n        continue\r\n      }\r\n\r\n      artifacts.push(flex)\r\n    }\r\n  }\r\n\r\n  return { artifacts, invalid }\r\n}\r\n\r\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\r\n\r\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\r\n  \"flower\": \"flower\",\r\n  \"feather\": \"plume\",\r\n  \"sand\": \"sands\",\r\n  \"cup\": \"goblet\",\r\n  \"head\": \"circlet\",\r\n}\r\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\r\n  // \"adventurer\": \"Adventurer\",\r\n  // \"archaicPetra\": \"ArchaicPetra\",\r\n  // \"berserker\": \"Berserker\",\r\n  // \"blizzardStrayer\": \"BlizzardStrayer\",\r\n  // \"bloodstainedChivalry\": \"BloodstainedChivalry\",\r\n  // \"braveHeart\": \"BraveHeart\",\r\n  // \"crimsonWitch\": \"CrimsonWitchOfFlames\",\r\n  // \"defenderWill\": \"DefendersWill\",\r\n  // \"gambler\": \"Gambler\",\r\n  // \"gladiatorFinale\": \"GladiatorsFinale\",\r\n  // \"heartOfDepth\": \"HeartOfDepth\",\r\n  // \"instructor\": \"Instructor\",\r\n  // \"lavaWalker\": \"Lavawalker\",\r\n  // \"luckyDog\": \"LuckyDog\",\r\n  // \"maidenBeloved\": \"MaidenBeloved\",\r\n  // \"martialArtist\": \"MartialArtist\",\r\n  // \"noblesseOblige\": \"NoblesseOblige\",\r\n  // \"prayersForDestiny\": \"PrayersForDestiny\",\r\n  // \"prayersForIllumination\": \"PrayersForIllumination\",\r\n  // \"prayersForWisdom\": \"PrayersForWisdom\",\r\n  // \"prayersToSpringtime\": \"PrayersToSpringtime\",\r\n  // \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\r\n  // \"retracingBolide\": \"RetracingBolide\",\r\n  // \"scholar\": \"Scholar\",\r\n  // \"exile\": \"TheExile\",\r\n  // \"thunderingFury\": \"ThunderingFury\",\r\n  // \"thunderSmoother\": \"Thundersoother\",\r\n  // \"tinyMiracle\": \"TinyMiracle\",\r\n  // \"travelingDoctor\": \"TravelingDoctor\",\r\n  \"viridescentVenerer\": \"ViridescentVenerer\",\r\n  // \"wandererTroupe\": \"WanderersTroupe\",\r\n  // \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\r\n  // \"paleFlame\": \"PaleFlame\",\r\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\r\n  // \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\r\n  // \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\r\n  // \"oceanHuedClam\": \"OceanHuedClam\",\r\n}\r\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\r\n  \"cureEffect\": \"heal_\",\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  // \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  // // \"eCritical\": \"\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n  \"thunderBonus\": \"electro_dmg_\",\r\n  \"fireBonus\": \"pyro_dmg_\",\r\n  \"waterBonus\": \"hydro_dmg_\",\r\n  \"iceBonus\": \"cryo_dmg_\",\r\n  \"windBonus\": \"anemo_dmg_\",\r\n  \"rockBonus\": \"geo_dmg_\",\r\n  // \"grassBonus\": \"dendro_dmg_\",  // the day will come...\r\n  \"physicalBonus\": \"physical_dmg_\",\r\n  // \"bonus\": \"\",\r\n  // \"aBonus\": \"\",\r\n  // \"bBonus\": \"\",\r\n  // \"eBonus\": \"\",\r\n  // \"qBonus\": \"\",\r\n}\r\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Upload } from '@mui/icons-material'\r\nimport { Alert, Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\r\nimport { useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../../Components/Card/CardDark'\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport { DatabaseContext } from \"../../Database/Database\"\r\nimport { dbStorage } from '../../Database/DBStorage'\r\nimport { importGO, ImportResult as GOImportResult } from '../../Database/exim/go'\r\nimport { importGOOD, ImportResult as GOODImportResult, ImportResultCounter } from '../../Database/exim/good'\r\nimport { importMona } from '../../Database/exim/mona'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ forceUpdate }) {\r\n  const database = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const dataObj: UploadData | undefined = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\r\n      // Parse as mona format\r\n      const imported = importMona(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (\"version\" in parsed && \"characterDatabase\" in parsed && \"artifactDatabase\" in parsed) {\r\n      // Parse as GO format\r\n      const imported = importGO(parsed)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database])\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    forceUpdate()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {UploadInfo(dataObj) ?? errorMsg}\r\n    </CardContent>\r\n    {UploadAction(dataObj, reset)}\r\n  </CardLight>\r\n}\r\n\r\nfunction UploadInfo(data: UploadData | undefined) {\r\n  switch (data?.type) {\r\n    case \"GO\": return <GOUploadInfo data={data} />\r\n    case \"GOOD\": return <GOODUploadInfo data={data} />\r\n  }\r\n}\r\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\r\n  switch (data?.type) {\r\n    case \"GO\":\r\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\r\n  }\r\n}\r\n\r\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: GOODImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result?: ImportResultCounter, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  if (!result) return null\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged}</strong> / {result.total}</Typography>\r\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction GOUploadInfo({ data: { charCount, artCount } }: { data: GOImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Trans t={t} i18nKey=\"uploadCard.goUpload.title\" />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent><Grid container spacing={1}>\r\n      <Grid item xs={12} md={6}> <Typography><Trans t={t} i18nKey=\"count.chars\" /> {charCount}</Typography></Grid>\r\n      <Grid item xs={12} md={6}> <Typography><Trans t={t} i18nKey=\"count.arts\" /> {artCount}</Typography></Grid>\r\n      {<Grid item xs={12} ><Alert severity=\"warning\" ><Trans t={t} i18nKey=\"uploadCard.goUpload.migrate\" /></Alert></Grid>}\r\n    </Grid></CardContent>\r\n  </CardDark>\r\n}\r\n\r\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: GOImportResult | GOODImportResult, reset: () => void }) {\r\n  const database = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const dataValid = data.type === \"GO\" ? data.charCount || data.artCount : (data.characters?.total || data.artifacts?.total || data.weapons?.total)\r\n  const replaceDB = () => {\r\n    dbStorage.removeForKeys(k => k.startsWith(\"artifact_\") || k.startsWith(\"char_\") || k.startsWith(\"weapon_\"))\r\n    dbStorage.copyFrom(storage)\r\n    database.reloadStorage()\r\n    reset()\r\n  }\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n\r\ntype UploadData = GOImportResult | GOODImportResult","import { IArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character_WR\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { DBStorage, SandboxStorage } from \"../DBStorage\";\r\nimport { setDBVersion } from \"../utils\";\r\n\r\nexport function importGO(data: any): ImportResult | undefined {\r\n  const storage = new SandboxStorage()\r\n  const { version, characterDatabase, artifactDatabase, artifactDisplay, characterDisplay, buildsDisplay } = data as Partial<DatabaseObj>\r\n  if (!version || !characterDatabase || !artifactDatabase)\r\n    return\r\n\r\n  characterDatabase && Object.entries(characterDatabase).forEach(([charKey, char]) => storage.set(`char_${charKey}`, char))\r\n  artifactDatabase && Object.entries(artifactDatabase).forEach(([id, art]) => storage.set(id, art))\r\n  //override version\r\n  version && setDBVersion(storage, version)\r\n  artifactDisplay && storage.set(\"ArtifactDisplay.state\", artifactDisplay)\r\n  characterDisplay && storage.set(\"CharacterDisplay.state\", characterDisplay)\r\n  buildsDisplay && storage.set(\"BuildsDisplay.state\", buildsDisplay)\r\n\r\n  const database = new ArtCharDatabase(storage) // validate storage entries\r\n  //TODO: figure out the # of dups/upgrades/new/foddered, not just total char/art count below.\r\n  return { type: \"GO\", storage, charCount: database.chars.keys.length, artCount: database.arts.keys.length }\r\n}\r\n\r\ntype DatabaseObj = {\r\n  version: number,\r\n  characterDatabase: Dict<CharacterKey, ICharacter>\r\n  artifactDatabase: Dict<string, IArtifact>\r\n  artifactDisplay: any\r\n  characterDisplay: any\r\n  buildsDisplay: any\r\n}\r\nexport type ImportResult = { type: \"GO\", storage: DBStorage, charCount: number, artCount: number }\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate'\r\nimport DownloadCard from './Components/DownloadCard'\r\nimport LanguageCard from './Components/LanguageCard'\r\nimport TCToggleCard from './Components/TCToggleCard'\r\nimport UploadCard from './Components/UploadCard'\r\n\r\nexport default function SettingsDisplay() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const [, forceUpdate] = useForceUpdate()\r\n  ReactGA.pageview('/setting')\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DownloadCard forceUpdate={forceUpdate} />\r\n      <UploadCard forceUpdate={forceUpdate} />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _CloseIcon;\n\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    backgroundColor: getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${theme.palette[color].light}`,\n    [`& .${alertClasses.icon}`]: {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && {\n    color: '#fff',\n    fontWeight: theme.typography.fontWeightMedium,\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main\n  });\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose,\n        children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {\n          fontSize: \"small\"\n        }))\n      })\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","DropdownButton","title","children","id","props","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","SqBadge","name","slot","color","display","padding","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","verticalAlign","borderRadius","contrastText","GOSource","importGOOD","data","oldDatabase","version","source","storage","SandboxStorage","result","type","artifacts","counter","total","invalid","new","updated","unchanged","removed","flatMap","a","parsed","parseArtifact","push","hasLocations","some","art","location","idsToRemove","Set","_getArts","map","artifact","findDuplicates","duplicated","upgraded","filter","has","match","key","delete","length","size","removeForKeys","k","startsWith","forEach","i","set","weapons","w","parseWeapon","weapon","_getWeapons","findDuplicateWeapons","characters","c","old","_getChar","parseCharacter","newCharKeys","x","oldCharKeys","_getCharKeys","keys","character","get","buildSettings","builds","buildDate","dbVersion","artifactDisplay","characterDisplay","buildsDisplay","setDBVersion","ArtCharDatabase","importGOOD1","exportGOOD","format","currentDBVersion","entries","value","JSON","parse","copyToClipboard","navigator","clipboard","writeText","stringify","dbStorage","then","alert","catch","console","error","DownloadCard","forceUpdate","database","useContext","DatabaseContext","t","useTranslation","numChar","numArt","numWeapon","downloadValid","CardContent","sx","py","Typography","variant","Trans","i18nKey","Divider","Grid","container","mb","spacing","item","xs","md","Button","disabled","JSONstr","filename","contentType","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","startIcon","Download","flexGrow","icon","faClipboard","window","confirm","reloadStorage","deleteDatabase","faTrashAlt","LanguageCard","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","fullWidth","language","languageCodeList","MenuItem","selected","TCToggleCard","GlobalSettingsContext","tcMode","globalSettings","globalSettingsDispatch","gutterBottom","CheckBox","CheckBoxOutlineBlank","createSvgIcon","_jsx","d","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","flex","InvisInput","UploadCard","setdata","setfilename","errorMsg","setErrorMsg","useMemo","e","Object","includes","imported","converted","importMona","characterDatabase","artifactDatabase","charKey","char","charCount","chars","artCount","arts","importGO","onUpload","file","files","reader","FileReader","onload","readAsText","htmlFor","accept","onChange","component","Upload","px","faFileCode","faArrowLeft","Box","fontFamily","minHeight","resize","UploadInfo","UploadAction","GOUploadInfo","GOODUploadInfo","reset","GOUploadAction","MergeResult","Alert","severity","dataValid","faFileUpload","SettingsDisplay","useForceUpdate","ReactGA","my","flexDirection","gap","stateDirty","update","getAlertUtilityClass","generateUtilityClass","_CloseIcon","generateUtilityClasses","_excluded","AlertRoot","Paper","overridesResolver","styles","ownerState","root","capitalize","getColor","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","light","alertClasses","border","fontWeightMedium","dark","AlertIcon","marginRight","opacity","AlertMessage","message","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","ErrorOutlineIcon","info","InfoOutlinedIcon","React","inProps","ref","useThemeProps","className","closeText","iconMapping","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsxs","elevation","clsx","IconButton","CloseIcon","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}