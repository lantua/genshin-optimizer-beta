{"version":3,"file":"static/js/284.632a8287.chunk.js","mappings":"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","sources":["Data/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\n\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg_ = equal(condPassive, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: burst_dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st('hitOp.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\n\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def)\r\nconst charged_dmgInc = prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { //\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 5), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: all_dmg_stack\r\n          }, {\r\n            text: trm(\"takeMoreDmg\"),\r\n            value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n            unit: \"%\"\r\n          }]\r\n        })),\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: <Translate ns=\"weapon_SongOfBrokenPines\" key18=\"name\" />,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: atk_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm('condName'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atkTeam_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import Akuoumaru from './Akuoumaru'\r\n// import BlackcliffSlasher from './BlackcliffSlasher'\r\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\r\n// import DebateClub from './DebateClub'\r\n// import FavoniusGreatsword from './FavoniusGreatsword'\r\n// import FerrousShadow from './FerrousShadow'\r\nimport KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\r\n// import LithicBlade from './LithicBlade'\r\nimport LuxuriousSeaLord from './LuxuriousSeaLord'\r\n// import OldMercsPal from './OldMercsPal'\r\nimport PrototypeArchaic from './PrototypeArchaic'\r\n// import Rainslasher from './Rainslasher'\r\nimport RedhornStonethresher from \"./RedhornStonethresher\";\r\n// import RoyalGreatsword from './RoyalGreatsword'\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\";\r\n import SerpentSpine from './SerpentSpine'\r\n// import SkyriderGreatsword from './SkyriderGreatsword'\r\n// import SkywardPride from './SkywardPride'\r\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\";\r\n// import TheBell from './TheBell'\r\n// import TheUnforged from './TheUnforged'\r\nimport WasterGreatsword from \"./WasterGreatsword\";\r\n// import Whiteblind from './Whiteblind'\r\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\r\nimport WolfsGravestone from \"./WolfsGravestone\";\r\nconst claymore = {\r\n  // Akuoumaru,\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  // DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  KatsuragikiriNagamasa,\r\n  // LithicBlade,\r\n  LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  PrototypeArchaic,\r\n  // Rainslasher,\r\n  RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  // SkywardPride,\r\n  // SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  // TheBell,\r\n  // TheUnforged,\r\n  WasterGreatsword,\r\n  // Whiteblind,\r\n  // WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const;\r\nexport default claymore;\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\n\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk))\r\nconst dmg = equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: st('takeDmg'),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"soul\")),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"cd\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: trm(\"name\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmgInc\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: st(\"duration\"),\r\n            value: 12,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [\r\n      { node: infoMut(dmg_, { key: \"sheet:dmg\" }) },\r\n      {\r\n        text: sgt(\"cd\"),\r\n        value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n        unit: \"s\"\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"milMove\")),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"sigilsConsumed\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      name: st(\"morePercentHP\", { percent: 90 }),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: critRate_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states:\r\n        Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\n\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\n\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele})\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return {node: passive_dmg_[`${ele}_dmg_`]}\r\n      })\r\n    ],\r\n    conditional: { // Stacks - Mistsplitter's Emblem\r\n      value: condNode,\r\n      path: condPath,\r\n      name: trm(\"emblem\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"emblem\")),\r\n      states: Object.fromEntries(\r\n        stacks.map(stack => [stack, {\r\n          name: st(\"stack\", { count: parseInt(stack) }),\r\n          fields: allElements.map(ele => ({\r\n            node: stacks_dmg_[`${ele}_dmg_`]\r\n          }))\r\n        }])\r\n      )\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst [tr, ] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\n\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"onHit\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: def_ }, { text: sgt(\"duration\"), value: 6, unit: \"s\" }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\n\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"might\")),\r\n      description: conditionaldesc(tr),\r\n      name: st('afterUse.burst'),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: moveSPD_\r\n          }, {\r\n            node: atkSPD_\r\n          }, {\r\n            node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, st(\"stacks\")),\r\n      name: st(\"hits\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => \r\n        [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]\r\n      )),\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condWithShield,\r\n      path: condWithShieldPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken, trm(\"shield\")),\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        protected: {\r\n          fields: [{\r\n            text: trm(\"atkEffInc\"),\r\n            value: 100,\r\n            unit: \"%\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, constant(66))\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [\r\n      {\r\n        node: atk\r\n      },\r\n      {\r\n        node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n      }\r\n    ]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst [tr] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken),\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst [tr] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\n\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fieldsHeader: conditionalHeader(tr, icon, iconAwaken),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import AmenomaKageuchi from \"./AmenomaKageuchi\";\r\nimport AquilaFavonia from \"./AquilaFavonia\";\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\";\r\nimport CinnabarSpindle from \"./CinnabarSpindle\";\r\nimport CoolSteel from \"./CoolSteel\";\r\nimport DarkIronSword from \"./DarkIronSword\";\r\nimport DullBlade from \"./DullBlade\";\r\nimport FavoniusSword from \"./FavoniusSword\";\r\nimport FesteringDesire from \"./FesteringDesire\";\r\nimport FilletBlade from \"./FilletBlade\";\r\nimport FreedomSworn from \"./FreedomSworn\";\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\";\r\nimport IronSting from \"./IronSting\";\r\nimport LionsRoar from \"./LionsRoar\";\r\nimport MistsplitterReforged from \"./MistsplitterReforged\";\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\";\r\nimport PrototypeRancour from \"./PrototypeRancour\";\r\nimport RoyalLongsword from \"./RoyalLongsword\";\r\nimport SacrificialSword from \"./SacrificialSword\";\r\nimport SilverSword from \"./SilverSword\";\r\nimport SkyriderSword from \"./SkyriderSword\";\r\nimport SkywardBlade from \"./SkywardBlade\";\r\nimport SummitShaper from \"./SummitShaper\";\r\nimport SwordOfDescension from \"./SwordOfDescension\";\r\nimport TheAlleyFlash from \"./TheAlleyFlash\";\r\nimport TheBlackSword from \"./TheBlackSword\";\r\nimport TheFlute from \"./TheFlute\";\r\nimport TravelersHandySword from \"./TravelersHandySword\";\r\nconst sword = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const;\r\nexport default sword;\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n}))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  hit\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        \"oneOrNone\": {\r\n          name: trm(\"opponents.oneOrNone\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n        \"moreThanOne\": {\r\n          name: trm(\"opponents.moreThanOne\"),\r\n          fields: [{ node: atk_ }, { node: def_ }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\n// TODO: Current GO has the DMG as physical so changed this accordingly\r\n// Not sure if it truly should be physical or not though\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: st(\"member\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: st(\"afterUse.skill\"),\r\n      states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1_ = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2_ = equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" })\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1_, atk2_)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1_, { key: \"atk\" })\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk2_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\n\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(atkInc, i)),\r\n  ...objectKeyValueMap(range(1, 5), i => [`w${i}`, prod(atkInc, i, 2)]),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 5), i => ({\r\n          name: trm(\"stackWithoutShield\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        })),\r\n        ...objectKeyValueMap(range(1, 5), i => [`w${i}`, {\r\n          name: trm(\"stackWithShield\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }]),\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet, conditionalHeader, conditionaldesc } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i)) \r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n        name: `${c}s`,\r\n        fields: [{\r\n          node: all_dmg_\r\n        }], \r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [\r\n      { node: normal_dmg_ },\r\n      { node: charged_dmg_ },\r\n    ],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_arrow_\r\n        }, {\r\n          node: charged_dmg_arrow_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, subscript, prod, naught } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, sgt } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i)) \r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n        name: `${c}`,\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: 's'\r\n        }], \r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i)) \r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i)) \r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n        name: `${i}`,\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: atkSPD_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas: sum(eleMas, eleMas2),\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: eleMas2\r\n          }, {\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_passive\r\n          }, {\r\n            node: charged_passive\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\n\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") }})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst [tr] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skill\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condSkill,\r\n      path: condSkillPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"party\"),\r\n      states: Object.fromEntries(energyRange.map(i => [i, {\r\n        name: i.toString(),\r\n        fields: [{ node: burst_dmg_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atk_\r\n        }]\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, prod, naught, constant, percent, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i)) \r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i)) \r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", constant(66))\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"hitOp.cryo\"),\r\n      states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n        name: `${c}`,\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }], \r\n      }]))\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\n\r\nconst healing = customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i)) \r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: `${i}`,\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, percent, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\n\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") }})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_atk_increase_s = [.46, .52, .58, .64, .70] // Increased by 10% to counteract the decrease\r\nconst charged_atk_increase_s = [.46, .52, .58, .64, .70]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_atk_increase_s), { key: \"normal_dmg_\" })\r\nconst charged_atk_increase = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_atk_increase_s), { key: \"charged_dmg_\" })\r\nconst normal_atk_decrease = percent(.1, { key: \"normal_dmg_\" })\r\nconst charged_atk_decrease = percent(.1, { key: \"charged_dmg_\" })\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_atk_increase, normal_atk_decrease),\r\n    charged_dmg_: sum(charged_atk_increase, normal_atk_decrease)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: normal_atk_decrease\r\n    }, {\r\n      node: charged_atk_decrease\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: normal_atk_increase\r\n          }, {\r\n            node: charged_atk_increase\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript, prod, infoMut } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\n\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") }})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 3), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript, equal } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.skill\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: 's'\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\";\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\";\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\";\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\";\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport WindblumeOde from './WindblumeOde'\r\nconst bow = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  WindblumeOde,\r\n} as const;\r\nexport default bow;\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      charged_dmg_,\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      name: st(\"hitOp.normal\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: charged_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    conditional: {\r\n      value: condCharged,\r\n      path: condChargedPath,\r\n      name: st(\"hitOp.charged\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { \r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, { \r\n  normal_dmgInc \r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\n\r\nconst dmg_ = customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\n\r\nconst dmgAoe = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst dmgOnCryoOp = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\r\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\r\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\r\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\r\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\r\n\r\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, lookup(condPassive, { \"anemo\": eleDmg, \"cryo\": eleDmg, \"geo\": eleDmg, \"hydro\": eleDmg, \"pyro\": eleDmg }, naught))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: <Translate ns=\"weapon_HakushinRing\" key18=\"afterElectroReaction\" />,\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        anemo: {\r\n          name: <ColorText color=\"anemo\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        cryo: {\r\n          name: <ColorText color=\"cryo\">{sgt(\"reaction.Superconduct\")}</ColorText>,\r\n          fields: [{\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        geo: {\r\n          name: <ColorText color=\"geo\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n          fields: [{\r\n            node: geo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        pyro: {\r\n          name: <ColorText color=\"pyro\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n          fields: [{\r\n            node: pyro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        hydro: {\r\n          name: <ColorText color=\"hydro\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n          fields: [{\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 6,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\n\r\nconst skill_dmg_s = range(1, 3).map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\n\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: \"Kagura Dance\",\r\n      states: {\r\n        1: {\r\n          name: \"1\",\r\n          fields: [{ node: skill_dmg_s[0] }]\r\n        },\r\n        2: {\r\n          name: \"2\",\r\n          fields: [{ node: skill_dmg_s[1] }]\r\n        },\r\n        3: {\r\n          name: \"3\",\r\n          fields: [{ node: skill_dmg_s[2], },\r\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.12, 0.15, 0.18, 0.21, 0.24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s)\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: moveSPD_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 4), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n      }))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: objectKeyMap(range(1, 2), i => ({\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }))\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(atkInc, i)),\r\n  ...objectKeyValueMap(range(1, 5), i => [`w${i}`, prod(atkInc, i, 2)]),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        ...objectKeyMap(range(1, 5), i => ({\r\n          name: trm(\"stackWithoutShield\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        })),\r\n        ...objectKeyValueMap(range(1, 5), i => [`w${i}`, {\r\n          name: trm(\"stackWithShield\", { count: i }),\r\n          fields: [{\r\n            node: atkStacks\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 8,\r\n            unit: \"s\"\r\n          }]\r\n        }])\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"afterUse.skill\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{ node: critRate_ }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { equal, percent } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Composed\")\r\nconst cdRed_ = equal(condPassive, 'on', percent(1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    cdRed_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: cdRed_\r\n          },]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        normal: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            node: burst_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, { \r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: st(\"hitOp.skillOrBurst\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    anemo_dmg_,\r\n    cryo_dmg_,\r\n    electro_dmg_,\r\n    geo_dmg_,\r\n    hydro_dmg_,\r\n    pyro_dmg_,\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\r\n      states: {\r\n        aria: {\r\n          name: trm(\"aria\"),\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            node: geo_dmg_\r\n          }, {\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        interlude: {\r\n          name: trm(\"interlude\"),\r\n          fields: [{\r\n            node: eleMas\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        recitative: {\r\n          name: trm(\"recitative\"),\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_ = equal(input.activeCharKey, target.charKey, equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm('condName'),\r\n      canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: moveSPD_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterSprint\"),\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 5,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import ApprenticesNotes from './ApprenticesNotes'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst = {\r\n  ApprenticesNotes,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["st","strKey","values","ns","key18","sgt","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","Error","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","skill_dmg_","data","sheet","icon","iconAwaken","document","fields","node","WeaponSheet","tr","burst_dmg_","condPassivePath","condPassive","dmg_","equal","customDmgNode","hit","ele","conditional","teamBuff","header","conditionalHeader","description","conditionaldesc","name","states","on","def_","normal_dmgInc","charged_dmgInc","trm","cdRed_","percent","takeDMG_s","all_dmg_","all_dmg_stack","lookup","objectKeyMap","range","i","naught","count","text","get","unit","atk_","atkTeam_","atkSPD_","Translate","claymore","KatsuragikiriNagamasa","LuxuriousSeaLord","PrototypeArchaic","RedhornStonethresher","SacrificialGreatsword","SerpentSpine","SongOfBrokenPines","WasterGreatsword","WolfsGravestone","condPath","condNode","addProps","NaN","heal","dmg","fieldsHeader","variant","opponentsDefeated","c","skill_dmgInc","skill_critRate_","cd_Src","undefined","normal_dmg_","charged_dmg_","plunging_dmg_","critRate_","eleDmgDealtStack","stacks","passiveRefine","stacksRefine","passive_dmg_","allElements","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","condStackPath","condStack","bonusInc","crit_","moveSPD_","shield_","condWithShieldPath","condWithShield","atkInc","atkStacks","protected","autoSrc","customHealNode","sword","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","dmg_Nodes","e","matchFull","atkDefInc","dmgAoe","dmgOnCryoOp","min","enerRech_","critInc","dmgInc","atk1_","atk2_","burst_critRate_","objectKeyValueMap","energyRange","ratio","max","toString","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","atk_s","atkSPD_s","eleMas","eleMas2","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","normal_atk_increase","charged_atk_increase","normal_atk_decrease","charged_atk_decrease","refinementVals","bow","AlleyHunter","AmosBow","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FavoniusWarbow","Hamayumi","HuntersBow","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","WindblumeOde","condChargedPath","condCharged","heal_","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","electro_dmg_","canShow","anemo","color","cryo","geo","pyro","hydro","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","catalyst"],"sourceRoot":""}