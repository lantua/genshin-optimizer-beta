{"version":3,"sources":["Data/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Data/Characters/KaedeharaKazuha/Character_Kazuha_Card.png","Data/Characters/KaedeharaKazuha/Icon.png","Data/Characters/KaedeharaKazuha/IconSide.png","Data/Characters/KaedeharaKazuha/Banner.png","Data/Characters/KaedeharaKazuha/constellation1.png","Data/Characters/KaedeharaKazuha/constellation2.png","Data/Characters/KaedeharaKazuha/constellation3.png","Data/Characters/KaedeharaKazuha/constellation4.png","Data/Characters/KaedeharaKazuha/constellation5.png","Data/Characters/KaedeharaKazuha/constellation6.png","Data/Characters/KaedeharaKazuha/skill.png","Data/Characters/KaedeharaKazuha/burst.png","Data/Characters/KaedeharaKazuha/passive1.png","Data/Characters/KaedeharaKazuha/passive2.png","Data/Characters/KaedeharaKazuha/passive3.png","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Shenhe/Character_Shenhe_Card.jpg","Data/Characters/Shenhe/Icon.png","Data/Characters/Shenhe/IconSide.png","Data/Characters/Shenhe/Banner.png","Data/Characters/Shenhe/constellation1.png","Data/Characters/Shenhe/constellation2.png","Data/Characters/Shenhe/constellation3.png","Data/Characters/Shenhe/constellation4.png","Data/Characters/Shenhe/constellation5.png","Data/Characters/Shenhe/constellation6.png","Data/Characters/Shenhe/skill.png","Data/Characters/Shenhe/burst.png","Data/Characters/Shenhe/passive1.png","Data/Characters/Shenhe/passive2.png","Data/Characters/Shenhe/passive3.png","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/Character_Sucrose_Card.jpg","Data/Characters/Sucrose/Icon.png","Data/Characters/Sucrose/IconSide.png","Data/Characters/Sucrose/Banner.png","Data/Characters/Sucrose/constellation1.png","Data/Characters/Sucrose/constellation2.png","Data/Characters/Sucrose/constellation3.png","Data/Characters/Sucrose/constellation4.png","Data/Characters/Sucrose/constellation5.png","Data/Characters/Sucrose/constellation6.png","Data/Characters/Sucrose/skill.png","Data/Characters/Sucrose/burst.png","Data/Characters/Sucrose/passive1.png","Data/Characters/Sucrose/passive2.png","Data/Characters/Sucrose/passive3.png","Data/Characters/Sucrose/index.tsx","Data/Characters/index.ts"],"names":["st","strKey","ns","key18","sgt","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","absorbableEle","charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","allSubstats","input","total","getTalentType","move","singleDmgNode","base","multiplier","additional","data","hit","dmg","mergeData","prod","constant","dmgNode","lvlMultiplier","talentType","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","lvl","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","asc","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","Error","special","allMainStatKeys","inferInfoMut","critRate_","cappedCritRate","data_gen","data_gen_src","tr","trm","a","s","b","p1","p2","datamine","normal","hitArr","skillParam_gen","auto","charged","dmg1","dmg2","stamina","plunging","low","high","skill","press","cd","hold","cdHold","burst","dot","add","duration","enerCost","passive1","asorbAdd","passive2","elemas_dmg_","constellation2","elemas","constellation6","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","fromEntries","e","condSwirls","asc4","ele","threshold_add","match","percent","eleMas","condC2Path","condC2","c2EleMas","constellation","condC2PPath","condC2P","c2PEleMas","unmatch","target","condC6Path","condC6","c6infusion","threshold","matchFull","undefined","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","dmgFormulas","arr","i","entries","pdmg","plow","phigh","normal_dmg_","charged_dmg_","plunging_dmg_","bonus","staminaSprintDec_","infusion","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","img","normalSrc","sections","text","fields","_","node","textSuffix","Translate","count","get","canShow","unit","conditional","states","eleKey","color","c2","header","conditionalHeader","description","c2p","swirl","passive3","constellation1","talentTemplate","c1","constellation3","c3","constellation4","c4","constellation5","c5","c6","CharacterSheet","dmgAtk_","durationHold","trigger","triggerHold","res_","cryo_dmg_","press_dmg_","durationPress","hold_dmg_","durationInc","condQuillPath","condQuill","quillDmg","atk","skillIndex","condBurstPath","condBurst","enemyRes_","burstIndex","cryo_enemyRes_","physical_enemyRes_","condAsc1Path","condAsc1","asc1Buff","activeCharKey","condAsc4Path","condAsc4","buffAsc4Press","buffAsc4Press_skill_dmg_","buffAsc4Press_burst_dmg_","buffAsc4Hold","buffAsc4Hold_normal_dmg_","buffAsc4Hold_charged_dmg_","buffAsc4Hold_plunging_dmg_","con2Buff","all_dmgInc","skill_dmg_","burst_dmg_","quill","field","characterKey","dmg_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1","c6Base","c6Bonus","percentArr","characters","KaedeharaKazuha","Shenhe","Sucrose"],"mappings":"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","file":"static/js/20.b3d861b8.chunk.js","sourcesContent":["import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\n  ]\n}\n","import { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, infoMut, prod, subscript, sum } from \"../../Formula/utils\";\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\ncommonBasic.critRate_ = input.total.cappedCritRate\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\nexport function singleDmgNode(base: MainStatKey, multiplier: number, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: {\n      base: prod(input.total[base], multiplier,),\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\n    },\n  }, additional]))\n}\n\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return data(input.hit.dmg, mergeData([{\n    hit: {\n      base: prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]),\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\n    },\n  }, additional]))\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","export default __webpack_public_path__ + \"static/media/Character_Kazuha_Card.0dd97246.png\";","export default __webpack_public_path__ + \"static/media/Icon.fc7d5d73.png\";","export default __webpack_public_path__ + \"static/media/IconSide.409d7442.png\";","export default __webpack_public_path__ + \"static/media/Banner.d334fcb1.png\";","export default __webpack_public_path__ + \"static/media/constellation1.eba05def.png\";","export default __webpack_public_path__ + \"static/media/constellation2.99f250de.png\";","export default __webpack_public_path__ + \"static/media/constellation3.fe15c23c.png\";","export default __webpack_public_path__ + \"static/media/constellation4.4be95339.png\";","export default __webpack_public_path__ + \"static/media/constellation5.4f5bb9fc.png\";","export default __webpack_public_path__ + \"static/media/constellation6.b8d04a02.png\";","export default __webpack_public_path__ + \"static/media/skill.fe15c23c.png\";","export default __webpack_public_path__ + \"static/media/burst.c0346e9f.png\";","export default __webpack_public_path__ + \"static/media/passive1.37e9f644.png\";","export default __webpack_public_path__ + \"static/media/passive2.98be404f.png\";","export default __webpack_public_path__ + \"static/media/passive3.b4e1fa9b.png\";","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { Translate } from '../../../Components/Translate'\nimport { input, target } from '../../../Formula'\nimport { constant, infoMut, match, matchFull, percent, prod, threshold, threshold_add, unmatch } from '../../../Formula/utils'\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode, singleDmgNode } from '../dataUtil'\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"KaedeharaKazuha\"\nconst [tr, trm] = trans(\"char\", key)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3.1\n      skillParam_gen.auto[a++], // 3.2\n      skillParam_gen.auto[a++], // 4\n      skillParam_gen.auto[a++], // 5x3\n    ]\n  },\n  charged: {\n    dmg1: skillParam_gen.auto[a++],\n    dmg2: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n    hold: skillParam_gen.skill[s++],\n    cdHold: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    dot: skillParam_gen.burst[b++],\n    add: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    asorbAdd: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    elemas: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    auto_: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\n\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\n\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\n  [`${ele}_dmg_`, threshold_add(input.asc, 4,\n    match(\"swirl\", condSwirls[ele],\n      // TODO: this percent of 0.04% is displayed as 0.0%\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\n    ))]))\n\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\nconst [condC2Path, condC2] = cond(key, \"c2\")\nconst c2EleMas = threshold_add(input.constellation, 2,\n  match(\"c2\", condC2, datamine.constellation2.elemas), { key: `eleMas` })\n\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\nconst c2PEleMas = threshold_add(input.constellation, 2,\n  match(\"c2p\", condC2P,\n    unmatch(target.charKey, key, datamine.constellation2.elemas)\n  ), { key: `eleMas` })\n\nconst [condC6Path, condC6] = cond(key, \"c6\")\nconst c6infusion = threshold(input.constellation, 6,\n  matchFull(\"c6\", condC6, \"anemo\", undefined),\n  undefined\n)\nconst c6Dmg_ = threshold_add(input.constellation, 6,\n  match(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\n)\n// Share `match` and `prod` between the three nodes\nconst c6NormDmg_ = { ...c6Dmg_ }\nconst c6ChargedDmg_ = { ...c6Dmg_ }\nconst c6PlungingDmg_ = { ...c6Dmg_ }\n\nconst passive = percent(0.2)\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n    ...Object.fromEntries(absorbableEle.map(key =>\n      [key, match(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\n  },\n  passive1: Object.fromEntries(absorbableEle.map(key =>\n    [key, match(condSkillAbsorption, key, singleDmgNode(\"atk\", datamine.passive1.asorbAdd, \"plunging\", { hit: { ele: constant(key) } }))])),\n  constellation6: {\n    normal_dmg_: c6NormDmg_,\n    charged_dmg_: c6ChargedDmg_,\n    plunging_dmg_: c6PlungingDmg_,\n  }\n}\n\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: threshold_add(input.constellation, 3, 3),\n    burst: threshold_add(input.constellation, 5, 3),\n  },\n  teamBuff: {\n    premod: {\n      ...asc4,\n      staminaSprintDec_: passive,\n    },\n    total: {\n      eleMas: c2PEleMas,\n    },\n  },\n  infusion: c6infusion,\n  premod: {\n    normal_dmg_: c6NormDmg_,\n    charged_dmg_: c6ChargedDmg_,\n    plunging_dmg_: c6PlungingDmg_,\n  },\n  total: {\n    eleMas: c2EleMas,\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"anemo\",\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: {\n        name: tr(\"auto.name\"),\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\n        sections: [{\n          text: tr(\"auto.fields.normal\"),\n          fields: datamine.normal.hitArr.map((_, i) => ({\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span> : \"\"\n          }))\n        }, {\n          text: tr(\"auto.fields.charged\"),\n          fields: [{\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\n            textSuffix: \"(1)\"\n          }, {\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\n            textSuffix: \"(2)\"\n          }, {\n            text: tr(\"auto.skillParams.6\"),\n            value: datamine.charged.stamina,\n          }]\n        }, {\n          text: tr(`auto.fields.plunging`),\n          fields: [{\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n          }, {\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n          }, {\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n          }]\n        }],\n      },\n      skill: {\n        name: tr(\"skill.name\"),\n        img: skill,\n        sections: [{\n          text: tr(\"skill.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n          }, {\n            text: tr(\"skill.skillParams.1\"),\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cd}s - 10%` : `${datamine.skill.cd}s`,\n          }, {\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\n          }, {\n            text: tr(\"skill.skillParams.1\"),\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cdHold}s - 10%` : `${datamine.skill.cdHold}s`,\n          }, {\n            canShow: data => data.get(input.constellation).value >= 1,\n            text: trm(\"c1\"),\n          }]\n        }, {\n          fields: [{\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\n          }, {\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\n          }, {\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\n          }]\n        }],\n      },\n      burst: {\n        name: tr(\"burst.name\"),\n        img: burst,\n        sections: [{\n          text: tr(\"burst.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n          }, {\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\n          }, {\n            text: tr(\"burst.skillParams.3\"),\n            value: datamine.burst.duration,\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.4\"),\n            value: datamine.burst.cd,\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.5\"),\n            value: datamine.burst.enerCost,\n          }]\n        }, {\n          conditional: { // Burst Absorption\n            value: condBurstAbsorption,\n            path: condBurstAbsorptionPath,\n            name: st(\"eleAbsor\"),\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n              fields: [{\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\n              }]\n            }]))\n          },\n        }, {\n          conditional: { // C2\n            canShow: threshold_add(input.constellation, 2, 1,),\n            value: condC2,\n            path: condC2Path,\n            name: trm(\"c2\"),\n            states: {\n              c2: {\n                fields: [{\n                  node: c2EleMas\n                }]\n              }\n            }\n          },\n        }, {\n          conditional: { // C2 Party\n            canShow: threshold_add(input.constellation, 2,\n              unmatch(target.charKey, key, 1)),\n            value: condC2P,\n            path: condC2PPath,\n            teamBuff: true,\n            header: conditionalHeader(\"constellation2\", tr, c2),\n            description: tr(\"constellation2.description\"),\n            name: trm(\"c2p\"),\n            states: {\n              c2p: {\n                fields: [{\n                  node: c2PEleMas\n                }]\n              }\n            }\n          },\n        }],\n      },\n      passive1: {\n        name: tr(\"passive1.name\"),\n        img: passive1,\n        sections: [{\n          text: tr(\"passive1.description\"),\n          conditional: { // Skill Absorption\n            value: condSkillAbsorption,\n            path: condSkillAbsorptionPath,\n            name: st(\"eleAbsor\"),\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n              fields: [{\n                node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\n              }]\n            }]))\n          },\n        }],\n      },\n      passive2: {\n        name: tr(\"passive2.name\"),\n        img: passive2,\n        sections: [{\n          text: tr(\"passive2.description\"),\n        }, ...absorbableEle.map(eleKey => ({\n          conditional: { // Poetics of Fuubutsu\n            value: condSwirls[eleKey],\n            path: condSwirlPaths[eleKey],\n            teamBuff: true,\n            header: conditionalHeader(\"passive2\", tr, passive2),\n            description: tr(\"passive2.description\"),\n            name: trm(`a4.name_${eleKey}`),\n            states: {\n              swirl: {\n                fields: [{\n                  node: asc4[`${eleKey}_dmg_`]\n                }, {\n                  text: sgt(\"duration\"),\n                  value: datamine.passive2.duration,\n                  unit: \"s\"\n                }]\n              }\n            }\n          },\n        }))],\n      },\n      passive3: {\n        name: tr(\"passive3.name\"),\n        img: passive3,\n        sections: [{\n          text: tr(\"passive3.description\"),\n          fields: [{ //TODO: put into subsection since this is teambuff\n            //   header: conditionalHeader(\"passive3\", tr, passive3),\n            //   description: tr(\"passive3.description\"),\n            node: passive\n          }]\n        }],\n      },\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\n      constellation6: {\n        name: tr(\"constellation6.name\"),\n        img: c6,\n        sections: [{\n          text: tr(\"constellation6.description\"),\n          conditional: {//Crimson Momiji\n            value: condC6,\n            path: condC6Path,\n            name: trm(\"c6.after\"),\n            states: {\n              c6: {\n                fields: [\n                  // { // TODO:\n                  //   node: c6infusion\n                  // },\n                  {\n                    canShow: data => data.get(c6infusion).value === \"anemo\",\n                    text: <ColorText color=\"anemo\">Anemo Infusion</ColorText>\n                  },\n                  {\n                    node: c6NormDmg_\n                  }, {\n                    node: c6ChargedDmg_\n                  }, {\n                    node: c6PlungingDmg_\n                  }, {\n                    text: sgt(\"duration\"),\n                    value: datamine.constellation6.duration,\n                    unit: \"s\",\n                  }]\n              }\n            }\n          }\n        }]\n      }\n    }\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","export default __webpack_public_path__ + \"static/media/Character_Shenhe_Card.2bf30635.jpg\";","export default __webpack_public_path__ + \"static/media/Icon.317f8076.png\";","export default __webpack_public_path__ + \"static/media/IconSide.12f3c0e6.png\";","export default __webpack_public_path__ + \"static/media/Banner.86a78cff.png\";","export default __webpack_public_path__ + \"static/media/constellation1.cc60752a.png\";","export default __webpack_public_path__ + \"static/media/constellation2.79de4e68.png\";","export default __webpack_public_path__ + \"static/media/constellation3.30046692.png\";","export default __webpack_public_path__ + \"static/media/constellation4.0e736a56.png\";","export default __webpack_public_path__ + \"static/media/constellation5.7cdb1048.png\";","export default __webpack_public_path__ + \"static/media/constellation6.185d80e5.png\";","export default __webpack_public_path__ + \"static/media/skill.30046692.png\";","export default __webpack_public_path__ + \"static/media/burst.dbb21c7d.png\";","export default __webpack_public_path__ + \"static/media/passive1.0d4c095c.png\";","export default __webpack_public_path__ + \"static/media/passive2.b5358073.png\";","export default __webpack_public_path__ + \"static/media/passive3.32b68928.png\";","import { CharacterData } from 'pipeline'\nimport { Translate } from '../../../Components/Translate'\nimport { input } from '../../../Formula'\nimport { infoMut, match, prod, subscript, threshold_add } from '../../../Formula/utils'\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\nimport { cond, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\n\nconst key: CharacterKey = \"Shenhe\"\nconst [tr, trm] = trans(\"char\", key)\n\nlet s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[0], // 1\n      skillParam_gen.auto[1], // 2\n      skillParam_gen.auto[2], // 3\n      skillParam_gen.auto[3], // 4x2\n      skillParam_gen.auto[5], // 5\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[6],\n    stamina: skillParam_gen.auto[7][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[8],\n    low: skillParam_gen.auto[9],\n    high: skillParam_gen.auto[10],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    hold: skillParam_gen.skill[s++],\n    dmgAtk_: skillParam_gen.skill[s++],\n    duration: skillParam_gen.skill[s++][0],\n    durationHold: skillParam_gen.skill[s++][0],\n    trigger: skillParam_gen.skill[s++][0],\n    triggerHold: skillParam_gen.skill[s++][0],\n    cd: skillParam_gen.skill[s++][0],\n    cdHold: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dmg: skillParam_gen.burst[b++],\n    res_: skillParam_gen.burst[b++],\n    dot: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    press_dmg_: skillParam_gen.passive2[p2++][0],\n    durationPress: skillParam_gen.passive2[p2++][0],\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\n    durationHold: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    durationInc: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    auto_: skillParam_gen.constellation6[0],\n    duration: skillParam_gen.constellation6[1],\n  }\n} as const\n\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\nconst quillDmg = match(\"quill\", condQuill,\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\n\n\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\nconst enemyRes_ = match(\"burst\", condBurst,\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\n\nconst cryo_enemyRes_ = { ...enemyRes_ }\nconst physical_enemyRes_ = { ...enemyRes_ }\n\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\nconst asc1Buff = threshold_add(input.asc, 1,\n  match(condAsc1, \"field\",\n    match(input.activeCharKey, input.charKey,\n      datamine.passive1.cryo_dmg_\n    )\n  )\n)\n\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\nconst buffAsc4Press = threshold_add(input.asc, 1,\n  match(condAsc4, \"press\",\n    datamine.passive2.press_dmg_\n  )\n)\nconst buffAsc4Press_skill_dmg_ = { ...buffAsc4Press }\nconst buffAsc4Press_burst_dmg_ = { ...buffAsc4Press }\nconst buffAsc4Hold = threshold_add(input.asc, 1,\n  match(condAsc4, \"hold\",\n    datamine.passive2.hold_dmg_\n  )\n)\nconst buffAsc4Hold_normal_dmg_ = { ...buffAsc4Hold }\nconst buffAsc4Hold_charged_dmg_ = { ...buffAsc4Hold }\nconst buffAsc4Hold_plunging_dmg_ = { ...buffAsc4Hold }\n\nconst con2Buff = threshold_add(input.constellation, 2,\n  match(condAsc1, \"field\",\n    match(input.activeCharKey, input.charKey,\n      datamine.passive1.cryo_dmg_\n    )\n  )\n)\n\n\nconst dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\n    quillDmg\n  },\n  burst: {\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n  },\n}\n\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"liyue\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: threshold_add(input.constellation, 3, 3),\n    burst: threshold_add(input.constellation, 5, 3),\n  },\n  teamBuff: {\n    premod: {\n      all_dmgInc: quillDmg,\n      cryo_enemyRes_,\n      physical_enemyRes_,\n      cryo_dmg_: asc1Buff,\n      skill_dmg_: buffAsc4Press_skill_dmg_,\n      burst_dmg_: buffAsc4Press_burst_dmg_,\n      normal_dmg_: buffAsc4Hold_normal_dmg_,\n      charged_dmg_: buffAsc4Hold_charged_dmg_,\n      plunging_dmg_: buffAsc4Hold_plunging_dmg_,\n    },\n  },\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star,\n  elementKey: \"anemo\",\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\n  gender: \"M\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: {\n        name: tr(\"auto.name\"),\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\n        sections: [{\n          text: tr(\"auto.fields.normal\"),\n          fields: datamine.normal.hitArr.map((_, i) => ({\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\n            textSuffix: i === 3 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 2 }} />)</span> : \"\"\n          }))\n        }, {\n          text: tr(\"auto.fields.charged\"),\n          fields: [{\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\n          }, {\n            text: tr(\"auto.skillParams.6\"),\n            value: datamine.charged.stamina,\n          }]\n        }, {\n          text: tr(`auto.fields.plunging`),\n          fields: [{\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n          }, {\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n          }, {\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n          }]\n        }],\n      },\n      skill: {\n        name: tr(\"skill.name\"),\n        img: skill,\n        sections: [{\n          text: tr(\"skill.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\n          }, {\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\n          }, {\n            text: tr(\"skill.skillParams.3\"),\n            value: `${datamine.skill.duration}s / ${datamine.skill.durationHold}s`,\n          }, {\n            text: tr(\"skill.skillParams.4\"),\n            value: `${datamine.skill.trigger}s / ${datamine.skill.triggerHold}s`,\n          }, {\n            text: tr(\"skill.skillParams.5\"),\n            value: datamine.skill.cd\n          }, {\n            text: tr(\"skill.skillParams.6\"),\n            value: datamine.skill.cd\n          }, {\n            text: st(\"charges\"),\n            value: (data) => data.get(input.constellation).value >= 1 ? 3 : 2\n          }],\n          conditional: {\n            teamBuff: true,\n            value: condQuill,\n            path: condQuillPath,\n            name: trm(\"quill\"),\n            states: {\n              quill: {\n                fields: [{\n                  node: quillDmg\n                }]\n              }\n            }\n          }\n        }, {\n          conditional: { // ASC4\n            canShow: threshold_add(input.asc, 4, 1),\n            value: condAsc4,\n            path: condAsc4Path,\n            teamBuff: true,\n            header: conditionalHeader(\"passive2\", tr, passive2),\n            description: tr(\"passive2.description\"),\n            name: <span>After Shenhe uses <strong>Spring Spirit Summoning</strong></span>,\n            states: {\n              press: {\n                name: \"Press\",\n                fields: [{\n                  node: buffAsc4Press_skill_dmg_\n                }, {\n                  node: buffAsc4Press_burst_dmg_\n                }]\n              },\n              hold: {\n                name: \"Hold\",\n                fields: [{\n                  node: buffAsc4Hold_normal_dmg_\n                }, {\n                  node: buffAsc4Hold_charged_dmg_\n                }, {\n                  node: buffAsc4Hold_plunging_dmg_\n                }]\n              }\n            }\n          }\n        }],\n      },\n      burst: {\n        name: tr(\"burst.name\"),\n        img: burst,\n        sections: [{\n          text: tr(\"burst.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\n          }, {\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\n          }, {\n            text: tr(\"burst.skillParams.3\"),\n            value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.4\"),\n            value: datamine.burst.cd,\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.5\"),\n            value: datamine.burst.enerCost,\n          }]\n        }, {\n          conditional: {\n            teamBuff: true,\n            value: condBurst,\n            path: condBurstPath,\n            name: tr(\"burst.name\"),\n            states: {\n              burst: {\n                fields: [{\n                  node: cryo_enemyRes_\n                }, {\n                  node: physical_enemyRes_\n                }]\n              }\n            }\n          }\n        }, {\n          conditional: { // ASC1 Party + cond 2\n            canShow: threshold_add(input.asc, 1, match(input.activeCharKey, input.charKey, 1)),\n            value: condAsc1,\n            path: condAsc1Path,\n            teamBuff: true,\n            header: conditionalHeader(\"passive1\", tr, passive1),\n            description: tr(\"passive1.description\"),\n            name: \"Active Character in field\",\n            states: {\n              field: {\n                fields: [{\n                  node: asc1Buff\n                }, {\n                  node: con2Buff\n                }]\n              }\n            }\n          },\n        }],\n      },\n      passive1: talentTemplate(\"passive1\", tr, passive1),\n      passive2: talentTemplate(\"passive2\", tr, passive2),\n      passive3: talentTemplate(\"passive3\", tr, passive3),\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\n      constellation4: {\n        name: tr(\"constellation4.name\"),\n        img: c4,\n        sections: [{\n          text: tr(\"constellation4.description\"),\n        }],\n        // TODO: stacking boost to E\n      },\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\n    }\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","export default __webpack_public_path__ + \"static/media/Character_Sucrose_Card.ef1bd7db.jpg\";","export default __webpack_public_path__ + \"static/media/Icon.b2fb024a.png\";","export default __webpack_public_path__ + \"static/media/IconSide.8d617903.png\";","export default __webpack_public_path__ + \"static/media/Banner.3f41953c.png\";","export default __webpack_public_path__ + \"static/media/constellation1.7d9e1daa.png\";","export default __webpack_public_path__ + \"static/media/constellation2.41513e9d.png\";","export default __webpack_public_path__ + \"static/media/constellation3.4522cc05.png\";","export default __webpack_public_path__ + \"static/media/constellation4.36becbc7.png\";","export default __webpack_public_path__ + \"static/media/constellation5.bc47f845.png\";","export default __webpack_public_path__ + \"static/media/constellation6.00893665.png\";","export default __webpack_public_path__ + \"static/media/skill.4522cc05.png\";","export default __webpack_public_path__ + \"static/media/burst.5c5ea28e.png\";","export default __webpack_public_path__ + \"static/media/passive1.80218f92.png\";","export default __webpack_public_path__ + \"static/media/passive2.153ce525.png\";","export default __webpack_public_path__ + \"static/media/passive3.469169c5.png\";","import { CharacterData } from 'pipeline'\nimport ColorText from '../../../Components/ColoredText'\nimport { input, target } from \"../../../Formula/index\"\nimport { constant, infoMut, match, percent, prod, sum, threshold_add, unmatch } from \"../../../Formula/utils\"\nimport { CharacterKey, Rarity, WeaponTypeKey } from '../../../Types/consts'\nimport { objectKeyMap } from '../../../Util/Util'\nimport { cond, sgt, st, trans } from '../../SheetUtil'\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\nimport { conditionalHeader, normalSrc, talentTemplate } from '../CharacterSheet'\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\nimport data_gen_src from './data_gen.json'\nimport skillParam_gen from './skillParam_gen.json'\n\nconst data_gen = data_gen_src as CharacterData\nconst characterKey: CharacterKey = \"Sucrose\"\nconst [tr, trm] = trans(\"char\", characterKey)\n\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\nconst datamine = {\n  normal: {\n    hitArr: [\n      skillParam_gen.auto[a++], // 1\n      skillParam_gen.auto[a++], // 2\n      skillParam_gen.auto[a++], // 3\n      skillParam_gen.auto[a++], // 4\n    ]\n  },\n  charged: {\n    dmg: skillParam_gen.auto[a++],\n    stamina: skillParam_gen.auto[a++][0],\n  },\n  plunging: {\n    dmg: skillParam_gen.auto[a++],\n    low: skillParam_gen.auto[a++],\n    high: skillParam_gen.auto[a++],\n  },\n  skill: {\n    press: skillParam_gen.skill[s++],\n    cd: skillParam_gen.skill[s++][0],\n  },\n  burst: {\n    dot: skillParam_gen.burst[b++],\n    dmg_: skillParam_gen.burst[b++],\n    duration: skillParam_gen.burst[b++][0],\n    cd: skillParam_gen.burst[b++][0],\n    enerCost: skillParam_gen.burst[b++][0],\n  },\n  passive1: {\n    eleMas: skillParam_gen.passive1[p1++][0],\n    duration: skillParam_gen.passive1[p1++][0],\n  },\n  passive2: {\n    eleMas_: skillParam_gen.passive2[p2++][0],\n    duration: skillParam_gen.passive2[p2++][0],\n  },\n  constellation2: {\n    durationInc: skillParam_gen.constellation2[0],\n  },\n  constellation6: {\n    ele_dmg_: skillParam_gen.constellation6[0],\n  }\n} as const\n\n// Conditional Input\n// Absorption Element\n\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\n// A1 Swirl Reaction Element\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\n// Set to \"hit\" if skill hit opponents\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\n\n// Conditional Output\n// TODO: Check if total or premod\nconst asc1 = threshold_add(input.asc, 1,\n  unmatch(target.charKey, characterKey,\n    match(target.charEle, condSwirlReaction, datamine.passive1.eleMas)), { key: \"eleMas\" })\nconst asc4 = match(\"hit\", condSkillHitOpponent,\n  unmatch(target.charKey, characterKey,\n    threshold_add(input.asc, 4,\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))), { key: \"eleMas\" })\nconst c6Base = threshold_add(input.constellation, 6, percent(0.2))\n\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\n  match(condAbsorption, key.slice(0, -5), c6Base))\n\nexport const dmgFormulas = {\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\n  charged: {\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\n  },\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\n  skill: {\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\n  },\n  burst: {\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\n    ...Object.fromEntries(absorbableEle.map(key =>\n      [key, match(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\n  },\n}\nexport const data = dataObjForCharacterSheet(characterKey, \"anemo\", \"mondstadt\", data_gen, dmgFormulas, {\n  bonus: {\n    skill: threshold_add(input.constellation, 3, 3),\n    burst: threshold_add(input.constellation, 5, 3),\n  },\n  teamBuff: {\n    total: { eleMas: sum(asc1, asc4) },\n    premod: c6Bonus\n  }\n})\n\nconst sheet: ICharacterSheet = {\n  name: tr(\"name\"),\n  cardImg: card,\n  thumbImg: thumb,\n  thumbImgSide: thumbSide,\n  bannerImg: banner,\n  rarity: data_gen.star as Rarity,\n  elementKey: \"anemo\",\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\n  gender: \"F\",\n  constellationName: tr(\"constellationName\"),\n  title: tr(\"title\"),\n  talent: {\n    sheets: {\n      auto: {\n        name: tr(\"auto.name\"),\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\n        sections: [\n          {\n            text: tr(`auto.fields.normal`),\n            fields: datamine.normal.hitArr.map((percentArr, i) => ({\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\n            }))\n          },\n          {\n            text: tr(`auto.fields.charged`),\n            fields: [{\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\n            }, {\n              text: tr(\"auto.skillParams.5\"),\n              value: datamine.charged.stamina,\n            }]\n          }, {\n            text: tr(`auto.fields.plunging`),\n            fields: [{\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\n            }, {\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\n            }, {\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\n            }]\n          },\n        ],\n      },\n      skill: {\n        name: tr(\"skill.name\"),\n        img: skill,\n        sections: [{\n          text: tr(\"skill.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\n          }, {\n            text: tr(\"skill.skillParams.1\"),\n            value: datamine.skill.cd,\n            unit: \"s\"\n          }, {\n            canShow: (data) => data.get(input.constellation).value >= 1,\n            text: st(\"charges\"),\n            value: 2\n          }]\n        }]\n      },\n      burst: {\n        name: tr(\"burst.name\"),\n        img: burst,\n        sections: [{\n          text: tr(\"burst.description\"),\n          fields: [{\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\n          }, {\n            text: tr(\"burst.skillParams.2\"),\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.3\"),\n            value: datamine.burst.cd,\n            unit: \"s\"\n          }, {\n            text: tr(\"burst.skillParams.4\"),\n            value: datamine.burst.enerCost,\n          }],\n          conditional: { // Absorption\n            value: condAbsorption,\n            path: condAbsorptionPath,\n            name: st(\"eleAbsor\"),\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n              fields: [{\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\n              }]\n            }]))\n          },\n        }, {\n          conditional: { // Absorption\n            value: condAbsorption,\n            path: condAbsorptionPath,\n            header: conditionalHeader(\"constellation6\", tr, c6),\n            description: tr(\"constellation6.description\"),\n            name: st(\"eleAbsor\"),\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n              fields: [{\n                node: c6Bonus[`${eleKey}_dmg_`],\n              }],\n            }]))\n          },\n        }]\n      },\n      passive1: {\n        name: tr(\"passive1.name\"),\n        img: passive1,\n        sections: [{\n          text: tr(\"passive1.description\"),\n          conditional: { // Swirl Element\n            value: condSwirlReaction,\n            path: condSwirlReactionPath,\n            header: conditionalHeader(\"passive1\", tr, passive1),\n            description: tr(\"passive1.description\"),\n            name: st(\"eleSwirled\"),\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\n              fields: [{\n                node: asc1,\n              }, {\n                text: sgt(\"duration\"),\n                value: datamine.passive1.duration,\n                unit: \"s\"\n              }],\n            }]))\n          },\n        }]\n      },\n      passive2: {\n        name: tr(\"passive2.name\"),\n        img: passive2,\n        sections: [{\n          text: tr(\"passive2.description\"),\n          conditional: { // Swirl Element\n            value: condSkillHitOpponent,\n            path: condSkillHitOpponentPath,\n            header: conditionalHeader(\"passive1\", tr, passive1),\n            description: tr(\"passive1.description\"),\n            name: trm(\"asc4\"),\n            states: {\n              hit: {\n                fields: [{\n                  node: asc4,\n                }, {\n                  text: sgt(\"duration\"),\n                  value: datamine.passive2.duration,\n                  unit: \"s\"\n                }],\n              }\n            }\n          },\n        }]\n      },\n      passive3: talentTemplate(\"passive3\", tr, passive3),\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\n    },\n  },\n};\nexport default new CharacterSheet(sheet, data);\n","import { CharacterKey } from '../../Types/consts'\nimport CharacterSheet from './CharacterSheet'\n\n// import Albedo from './Albedo'\n// import Aloy from './Aloy'\n// import Amber from './Amber'\n// import AratakiItto from './AratakiItto'\n// import Barbara from './Barbara'\n// import Beidou from './Beidou'\n// import Bennett from './Bennett'\n// import Chongyun from './Chongyun'\n// import Diluc from './Diluc'\n// import Diona from './Diona'\n// import Eula from './Eula'\n// import Fischl from './Fischl'\n// import Ganyu from './Ganyu'\n// import Gorou from './Gorou'\n// import HuTao from './HuTao'\n// import Jean from './Jean'\nimport KaedeharaKazuha from './KaedeharaKazuha'\n// import Kaeya from './Kaeya'\n// import KamisatoAyaka from './KamisatoAyaka'\n// import Keqing from './Keqing'\n// import Klee from './Klee'\n// import KujouSara from './KujouSara'\n// import Lisa from './Lisa'\n// import Mona from './Mona'\n// import Ningguang from './Ningguang'\n// import Noelle from './Noelle'\n// import Qiqi from './Qiqi'\n// import RaidenShogun from './RaidenShogun'\n// import Razor from './Razor'\n// import Rosaria from './Rosaria'\n// import SangonomiyaKokomi from './SangonomiyaKokomi'\n// import Sayu from './Sayu'\nimport Shenhe from \"./Shenhe\"\nimport Sucrose from \"./Sucrose\"\n// import Tartaglia from './Tartaglia'\n// import Thoma from './Thoma'\n// import Traveler from './Traveler'\n// import Venti from './Venti'\n// import Xiao from './Xiao'\n// import Xiangling from './Xiangling'\n// import Xingqiu from './Xingqiu'\n// import Xinyan from './Xinyan'\n// import Yanfei from './Yanfei'\n// import Yoimiya from './Yoimiya'\n// import Zhongli from './Zhongli'\n\nconst characters: Record<CharacterKey, CharacterSheet> = {\n  // Albedo,\n  // Aloy,\n  // Amber,\n  // AratakiItto,\n  // Barbara,\n  // Beidou,\n  // Bennett,\n  // Chongyun,\n  // Diluc,\n  // Diona,\n  // Eula,\n  // Fischl,\n  // Ganyu,\n  // Gorou,\n  // HuTao,\n  // Jean,\n  KaedeharaKazuha,\n  // Kaeya,\n  // KamisatoAyaka,\n  // Keqing,\n  // Klee,\n  // KujouSara,\n  // Lisa,\n  // Mona,\n  // Ningguang,\n  // Noelle,\n  // Qiqi,\n  // RaidenShogun,\n  // Razor,\n  // Rosaria,\n  // SangonomiyaKokomi,\n  // Sayu,\n  Shenhe,\n  Sucrose,\n  // Tartaglia,\n  // Thoma,\n  // Traveler,\n  // Venti,\n  // Xiao,\n  // Xiangling,\n  // Xingqiu,\n  // Xinyan,\n  // Yanfei,\n  // Yoimiya,\n  // Zhongli\n} as const\nexport default characters\n"],"sourceRoot":""}