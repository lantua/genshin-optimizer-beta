{"version":3,"file":"static/js/211.d87dce1d.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  equalStr(input.hit.move, \"burst\", input.charEle),\r\n  input.infusion,\r\n  input.team.infusion,\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, prod, greaterEq, naught } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n        [i,\r\n        prod(i, datamine.constellation2.blossomDmgInc)]\r\n        )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1EnemyHp,\r\n          path: condP1EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: {\r\n            belowHp: {\r\n              fields: [{\r\n                node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condSkillInField,\r\n          path: condSkillInFieldPath,\r\n          name: st(\"activeCharField\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            skillInField: {\r\n              fields: [{\r\n                node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6Crystallize,\r\n          path: condC6CrystallizePath,\r\n          name: st(\"protectedByShieldCrystal\"),\r\n          canShow: greaterEq(input.constellation, 6, equal(condSkillInField, \"skillInField\", 1)),\r\n          teamBuff: true,\r\n          states: {\r\n            c6Crystallize: {\r\n              fields: [{\r\n                node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\"}),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condBurstUsed,\r\n          path: condBurstUsedPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            burstUsed: {\r\n              fields: [{\r\n                node: p2Burst_eleMas\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2Stacks,\r\n          path: condC2StacksPath,\r\n          name: trm(\"c2Stacks\"),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n            [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{\r\n                node: c2_burst_dmgInc\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.ss.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.stam,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"skill.skillParams.3\"),\r\n              value: datamine.skill.cd,\r\n              unit: \"s\"\r\n            }\r\n          ],\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [\r\n              {\r\n                node: nodeP1AtkSpd\r\n              },\r\n            ]\r\n          }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: tr(\"constellation4.description\"),\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              {\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              },\r\n              {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 20, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 50, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_`})\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmgDisp = equal(c6AndCorrectWep, 1, datamine.constellation6.pyro_dmg)\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1, activeInAreaC6PyroDmgDisp)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, elementKey)\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n      atk: activeInAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(activeInAreaAtkDisp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 4),\r\n          value: condInArea,\r\n          path: condInAreaPath,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            activeInArea: {\r\n              fields: [{ // Node will not show CD reduction, have to use value instead\r\n                text: st(\"skillCDRed\"),\r\n                value: datamine.passive2.cd_red,\r\n                unit: \"%\",\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: c6AndCorrectWep,\r\n          value: condInArea,\r\n          path: condInAreaPath,\r\n          name: st(\"activeCharField\"),\r\n          teamBuff: true,\r\n          states: {\r\n            activeInArea: {\r\n              fields: [{\r\n                node: infoMut(activeInAreaC6PyroDmgDisp, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n              }, {\r\n                text: <ColorText color={elementKey}>{st(\"infusion.pyro\")}</ColorText>\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value > 1,\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.cd_red,\r\n        unit: \"%\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        text: trm(\"additionalATKRatio\"),\r\n        node: c1Atk\r\n      }, {\r\n        node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value / 100);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, datamine.passive2.pyroInc)\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n    secondHitBoost: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional),\r\n    thirdHitBoost: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n          },\r\n          {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n          },],\r\n          conditional: {\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6C.name\"),\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6DmgBonus,\r\n                }, {\r\n                  node: nodeC6SpdBonus\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C.name\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }\r\n          ]))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_ = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6em = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      heal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6below`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6healing_,\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6above`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC6em,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condA4,\r\n          path: condA4Path,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n            fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          name: trm(\"c1CondName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: trm(\"c1PullSpeed\")\r\n              }, {\r\n                node: skill_dmg_\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: anemo_enemyRes_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          value: condC6,\r\n          path: condC6Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgRed_disp, {key: \"dmgRed_\" })\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: (data) => data.get(input.asc).value >= 4,\r\n        text: st(\"energyRegen\"),\r\n        value: datamine.passive2.energyRegen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        {\r\n          ...sectionTemplate(\"skill\", tr, skill, [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]),\r\n          fieldsHeader: { ...conditionalHeader(\"skill\", tr, skill), title: trm(\"skillPlunge\") }\r\n        },\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          value: condC2,\r\n          path: condC2Path,\r\n          name: trm(\"c2\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2: {\r\n              fields: [{\r\n                node: c2EleMas\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation2\", tr, c2, undefined, { // C2 Party\r\n          canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n          value: condC2P,\r\n          path: condC2PPath,\r\n          teamBuff: true,\r\n          description: tr(\"constellation2.description\"),\r\n          name: st(\"activeCharField\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2p: {\r\n              fields: [{\r\n                node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, undefined, absorbableEle.map(eleKey =>\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          // Only show the description once. Can't be truly blank or it will be filled in with a default.\r\n          description: eleKey === \"hydro\" ? tr(\"passive2.description\") : \" \",\r\n          name: trm(`a4.name_${eleKey}`),\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            swirl: {\r\n              fields: [{\r\n                node: asc4[`${eleKey}_dmg_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      )),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined, [\r\n        sectionTemplate(\"passive3\", tr, passive3, [{\r\n          node: passive\r\n        }], undefined, undefined, true, true),\r\n      ]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: afterRecastInfusion,\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n            }, {\r\n              text: tr(\"auto.skillParams.4\"),\r\n              value: datamine.charged.stamina\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, min } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonus = equal(condA4, \"on\", greaterEq(input.asc, 4, min(prod(datamine.passive2.crBonus, input.premod.critRate_), datamine.passive2.maxBonus)))\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n    physical_enemyRes_: nodeC6PhysShred\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }],\r\n          conditional: {\r\n            name: tr(\"constellation6.name\"),\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            value: condC6,\r\n            path: condC6Path,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6PhysShred\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.constellation6.duration,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4.name\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4CritBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"pressDuration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"pressQuota\"),\r\n        value: datamine.skill.trigger,\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: trm(\"holdDuration\"),\r\n        value: datamine.skill.durationHold,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"holdQuota\"),\r\n        value: datamine.skill.triggerHold,\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }], {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          value: condAsc4,\r\n          path: condAsc4Path,\r\n          teamBuff: true,\r\n          name: trm(\"asc4Cond\"),\r\n          states: {\r\n            press: {\r\n              name: \"Press\",\r\n              fields: [{\r\n                node: nodeAsc4Press_skill_dmg_\r\n              }, {\r\n                node: nodeAsc4Press_burst_dmg_\r\n              }]\r\n            },\r\n            hold: {\r\n              name: \"Hold\",\r\n              fields: [{\r\n                node: nodeAsc4Hold_normal_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_charged_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_plunging_dmg_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n            name: i.toString(),\r\n            fields: [{ node: c4Inc }]\r\n          }))\r\n        }), {\r\n        ...sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: tr(\"constellation6.description\")\r\n        }], undefined, data => data.get(input.constellation).value >= 6, true, true),\r\n        fieldsDescription: \"\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Condition = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, 1)))\r\nconst asc1 = equal(asc1Condition, 1, datamine.passive1.eleMas)\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        canShow: greaterEq(input.asc, 1, unequal(target.charKey, characterKey, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: asc1,\r\n          }, {\r\n            // TODO: uncomment after `target` bug is fixed\r\n            // canShow: data => data.get(asc1Condition).value,\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(target.charKey, characterKey, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: asc4,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character_WR'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { input } from '../../../../Formula'\r\nimport { normalSrc, talentTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`anemo.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`anemo.${strKey}`} />\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, \"c6Hit\")\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp)),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: {\r\n      name: tr(\"auto.name\"),\r\n      img: normalSrc(data_gen.weaponTypeKey),\r\n      sections: [{\r\n        text: tr(\"auto.fields.normal\"),\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:anemo.auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:anemo.auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:anemo.auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }],\r\n    },\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:anemo.skill.skillParams.0` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:anemo.skill.skillParams.1` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:anemo.skill.skillParams.2` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:anemo.skill.skillParams.3` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"skill.skillParams.5\"),\r\n      value: datamine.skill.maxCd,\r\n      unit: \"s\"\r\n    }, {\r\n      canShow: data => data.get(input.constellation).value >= 4,\r\n      text: trm(\"c1\"),\r\n      value: 10,\r\n      unit: \"%\"\r\n    }]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:anemo.burst.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"burst.skillParams.2\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.3\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.4\"),\r\n      value: datamine.burst.enerCost,\r\n    }], {\r\n      teamBuff: true,\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:anemo.burst.skillParams.1` }),\r\n        },\r\n        ...Object.values(nodesC6).map(node => ({ node }))\r\n        ]\r\n      }]))\r\n    }, [{\r\n      conditional: {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      }\r\n    }]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1, [{ node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:anemo.p1` }) }]),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" }) }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import card from './Traveler_Female_Card.jpg'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport anemo, { data as anemoData } from './anemo'\r\n// import geo, { data as geoData } from './geo'\r\n// import electro from './electro'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts';\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport data_gen_src from './data_gen.json'\r\nimport { CharacterData } from 'pipeline'\r\nimport { trans } from '../../SheetUtil'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    // geo,\r\n    // electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  // geo: geoData,\r\n  // electro: electroData,\r\n});\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport {  customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}),\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6\r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\"),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\"),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = {...normal_dmg_}\r\nconst plunging_dmg_ = {...normal_dmg_}\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst, \r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4, \r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2, \r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod : {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion,\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === 'skill'\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, prod(percent(datamine.constellation6.dmg_), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: charTr(\"skillState\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]))\r\n      }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        teamBuff: true,\r\n        canShow: atk_,\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  AratakiItto,\r\n  // Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  // Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  // Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  // Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","unit","key","variant","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","reaction","transformativeReactions","multi","ele","variants","asConst","swirl","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","Object","fromEntries","absorbableEle","e","percent","overloaded","electrocharged","superconduct","charCurves","objectMap","_charCurves","value","values","commonBasic","critRate_","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","undefined","customShieldNode","shieldNode","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","tr","trm","auto","normalSrc","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","skillDmg","blossomDmg","duration","cd","blossomCd","burst","burstDmg","blossomAmt","enerCost","passive1","blossomDmgInc","hpThresh","passive2","eleMasInc","constellation1","blossomEner","constellation2","maxStacks","stackDuration","constellation4","plunging_dmg_","constellation6","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","lookup","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","talentTemplate","sectionTemplate","_","node","text","textSuffix","sgt","path","st","canShow","states","belowHp","fields","c1","fixed","get","c4","skillInField","c6","c6Crystallize","isoOnField","count","burstUsed","c2","passive3","constellation3","c3","constellation5","c5","CharacterSheet","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","atk_","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","nodeA4Bonus","nodeP1AtkSpd","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","nodeC3","nodeC5","atk","infusion","img","sections","on","header","conditionalHeader","description","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","condC6Path","condC6","condA4Path","condA4","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","normal_dmg_","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","c1AddlAtk","activeInAreaAtkDisp","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmgDisp","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","regen","atkInc","pyro_dmg_","team","enerRech_","calculateSkillCD","color","skillCD","cdFactor","p1","p2","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","atkSpdInc","maxStack","condC1Path","condC1","condC2Path","condC2","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","conditional","aimed","aimedCharged","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","energyRegen","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","condA1Path","condA1","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_","nodeC6em","staminaDec_","moveSPD_","heal_","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","unknown","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","cryo_enemyRes_","physical_enemyRes_","lightSwordAdditional","burst_dmg_","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","inheritedHp","critRateInc","cryoDmgBonus","opCryoRes","enerRegen","cryo_dmg_disp","cryo_dmg_","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","min","critRateTeam_1","unequal","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","fieldsHeader","eleKey","c2p","sp","sprint","active_stam","drain_stam","dmg_bonus","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","condAfterBurstPath","condAfterBurst","afterBurst","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","hydro_dmg_","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_dmg_","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","cooldown","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","heal","devotionShield","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","nBonus_","cBonus_","sBonus_","p","heal_ratio_","hp_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","normal_dmgInc","skill_dmgInc","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1Disp","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","nodeC2","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","fieldsDescription","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Condition","asc1","c6Base","c6Bonus","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","maxCd","absorbDmg","nodeC6","nodesC6","objectKeyValueMap","absorb","talentSheet","talents","anemoData","fully","pressDmg","pressCD","holdDmg","holdCD","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","condSkillPath","condSkill","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","cdRed","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","normalEntries","kindlingEntries","dataObj","includes","uiData","shield_","triggerNum","normalInc","allElements","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","AratakiItto","Beidou","Bennett","Diluc","Diona","Eula","Fischl","Ganyu","HuTao","Jean","KaedeharaKazuha","KamisatoAyaka","Keqing","Klee","KujouSara","Mona","Ningguang","Noelle","RaidenShogun","Rosaria","SangonomiyaKokomi","Shenhe","Sucrose","Traveler","Venti","Xiangling","Xiao","Xingqiu","YaeMiko","Yoimiya","YunJin","Zhongli","customStringRead","subKey","typeKey"],"sourceRoot":""}