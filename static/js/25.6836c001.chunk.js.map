{"version":3,"sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/DullBlade/Icon.png","Data/Weapons/Sword/DullBlade/AwakenIcon.png","Data/Weapons/util.ts","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/AwakenIcon.png","Data/Weapons/Sword/FreedomSworn/Icon.png","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/CalamityQueller/AwakenIcon.png","Data/Weapons/Polearm/CalamityQueller/Icon.png","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/EverlastingMoonglow/Icon.png","Data/Weapons/Catalyst/EverlastingMoonglow/AwakenIcon.png","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"names":["Stat","this","Error","printStat","statKey","stats","sgt","strKey","Translate","ns","key18","st","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","claymore","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","values","dataObjForWeaponSheet","gen","subStat2","undefined","displayWeapon","additional","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","mainStatNode","infoMut","sum","prod","subscript","input","lvl","curve","asc","ascension","x","addStats","push","main","substatNode","sub","substat2Node","refineIndex","addProps","NaN","sub2","mergeData","inferInfoMut","data_gen","data_gen_json","data","sheet","icon","iconAwaken","document","WeaponSheet","tr","autoSrc","condPassivePath","condPassive","atk_","match","normal_dmg_","charged_dmg_","plunging_dmg_","teamBuff","conditional","header","title","ImgIcon","size","sx","m","src","get","description","name","states","on","fields","node","text","unit","sword","DullBlade","FreedomSworn","condStackPath","condStack","dmg_","dmg_Nodes","allElements","e","atkInc","matchFull","activeCharKey","charKey","lookup","objectKeyMap","range","i","n","polearm","CalamityQueller","bow","normal_dmgInc","hp","catalyst","EverlastingMoonglow","WeaponData"],"mappings":"wPAGqBA,E,aAEnB,aACE,GADa,oBACTC,gBAAgBD,EAClB,MAAME,MAAM,6CAJGF,EAMZG,UAAY,SAACC,EAASC,GAAV,OAAoC,8BCAlD,IACMC,EAAM,SAACC,GAAD,OAAoB,cAACC,EAAA,EAAD,CAAWC,GAAG,YAAYC,MAAOH,M,gPCL3DI,EAAK,SAACJ,GAAD,OAAoB,cAAC,IAAD,CAAWE,GAAG,QAAQC,MAAOH,KACtDD,EAAM,SAACC,GAAD,OAAoB,cAAC,IAAD,CAAWE,GAAG,YAAYC,MAAOH,KAE3DK,EAAe,SAACC,GAAD,OAAoBC,YAAiB,CAAC,eAAF,mBAAoBD,MAC7E,SAASE,EAAKC,EAAgDC,GACnE,IAAMJ,EAAO,CAACG,EAAKC,GAEnB,MAAO,CAACJ,EADKD,EAAaC,IAQrB,SAASK,EAAMC,EAAyCH,GAC7D,MAAO,CACL,SAACT,GAAD,OAAoB,cAAC,IAAD,CAAWE,GAAE,UAAKU,EAAL,YAAgBH,EAAhB,QAA2BN,MAAOH,KACnE,SAACA,GAAD,OAAoB,cAAC,IAAD,CAAWE,GAAE,UAAKU,EAAL,YAAgBH,GAAON,MAAOH,Q,oDCgCpDa,EA5BE,GC1BF,MAA0B,iCCA1B,MAA0B,uC,4ECUnCC,EAAeC,OAAOC,YAAYD,OAAOE,QAAQC,GAAeC,KAAI,mCAAEV,EAAF,KAAOW,EAAP,WAAkB,CAACX,EAAD,CAAO,GAAP,mBAAaM,OAAOM,OAAOD,UAEhH,SAASE,EACdb,EACAc,GAIO,IAHPC,EAGM,4DAHoDC,EAC1DC,EAEM,uDAFsB,GAC5BC,EACM,uDADa,GAEbC,EAAe,CACnBC,KAAM,GACNC,OAAQ,GACRC,MAAO,GACPC,OAAQ,CACNvB,IAAKwB,YAASxB,GAAMyB,KAAMD,YAASV,EAAIY,aAEzCC,QAAQ,gCACK3B,GAAQiB,IAIfW,EAAsBd,EAAtBc,SAAUC,EAAYf,EAAZe,QACZC,EAAU,CAACX,GAEjB,GAAsB,QAAlBS,EAASH,MAAoC,QAAlBG,EAASH,MAAoC,OAAlBG,EAASH,KAAe,MAAM,IAAIvC,MAAM,gCAClG,IAAM6C,EAAeC,YAAQC,YAAIC,YAAKN,EAASR,KAAMe,YAAUC,IAAMb,OAAOc,IAAKhC,EAAauB,EAASU,SAAUH,YAAUC,IAAMb,OAAOgB,IAAKzB,EAAI0B,UAAU9B,KAAI,SAAA+B,GAAC,uBAAIA,EAAEC,SAASd,EAASH,aAAxB,QAAiC,OAAM,CAAEzB,IAAK4B,EAASH,OAGvN,GAFAK,EAAQa,KAAK,CAAEvB,KAAK,eAAIQ,EAASH,KAAOW,IAAMb,OAAOqB,MAAQrB,OAAQ,CAAEqB,KAAMb,KAEzEF,EAAS,CACX,GAAqB,QAAjBA,EAAQJ,MAAmC,QAAjBI,EAAQJ,MAAmC,OAAjBI,EAAQJ,KAAe,MAAM,IAAIvC,MAAM,2CAC/F,IAAM2D,EAAcb,YAAQE,YAAKL,EAAQT,KAAMe,YAAUC,IAAMb,OAAOc,IAAKhC,EAAawB,EAAQS,SAAU,CAAEtC,IAAK6B,EAAQJ,OACzHK,EAAQa,KAAK,CACXtB,OAAO,eAAIQ,EAAQJ,KAAOW,IAAMb,OAAOuB,KACvCvB,OAAQ,CAAEuB,IAAKD,KAGnB,GAAI9B,EAAU,CACZ,GAAiB,QAAbA,GAAmC,QAAbA,GAAmC,OAAbA,EAAmB,MAAM,IAAI7B,MAAM,6CACnF,IAAM6D,EAAeZ,YAAUC,IAAMb,OAAOyB,YAAalC,EAAImC,SAASvC,KAAI,SAAA+B,GAAC,uBAAIA,EAAE1B,UAAN,QAAmBmC,OAAM,CAAElD,IAAKe,IAC3Ge,EAAQa,KAAK,CACXtB,OAAO,eAAIN,EAAWqB,IAAMb,OAAOuB,KACnCvB,OAAQ,CAAE4B,KAAMJ,KAIpB,OAAOK,YAAU,GAAD,OAAKtB,EAAL,CAAcuB,YAAanC,EAAYlB,MC/CzD,IAAMsD,EAAWC,EACXvD,EAAiB,YACVwD,EAAO3C,EAAsBb,EAAKsD,GACzCG,EAAmB,2BACpBH,GADoB,IAEvBI,OACAC,aACAC,SAAU,KAEG,MAAIC,IAAY7D,EAAKyD,EAAOH,EAAUE,G,oCCjBtC,MAA0B,uC,SCA1B,MAA0B,iC,OCanCxD,EAAiB,eACjBsD,EAAWC,EACjB,EAAarD,YAAM,SAAUF,GAAtB8D,EAAP,oBACMC,EAAU,CAAC,IAAM,GAAM,IAAM,IAAM,KAGzC,EAAuChE,YAAKC,EAAK,sBAAjD,mBAAOgE,EAAP,KAAwBC,EAAxB,KACMC,EAAOC,YAAM,KAAMF,EAAa9B,YAAUC,IAAMb,OAAOyB,YAH7C,CAAC,GAAK,IAAM,GAAK,IAAM,MAIjCoB,EAAcD,YAAM,KAAMF,EAAa9B,YAAUC,IAAMb,OAAOyB,YAAae,IAC3EM,EAAeF,YAAM,KAAMF,EAAa9B,YAAUC,IAAMb,OAAOyB,YAAae,IAC5EO,EAAgBH,YAAM,KAAMF,EAAa9B,YAAUC,IAAMb,OAAOyB,YAAae,IAE7EP,EAAO3C,EAAsBb,EAAKsD,EAAU,YAAQtC,EAAW,CACnEuD,SAAU,CACRlD,OAAQ,CACN6C,OACAE,cACAC,eACAC,oBAKAb,EAAsB,CAC1BC,OACAC,aACAC,SAAU,CAAC,CACTY,YAAa,CACX7D,MAAOsD,EACPpE,KAAMmE,EACNO,UAAU,EACVE,OAAQ,CACNC,MAAOZ,EAAG,eACVJ,KAAM,SAAAF,GAAI,OAAI,cAACmB,EAAA,EAAD,CAASC,KAAM,EAAGC,GAAI,CAAEC,GAAI,GAAKC,IAAKvB,EAAKwB,IAAI5C,IAAMb,OAAOgB,KAAK5B,MAAQ,EAAI+C,EAAOC,MAEpGsB,YAAa,SAAAzB,GAAI,OAAIM,EAAG,sBAAD,OAAuBN,EAAKwB,IAAI5C,IAAMb,OAAOyB,aAAarC,SACjFuE,KAAM,cAAC1F,EAAA,EAAD,CAAWC,GAAG,sBAAsBC,MAAM,SAChDyF,OAAQ,CACNC,GAAI,CACFC,OAAQ,CAAC,CACPC,KAAMpB,GACL,CACDoB,KAAMlB,GACL,CACDkB,KAAMjB,GACL,CACDiB,KAAMhB,GACL,CACDiB,KAAMjG,YAAI,YACVqB,MAAO,GACP6E,KAAM,YCLHC,EA9BD,CAOZC,YAIAC,aD+Ba,IAAI9B,IAAY7D,EAAKyD,EAAOH,EAAUE,I,gBEtEtC,MAA0B,uC,SCA1B,MAA0B,iCCYnCxD,EAAiB,kBACjBsD,EAAWC,EAEjB,GAAarD,YAAM,SAAUF,GAAtB8D,GAAP,qBAEA,GAAmC/D,YAAKC,EAAK,SAA7C,qBAAO4F,GAAP,MAAsBC,GAAtB,MAGMC,GAAO,CAAC,IAAM,IAAM,IAAM,IAAM,KAGhCC,GAAYzF,OAAOC,YAAYyF,IAAYtF,KAAI,SAAAuF,GAAC,MAAI,CAAC,GAAD,OAAIA,EAAJ,SAAc9D,YAAUC,IAAMb,OAAOyB,YAAa8C,SACtGI,GAAShE,YACbiE,YAAU/D,IAAMgE,cAAehE,IAAMiE,QACnC7E,YAAS,EAAG,IACZA,YAAS,EAAG,KACd8E,YAAOT,GAAWU,YAAaC,YAAM,EAAG,IAAI,SAAAC,GAAC,OAAIjF,YAASiF,MAAK,GAC/DtE,YAAUC,IAAMb,OAAOyB,YARZ,CAAC,KAAO,IAAM,KAAO,KAAO,MAQG,CAAEhD,IAAK,OAEtCwD,GAAO3C,EAAsBb,EAAKsD,EAAU,aAAStC,EAAW,CAC3EK,OAAO,2BACF0E,IADC,IAGJ7B,KAAMgC,OAGJzC,GAAsB,CAC1BC,OACAC,aACAC,SAAU,CAAC,CACTyB,OAAO,YACF/E,OAAOM,OAAOmF,IAAWrF,KAAI,SAAAgG,GAAC,MAAK,CACpCpB,KAAMoB,OAGVlC,YAAa,CACX7D,MAAOkF,GACPhG,KAAM+F,GACNV,KAAMpB,GAAG,eACTqB,OAAQ7E,OAAOC,YAAYiG,YAAM,EAAG,GAAG9F,KAAI,SAAA+F,GAAC,MAAI,CAACA,EAAG,CAClDvB,KAAK,SAAD,OAAWuB,GACfpB,OAAQ,CAAC,CAAEC,KAAMY,eCLVS,GAzBC,CAIdC,gBD+Ba,IAAI/C,IAAY7D,EAAKyD,GAAOH,EAAUE,KEFtCqD,GA7BH,GC3BG,OAA0B,iCCA1B,OAA0B,uCCUnC7G,GAAM,sBACNsD,G,OAEAwD,GAAgB5E,YAAKC,YAAUC,IAAMb,OAAOyB,YADlC,CAAC,IAAM,KAAO,IAAM,KAAO,KAC6B,CAAEhD,IAAK,MAAQoC,IAAMf,OAAO0F,IACvFvD,GAAO3C,EAAsBb,GAAKsD,GAAU,QAAS,CAAEwD,kBAAiB,CACnFzF,OAAQ,CAAEyF,oBAENrD,GAAsB,CAC1BC,QACAC,cACAC,SAAU,CAAC,CACTyB,OAAQ,CAAC,CACPE,KAAM,cAAC/F,EAAA,EAAD,CAAWC,GAAE,kBAAaO,GAAb,KAAqBN,MAAM,SAC9C4F,KAAMwB,QC2BGE,GA1BE,CAKfC,oBDFa,IAAIpD,IAAY7D,GAAKyD,GAAOH,GAAUE,KEnB/C0D,GAA0C,+DAC3CzB,GACArF,GACAuG,IACAE,IACAG,IAEUE,c","file":"static/js/25.6836c001.chunk.js","sourcesContent":["/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      } as IConditional\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\n  ]\n}\n","// import Akuoumaru from './Akuoumaru'\n// import BlackcliffSlasher from './BlackcliffSlasher'\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\n// import DebateClub from './DebateClub'\n// import FavoniusGreatsword from './FavoniusGreatsword'\n// import FerrousShadow from './FerrousShadow'\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\n// import LithicBlade from './LithicBlade'\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\n// import OldMercsPal from './OldMercsPal'\n// import PrototypeArchaic from './PrototypeArchaic'\n// import Rainslasher from './Rainslasher'\n// import RedhornStonethresher from './RedhornStonethresher'\n// import RoyalGreatsword from './RoyalGreatsword'\n// import SacrificialGreatsword from './SacrificialGreatsword'\n// import SerpentSpine from './SerpentSpine'\n// import SkyriderGreatsword from './SkyriderGreatsword'\n// import SkywardPride from './SkywardPride'\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\n// import SongOfBrokenPines from './SongOfBrokenPines'\n// import TheBell from './TheBell'\n// import TheUnforged from './TheUnforged'\n// import WasterGreatsword from './WasterGreatsword'\n// import Whiteblind from './Whiteblind'\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\n// import WolfsGravestone from './WolfsGravestone'\nconst claymore = {\n  // Akuoumaru,\n  // BlackcliffSlasher,\n  // BloodtaintedGreatsword,\n  // DebateClub,\n  // FavoniusGreatsword,\n  // FerrousShadow,\n  // KatsuragikiriNagamasa,\n  // LithicBlade,\n  // LuxuriousSeaLord,\n  // OldMercsPal,\n  // PrototypeArchaic,\n  // Rainslasher,\n  // RedhornStonethresher,\n  // RoyalGreatsword,\n  // SacrificialGreatsword,\n  // SerpentSpine,\n  // SkyriderGreatsword,\n  // SkywardPride,\n  // SnowTombedStarsilver,\n  // SongOfBrokenPines,\n  // TheBell,\n  // TheUnforged,\n  // WasterGreatsword,\n  // Whiteblind,\n  // WhiteIronGreatsword,\n  // WolfsGravestone,\n} as const\nexport default claymore\n","export default __webpack_public_path__ + \"static/media/Icon.4be78b63.png\";","export default __webpack_public_path__ + \"static/media/AwakenIcon.b5dbc827.png\";","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { MainStatKey, SubstatKey } from \"../../Types/artifact\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  subStat2: MainStatKey | SubstatKey | \"dmg_\" | undefined = undefined,\n  displayWeapon: DisplaySub = {},\n  additional: Data = {}\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  if (subStat2) {\n    if (subStat2 === \"atk\" || subStat2 === \"def\" || subStat2 === \"hp\") throw new Error(\"SubStat 2 cannot be `atk`, `def`, or `hp`\")\n    const substat2Node = subscript(input.weapon.refineIndex, gen.addProps.map(x => x[subStat2] ?? NaN), { key: subStat2 })\n    merging.push({\n      premod: { [subStat2]: input.weapon.sub },\n      weapon: { sub2: substat2Node },\n    })\n  }\n\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","import icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\n\nimport data_gen_json from './data_gen.json'\nimport { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport { dataObjForWeaponSheet } from '../../util'\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.3c590be9.png\";","export default __webpack_public_path__ + \"static/media/Icon.973aa9e0.png\";","import { WeaponData } from 'pipeline'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport { Translate } from '../../../../Components/Translate'\nimport { input } from '../../../../Formula'\nimport { match, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { sgt } from '../../../Characters/SheetUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr] = trans(\"weapon\", key)\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst atk_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst plunging_dmg_ = match(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, \"dmg_\", undefined, {\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      teamBuff: true,\n      header: {\n        title: tr(`passiveName`),\n        icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? icon : iconAwaken} />,\n      },\n      description: data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`),\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\n      states: {\n        on: {\n          fields: [{\n            node: atk_\n          }, {\n            node: normal_dmg_\n          }, {\n            node: charged_dmg_\n          }, {\n            node: plunging_dmg_\n          }, {\n            text: sgt(\"duration\"),\n            value: 12,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import AmenomaKageuchi from './AmenomaKageuchi'\n// import AquilaFavonia from './AquilaFavonia'\n// import BlackcliffLongsword from './BlackcliffLongsword'\n// import CinnabarSpindle from './CinnabarSpindle'\n// import CoolSteel from './CoolSteel'\n// import DarkIronSword from './DarkIronSword'\nimport DullBlade from './DullBlade'\n// import FavoniusSword from './FavoniusSword'\n// import FesteringDesire from './FesteringDesire'\n// import FilletBlade from './FilletBlade'\nimport FreedomSworn from './FreedomSworn'\n// import HarbingerOfDawn from './HarbingerOfDawn'\n// import IronSting from './IronSting'\n// import LionsRoar from './LionsRoar'\n// import MistsplitterReforged from './MistsplitterReforged'\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\n// import PrototypeRancour from './PrototypeRancour'\n// import RoyalLongsword from './RoyalLongsword'\n// import SacrificialSword from './SacrificialSword'\n// import SilverSword from './SilverSword'\n// import SkyriderSword from './SkyriderSword'\n// import SkywardBlade from './SkywardBlade'\n// import SummitShaper from './SummitShaper'\n// import SwordOfDescension from './SwordOfDescension'\n// import TheAlleyFlash from './TheAlleyFlash'\n// import TheBlackSword from './TheBlackSword'\n// import TheFlute from './TheFlute'\n// import TravelersHandySword from './TravelersHandySword'\nconst sword = {\n  // AmenomaKageuchi,\n  // AquilaFavonia,\n  // BlackcliffLongsword,\n  // CinnabarSpindle,\n  // CoolSteel,\n  // DarkIronSword,\n  DullBlade,\n  // FavoniusSword,\n  // FesteringDesire,\n  // FilletBlade,\n  FreedomSworn,\n  // HarbingerOfDawn,\n  // IronSting,\n  // LionsRoar,\n  // MistsplitterReforged,\n  // PrimordialJadeCutter,\n  // PrototypeRancour,\n  // RoyalLongsword,\n  // SacrificialSword,\n  // SilverSword,\n  // SkyriderSword,\n  // SkywardBlade,\n  // SummitShaper,\n  // SwordOfDescension,\n  // TheAlleyFlash,\n  // TheBlackSword,\n  // TheFlute,\n  // TravelersHandySword,\n} as const\nexport default sword\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.e37ad1c4.png\";","export default __webpack_public_path__ + \"static/media/Icon.aae3c65f.png\";","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  matchFull(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { /* TODO: Add key for inactive char */ })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, \"heal_\", undefined, {\n  premod: {\n    ...dmg_Nodes,\n    // TODO: Check if add to `premod` or `total`\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [\n      ...Object.values(dmg_Nodes).map(n => ({\n        node: n\n      })),\n    ],\n    conditional: {\n      value: condStack,\n      path: condStackPath,\n      name: tr(\"passiveName\"),\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\n        name: `Stack ${i}`,\n        fields: [{ node: atkInc }]\n      }]))\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import BeginnersProtector from './BeginnersProtector'\n// import BlackcliffPole from './BlackcliffPole'\n// import BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\n// import CrescentPike from './CrescentPike'\n// import Deathmatch from './Deathmatch'\n// import DragonsBane from './DragonsBane'\n// import DragonspineSpear from './DragonspineSpear'\n// import EngulfingLightning from './EngulfingLightning'\n// import FavoniusLance from './FavoniusLance'\n// import Halberd from './Halberd'\n// import IronPoint from './IronPoint'\n// import KitainCrossSpear from './KitainCrossSpear'\n// import LithicSpear from './LithicSpear'\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\n// import PrototypeStarglitter from './PrototypeStarglitter'\n// import RoyalSpear from './RoyalSpear'\n// import SkywardSpine from './SkywardSpine'\n// import StaffOfHoma from './StaffOfHoma'\n// import TheCatch from './TheCatch'\n// import VortexVanquisher from './VortexVanquisher'\n// import WavebreakersFin from './WavebreakersFin'\n// import WhiteTassel from './WhiteTassel'\nconst polearm = {\n  // BeginnersProtector,\n  // BlackcliffPole,\n  // BlackTassel,\n  CalamityQueller,\n  // CrescentPike,\n  // Deathmatch,\n  // DragonsBane,\n  // DragonspineSpear,\n  // EngulfingLightning,\n  // FavoniusLance,\n  // Halberd,\n  // IronPoint,\n  // KitainCrossSpear,\n  // LithicSpear,\n  // PrimordialJadeWingedSpear,\n  // PrototypeStarglitter,\n  // RoyalSpear,\n  // SkywardSpine,\n  // StaffOfHoma,\n  // TheCatch,\n  // VortexVanquisher,\n  // WavebreakersFin,\n  // WhiteTassel,\n} as const\nexport default polearm\n","// import AlleyHunter from './AlleyHunter'\n// import AmosBow from './AmosBow'\n// import BlackcliffWarbow from './BlackcliffWarbow'\n// import CompoundBow from './CompoundBow'\n// import ElegyForTheEnd from './ElegyForTheEnd'\n// import FavoniusWarbow from './FavoniusWarbow'\n// import Hamayumi from './Hamayumi'\n// import HuntersBow from './HuntersBow'\n// import Messenger from './Messenger'\n// import MitternachtsWaltz from './MitternachtsWaltz'\n// import MouunsMoon from './MouunsMoon'\n// import PolarStar from './PolarStar'\n// import Predator from './Predator'\n// import PrototypeCrescent from './PrototypeCrescent'\n// import RavenBow from './RavenBow'\n// import RecurveBow from './RecurveBow'\n// import RoyalBow from './RoyalBow'\n// import Rust from './Rust'\n// import SacrificialBow from './SacrificialBow'\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\n// import SharpshootersOath from './SharpshootersOath'\n// import SkywardHarp from './SkywardHarp'\n// import Slingshot from './Slingshot'\n// import TheStringless from './TheStringless'\n// import TheViridescentHunt from './TheViridescentHunt'\n// import ThunderingPulse from './ThunderingPulse'\n// import WindblumeOde from './WindblumeOde'\nconst bow = {\n  // AlleyHunter,\n  // AmosBow,\n  // BlackcliffWarbow,\n  // CompoundBow,\n  // ElegyForTheEnd,\n  // FavoniusWarbow,\n  // Hamayumi,\n  // HuntersBow,\n  // Messenger,\n  // MitternachtsWaltz,\n  // MouunsMoon,\n  // PolarStar,\n  // Predator,\n  // PrototypeCrescent,\n  // RavenBow,\n  // RecurveBow,\n  // RoyalBow,\n  // Rust,\n  // SacrificialBow,\n  // SeasonedHuntersBow,\n  // SharpshootersOath,\n  // SkywardHarp,\n  // Slingshot,\n  // TheStringless,\n  // TheViridescentHunt,\n  // ThunderingPulse,\n  // WindblumeOde,\n} as const\nexport default bow\n","export default __webpack_public_path__ + \"static/media/Icon.97165cb5.png\";","export default __webpack_public_path__ + \"static/media/AwakenIcon.f05aaa35.png\";","import type { WeaponData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { dataObjForWeaponSheet } from '../../util'\nimport { input } from '../../../../Formula'\nimport data_gen_json from './data_gen.json'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\n\nconst key = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\nexport const data = dataObjForWeaponSheet(key, data_gen, \"heal_\", { normal_dmgInc }, {\n  premod: { normal_dmgInc }\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{\n      text: <Translate ns={`\"weapon_${key}\"`} key18=\"name\" />,\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import ApprenticesNotes from './ApprenticesNotes'\n// import BlackcliffAgate from './BlackcliffAgate'\n// import DodocoTales from './DodocoTales'\n// import EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\n// import EyeOfPerception from './EyeOfPerception'\n// import FavoniusCodex from './FavoniusCodex'\n// import Frostbearer from './Frostbearer'\n// import HakushinRing from './HakushinRing'\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\n// import MagicGuide from './MagicGuide'\n// import MappaMare from './MappaMare'\n// import MemoryOfDust from './MemoryOfDust'\n// import OtherworldlyStory from './OtherworldlyStory'\n// import PocketGrimoire from './PocketGrimoire'\n// import PrototypeAmber from './PrototypeAmber'\n// import RoyalGrimoire from './RoyalGrimoire'\n// import SacrificialFragments from './SacrificialFragments'\n// import SkywardAtlas from './SkywardAtlas'\n// import SolarPearl from './SolarPearl'\n// import TheWidsith from './TheWidsith'\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\n// import TwinNephrite from './TwinNephrite'\n// import WineAndSong from './WineAndSong'\nconst catalyst = {\n  // ApprenticesNotes,\n  // BlackcliffAgate,\n  // DodocoTales,\n  // EmeraldOrb,\n  EverlastingMoonglow,\n  // EyeOfPerception,\n  // FavoniusCodex,\n  // Frostbearer,\n  // HakushinRing,\n  // LostPrayerToTheSacredWinds,\n  // MagicGuide,\n  // MappaMare,\n  // MemoryOfDust,\n  // OtherworldlyStory,\n  // PocketGrimoire,\n  // PrototypeAmber,\n  // RoyalGrimoire,\n  // SacrificialFragments,\n  // SkywardAtlas,\n  // SolarPearl,\n  // TheWidsith,\n  // ThrillingTalesOfDragonSlayers,\n  // TwinNephrite,\n  // WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"sourceRoot":""}