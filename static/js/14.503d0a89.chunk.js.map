{"version":3,"sources":["Data/SheetUtil.tsx","Data/Characters/dataUtil.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/WasterGreatsword/AwakenIcon.png","Data/Weapons/Claymore/WasterGreatsword/Icon.png","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/DullBlade/AwakenIcon.png","Data/Weapons/Sword/DullBlade/Icon.png","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/AwakenIcon.png","Data/Weapons/Sword/FreedomSworn/Icon.png","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/Icon.png","Data/Weapons/Polearm/BeginnersProtector/AwakenIcon.png","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/AwakenIcon.png","Data/Weapons/Polearm/BlackcliffPole/Icon.png","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/AwakenIcon.png","Data/Weapons/Polearm/BlackTassel/Icon.png","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/AwakenIcon.png","Data/Weapons/Polearm/CalamityQueller/Icon.png","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/AwakenIcon.png","Data/Weapons/Polearm/CrescentPike/Icon.png","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/EngulfingLightning/AwakenIcon.png","Data/Weapons/Polearm/EngulfingLightning/Icon.png","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/HuntersBow/AwakenIcon.png","Data/Weapons/Bow/HuntersBow/Icon.png","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/AwakenIcon.png","Data/Weapons/Catalyst/ApprenticesNotes/Icon.png","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/Icon.png","Data/Weapons/Catalyst/EverlastingMoonglow/AwakenIcon.png","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/KagurasVerity/AwakenIcon.png","Data/Weapons/Catalyst/KagurasVerity/Icon.png","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/TheWidsith/AwakenIcon.png","Data/Weapons/Catalyst/TheWidsith/Icon.png","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"names":["st","strKey","values","ns","key18","sgt","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","absorbableEle","charCurves","objectMap","_charCurves","value","Object","commonBasic","objectKeyMap","allSubstats","input","total","critRate_","cappedCritRate","inferredHitEle","stringPrio","infusion","team","equalStr","weaponType","charEle","hit","move","getTalentType","customDmgNode","base","additional","data","dmg","mergeData","constant","ele","undefined","customShieldNode","shieldNode","prod","sum","unit","shield_","dmgNode","lvlMultiplier","talentType","subscript","shieldNodeTalent","baseMultiplier","flat","talentIndex","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","lvl","basic","foundSpecial","charKey","weaponTypeKey","premod","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","asc","map","NaN","length","result","infoMut","prefix","asConst","endsWith","info","variant","slice","Error","special","allMainStatKeys","inferInfoMut","Stat","this","printStat","statKey","stats","Translate","weaponCurves","fromEntries","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","sheet","icon","iconAwaken","document","WeaponSheet","claymore","WasterGreatsword","tr","autoSrc","condPassivePath","condPassive","atk_","equal","refineIndex","normal_dmg_","charged_dmg_","plunging_dmg_","dmg_","addProps","all_dmg_","fields","node","conditional","header","conditionalHeader","description","conditionaldesc","name","states","on","text","sword","DullBlade","FreedomSworn","opponentsDefeated","range","lookup","i","c","trm","condStackPath","condStack","dmg_Nodes","allElements","e","atkInc","matchFull","activeCharKey","atk","min","enerRech_","percent","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","EngulfingLightning","bow","HuntersBow","normal_dmgInc","hp","heal_","condPath","condNode","skill_dmg_s","toString","d","ele_dmg_s","skill_dmg_","refinementEleDmgVals","anemo_dmg_","cryo_dmg_","electro_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","eleMas","aria","interlude","recitative","catalyst","ApprenticesNotes","EverlastingMoonglow","KagurasVerity","TheWidsith","WeaponData"],"mappings":"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","file":"static/js/14.503d0a89.chunk.js","sourcesContent":["import { Translate } from \"../Components/Translate\"\nimport { ReadNode } from \"../Formula/type\"\nimport { customStringRead } from \"../Formula/utils\"\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\n\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\n  const path = [key, subKey]\n  const node = condReadNode(path)\n  return [path, node]\n}\n\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\n  return [\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\n  ]\n}\n","import { input } from \"../../Formula\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { reactions } from \"../../Formula/reaction\";\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\nimport { constant, data, equalStr, infoMut, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\nimport _charCurves from \"./expCurve_gen.json\";\n\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\n\n// TODO: Remove this conversion after changing the file format\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\n\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\ncommonBasic.critRate_ = input.total.cappedCritRate\n\nconst inferredHitEle = stringPrio(\n  input.infusion,\n  input.team.infusion,\n  // Inferred Element\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\n  equalStr(input.hit.move, \"skill\", input.charEle),\n  \"physical\",\n)\n\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\n  switch (move) {\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\n    case \"skill\": return \"skill\";\n    case \"burst\": return \"burst\";\n  }\n}\n\n/** Note: `additional` applies only to this formula */\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\n  return data(input.hit.dmg, mergeData([{\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\n  }, additional]))\n}\n/** Note: `additional` applies only to this formula */\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\n  return additional ? data(shieldNode, additional) : shieldNode\n}\n/** Note: `additional` applies only to this formula */\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\n  const talentType = getTalentType(move)\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNode(base: MainStatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\n}\n/** Note: `additional` applies only to this formula */\nexport function shieldNodeTalent(base: MainStatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\n  const talentType = getTalentType(move)\n  const talentIndex = input.total[`${talentType}Index`]\n  return customShieldNode(sum(\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\n    subscript(talentIndex, flat)\n  ), additional)\n}\nexport function dataObjForCharacterSheet(\n  key: CharacterKey,\n  element: ElementKey | undefined,\n  region: Region | undefined,\n  gen: {\n    weaponTypeKey: string,\n    base: { hp: number, atk: number, def: number },\n    curves: { [key in string]?: string },\n    ascensions: { props: { [key in string]?: number } }[]\n  },\n  display: { [key: string]: DisplaySub },\n  additional: Data = {},\n): Data {\n  function curve(base: number, lvlCurve: string): NumNode {\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\n  }\n  display.basic = { ...commonBasic }\n  const data: Data = {\n    charKey: constant(key),\n    base: {},\n    weaponType: constant(gen.weaponTypeKey),\n    premod: {},\n    display,\n  }\n  if (element) {\n    data.charEle = constant(element)\n    data.teamBuff = { tally: { [element]: constant(1) } }\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\n    data.display!.reaction = reactions[element]\n  }\n  if (region)\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\n  if (gen.weaponTypeKey !== \"catalyst\") {\n    if (!data.display!.basic) data.display!.basic = {}\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\n  }\n\n  let foundSpecial: boolean | undefined\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\n    const list: NumNode[] = []\n    if (gen.curves[stat])\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\n    const asc = gen.ascensions.some(x => x.props[stat])\n    if (asc)\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\n\n    if (!list.length) continue\n\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\n      data.base![stat] = result\n    else {\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\n      foundSpecial = true\n      data.special = result\n      data.premod![stat] = input.special\n    }\n  }\n\n  return mergeData([data, inferInfoMut(additional)])\n}\n","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\n/**\n * @deprecated\n */\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\n/**\n * @deprecated\n */\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import type { WeaponData } from \"pipeline\";\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\nimport { MainStatKey, SubstatKey } from \"../../Types/artifact\";\nimport { WeaponKey } from \"../../Types/consts\";\nimport _weaponCurves from \"./expCurve_gen.json\";\nimport { input } from \"../../Formula\";\nimport { Data, DisplaySub } from \"../../Formula/type\";\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\n\n// TODO: Remove this conversion after changing the file format\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\n\nexport function dataObjForWeaponSheet(\n  key: WeaponKey,\n  gen: WeaponData,\n  additional: Data = {},\n  displayWeapon: DisplaySub = {},\n): Data {\n  const result: Data = {\n    base: {},\n    premod: {},\n    total: {},\n    weapon: {\n      key: constant(key), type: constant(gen.weaponType),\n    },\n    display: {\n      [`weapon:${key}`]: displayWeapon\n    },\n  }\n\n  const { mainStat, subStat } = gen\n  const merging = [result]\n\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\n\n  if (subStat) {\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\n    merging.push({\n      premod: { [subStat.type]: input.weapon.sub },\n      weapon: { sub: substatNode },\n    })\n  }\n  return mergeData([...merging, inferInfoMut(additional, key)])\n}\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.e81f7431.png\";","export default __webpack_public_path__ + \"static/media/Icon.42b6e78e.png\";","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"WasterGreatsword\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import Akuoumaru from './Akuoumaru'\n// import BlackcliffSlasher from './BlackcliffSlasher'\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\n// import DebateClub from './DebateClub'\n// import FavoniusGreatsword from './FavoniusGreatsword'\n// import FerrousShadow from './FerrousShadow'\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\n// import LithicBlade from './LithicBlade'\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\n// import OldMercsPal from './OldMercsPal'\n// import PrototypeArchaic from './PrototypeArchaic'\n// import Rainslasher from './Rainslasher'\n// import RedhornStonethresher from './RedhornStonethresher'\n// import RoyalGreatsword from './RoyalGreatsword'\n// import SacrificialGreatsword from './SacrificialGreatsword'\n// import SerpentSpine from './SerpentSpine'\n// import SkyriderGreatsword from './SkyriderGreatsword'\n// import SkywardPride from './SkywardPride'\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\n// import SongOfBrokenPines from './SongOfBrokenPines'\n// import TheBell from './TheBell'\n// import TheUnforged from './TheUnforged'\nimport WasterGreatsword from './WasterGreatsword'\n// import Whiteblind from './Whiteblind'\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\n// import WolfsGravestone from './WolfsGravestone'\nconst claymore = {\n  // Akuoumaru,\n  // BlackcliffSlasher,\n  // BloodtaintedGreatsword,\n  // DebateClub,\n  // FavoniusGreatsword,\n  // FerrousShadow,\n  // KatsuragikiriNagamasa,\n  // LithicBlade,\n  // LuxuriousSeaLord,\n  // OldMercsPal,\n  // PrototypeArchaic,\n  // Rainslasher,\n  // RedhornStonethresher,\n  // RoyalGreatsword,\n  // SacrificialGreatsword,\n  // SerpentSpine,\n  // SkyriderGreatsword,\n  // SkywardPride,\n  // SnowTombedStarsilver,\n  // SongOfBrokenPines,\n  // TheBell,\n  // TheUnforged,\n  WasterGreatsword,\n  // Whiteblind,\n  // WhiteIronGreatsword,\n  // WolfsGravestone,\n} as const\nexport default claymore\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.b5dbc827.png\";","export default __webpack_public_path__ + \"static/media/Icon.4be78b63.png\";","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"DullBlade\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.3c590be9.png\";","export default __webpack_public_path__ + \"static/media/Icon.973aa9e0.png\";","import { WeaponData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { sgt } from '../../../Characters/SheetUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"FreedomSworn\"\nconst data_gen = data_gen_json as WeaponData\nconst [tr] = trans(\"weapon\", key)\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\n\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\nconst plunging_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\n\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_: dmg_\n  },\n  teamBuff: {\n    premod: {\n      atk_,\n      normal_dmg_,\n      charged_dmg_,\n      plunging_dmg_,\n    }\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{ node: dmg_ }],\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      teamBuff: true,\n      header: conditionalHeader(tr, icon, iconAwaken),\n      description: conditionaldesc(tr),\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\n      states: {\n        on: {\n          fields: [{\n            node: atk_\n          }, {\n            node: normal_dmg_\n          }, {\n            node: charged_dmg_\n          }, {\n            node: plunging_dmg_\n          }, {\n            text: sgt(\"duration\"),\n            value: 12,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import AmenomaKageuchi from './AmenomaKageuchi'\n// import AquilaFavonia from './AquilaFavonia'\n// import BlackcliffLongsword from './BlackcliffLongsword'\n// import CinnabarSpindle from './CinnabarSpindle'\n// import CoolSteel from './CoolSteel'\n// import DarkIronSword from './DarkIronSword'\nimport DullBlade from './DullBlade'\n// import FavoniusSword from './FavoniusSword'\n// import FesteringDesire from './FesteringDesire'\n// import FilletBlade from './FilletBlade'\nimport FreedomSworn from './FreedomSworn'\n// import HarbingerOfDawn from './HarbingerOfDawn'\n// import IronSting from './IronSting'\n// import LionsRoar from './LionsRoar'\n// import MistsplitterReforged from './MistsplitterReforged'\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\n// import PrototypeRancour from './PrototypeRancour'\n// import RoyalLongsword from './RoyalLongsword'\n// import SacrificialSword from './SacrificialSword'\n// import SilverSword from './SilverSword'\n// import SkyriderSword from './SkyriderSword'\n// import SkywardBlade from './SkywardBlade'\n// import SummitShaper from './SummitShaper'\n// import SwordOfDescension from './SwordOfDescension'\n// import TheAlleyFlash from './TheAlleyFlash'\n// import TheBlackSword from './TheBlackSword'\n// import TheFlute from './TheFlute'\n// import TravelersHandySword from './TravelersHandySword'\nconst sword = {\n  // AmenomaKageuchi,\n  // AquilaFavonia,\n  // BlackcliffLongsword,\n  // CinnabarSpindle,\n  // CoolSteel,\n  // DarkIronSword,\n  DullBlade,\n  // FavoniusSword,\n  // FesteringDesire,\n  // FilletBlade,\n  FreedomSworn,\n  // HarbingerOfDawn,\n  // IronSting,\n  // LionsRoar,\n  // MistsplitterReforged,\n  // PrimordialJadeCutter,\n  // PrototypeRancour,\n  // RoyalLongsword,\n  // SacrificialSword,\n  // SilverSword,\n  // SkyriderSword,\n  // SkywardBlade,\n  // SummitShaper,\n  // SwordOfDescension,\n  // TheAlleyFlash,\n  // TheBlackSword,\n  // TheFlute,\n  // TravelersHandySword,\n} as const\nexport default sword\n","export default __webpack_public_path__ + \"static/media/Icon.adde0953.png\";","export default __webpack_public_path__ + \"static/media/AwakenIcon.bc280184.png\";","import icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\n\nimport data_gen_json from './data_gen.json'\nimport { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport { dataObjForWeaponSheet } from '../../util'\n\nconst key: WeaponKey = \"BeginnersProtector\"\nconst data_gen = data_gen_json as WeaponData\n\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: [],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)","export default __webpack_public_path__ + \"static/media/AwakenIcon.12716f16.png\";","export default __webpack_public_path__ + \"static/media/Icon.1764d2d9.png\";","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"BlackcliffPole\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst opponentsDefeated = range(1, 3)\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\n  subscript(input.weapon.refineIndex, atkInc))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_: atk_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: st(\"afterDefeatEnemy\"),\n      states:\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\n          name: `${c}`,\n          fields: [{\n            node: atk_,\n          }, {\n            text: sgt(\"duration\"),\n            value: 30,\n            unit: \"s\"\n          }]\n        }]))\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.341b6273.png\";","export default __webpack_public_path__ + \"static/media/Icon.4e27d7f2.png\";","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"BlackTassel\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    all_dmg_\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: trm(\"condName\"),\n      states: {\n        on: {\n          fields: [{\n            node: all_dmg_,\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.e37ad1c4.png\";","export default __webpack_public_path__ + \"static/media/Icon.aae3c65f.png\";","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { objectKeyMap, range } from '../../../../Util/Util'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CalamityQueller\"\nconst data_gen = data_gen_json as WeaponData\n\nconst [tr] = trans(\"weapon\", key)\n\nconst [condStackPath, condStack] = cond(key, \"stack\")\n// const [condActivePath, condActive] = cond(key, \"active\")\n\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\n\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\nconst atkInc = prod(\n  matchFull(input.activeCharKey, input.charKey,\n    constant(1, { /* TODO: Add key for active char */ }),\n    constant(2, { /* TODO: Add key for inactive char */ })),\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\n)\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    ...dmg_Nodes,\n    atk_: atkInc,\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\n    conditional: {\n      value: condStack,\n      path: condStackPath,\n      name: tr(\"passiveName\"),\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\n        name: `Stack ${i}`,\n        fields: [{ node: atkInc }]\n      }]))\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.6c2539d3.png\";","export default __webpack_public_path__ + \"static/media/Icon.e17cff36.png\";","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { customDmgNode } from '../../../Characters/dataUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"CrescentPike\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\nconst hit = customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc)), \"elemental\", {\n  hit: { ele: constant(\"physical\") }\n})\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\n  hit\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: trm(\"condName\"),\n      states: {\n        on: {\n          fields: [{\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.12ee7e85.png\";","export default __webpack_public_path__ + \"static/media/Icon.17edaabf.png\";","import { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { cond, sgt, st } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"EngulfingLightning\"\nconst data_gen = data_gen_json as WeaponData\n\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\n\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    enerRech_\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{\n      node: atk_,\n    }],\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: st(\"afterUse.burst\"),\n      states: {\n        on: {\n          fields: [{\n            node: enerRech_\n          }, {\n            text: sgt(\"duration\"),\n            value: 12,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import BeginnersProtector from './BeginnersProtector'\nimport BlackcliffPole from './BlackcliffPole'\nimport BlackTassel from './BlackTassel'\nimport CalamityQueller from './CalamityQueller'\nimport CrescentPike from './CrescentPike'\n// import Deathmatch from './Deathmatch'\n// import DragonsBane from './DragonsBane'\n// import DragonspineSpear from './DragonspineSpear'\nimport EngulfingLightning from './EngulfingLightning'\n// import FavoniusLance from './FavoniusLance'\n// import Halberd from './Halberd'\n// import IronPoint from './IronPoint'\n// import KitainCrossSpear from './KitainCrossSpear'\n// import LithicSpear from './LithicSpear'\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\n// import PrototypeStarglitter from './PrototypeStarglitter'\n// import RoyalSpear from './RoyalSpear'\n// import SkywardSpine from './SkywardSpine'\n// import StaffOfHoma from './StaffOfHoma'\n// import TheCatch from './TheCatch'\n// import VortexVanquisher from './VortexVanquisher'\n// import WavebreakersFin from './WavebreakersFin'\n// import WhiteTassel from './WhiteTassel'\nconst polearm = {\n  BeginnersProtector,\n  BlackcliffPole,\n  BlackTassel,\n  CalamityQueller,\n  CrescentPike,\n  // Deathmatch,\n  // DragonsBane,\n  // DragonspineSpear,\n  EngulfingLightning,\n  // FavoniusLance,\n  // Halberd,\n  // IronPoint,\n  // KitainCrossSpear,\n  // LithicSpear,\n  // PrimordialJadeWingedSpear,\n  // PrototypeStarglitter,\n  // RoyalSpear,\n  // SkywardSpine,\n  // StaffOfHoma,\n  // TheCatch,\n  // VortexVanquisher,\n  // WavebreakersFin,\n  // WhiteTassel,\n} as const\nexport default polearm\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.abd5b73b.png\";","export default __webpack_public_path__ + \"static/media/Icon.56066668.png\";","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"HuntersBow\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","// import AlleyHunter from './AlleyHunter'\n// import AmosBow from './AmosBow'\n// import BlackcliffWarbow from './BlackcliffWarbow'\n// import CompoundBow from './CompoundBow'\n// import ElegyForTheEnd from './ElegyForTheEnd'\n// import FavoniusWarbow from './FavoniusWarbow'\n// import Hamayumi from './Hamayumi'\nimport HuntersBow from './HuntersBow'\n// import Messenger from './Messenger'\n// import MitternachtsWaltz from './MitternachtsWaltz'\n// import MouunsMoon from './MouunsMoon'\n// import PolarStar from './PolarStar'\n// import Predator from './Predator'\n// import PrototypeCrescent from './PrototypeCrescent'\n// import RavenBow from './RavenBow'\n// import RecurveBow from './RecurveBow'\n// import RoyalBow from './RoyalBow'\n// import Rust from './Rust'\n// import SacrificialBow from './SacrificialBow'\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\n// import SharpshootersOath from './SharpshootersOath'\n// import SkywardHarp from './SkywardHarp'\n// import Slingshot from './Slingshot'\n// import TheStringless from './TheStringless'\n// import TheViridescentHunt from './TheViridescentHunt'\n// import ThunderingPulse from './ThunderingPulse'\n// import WindblumeOde from './WindblumeOde'\nconst bow = {\n  // AlleyHunter,\n  // AmosBow,\n  // BlackcliffWarbow,\n  // CompoundBow,\n  // ElegyForTheEnd,\n  // FavoniusWarbow,\n  // Hamayumi,\n  HuntersBow,\n  // Messenger,\n  // MitternachtsWaltz,\n  // MouunsMoon,\n  // PolarStar,\n  // Predator,\n  // PrototypeCrescent,\n  // RavenBow,\n  // RecurveBow,\n  // RoyalBow,\n  // Rust,\n  // SacrificialBow,\n  // SeasonedHuntersBow,\n  // SharpshootersOath,\n  // SkywardHarp,\n  // Slingshot,\n  // TheStringless,\n  // TheViridescentHunt,\n  // ThunderingPulse,\n  // WindblumeOde,\n} as const\nexport default bow\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.78c7da7c.png\";","export default __webpack_public_path__ + \"static/media/Icon.4a7b44b1.png\";","import { WeaponData } from 'pipeline'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst data_gen = data_gen_json as WeaponData\nconst key: WeaponKey = \"ApprenticesNotes\"\nexport const data = dataObjForWeaponSheet(key, data_gen)\nconst sheet: IWeaponSheet = {\n  ...data_gen as WeaponData,\n  icon,\n  iconAwaken,\n  document: []\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/Icon.97165cb5.png\";","export default __webpack_public_path__ + \"static/media/AwakenIcon.f05aaa35.png\";","import type { WeaponData } from 'pipeline'\nimport icon from './Icon.png'\nimport iconAwaken from './AwakenIcon.png'\nimport { prod, subscript } from \"../../../../Formula/utils\"\nimport { dataObjForWeaponSheet } from '../../util'\nimport { input } from '../../../../Formula'\nimport data_gen_json from './data_gen.json'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { trans } from '../../../SheetUtil'\n\nconst key: WeaponKey = \"EverlastingMoonglow\"\nconst data_gen = data_gen_json as WeaponData\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\nconst [, trm] = trans(\"weapon\", key)\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: { normal_dmgInc, heal_ }\n}, { normal_dmgInc })\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    fields: [{\n      node: heal_\n    }, {\n      text: trm(\"name\"),\n      node: normal_dmgInc,\n    }],\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.7bf760b5.png\";","export default __webpack_public_path__ + \"static/media/Icon.b44556ec.png\";","import type { WeaponData } from 'pipeline'\nimport { input } from '../../../../Formula'\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\nimport { allElements, WeaponKey } from '../../../../Types/consts'\nimport { range } from '../../../../Util/Util'\nimport { cond } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\n\nconst key: WeaponKey = \"KagurasVerity\"\nconst data_gen = data_gen_json as WeaponData\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\n\nconst skill_dmg_s = range(1, 3).map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\n\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\n\nexport const data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    skill_dmg_: sum(...skill_dmg_s),\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\n  },\n})\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condNode,\n      path: condPath,\n      name: \"KaguraDance\",\n      states: {\n        1: {\n          name: \"1\",\n          fields: [{ node: skill_dmg_s[0] }]\n        },\n        2: {\n          name: \"2\",\n          fields: [{ node: skill_dmg_s[1] }]\n        },\n        3: {\n          name: \"3\",\n          fields: [{ node: skill_dmg_s[2], },\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))\n          ]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","export default __webpack_public_path__ + \"static/media/AwakenIcon.6c163fd5.png\";","export default __webpack_public_path__ + \"static/media/Icon.c57a93cc.png\";","import { WeaponData } from 'pipeline'\nimport { Translate } from '../../../../Components/Translate'\nimport { input } from '../../../../Formula'\nimport { equal, subscript } from '../../../../Formula/utils'\nimport { WeaponKey } from '../../../../Types/consts'\nimport { sgt } from '../../../Characters/SheetUtil'\nimport { cond, trans } from '../../../SheetUtil'\nimport { dataObjForWeaponSheet } from '../../util'\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\nimport iconAwaken from './AwakenIcon.png'\nimport data_gen_json from './data_gen.json'\nimport icon from './Icon.png'\nconst key: WeaponKey = \"TheWidsith\"\nconst data_gen = data_gen_json as WeaponData\nconst [, trm] = trans(\"weapon\", key)\n\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\n\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\n\nconst data = dataObjForWeaponSheet(key, data_gen, {\n  premod: {\n    atk_,\n    anemo_dmg_,\n    cryo_dmg_,\n    electro_dmg_,\n    geo_dmg_,\n    hydro_dmg_,\n    pyro_dmg_,\n    eleMas\n  }\n})\n\nconst sheet: IWeaponSheet = {\n  icon,\n  iconAwaken,\n  document: [{\n    conditional: {\n      value: condPassive,\n      path: condPassivePath,\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\n      states: {\n        aria: {\n          name: trm(\"aria\"),\n          fields: [{\n            node: anemo_dmg_\n          }, {\n            node: cryo_dmg_\n          }, {\n            node: electro_dmg_\n          }, {\n            node: geo_dmg_\n          }, {\n            node: hydro_dmg_\n          }, {\n            node: pyro_dmg_\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        },\n        interlude: {\n          name: trm(\"interlude\"),\n          fields: [{\n            node: eleMas\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        },\n        recitative: {\n          name: trm(\"recitative\"),\n          fields: [{\n            node: atk_\n          }, {\n            text: sgt(\"duration\"),\n            value: 10,\n            unit: \"s\"\n          }]\n        }\n      }\n    }\n  }],\n}\nexport default new WeaponSheet(key, sheet, data_gen, data)\n","import ApprenticesNotes from './ApprenticesNotes'\n// import BlackcliffAgate from './BlackcliffAgate'\n// import DodocoTales from './DodocoTales'\n// import EmeraldOrb from './EmeraldOrb'\nimport EverlastingMoonglow from './EverlastingMoonglow'\n// import EyeOfPerception from './EyeOfPerception'\n// import FavoniusCodex from './FavoniusCodex'\n// import Frostbearer from './Frostbearer'\n// import HakushinRing from './HakushinRing'\nimport KagurasVerity from './KagurasVerity'\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\n// import MagicGuide from './MagicGuide'\n// import MappaMare from './MappaMare'\n// import MemoryOfDust from './MemoryOfDust'\n// import OtherworldlyStory from './OtherworldlyStory'\n// import PocketGrimoire from './PocketGrimoire'\n// import PrototypeAmber from './PrototypeAmber'\n// import RoyalGrimoire from './RoyalGrimoire'\n// import SacrificialFragments from './SacrificialFragments'\n// import SkywardAtlas from './SkywardAtlas'\n// import SolarPearl from './SolarPearl'\nimport TheWidsith from './TheWidsith'\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\n// import TwinNephrite from './TwinNephrite'\n// import WineAndSong from './WineAndSong'\nconst catalyst = {\n  ApprenticesNotes,\n  // BlackcliffAgate,\n  // DodocoTales,\n  // EmeraldOrb,\n  EverlastingMoonglow,\n  // EyeOfPerception,\n  // FavoniusCodex,\n  // Frostbearer,\n  // HakushinRing,\n  KagurasVerity,\n  // LostPrayerToTheSacredWinds,\n  // MagicGuide,\n  // MappaMare,\n  // MemoryOfDust,\n  // OtherworldlyStory,\n  // PocketGrimoire,\n  // PrototypeAmber,\n  // RoyalGrimoire,\n  // SacrificialFragments,\n  // SkywardAtlas,\n  // SolarPearl,\n  TheWidsith,\n  // ThrillingTalesOfDragonSlayers,\n  // TwinNephrite,\n  // WineAndSong,\n} as const\nexport default catalyst\n","import claymore from './Claymore'\nimport sword from './Sword'\nimport polearm from './Polearm'\nimport bow from './Bow'\nimport { WeaponKey } from '../../Types/consts'\nimport catalyst from './Catalyst'\nimport WeaponSheet from './WeaponSheet'\n\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\n  ...sword,\n  ...claymore,\n  ...polearm,\n  ...bow,\n  ...catalyst\n} as const\nexport default WeaponData\n"],"sourceRoot":""}