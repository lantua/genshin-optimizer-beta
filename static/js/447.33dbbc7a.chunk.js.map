{"version":3,"file":"static/js/447.33dbbc7a.chunk.js","mappings":"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","sources":["Stat.tsx","Data/Characters/SheetUtil.tsx","Data/SheetUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n/**\r\n * @deprecated\r\n */\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\n/**\r\n * @deprecated\r\n */\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      }\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import Akuoumaru from './Akuoumaru'\r\n// import BlackcliffSlasher from './BlackcliffSlasher'\r\n// import BloodtaintedGreatsword from './BloodtaintedGreatsword'\r\n// import DebateClub from './DebateClub'\r\n// import FavoniusGreatsword from './FavoniusGreatsword'\r\n// import FerrousShadow from './FerrousShadow'\r\n// import KatsuragikiriNagamasa from './KatsuragikiriNagamasa'\r\n// import LithicBlade from './LithicBlade'\r\n// import LuxuriousSeaLord from './LuxuriousSeaLord'\r\n// import OldMercsPal from './OldMercsPal'\r\n// import PrototypeArchaic from './PrototypeArchaic'\r\n// import Rainslasher from './Rainslasher'\r\n// import RedhornStonethresher from './RedhornStonethresher'\r\n// import RoyalGreatsword from './RoyalGreatsword'\r\n// import SacrificialGreatsword from './SacrificialGreatsword'\r\n// import SerpentSpine from './SerpentSpine'\r\n// import SkyriderGreatsword from './SkyriderGreatsword'\r\n// import SkywardPride from './SkywardPride'\r\n// import SnowTombedStarsilver from './SnowTombedStarsilver'\r\n// import SongOfBrokenPines from './SongOfBrokenPines'\r\n// import TheBell from './TheBell'\r\n// import TheUnforged from './TheUnforged'\r\nimport WasterGreatsword from './WasterGreatsword'\r\n// import Whiteblind from './Whiteblind'\r\n// import WhiteIronGreatsword from './WhiteIronGreatsword'\r\n// import WolfsGravestone from './WolfsGravestone'\r\nconst claymore = {\r\n  // Akuoumaru,\r\n  // BlackcliffSlasher,\r\n  // BloodtaintedGreatsword,\r\n  // DebateClub,\r\n  // FavoniusGreatsword,\r\n  // FerrousShadow,\r\n  // KatsuragikiriNagamasa,\r\n  // LithicBlade,\r\n  // LuxuriousSeaLord,\r\n  // OldMercsPal,\r\n  // PrototypeArchaic,\r\n  // Rainslasher,\r\n  // RedhornStonethresher,\r\n  // RoyalGreatsword,\r\n  // SacrificialGreatsword,\r\n  // SerpentSpine,\r\n  // SkyriderGreatsword,\r\n  // SkywardPride,\r\n  // SnowTombedStarsilver,\r\n  // SongOfBrokenPines,\r\n  // TheBell,\r\n  // TheUnforged,\r\n  WasterGreatsword,\r\n  // Whiteblind,\r\n  // WhiteIronGreatsword,\r\n  // WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { sgt } from '../../../Characters/SheetUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { conditionaldesc, conditionalHeader, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr] = trans(\"weapon\", key)\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst plunging_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\n\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{ node: dmg_ }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      teamBuff: true,\r\n      header: conditionalHeader(tr, icon, iconAwaken),\r\n      description: conditionaldesc(tr),\r\n      name: <Translate ns=\"weapon_FreedomSworn\" key18=\"name\" />,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            node: normal_dmg_\r\n          }, {\r\n            node: charged_dmg_\r\n          }, {\r\n            node: plunging_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import AmenomaKageuchi from './AmenomaKageuchi'\r\n// import AquilaFavonia from './AquilaFavonia'\r\n// import BlackcliffLongsword from './BlackcliffLongsword'\r\n// import CinnabarSpindle from './CinnabarSpindle'\r\n// import CoolSteel from './CoolSteel'\r\n// import DarkIronSword from './DarkIronSword'\r\nimport DullBlade from './DullBlade'\r\n// import FavoniusSword from './FavoniusSword'\r\n// import FesteringDesire from './FesteringDesire'\r\n// import FilletBlade from './FilletBlade'\r\nimport FreedomSworn from './FreedomSworn'\r\n// import HarbingerOfDawn from './HarbingerOfDawn'\r\n// import IronSting from './IronSting'\r\n// import LionsRoar from './LionsRoar'\r\n// import MistsplitterReforged from './MistsplitterReforged'\r\n// import PrimordialJadeCutter from './PrimordialJadeCutter'\r\n// import PrototypeRancour from './PrototypeRancour'\r\n// import RoyalLongsword from './RoyalLongsword'\r\n// import SacrificialSword from './SacrificialSword'\r\n// import SilverSword from './SilverSword'\r\n// import SkyriderSword from './SkyriderSword'\r\n// import SkywardBlade from './SkywardBlade'\r\n// import SummitShaper from './SummitShaper'\r\n// import SwordOfDescension from './SwordOfDescension'\r\n// import TheAlleyFlash from './TheAlleyFlash'\r\n// import TheBlackSword from './TheBlackSword'\r\n// import TheFlute from './TheFlute'\r\n// import TravelersHandySword from './TravelersHandySword'\r\nconst sword = {\r\n  // AmenomaKageuchi,\r\n  // AquilaFavonia,\r\n  // BlackcliffLongsword,\r\n  // CinnabarSpindle,\r\n  // CoolSteel,\r\n  // DarkIronSword,\r\n  DullBlade,\r\n  // FavoniusSword,\r\n  // FesteringDesire,\r\n  // FilletBlade,\r\n  FreedomSworn,\r\n  // HarbingerOfDawn,\r\n  // IronSting,\r\n  // LionsRoar,\r\n  // MistsplitterReforged,\r\n  // PrimordialJadeCutter,\r\n  // PrototypeRancour,\r\n  // RoyalLongsword,\r\n  // SacrificialSword,\r\n  // SilverSword,\r\n  // SkyriderSword,\r\n  // SkywardBlade,\r\n  // SummitShaper,\r\n  // SwordOfDescension,\r\n  // TheAlleyFlash,\r\n  // TheBlackSword,\r\n  // TheFlute,\r\n  // TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\n\r\nimport data_gen_json from './data_gen.json'\r\nimport { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterDefeatEnemy\"),\r\n      states:\r\n        Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: atk_,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 30,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: all_dmg_,\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, matchFull, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  matchFull(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { /* TODO: Add key for inactive char */ })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i)), 0), // TODO: Add key for stack\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n    conditional: {\r\n      value: condStack,\r\n      path: condStackPath,\r\n      name: tr(\"passiveName\"),\r\n      states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n        name: `Stack ${i}`,\r\n        fields: [{ node: atkInc }]\r\n      }]))\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc)), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  hit\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: trm(\"condName\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = min(prod(subscript(input.weapon.refineIndex, atk), sum(input.total.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: st(\"afterUse.burst\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: enerRech_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 12,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\n// import Deathmatch from './Deathmatch'\r\n// import DragonsBane from './DragonsBane'\r\n// import DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\n// import FavoniusLance from './FavoniusLance'\r\n// import Halberd from './Halberd'\r\n// import IronPoint from './IronPoint'\r\n// import KitainCrossSpear from './KitainCrossSpear'\r\n// import LithicSpear from './LithicSpear'\r\n// import PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\n// import PrototypeStarglitter from './PrototypeStarglitter'\r\n// import RoyalSpear from './RoyalSpear'\r\n// import SkywardSpine from './SkywardSpine'\r\n// import StaffOfHoma from './StaffOfHoma'\r\n// import TheCatch from './TheCatch'\r\n// import VortexVanquisher from './VortexVanquisher'\r\n// import WavebreakersFin from './WavebreakersFin'\r\n// import WhiteTassel from './WhiteTassel'\r\nconst polearm = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  // Deathmatch,\r\n  // DragonsBane,\r\n  // DragonspineSpear,\r\n  EngulfingLightning,\r\n  // FavoniusLance,\r\n  // Halberd,\r\n  // IronPoint,\r\n  // KitainCrossSpear,\r\n  // LithicSpear,\r\n  // PrimordialJadeWingedSpear,\r\n  // PrototypeStarglitter,\r\n  // RoyalSpear,\r\n  // SkywardSpine,\r\n  // StaffOfHoma,\r\n  // TheCatch,\r\n  // VortexVanquisher,\r\n  // WavebreakersFin,\r\n  // WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","// import AlleyHunter from './AlleyHunter'\r\n// import AmosBow from './AmosBow'\r\n// import BlackcliffWarbow from './BlackcliffWarbow'\r\n// import CompoundBow from './CompoundBow'\r\n// import ElegyForTheEnd from './ElegyForTheEnd'\r\n// import FavoniusWarbow from './FavoniusWarbow'\r\n// import Hamayumi from './Hamayumi'\r\nimport HuntersBow from './HuntersBow'\r\n// import Messenger from './Messenger'\r\n// import MitternachtsWaltz from './MitternachtsWaltz'\r\n// import MouunsMoon from './MouunsMoon'\r\n// import PolarStar from './PolarStar'\r\n// import Predator from './Predator'\r\n// import PrototypeCrescent from './PrototypeCrescent'\r\n// import RavenBow from './RavenBow'\r\n// import RecurveBow from './RecurveBow'\r\n// import RoyalBow from './RoyalBow'\r\n// import Rust from './Rust'\r\n// import SacrificialBow from './SacrificialBow'\r\n// import SeasonedHuntersBow from './SeasonedHuntersBow'\r\n// import SharpshootersOath from './SharpshootersOath'\r\n// import SkywardHarp from './SkywardHarp'\r\n// import Slingshot from './Slingshot'\r\n// import TheStringless from './TheStringless'\r\n// import TheViridescentHunt from './TheViridescentHunt'\r\n// import ThunderingPulse from './ThunderingPulse'\r\n// import WindblumeOde from './WindblumeOde'\r\nconst bow = {\r\n  // AlleyHunter,\r\n  // AmosBow,\r\n  // BlackcliffWarbow,\r\n  // CompoundBow,\r\n  // ElegyForTheEnd,\r\n  // FavoniusWarbow,\r\n  // Hamayumi,\r\n  HuntersBow,\r\n  // Messenger,\r\n  // MitternachtsWaltz,\r\n  // MouunsMoon,\r\n  // PolarStar,\r\n  // Predator,\r\n  // PrototypeCrescent,\r\n  // RavenBow,\r\n  // RecurveBow,\r\n  // RoyalBow,\r\n  // Rust,\r\n  // SacrificialBow,\r\n  // SeasonedHuntersBow,\r\n  // SharpshootersOath,\r\n  // SkywardHarp,\r\n  // Slingshot,\r\n  // TheStringless,\r\n  // TheViridescentHunt,\r\n  // ThunderingPulse,\r\n  // WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport icon from './Icon.png'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport { prod, subscript } from \"../../../../Formula/utils\"\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport { input } from '../../../../Formula'\r\nimport data_gen_json from './data_gen.json'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { trans } from '../../../SheetUtil'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp)\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { normal_dmgInc, heal_ }\r\n}, { normal_dmgInc })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\n\r\nconst skill_dmg_s = range(1, 3).map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\n\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNode,\r\n      path: condPath,\r\n      name: \"KaguraDance\",\r\n      states: {\r\n        1: {\r\n          name: \"1\",\r\n          fields: [{ node: skill_dmg_s[0] }]\r\n        },\r\n        2: {\r\n          name: \"2\",\r\n          fields: [{ node: skill_dmg_s[1] }]\r\n        },\r\n        3: {\r\n          name: \"3\",\r\n          fields: [{ node: skill_dmg_s[2], },\r\n          ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condNormal,\r\n      path: condNormalPath,\r\n      name: st(\"hitOp.normal\"),\r\n      states: {\r\n        normal: {\r\n          fields: [{\r\n            node: skill_dmg_\r\n          }, {\r\n            node: burst_dmg_\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }, { \r\n    conditional: {\r\n      value: condSkillBurst,\r\n      path: condSkillBurstPath,\r\n      name: st(\"hitOp.skillOrBurst\"),\r\n      states: {\r\n        skillBurst: {\r\n          fields: [{\r\n            node: normal_dmg_\r\n          }]\r\n        },\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)","import { WeaponData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { sgt } from '../../../Characters/SheetUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    anemo_dmg_,\r\n    cryo_dmg_,\r\n    electro_dmg_,\r\n    geo_dmg_,\r\n    hydro_dmg_,\r\n    pyro_dmg_,\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    conditional: {\r\n      value: condPassive,\r\n      path: condPassivePath,\r\n      name: <Translate ns=\"weapon_TheWidsith_gen\" key18=\"passiveName\" />,\r\n      states: {\r\n        aria: {\r\n          name: trm(\"aria\"),\r\n          fields: [{\r\n            node: anemo_dmg_\r\n          }, {\r\n            node: cryo_dmg_\r\n          }, {\r\n            node: electro_dmg_\r\n          }, {\r\n            node: geo_dmg_\r\n          }, {\r\n            node: hydro_dmg_\r\n          }, {\r\n            node: pyro_dmg_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        interlude: {\r\n          name: trm(\"interlude\"),\r\n          fields: [{\r\n            node: eleMas\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        },\r\n        recitative: {\r\n          name: trm(\"recitative\"),\r\n          fields: [{\r\n            node: atk_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 10,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import ApprenticesNotes from './ApprenticesNotes'\r\n// import BlackcliffAgate from './BlackcliffAgate'\r\n// import DodocoTales from './DodocoTales'\r\n// import EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\n// import EyeOfPerception from './EyeOfPerception'\r\n// import FavoniusCodex from './FavoniusCodex'\r\n// import Frostbearer from './Frostbearer'\r\n// import HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\n// import LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\n// import MagicGuide from './MagicGuide'\r\n// import MappaMare from './MappaMare'\r\n// import MemoryOfDust from './MemoryOfDust'\r\n// import OtherworldlyStory from './OtherworldlyStory'\r\n// import PocketGrimoire from './PocketGrimoire'\r\n// import PrototypeAmber from './PrototypeAmber'\r\n// import RoyalGrimoire from './RoyalGrimoire'\r\n// import SacrificialFragments from './SacrificialFragments'\r\n// import SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\n// import ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\n// import TwinNephrite from './TwinNephrite'\r\n// import WineAndSong from './WineAndSong'\r\nconst catalyst = {\r\n  ApprenticesNotes,\r\n  // BlackcliffAgate,\r\n  // DodocoTales,\r\n  // EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  // EyeOfPerception,\r\n  // FavoniusCodex,\r\n  // Frostbearer,\r\n  // HakushinRing,\r\n  KagurasVerity,\r\n  // LostPrayerToTheSacredWinds,\r\n  // MagicGuide,\r\n  // MappaMare,\r\n  // MemoryOfDust,\r\n  // OtherworldlyStory,\r\n  // PocketGrimoire,\r\n  // PrototypeAmber,\r\n  // RoyalGrimoire,\r\n  // SacrificialFragments,\r\n  // SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  // ThrillingTalesOfDragonSlayers,\r\n  // TwinNephrite,\r\n  // WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","values","condReadNode","path","customStringRead","cond","key","subKey","trans","typeKey","weaponCurves","Object","fromEntries","entries","_weaponCurves","map","value","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","data","sheet","icon","iconAwaken","document","WeaponSheet","claymore","WasterGreatsword","tr","autoSrc","condPassivePath","condPassive","atk_","equal","normal_dmg_","charged_dmg_","plunging_dmg_","dmg_","addProps","NaN","all_dmg_","teamBuff","fields","node","conditional","header","conditionalHeader","description","conditionaldesc","name","states","on","text","unit","DullBlade","FreedomSworn","opponentsDefeated","range","lookup","objectKeyMap","i","c","trm","condStackPath","condStack","dmg_Nodes","allElements","e","atkInc","matchFull","hit","customDmgNode","ele","undefined","min","percent","enerRech_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","EngulfingLightning","HuntersBow","normal_dmgInc","heal_","condPath","condNode","skill_dmg_s","toString","d","ele_dmg_s","skill_dmg_","condNormalPath","condNormal","condSkillBurstPath","condSkillBurst","refineVal","burst_dmg_","normal","skillBurst","refinementEleDmgVals","anemo_dmg_","cryo_dmg_","electro_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","eleMas","aria","interlude","recitative","ApprenticesNotes","EverlastingMoonglow","KagurasVerity","SolarPearl","TheWidsith","sword","polearm","bow","catalyst"],"sourceRoot":""}