{"version":3,"file":"static/js/246.6f0013e6.chunk.js","mappings":"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","sources":["Components/Character/LocationName.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts"],"sourcesContent":["import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\n\nexport default function LocationName({ location }) {\n  const { t } = useTranslation(\"ui\");\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\n  </Typography>\n\n}\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport React, { Suspense, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport SqBadge from '../Components/SqBadge';\nimport { Stars } from '../Components/StarDisplay';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey } from '../Types/consts';\nimport { clamp, clamp01 } from '../Util/Util';\nimport PercentBadge from './PercentBadge';\nimport { probability } from './RollProbability';\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onEdit?: (string) => void,\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  probabilityFilter?: Dict<SubstatKey, number>\n}\nconst allSubstatFilter = new Set(allSubstats)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\"]);\n  const database = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\n\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\n  const art = artifactObj ?? databaseArtifact\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  }>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>\n        </Box>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item flexGrow={1}>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\">\n              {KeyMap.get(mainStatKey)}\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>{mainStatVal}</strong>\n            </Typography>\n            <Stars stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Grid>\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\n            <CardMedia\n              component=\"img\"\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"100%\"\n              height=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\n        {substats.map((stat: ICachedSubstat, i) => {\n          if (!stat.value) return null\n          const numRolls = stat.rolls?.length ?? 0\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\n          const efficiency = stat.efficiency ?? 0\n          const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\n          const statName = KeyMap.get(stat.key)\n          return (<Box key={i} sx={{ display: \"flex\" }}>\n            <Box sx={{ flexGrow: 1 }}>\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}`}</Typography>\n            </Box>\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\n          </Box>)\n        })}\n        <Box sx={{ display: \"flex\", my: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\n          <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\n        </Box>\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\n          <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\n        </Box>}\n        <Box flexGrow={1} />\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n      </CardContent>\n      <CardActions>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item xs=\"auto\" flexShrink={1}>\n            {editable ?\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\n          </Grid>\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\n          {editable && <Grid item xs=\"auto\">\n            <ButtonGroup sx={{ height: \"100%\" }}>\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n              </Button>}\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n                </Button>\n              </Tooltip>\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n              </Button>}\n            </ButtonGroup>\n          </Grid>}\n        </Grid>\n      </CardActions>\n    </CardLight >\n  </Suspense>\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}","import SqBadge from '../Components/SqBadge';\nimport { clamp } from '../Util/Util';\n\nexport default function PercentBadge({ value, max = 1, valid }: {\n  valid?: boolean,\n  value: number | string,\n  max?: number\n}) {\n  let [badgeColor, text] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n"],"names":["LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","component","name","nameWIthIcon","sx","verticalAlign","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","database","useContext","DatabaseContext","databaseArtifact","artifactID","useState","_getArt","artifact","setArtifact","useEffect","followArt","undefined","useArtifact","sheet","ArtifactSheet","setKey","editable","localDatabase","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","max","min","levelVariant","floor","mainStatVal","color","cacheValueString","Artifact","KeyMap","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","BootstrapTooltip","placement","title","Typography","icon","faInfoCircle","setEffects","setDescTooltip","Object","keys","map","setNumKey","variant","SqBadge","setNum","setEffectDesc","Suspense","fallback","Skeleton","width","height","minHeight","CardLight","display","flexDirection","CardContent","className","pt","pb","pr","Box","alignItems","Chip","size","label","pl","flexGrow","IconButton","disabled","onClick","updateArt","Lock","LockOpen","Grid","container","flexWrap","item","stars","colored","maxWidth","mt","mb","alignSelf","CardMedia","image","slotIcons","stat","i","value","numRolls","rolls","length","rollColor","clamp","efficiency","effOpacity","clamp01","statName","key","mr","opacity","has","toFixed","my","PercentBadge","valid","probability","CardActions","xs","flexShrink","CharacterDropdownButton","inventory","onChange","charKey","setArtLocation","ButtonGroup","Button","faEdit","Tooltip","arrow","faBan","faChartLine","faTrashAlt","badgeColor","text","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","_target","NaN","target","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","entries","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","parseInt","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values"],"sourceRoot":""}