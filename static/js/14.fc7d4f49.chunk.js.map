{"version":3,"sources":["Components/Character/LocationName.tsx","Components/ToggleButton/WeaponToggle.tsx","ReactHooks/useWeapon.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Util/SortByFilters.ts","Components/SortByButton.tsx","PageArtifact/RollProbability.ts","PageArtifact/PercentBadge.tsx","Components/Weapon/WeaponSelectionModal.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","Components/Character/CharacterSelectionModal.tsx","Util/CharacterSort.ts","PageWeapon/WeaponDisplayCard.tsx","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx"],"names":["LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","get","component","name","nameWIthIcon","sx","verticalAlign","WeaponToggle","value","onChange","props","cb","useCallback","e","newVal","exclusive","allWeaponTypeKeys","map","wt","src","Assets","weaponTypes","size","useWeapon","weaponID","database","useContext","DatabaseContext","useState","_getWeapon","weapon","setWeapon","useEffect","followWeapon","undefined","Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","sortFunction","sortby","ascending","configs","Sort","a","b","config","aV","getValue","bV","localeCompare","filterOption","diff","tieBreaker","filterFunction","filterOptions","filterConfigs","obj","Object","entries","every","optionKey","optionVal","SortByButton","sortKeys","onChangeAsc","title","i18nKey","key","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","length","i","layeredAssignment","3","4","6","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","probability","artifact","_target","rarity","NaN","level","substats","target","required","Set","keys","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","rolls","extra","pExtra","_remaining","remaining","parseInt","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","path","currentCount","sum","calculatePFillerRolls","values","PercentBadge","valid","clamp","floor","toFixed","badgeColor","text","color","WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","getAll","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","sort","open","onClose","py","container","item","flexGrow","spacing","weaponKey","weaponSheet","lg","md","height","display","img","width","px","variant","stars","colored","large","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","artifactID","_getArt","setArtifact","followArt","useArtifact","sheet","ArtifactSheet","setKey","editable","localDatabase","art","id","lock","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","KeyMap","unit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","BootstrapTooltip","placement","Typography","faInfoCircle","setEffects","setDescTooltip","setNumKey","SqBadge","setNum","setEffectDesc","fallback","Skeleton","minHeight","CardLight","flexDirection","CardContent","pt","pb","pr","Box","alignItems","Chip","label","pl","IconButton","updateArt","Lock","LockOpen","Grid","flexWrap","maxWidth","mt","mb","alignSelf","CardMedia","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","mr","opacity","my","CardActions","xs","flexShrink","CharacterDropdownButton","inventory","charKey","setArtLocation","ButtonGroup","Button","faEdit","Tooltip","arrow","faBan","faChartLine","faTrashAlt","unSelectText","unSelectIcon","noUnselect","characterSheets","characterKeys","_getCharKeys","ck","DropdownButton","thumbImg","ThumbSide","thumbImgSide","BusinessCenter","Replay","MenuItem","ListItemIcon","noWrap","Divider","CharacterMenuItemArray","selectedCharacterKey","characterKey","WeaponCard","weaponId","canEquip","cs","weaponTypeKey","actionWrapperFunc","children","CardActionArea","equipOnChar","setWeaponLocation","UIData","useMemo","computeUIData","data","dataObjForWeapon","ascension","refinement","input","type","main","sub","sub2","imgAwaken","ConditionalWrapper","condition","wrapper","CardHeader","avatar","ImgIcon","fontSize","titleTypographyProps","action","updateWeapon","ascensionMaxLevel","alignContent","node","displayVal","valueString","StatIcon","defaultSortKeys","CharacterSelectionModal","newFirst","sortBy","setsortBy","setascending","elementalFilter","setelementalFilter","setweaponFilter","sortConfigs","characterSortConfigs","characterFilterConfigs","characterKeyList","allCharacterKeys","cKey","_getChar","element","CharacterBtn","teamData","useTeamData","elementKey","getLevelString","lvl","asc","constellation","bonus","auto","skill","burst","characterSortKeys","new","WeaponDisplayCard","propWeaponId","footer","DataContext","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","ws","initialWeaponFilter","showModal","setshowModal","weaponUIData","k","bgcolor","palette","contentLight","startAdornment","inputProps","textAlign","ambiguousLevel","milestoneLevels","lv","as","lvlstr","SwapBtn","onChangeId","gap","minWidth","borderRadius","description","process","passiveName","gutterBottom","passiveDescription","refineIndex","isEmpty","ListItem","document","sections","setShow","close","clickHandler","weapons","dbWeapon","sm","SolidColoredToggleButton","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","contrastText","dark","ElementToggle","ToggleButtonGroup","allElements","ele","lineHeight","uncoloredEleIcons","FormulaCalcCard","expanded","setexpanded","toggle","ExpandButton","expand","aria-expanded","aria-label","ExpandMore","Collapse","in","timeout","unmountOnExit","CalculationDisplay","getDisplaySections","Nodes","FormulaCalc","displayNs","sectionKey","header","getDisplayHeader","CardDark","Accordion","AccordionSummary","expandIcon","AccordionDetails","formulas","subform","CharacterArtifactPane","newBuild","oldData","character","history","useHistory","edit","artid","pathname","artToEditId","artifactSheets","useForceUpdate","followAnyArt","equipArts","window","confirm","fromEntries","allSlotKeys","s","equipArtifacts","unequipArts","objectKeyMap","artIds","StatDisplayComponent","Card","p","warning","setNumKeyArr","defIconSrc","SetEffectDisplay","CharacterTeamBuffsPane","TeamBuffDisplay","range","TeammateDisplay","statBreakpoint","teamBuffs","getTeamBuff","nodes","premod","enemy","columnSpacing","rowSpacing","oldValue","objPathValue","dataContext","active","activeCharacterDispatch","characterDispatch","activeCharacterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","fullWidth","includes","PersonAdd","Provider","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","setEffectDocument","DisplaySectionsTeamCond","talent","getTalent","charEle","sheets","sts","section","conditional","teamBuff","ConditionalDisplay","fieldContext","CharacterOverviewPane","tlvl","tBoost","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","getTalentOfKey","constellationName","cursor","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","mainEditKeys","otherStatReadNodes","allElementsWithPhy","otherStatKeys","info","miscStatReadNodes","all_dmg_","normal_dmg_","normal_critRate_","charged_dmg_","charged_critRate_","plunging_dmg_","plunging_critRate_","skill_dmg_","skill_critRate_","burst_dmg_","burst_critRate_","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","rn","specialNode","special","StatDisplayCard","content","justifyContent","editContent","StatInput","placeholder","getStr","bonusStats","percent","onValueChange","defaultValue","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","enabled","style","onClickTitle","ReactionComponents","superconduct","electro","cryo","electrocharged","hydro","overloaded","pyro","pyroSwirl","swirlEleToDisplay","setele","getDisplay","reaction","shattered","information","faQuestionCircle","Ele","anemo","geo","talentLimits","actionWrapeprFunc","levelBoost","newTalentLevelKey","talentSheet","DocumentDisplay","TabPanel","other","role","hidden","aria-labelledby","CharacterDisplayCard","newteamData","tabName","isFlex","charUIData","tab","settab","onTab","v","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","CloseButton","Tabs","Tab","setCharacter","contentDark","talents","eleKey","CustomNumberInput"],"mappings":"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","file":"static/js/14.fc7d4f49.chunk.js","sourcesContent":["import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\n\nexport default function LocationName({ location }) {\n  const { t } = useTranslation(\"ui\");\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\n  </Typography>\n\n}\n","import { ToggleButton } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: WeaponTypeKey | \"\") => void\n  value: WeaponTypeKey | \"\"\n}\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\n    </ToggleButton>)}\n  </SolidToggleButtonGroup>\n}","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","type SortConfig<T> = {\n  getValue: (id: T) => number | string\n  tieBreaker?: string\n}\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\n\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\n    const aV = config.getValue(a)\n    const bV = config.getValue(b)\n    let diff = 0\n    if (typeof aV === \"string\" && typeof bV === \"string\")\n      diff = aV.localeCompare(bV)\n    else\n      diff = ((bV as number) - (aV as number))\n    return (ascending ? -1 : 1) * diff\n  }\n  return (a: T, b: T) => {\n    if (!configs[sortby]) return 0\n    const filterOption = configs[sortby]\n    let diff = Sort(a, b, ascending, filterOption)\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\n    return diff\n  }\n}\n\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\ntype SortByButtonProps = ButtonGroupProps & {\n  sortKeys: string[]\n  value: string\n  onChange: (value: string) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\n  const { t } = useTranslation(\"ui\")\n  return <ButtonGroup {...props} >\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\n      {sortKeys.map(key =>\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n    </DropdownButton>\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n    </Button>\n  </ButtonGroup>\n}","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import SqBadge from '../Components/SqBadge';\nimport { clamp } from '../Util/Util';\n\nexport default function PercentBadge({ value, valid }: Data) {\n  let [badgeColor, text] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n\ntype Data = {\n  valid: boolean,\n  value: number | string,\n}\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport Assets from \"../../Assets/Assets\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport { Stars } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponFilter?: WeaponTypeKey,\n}\n\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\n\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\n\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\n    .filter(wKey => {\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\n      return true\n    })\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets[weaponKey]\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport React, { Suspense, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport SqBadge from '../Components/SqBadge';\nimport { Stars } from '../Components/StarDisplay';\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey } from '../Types/consts';\nimport { valueStringWithUnit } from '../Util/UIUtil';\nimport { clamp } from '../Util/Util';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport PercentBadge from './PercentBadge';\nimport { probability } from './RollProbability';\nimport KeyMap from '../KeyMap';\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onEdit?: (string) => void,\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  probabilityFilter?: Dict<SubstatKey, number>\n}\nconst allSubstatFilter = new Set(allSubstats)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\"]);\n  const database = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\n\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\n  const art = artifactObj ?? databaseArtifact\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  }>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>\n        </Box>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item flexGrow={1}>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\">\n              {KeyMap.get(mainStatKey)}\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>{mainStatVal}</strong>\n            </Typography>\n            <Stars stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Grid>\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\n            <CardMedia\n              component=\"img\"\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"100%\"\n              height=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\n        {substats.map((stat: ICachedSubstat, i) => {\n          if (!stat.value) return null\n          const numRolls = stat.rolls?.length ?? 0\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\n          const efficiency = stat.efficiency ?? 0\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\n          const statName = KeyMap.get(stat.key)\n          return (<Box key={i} sx={{ display: \"flex\" }}>\n            <Box sx={{ flexGrow: 1 }}>\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, KeyMap.unit(stat.key))}`}</Typography>\n            </Box>\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\n          </Box>)\n        })}\n        <Box sx={{ display: \"flex\", my: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\n        </Box>\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\n        </Box>}\n        <Box flexGrow={1} />\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n      </CardContent>\n      <CardActions>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item xs=\"auto\" flexShrink={1}>\n            {editable ?\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\n          </Grid>\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\n          {editable && <Grid item xs=\"auto\">\n            <ButtonGroup sx={{ height: \"100%\" }}>\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n              </Button>}\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n                </Button>\n              </Tooltip>\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n              </Button>}\n            </ButtonGroup>\n          </Grid>}\n        </Grid>\n      </CardActions>\n    </CardLight >\n  </Suspense>\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, valueString, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport KeyMap from \"../KeyMap\"\nimport { CharacterKey } from \"../Types/consts\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\n  const database = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const actionWrapperFunc = useCallback(\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\n    [onClick, weaponId],\n  )\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div className={`grad-${weaponSheet.rarity}star`} >\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\n              {lock ? <Lock /> : <LockOpen />}\n            </IconButton>} />\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\n            <Grid item flexGrow={1}>\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n            </Grid>\n            {/* use flex-end here to align the image to the bottom. */}\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\n            </Grid>\n          </Grid>\n        </div>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.key) return null\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n        {/* grow to fill the 100% heigh */}\n        <Box flexGrow={1} />\n        <CardContent sx={{ py: 1 }}>\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\n            <Grid item xs=\"auto\" flexShrink={1}>\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\n            </Grid>\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\n            <Grid item xs=\"auto\">\n              <ButtonGroup sx={{ height: \"100%\" }}>\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n                </Button>}\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n                </Button>}\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n      </CardLight>\n    </ConditionalWrapper>\n  </Suspense>\n}\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\";\nimport { useContext, useMemo, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport { uiInput as input } from \"../../Formula\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport useTeamData from \"../../ReactHooks/useTeamData\";\nimport { ICachedCharacter } from \"../../Types/character_WR\";\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\nimport CardDark from \"../Card/CardDark\";\nimport CardLight from \"../Card/CardLight\";\nimport CloseButton from \"../CloseButton\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport ModalWrapper from \"../ModalWrapper\";\nimport SortByButton from \"../SortByButton\";\nimport SqBadge from \"../SqBadge\";\nimport { Stars } from \"../StarDisplay\";\nimport StatIcon from \"../StatIcon\";\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\n\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\n\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\n\ntype CharacterSelectionModalProps = {\n  show: boolean,\n  newFirst?: boolean\n  onHide: () => void,\n  onSelect?: (ckey: CharacterKey) => void,\n  filter?: characterFilter\n}\n\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\n  const database = useContext(DatabaseContext)\n\n  const [sortBy, setsortBy] = useState(sortKeys[0])\n  const [ascending, setascending] = useState(false)\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\n\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(characterSheets), [characterSheets])\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\n    [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey]))\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter }, filterConfigs))\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number) : [],\n    [database, characterSheets, filter, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs])\n\n  if (!characterSheets) return null\n  return <ModalWrapper open={show} onClose={onHide} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1} >\n          <Grid item>\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\n          </Grid>\n          <Grid item flexGrow={1}>\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\n          </Grid>\n\n          <Grid item flexGrow={1} />\n\n          <Grid item >\n            <SortByButton sx={{ height: \"100%\" }}\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\n              ascending={ascending} onChangeAsc={setascending} />\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\n          <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\n        </Grid>)}\n      </Grid></CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n\nfunction CharacterBtn({ onClick, characterKey }: { onClick: () => void, characterKey: CharacterKey }) {\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\n  const teamData = useTeamData(characterKey)\n  const { target: data } = teamData?.[characterKey] ?? {}\n  if (!characterSheet) return null\n  const rarity = characterSheet.rarity\n  return <CardActionArea onClick={onClick} >\n    <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\n      <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\n      <Box sx={{ pl: 1 }}>\n        <Typography><strong>{characterSheet.name}</strong></Typography>\n        {data ? <>\n          <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{CharacterSheet.getLevelString(data.get(input.lvl).value, data.get(input.asc).value)}</Typography>\n          <Typography >\n            <SqBadge color=\"success\">{`C${data.get(input.constellation).value}`}</SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.auto).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.auto).value}</strong></SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.skill).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.skill).value}</strong></SqBadge>{` `}\n            <SqBadge color={data.get(input.bonus.burst).value ? \"info\" : \"secondary\"}><strong >{data.get(input.total.burst).value}</strong></SqBadge>\n          </Typography>\n        </> : <>\n          <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\n        </>}\n        <small><Stars stars={rarity} colored /></small>\n      </Box>\n    </CardLight>\n  </CardActionArea >\n}\n","import CharacterSheet from \"../Data/Characters/CharacterSheet\";\nimport { ArtCharDatabase } from \"../Database/Database\";\nimport { CharacterKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\nexport type CharacterSortKey = typeof characterSortKeys[number]\n\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\n  return {\n    new: {\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\n      tieBreaker: \"name\"\n    },\n    name: {\n      getValue: (ck) => ck,\n    },\n    level: {\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\n      tieBreaker: \"rarity\"\n    },\n    rarity: {\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\n      tieBreaker: \"level\"\n    }\n  }\n}\n\nexport function characterFilterConfigs(characterSheets: Record<CharacterKey, CharacterSheet>): FilterConfigs<\"element\" | \"weaponType\", CharacterKey> {\n  return {\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\n  }\n}\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\nimport { useCallback, useContext, useMemo, useState } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\nimport CloseButton from \"../Components/CloseButton\"\nimport ColorText from \"../Components/ColoredText\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../Components/ModalWrapper\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport { CharacterKey } from \"../Types/consts\"\nimport { ICachedWeapon } from \"../Types/weapon\"\nimport { clamp } from \"../Util/Util\"\nimport WeaponCard from \"./WeaponCard\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\nimport { DataContext } from \"../DataContext\"\n\ntype WeaponStatsEditorCardProps = {\n  weaponId: string\n  footer?: boolean\n  onClose?: () => void\n}\nexport default function WeaponDisplayCard({\n  weaponId: propWeaponId,\n  footer = false,\n  onClose\n}: WeaponStatsEditorCardProps) {\n  const { data } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const weapon = useWeapon(propWeaponId)\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\n  const weaponTypeKey = weaponSheet?.weaponType\n\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\n    database.updateWeapon(newWeapon, propWeaponId)\n  }, [propWeaponId, database])\n\n  const setLevel = useCallback(level => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    weaponDispatch({ level, ascension })\n  }, [weaponDispatch])\n\n  const setAscension = useCallback(() => {\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\n    else weaponDispatch({ ascension: lowerAscension })\n  }, [weaponDispatch, ascension, level])\n\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n  const [showModal, setshowModal] = useState(false)\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1}>\n          <Grid container spacing={1}>\n            <Grid item >\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\n              <ButtonGroup>\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\n                <DropdownButton title={`Refinement ${refinement}`}>\n                  <MenuItem>Select Weapon Refinement</MenuItem>\n                  <Divider />\n                  {[...Array(5).keys()].map(key =>\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\n                      {`Refinement ${key + 1}`}\n                    </MenuItem>)}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item >\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\n                <CustomNumberInputButtonGroupWrapper >\n                  <CustomNumberInput onChange={setLevel} value={level}\n                    startAdornment=\"Lvl. \"\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n                  />\n                </CustomNumberInputButtonGroupWrapper>\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n                <DropdownButton title={\"Select Level\"} >\n                  {milestoneLevels.map(([lv, as]) => {\n                    const sameLevel = lv === ascensionMaxLevel[as]\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n                    const selected = lv === level && as === ascension\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n                  })}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item>\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\n                {lock ? \"Locked\" : \"Unlocked\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        {!!onClose && <Grid item  >\n          <CloseButton onClick={onClose} />\n        </Grid>}\n        {database === localDatabase && <Grid item >\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\n        </Grid>}\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\n          <Typography><small>{weaponSheet.description}</small></Typography>\n        </Box>\n        <Box sx={{ mb: -1 }} flexGrow={1} >\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n            <CardDark >\n              <CardContent>\n                <Typography>Main Stats</Typography>\n              </CardContent>\n              <FieldDisplayList>\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return <NodeFieldDisplay key={i} node={n} component={ListItem} />\n                })}\n              </FieldDisplayList>\n            </CardDark>\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\n          </Box>\n        </Box>\n      </Box>}\n    </CardContent>\n    {footer && id && <CardContent sx={{ py: 1 }}>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\n        </Grid>\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\n      </Grid>\n    </CardContent>}\n  </CardLight>\n}\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\n  const database = useContext(DatabaseContext)\n  const [show, setShow] = useState(false)\n  const open = () => setShow(true)\n  const close = () => setShow(false)\n\n  const clickHandler = (id) => {\n    onChangeId(id)\n    close()\n  }\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const weaponIdList = database.weapons.keys.filter(wKey => {\n    const dbWeapon = database._getWeapon(wKey)\n    if (!dbWeapon) return false\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\n    return true\n  })\n\n\n  return <>\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\n    <ModalWrapper open={show} onClose={close} >\n      <CardDark>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={close} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Grid container spacing={1}>\n            {weaponIdList.map(weaponId =>\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  </>\n}\n","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\n\ntype SolidColoredToggleButtonPartial = {\n  baseColor?: ButtonProps[\"color\"];\n  selectedColor?: ButtonProps[\"color\"];\n}\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\n\n\nconst SolidColoredToggleButton = styled(ToggleButton, {\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\n  '&': {\n    backgroundColor: theme.palette[baseColor].main,\n    color: theme.palette[baseColor].contrastText,\n  },\n  '&:hover': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected': {\n    backgroundColor: theme.palette[selectedColor].main,\n    color: theme.palette[selectedColor].contrastText,\n  },\n  '&.Mui-selected:hover': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n  '&.Mui-disabled': {\n    backgroundColor: theme.palette[baseColor].dark,\n  },\n  '&.Mui-selected.Mui-disabled': {\n    backgroundColor: theme.palette[selectedColor].dark,\n  },\n}));\n\nexport default SolidColoredToggleButton","import { Box, ToggleButtonGroup } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport { allElements, ElementKey } from \"../../Types/consts\";\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\nimport { uncoloredEleIcons } from \"../StatIcon\";\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: ElementKey | \"\") => void\n  value: ElementKey | \"\"\n}\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\n    </SolidColoredToggleButton>)}\n  </ToggleButtonGroup>\n}\n","import { ExpandMore } from \"@mui/icons-material\"\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useState } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../Formula/type\"\nimport { NodeDisplay, valueString } from \"../Formula/uiData\"\nimport KeyMap from \"../KeyMap\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport CardDark from \"./Card/CardDark\"\nimport CardLight from \"./Card/CardLight\"\nimport ColorText from \"./ColoredText\"\nimport ExpandButton from \"./ExpandButton\"\nimport ImgIcon from \"./Image/ImgIcon\"\n\nexport default function FormulaCalcCard() {\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <Typography>Formulas {\"&\"} Calculations</Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <CalculationDisplay />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\n    <Box sx={{ mr: -1, mb: -1 }}>\n      {sections.map(([key, Nodes]) =>\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Box>\n  </Suspense>\n}\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  if (!header) return null\n  const { title, icon, action } = header\n  return <CardDark sx={{ mb: 1 }}>\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([key, node]) =>\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\n          </AccordionDetails>\n        </Accordion>)}\n    </CardContent>\n  </CardDark>\n}\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\nimport CardLight from '../../Components/Card/CardLight';\nimport ImgIcon from '../../Components/Image/ImgIcon';\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from '../../Formula';\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\nimport { objectKeyMap } from '../../Util/Util';\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\n\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\n  const { data, oldData, character, mainStatAssumptionLevel } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const history = useHistory()\n  const edit = useCallback(\n    artid => history.push({\n      pathname: \"/artifact\",\n      artToEditId: artid\n    } as any), [history])\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  // TODO: We can also listen only to equipped artifacts\n  const [, updateArt] = useForceUpdate()\n  useEffect(() => database.followAnyArt(updateArt))\n\n  const equipArts = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\n    if (!oldData) return\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\n    database.equipArtifacts(character.key, newBuild)\n  }, [character, data, oldData, database])\n\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\n  }, [character, database])\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\n  return <>\n    <CardLight sx={{ mb: 1 }}>\n      <CardContent>\n        <StatDisplayComponent />\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\n          </Grid>\n          <Grid item flexGrow={1}></Grid>\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\n        </Grid>\n      </CardContent>\n    </CardLight>\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\n            <Divider />\n            <CardContent >\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n        )}\n      </Grid>\n      {artIds.map((id, i) =>\n        !!id && <Grid item xs={6} md={4} key={i} >\n          <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(id)} />\n        </Grid>\n      )}\n    </Grid>\n  </>\n}\nexport default CharacterArtifactPane\n","import { PersonAdd } from \"@mui/icons-material\";\nimport { CardContent, Divider, Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useContext, useMemo } from 'react';\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport resonanceSheets from \"../../Conditional/Resonance\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport { DataContext, dataContextObj } from \"../../DataContext\";\nimport { uiInput as input } from \"../../Formula\";\nimport { NodeDisplay } from \"../../Formula/uiData\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ElementKey } from \"../../Types/consts\";\nimport { DocumentSection } from \"../../Types/sheet\";\nimport { objPathValue, range } from \"../../Util/Util\";\nimport CharacterCard from \"../CharacterCard\";\n\nexport default function CharacterTeamBuffsPane() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <TeamBuffDisplay />\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\n    <Grid container spacing={1}>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) => nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) => nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) => nodes.push([[\"enemy\", key], node]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      Team Buffs\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container columnSpacing={2} rowSpacing={1}>\n        {nodes.map(([path, n], i) => n && !n.isEmpty && <Grid item {...statBreakpoint} key={n.key} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { data, characterDispatch } = useContext(DataContext)\n  return <CardLight>\n    <CardContent>\n      Team Resonance\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container spacing={1}>\n        {/* {resonanceSheets.map((doc, i) =>\n          <Grid item key={i} xs={12} md={6} lg={4} >\n            <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\n              <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\n              <Divider />\n              <CardContent>\n                {doc.description}\n              </CardContent>\n              {doc.conditionals.map(cond =>\n                <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\n              )}\n            </CardDark>\n          </Grid>\n        )} */}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const dataContext = useContext(DataContext)\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\n  const activeCharacterKey = active.key\n  const characterKey = active.team[index]\n  const characterDispatch = useCharacterReducer(characterKey)\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\n  const onClickHandler = useCharSelectionCallback()\n\n  const dataBundle = teamData[characterKey]\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\n    character: dataBundle.character,\n    characterSheet: dataBundle.characterSheet,\n    data: dataBundle.target,\n    teamData: teamData,\n    mainStatAssumptionLevel: 0,\n    characterDispatch\n  }\n  return <CardLight>\n    <CardContent>\n      <CharacterDropdownButton fullWidth value={characterKey}\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\n    </CardContent>\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n      <CharacterCard characterKey={characterKey}\n        onClickHeader={onClickHandler}\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\n      />\n    </DataContext.Provider>}\n  </CardLight>\n\n}\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, } = useContext(DataContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sections = useMemo(() => artifactSheets &&\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\n    , [artifactSheets, data])\n  if (!sections) return null\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\n}\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\n\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\n  </Box >\n}\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\nimport React, { useContext, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport { Stars } from \"../../Components/StarDisplay\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport { DataContext } from \"../../DataContext\";\nimport { valueString } from \"../../Formula/api\";\nimport { uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport KeyMap from \"../../KeyMap\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport StatInput from \"../StatInput\";\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\nexport default function CharacterOverviewPane() {\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const charEle = data.get(input.charEle).value as ElementKey\n  const weaponTypeKey = characterSheet.weaponTypeKey\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.bonus.auto).value,\n    skill: data.get(input.bonus.skill).value,\n    burst: data.get(input.bonus.burst).value,\n  }\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={3}  >\n      {/* Image card with star and name and level */}\n      <CardLight >\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\n        <CardContent>\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\n          <Grid container spacing={1} mt={1}>\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\n              <Grid item xs={4} key={tKey}>\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\n                  overlap=\"circular\"\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    \"& > .MuiBadge-badge\": {\n                      fontSize: \"1.25em\",\n                      padding: \".25em .4em\",\n                      borderRadius: \".5em\",\n                      lineHeight: 1,\n                      height: \"1.25em\"\n                    }\n                  }}>\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\n                </Badge>\n              </Grid>)}\n          </Grid>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\n          <Grid container spacing={1}>\n            {[...Array(6).keys()].map(i =>\n              <Grid item xs={4} key={i}>\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}` as TalentSheetElementKey, charEle)?.img}\n                  sx={{\n                    cursor: \"pointer\",\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\n                  }}\n                  width=\"100%\" height=\"auto\"\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardLight>\n    </Grid>\n    <Grid item xs={12} md={9} sx={{\n      \"> div:not(:last-child)\": { mb: 1 }\n    }} >\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\n      <MainStatsCards />\n    </Grid>\n  </Grid >\n}\nconst EDIT = \"Edit Stats\"\nconst EXIT = \"EXIT\"\n\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatReadNodes = [\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\n]\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\n\nconst miscStatReadNodes = [\n  input.total.all_dmg_,\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\n  input.total.normal_dmg_, input.total.normal_critRate_,\n  input.total.charged_dmg_, input.total.charged_critRate_,\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\n  input.total.skill_dmg_, input.total.skill_critRate_,\n  input.total.burst_dmg_, input.total.burst_critRate_,\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x])\n]\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\n\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\n\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\n    {nodes.map((rn, i) => <Grid item key={i} {...statBreakpoint} >\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\n    </Grid>)}\n    {extra}\n  </Grid>\n}\n\nfunction MainStatsCards() {\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const specialNode = data.get(input.special)\n\n  return <>\n    <TeamBuffDisplay />\n    <StatDisplayCard\n      title=\"Main Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\n        </Grid>}\n      />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {mainEditKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Other Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {otherStatKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              defaultValue={undefined}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Misc Stats\"\n      content={<StatDisplayContent statBreakpoint={{\n        xs: 12, sm: 6, md: 6,\n      }} nodes={miscStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {miscStatkeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n  </>\n}\nfunction StatDisplayCard({ title, content, editContent }) {\n  const [edit, setedit] = useState(false)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\n        </Button>\n      </Box>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {edit ? editContent : content}\n    </CardContent>\n  </CardLight>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\nimport React, { useCallback, useContext, useState } from 'react';\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from \"../../Formula\";\nimport { ElementKey } from \"../../Types/consts\";\nimport KeyMap from '../../KeyMap'\nimport { NodeDisplay, valueString } from '../../Formula/uiData'\nimport { NumNode } from \"../../Formula/type\";\nexport default function CharacterTalentPane() {\n  const { data, character, characterSheet } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1} sx={{ mb: 1 }}>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>)}\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Grid>}\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"passive\"\n          subtitle=\"Passive\"\n        />\n      </Grid>}\n    </Grid>\n    <Grid container spacing={1}>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>\n      })}\n    </Grid>\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\n    <Grid container spacing={1}>\n      {/* constellations */}\n      {[...Array(6).keys()].map(i => {\n        let tKey = `constellation${i + 1}` as TalentSheetElementKey\n        return <Grid item key={i} xs={12} md={4}\n          sx={{ opacity: constellation > i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i + 1}`}\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\n          />\n        </Grid>\n      })}\n    </Grid>\n  </>\n}\nconst ReactionComponents = {\n  superconduct: SuperConductCard,\n  electrocharged: ElectroChargedCard,\n  overloaded: OverloadedCard,\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\n  shattered: ShatteredCard,\n  // crystalize_hit: CrystalizeCard, // TODO: crystallize\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight sx={{ mb: 1 }}>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).map(([key, node]) => {\n          const Ele = ReactionComponents[key]\n          if (!Ele) return null\n          return <Grid item key={key}><Ele node={node} /></Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\n\nconst swirlEleToDisplay = {\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\n} as const\nfunction SwirlCard() {\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\n  const { data } = useContext(DataContext)\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\n  </CardDark>\n}\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\n  </CardContent></CardDark>\n}\n// TODO: crystallize\nconst crystalizeEleToDisplay = {\n  \"default\": <ColorText color=\"crystalize\">{KeyMap.get(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\n  \"pyro\": <span>{KeyMap.get(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\n  \"electro\": <span>{KeyMap.get(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\n  \"cryo\": <span>{KeyMap.get(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\n  \"hydro\": <span>{KeyMap.get(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\n} as const\nfunction CrystalizeCard() {\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    {/* <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box> */}\n  </CardDark>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\n      talent[tKey] = newTalentLevelKey\n      characterDispatch({ talent })\n    }\n    header = <>\n      <CardContent sx={{ py: 1 }}>\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\n          {[...Array(talentLimits[asc]).keys()].map(i =>\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\n        </DropdownButton>\n      </CardContent>\n      <Divider />\n    </>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\nimport { Suspense, useCallback, useContext, useState } from 'react';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\nimport ThumbSide from '../Components/Character/ThumbSide';\nimport CloseButton from '../Components/CloseButton';\nimport ColorText from '../Components/ColoredText';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport { sgt } from '../Data/Characters/SheetUtil';\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useTeamData from '../ReactHooks/useTeamData';\nimport { CharacterKey } from '../Types/consts';\nimport { clamp } from '../Util/Util';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  value: string;\n  current: string | boolean;\n}\n\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\n  if (value !== current) return null\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n    <div\n      role=\"tabpanel\"\n      hidden={value !== current}\n      id={`simple-tabpanel-${value}`}\n      aria-labelledby={`simple-tab-${value}`}\n      {...other}\n    >\n      {children}\n    </div>\n  </Suspense>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  footer?: JSX.Element\n  newteamData?: TeamData,\n  mainStatAssumptionLevel?: number,\n  onClose?: (any) => void,\n  tabName?: string,\n  isFlex?: boolean,\n}\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName, isFlex }: CharacterDisplayCardProps) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\n\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\n  const onTab = useCallback((e, v) => settab(v), [settab])\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n  if (!teamData || !character || !characterSheet || !charUIData) return <></>\n  const { compareData } = character\n  // main CharacterDisplayCard\n  const dataContextValue: dataContextObj = {\n    character,\n    characterSheet,\n    mainStatAssumptionLevel,\n    data: (newteamData ? newteamData[characterKey]!.target : charUIData),\n    teamData: (newteamData ? newteamData : teamData),\n    oldData: (compareData && newteamData) ? charUIData : undefined,\n    characterDispatch\n  }\n  return <CardDark >\n    <DataContext.Provider value={dataContextValue}>\n      <CardContent sx={{\n        \"> div:not(:last-child)\": { mb: 1 },\n      }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <CharSelectDropdown />\n          </Grid>\n          <Grid item>\n            {/* Compare against new build toggle */}\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>\n                <small>Show New artifact Stats</small>\n              </ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>\n                <small>Compare against equipped artifacts</small>\n              </ToggleButton>\n            </SolidToggleButtonGroup>}\n          </Grid>\n          <Grid item flexGrow={1} />\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\n          {!!onClose && <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>}\n        </Grid>\n        <CardLight>\n          <Tabs\n            onChange={onTab}\n            value={tab}\n            variant=\"fullWidth\"\n          >\n            <Tab value=\"character\" label=\"Character\" />\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\n            <Tab value=\"talent\" label=\"Talents\" />\n          </Tabs>\n        </CardLight>\n        <DamageOptionsCard />\n        <FormulaCalcCard />\n        <EnemyExpandCard />\n\n        {/* Character Panel */}\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\n        {/* Artifacts Panel */}\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\n        </DataContext.Provider>\n        {/* new build panel */}\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\n        {/* Buffs panel */}\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\n        {/* talent panel */}\n        <TabPanel value=\"talent\" current={tab}>\n          <CharacterTalentPane />\n        </TabPanel >\n      </CardContent>\n      {!!footer && <Divider />}\n      {footer && <CardContent >\n        {footer}\n      </CardContent>}\n    </DataContext.Provider>\n  </CardDark>\n}\n\n\nfunction CharSelectDropdown() {\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  const setLevel = useCallback((level) => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    characterDispatch({ level, ascension })\n  }, [characterDispatch])\n  const setAscension = useCallback(() => {\n    if (!character) return\n    const { level = 1, ascension = 0 } = character\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\n    else characterDispatch({ ascension: lowerAscension })\n  }, [characterDispatch, character])\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\n  return <>\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\n    <Grid container spacing={1}>\n      <Grid item>\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\n      </Grid>\n      <Grid item>\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\n          </DropdownButton>}\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setLevel} value={level}\n              startAdornment=\"Lvl. \"\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n              disabled={!characterSheet} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\n            {milestoneLevels.map(([lv, as]) => {\n              const sameLevel = lv === ascensionMaxLevel[as]\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n              const selected = lv === level && as === ascension\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n            })}\n          </DropdownButton>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  </>\n}\n"],"sourceRoot":""}