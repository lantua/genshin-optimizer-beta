{"version":3,"file":"static/js/535.ba50a218.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  equalStr(input.hit.move, \"burst\", input.charEle),\r\n  input.infusion,\r\n  input.team.infusion,\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, prod, greaterEq, naught } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n        [i,\r\n        prod(i, datamine.constellation2.blossomDmgInc)]\r\n        )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1EnemyHp,\r\n          path: condP1EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: {\r\n            belowHp: {\r\n              fields: [{\r\n                node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condSkillInField,\r\n          path: condSkillInFieldPath,\r\n          name: st(\"activeCharField\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            skillInField: {\r\n              fields: [{\r\n                node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6Crystallize,\r\n          path: condC6CrystallizePath,\r\n          name: st(\"protectedByShieldCrystal\"),\r\n          canShow: greaterEq(input.constellation, 6, equal(condSkillInField, \"skillInField\", 1)),\r\n          teamBuff: true,\r\n          states: {\r\n            c6Crystallize: {\r\n              fields: [{\r\n                node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\"}),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condBurstUsed,\r\n          path: condBurstUsedPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            burstUsed: {\r\n              fields: [{\r\n                node: p2Burst_eleMas\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2Stacks,\r\n          path: condC2StacksPath,\r\n          name: trm(\"c2Stacks\"),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n            [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{\r\n                node: c2_burst_dmgInc\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.ss.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.stam,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"skill.skillParams.3\"),\r\n              value: datamine.skill.cd,\r\n              unit: \"s\"\r\n            }\r\n          ],\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [\r\n              {\r\n                node: nodeP1AtkSpd\r\n              },\r\n            ]\r\n          }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: tr(\"constellation4.description\"),\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              {\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              },\r\n              {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 20, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 50, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_`})\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmgDisp = equal(c6AndCorrectWep, 1, datamine.constellation6.pyro_dmg)\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1, activeInAreaC6PyroDmgDisp)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, elementKey)\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n      atk: activeInAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(activeInAreaAtkDisp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 4),\r\n          value: condInArea,\r\n          path: condInAreaPath,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            activeInArea: {\r\n              fields: [{ // Node will not show CD reduction, have to use value instead\r\n                text: st(\"skillCDRed\"),\r\n                value: datamine.passive2.cd_red,\r\n                unit: \"%\",\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: c6AndCorrectWep,\r\n          value: condInArea,\r\n          path: condInAreaPath,\r\n          name: st(\"activeCharField\"),\r\n          teamBuff: true,\r\n          states: {\r\n            activeInArea: {\r\n              fields: [{\r\n                node: infoMut(activeInAreaC6PyroDmgDisp, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n              }, {\r\n                text: <ColorText color={elementKey}>{st(\"infusion.pyro\")}</ColorText>\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value > 1,\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.cd_red,\r\n        unit: \"%\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        text: trm(\"additionalATKRatio\"),\r\n        node: c1Atk\r\n      }, {\r\n        node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value / 100);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, datamine.passive2.pyroInc)\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n    secondHitBoost: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional),\r\n    thirdHitBoost: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n          },\r\n          {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n          },],\r\n          conditional: {\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6C.name\"),\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6DmgBonus,\r\n                }, {\r\n                  node: nodeC6SpdBonus\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C.name\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }\r\n          ]))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_ = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6em = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      heal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6below`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6healing_,\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6above`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC6em,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condA4,\r\n          path: condA4Path,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n            fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 1, \r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_skill_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\r\n        }], undefined, data => data.get(input.constellation).value >=4 && data.get(tally[\"geo\"]).value >= 2, true, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condAfterBurst,\r\n          path: condAfterBurstPath,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          name: st(\"afterUse.burst\"),\r\n          teamBuff: true,\r\n          states: {\r\n            afterBurst: {\r\n              fields: [{\r\n                node: afterBurst_def_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_burst_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          name: trm(\"c1CondName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: trm(\"c1PullSpeed\")\r\n              }, {\r\n                node: skill_dmg_\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: anemo_enemyRes_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          value: condC6,\r\n          path: condC6Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgRed_disp, {key: \"dmgRed_\" })\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: (data) => data.get(input.asc).value >= 4,\r\n        text: st(\"energyRegen\"),\r\n        value: datamine.passive2.energyRegen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        {\r\n          ...sectionTemplate(\"skill\", tr, skill, [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]),\r\n          fieldsHeader: { ...conditionalHeader(\"skill\", tr, skill), title: trm(\"skillPlunge\") }\r\n        },\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          value: condC2,\r\n          path: condC2Path,\r\n          name: trm(\"c2\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2: {\r\n              fields: [{\r\n                node: c2EleMas\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation2\", tr, c2, undefined, { // C2 Party\r\n          canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n          value: condC2P,\r\n          path: condC2PPath,\r\n          teamBuff: true,\r\n          description: tr(\"constellation2.description\"),\r\n          name: st(\"activeCharField\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2p: {\r\n              fields: [{\r\n                node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, undefined, absorbableEle.map(eleKey =>\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          // Only show the description once. Can't be truly blank or it will be filled in with a default.\r\n          description: eleKey === \"hydro\" ? tr(\"passive2.description\") : \" \",\r\n          name: trm(`a4.name_${eleKey}`),\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            swirl: {\r\n              fields: [{\r\n                node: asc4[`${eleKey}_dmg_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      )),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined, [\r\n        sectionTemplate(\"passive3\", tr, passive3, [{\r\n          node: passive\r\n        }], undefined, undefined, true, true),\r\n      ]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: afterRecastInfusion,\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n            }, {\r\n              text: tr(\"auto.skillParams.4\"),\r\n              value: datamine.charged.stamina\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, min } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonus = equal(condA4, \"on\", greaterEq(input.asc, 4, min(prod(datamine.passive2.crBonus, input.premod.critRate_), datamine.passive2.maxBonus)))\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n    physical_enemyRes_: nodeC6PhysShred\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }],\r\n          conditional: {\r\n            name: tr(\"constellation6.name\"),\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            value: condC6,\r\n            path: condC6Path,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6PhysShred\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.constellation6.duration,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4.name\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4CritBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"pressDuration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"pressQuota\"),\r\n        value: datamine.skill.trigger,\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: trm(\"holdDuration\"),\r\n        value: datamine.skill.durationHold,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"holdQuota\"),\r\n        value: datamine.skill.triggerHold,\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }], {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          value: condAsc4,\r\n          path: condAsc4Path,\r\n          teamBuff: true,\r\n          name: trm(\"asc4Cond\"),\r\n          states: {\r\n            press: {\r\n              name: \"Press\",\r\n              fields: [{\r\n                node: nodeAsc4Press_skill_dmg_\r\n              }, {\r\n                node: nodeAsc4Press_burst_dmg_\r\n              }]\r\n            },\r\n            hold: {\r\n              name: \"Hold\",\r\n              fields: [{\r\n                node: nodeAsc4Hold_normal_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_charged_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_plunging_dmg_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n            name: i.toString(),\r\n            fields: [{ node: c4Inc }]\r\n          }))\r\n        }), {\r\n        ...sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: tr(\"constellation6.description\")\r\n        }], undefined, data => data.get(input.constellation).value >= 6, true, true),\r\n        fieldsDescription: \"\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Condition = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, 1)))\r\nconst asc1 = equal(asc1Condition, 1, datamine.passive1.eleMas)\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        canShow: greaterEq(input.asc, 1, unequal(target.charKey, characterKey, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: asc1,\r\n          }, {\r\n            // TODO: uncomment after `target` bug is fixed\r\n            // canShow: data => data.get(asc1Condition).value,\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(target.charKey, characterKey, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: asc4,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: dmgNode(\"atk\", datamine.skill.normal1, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: dmgNode(\"atk\", datamine.skill.normal2, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: dmgNode(\"atk\", datamine.skill.normal3, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: dmgNode(\"atk\", datamine.skill.normal4, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: dmgNode(\"atk\", datamine.skill.normal5, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: dmgNode(\"atk\", datamine.skill.normal61, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: dmgNode(\"atk\", datamine.skill.normal62, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: dmgNode(\"atk\", datamine.skill.charged1, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged2: dmgNode(\"atk\", datamine.skill.charged2, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.riptide\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n              textSuffix: st(\"brHits\", { count: 3 })\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.10\"),\r\n              value: (data) => data.get(input.asc).value >= 1 ? datamine.passive1.durationExt + datamine.riptideDuration : datamine.riptideDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.10\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.11\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.preemptiveCd1 -\r\n          (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)} - ${datamine.skill.preemptiveCd2 -\r\n          (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}` : `${datamine.skill.preemptiveCd1} -\r\n          ${datamine.skill.preemptiveCd2}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.12\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.maxCd - (datamine.skill.maxCd *\r\n          datamine.constellation1.cdRed)}` : `${datamine.skill.maxCd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerReturned}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined,\r\n        [sectionTemplate(\"passive3\", tr, passive3, [{ node: nodePassive }], undefined, undefined, true, true)]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character_WR'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { input } from '../../../../Formula'\r\nimport { normalSrc, talentTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`anemo.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`anemo.${strKey}`} />\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, \"c6Hit\")\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp)),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: {\r\n      name: tr(\"auto.name\"),\r\n      img: normalSrc(data_gen.weaponTypeKey),\r\n      sections: [{\r\n        text: tr(\"auto.fields.normal\"),\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:anemo.auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:anemo.auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:anemo.auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }],\r\n    },\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:anemo.skill.skillParams.0` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:anemo.skill.skillParams.1` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:anemo.skill.skillParams.2` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:anemo.skill.skillParams.3` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"skill.skillParams.5\"),\r\n      value: datamine.skill.maxCd,\r\n      unit: \"s\"\r\n    }, {\r\n      canShow: data => data.get(input.constellation).value >= 4,\r\n      text: trm(\"c1\"),\r\n      value: 10,\r\n      unit: \"%\"\r\n    }]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:anemo.burst.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"burst.skillParams.2\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.3\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.4\"),\r\n      value: datamine.burst.enerCost,\r\n    }], {\r\n      teamBuff: true,\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:anemo.burst.skillParams.1` }),\r\n        },\r\n        ...Object.values(nodesC6).map(node => ({ node }))\r\n        ]\r\n      }]))\r\n    }, [{\r\n      conditional: {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      }\r\n    }]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1, [{ node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:anemo.p1` }) }]),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" }) }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import card from './Traveler_Female_Card.jpg'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport anemo, { data as anemoData } from './anemo'\r\n// import geo, { data as geoData } from './geo'\r\n// import electro from './electro'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts';\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport data_gen_src from './data_gen.json'\r\nimport { CharacterData } from 'pipeline'\r\nimport { trans } from '../../SheetUtil'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    // geo,\r\n    // electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  // geo: geoData,\r\n  // electro: electroData,\r\n});\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport {  customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, \"\", dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }})),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [{\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }], undefined, data => data.get(condBurstAbsorption).value !== undefined, undefined, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, sectionTemplate(\"passive2\", tr, passive2, [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6\r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\"),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\"),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion,\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === 'skill'\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, prod(percent(datamine.constellation6.dmg_), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: charTr(\"skillState\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]))\r\n      }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        teamBuff: true,\r\n        canShow: atk_,\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  AratakiItto,\r\n  // Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  // Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  // Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  Tartaglia,\r\n  // Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","critRate_","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","undefined","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","trans","tr","trm","auto","normalSrc","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","skillDmg","blossomDmg","duration","cd","blossomCd","burst","burstDmg","blossomAmt","enerCost","passive1","blossomDmgInc","hpThresh","passive2","eleMasInc","constellation1","blossomEner","constellation2","maxStacks","stackDuration","constellation4","plunging_dmg_","constellation6","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","lookup","fromEntries","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","talentTemplate","sectionTemplate","_","node","text","textSuffix","sgt","path","st","canShow","states","belowHp","fields","c1","fixed","get","c4","skillInField","c6","c6Crystallize","isoOnField","count","burstUsed","c2","passive3","constellation3","c3","constellation5","c5","CharacterSheet","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","atk_","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","nodeA4Bonus","nodeP1AtkSpd","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","nodeC3","nodeC5","atk","infusion","img","sections","on","header","conditionalHeader","description","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","condC6Path","condC6","condA4Path","condA4","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","normal_dmg_","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","c1AddlAtk","activeInAreaAtkDisp","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmgDisp","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","regen","atkInc","pyro_dmg_","team","enerRech_","calculateSkillCD","color","skillCD","cdFactor","p1","p2","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","atkSpdInc","maxStack","condC1Path","condC1","condC2Path","condC2","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","conditional","aimed","aimedCharged","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","energyRegen","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","condA1Path","condA1","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_","nodeC6em","staminaDec_","moveSPD_","heal_","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","unknown","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","cryo_enemyRes_","physical_enemyRes_","lightSwordAdditional","burst_dmg_","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","inheritedHp","critRateInc","cryoDmgBonus","opCryoRes","enerRegen","cryo_dmg_disp","cryo_dmg_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","min","critRateTeam_1","unequal","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","fieldsHeader","eleKey","c2p","swirl","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","hydro_dmg_","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","cooldown","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","devotionShield","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","nBonus_","cBonus_","sBonus_","p","heal_ratio_","hp_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","normal_dmgInc","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1Disp","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","nodeC2","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","fieldsDescription","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Condition","asc1","c6Base","c6Bonus","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","cdRed","nodePassive","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodeC6","nodesC6","objectKeyValueMap","absorb","talentSheet","talents","anemo","anemoData","pressDmg","pressCD","holdDmg","holdCD","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","full7","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","condSkillPath","condSkill","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","normalEntries","kindlingEntries","dataObj","includes","uiData","shield_","triggerNum","normalInc","allElements","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","AratakiItto","Beidou","Bennett","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","KamisatoAyaka","Keqing","Klee","KujouSara","Mona","Ningguang","Noelle","RaidenShogun","Rosaria","SangonomiyaKokomi","Shenhe","Sucrose","Tartaglia","Traveler","Venti","Xiangling","Xiao","Xingqiu","YaeMiko","Yoimiya","YunJin","Zhongli","customStringRead","subKey","typeKey","crystallizeMulti1","crystallizeLevelMultipliers","crystallizeElemas","frac","crystallizeHit","transMulti1","transformativeReactionLevelMultipliers","transMulti2","transformativeReactions","multi","variants","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","geo","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}