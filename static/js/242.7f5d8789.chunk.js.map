{"version":3,"file":"static/js/242.7f5d8789.chunk.js","mappings":"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","sources":["Assets/Assets.ts","Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/CloseButton.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/Image/ImgIcon.tsx","Components/ModalWrapper.tsx","Components/SolidToggleButtonGroup.tsx","Components/SqBadge.tsx","Components/StarDisplay.tsx","Data/Characters/CharacterSheet.tsx","Formula/api.tsx","Formula/index.ts","Formula/internal.ts","Formula/optimization.ts","Formula/reaction.ts","Formula/uiData.tsx","Formula/utils.ts","ReactHooks/useForceUpdate.tsx","ReactHooks/usePromise.tsx"],"sourcesContent":["import bow from './icon_bow.png'\r\nimport catalyst from './icon_catalyst.png'\r\nimport claymore from './icon_claymore.png'\r\nimport polearm from './icon_polearm.png'\r\nimport sword from './icon_sword.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Close } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\ntype CloseButtonProps = ButtonProps & {\r\n  large?: boolean\r\n}\r\nexport default function CloseButton({ large = false, ...props }: CloseButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  if (large)\r\n    return <Button color=\"error\" startIcon={<Close />} {...props} >{t`close`}</Button>\r\n  return <Button color=\"error\" sx={{ p: 1, minWidth: 0 }} {...props} >\r\n    <Close />\r\n  </Button>\r\n}","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\"\r\ninterface ImgIconProps {\r\n  size?: number;\r\n}\r\nconst ImgIcon = styled(\"img\", {\r\n  name: 'ImgIcon',\r\n  slot: 'Root',\r\n})<ImgIconProps>(({ size = 1 }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `${size * 1.2}em`,\r\n  verticalAlign: \"text-bottom\"\r\n}))\r\n\r\nexport default ImgIcon","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import { ButtonProps, styled, ToggleButtonGroup, ToggleButtonGroupProps } from \"@mui/material\";\r\n\r\nexport type SolidToggleButtonGroupProps = SolidToggleButtonGroupPropsPartial & ToggleButtonGroupProps\r\ntype SolidToggleButtonGroupPropsPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\n\r\nconst SolidToggleButtonGroup = styled(ToggleButtonGroup, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidToggleButtonGroupPropsPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '& .MuiToggleButtonGroup-grouped': {\r\n    '&': {\r\n      backgroundColor: theme.palette[baseColor].main,\r\n      color: theme.palette[baseColor].contrastText,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette[selectedColor].main,\r\n      color: theme.palette[selectedColor].contrastText,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n    '&.Mui-disabled': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected.Mui-disabled': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default SolidToggleButtonGroup","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Typography } from '@mui/material'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) =>\r\n  <Typography color={colored ? \"warning.main\" : undefined} component=\"span\">\r\n    {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n  </Typography>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { ascensionMaxLevel } from \"../LevelData\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { TalentSheet, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character_WR\";\r\nimport { CharacterKey, ElementKey, Rarity, WeaponTypeKey } from \"../../Types/consts\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport IConditional from \"../../Types/IConditional_WR\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay_WR\";\r\n\r\nconst characterSheets = import('.').then(imp => imp.default)\r\n\r\ninterface ICharacterSheetBase {\r\n  name: Displayable\r\n  cardImg: string\r\n  thumbImg: string\r\n  thumbImgSide: string\r\n  barImg?: string\r\n  bannerImg?: string\r\n  rarity: Rarity\r\n  weaponTypeKey: WeaponTypeKey\r\n  gender: string\r\n  constellationName: Displayable\r\n  title: Displayable\r\n}\r\ninterface ICharacterSheetTalent extends ICharacterSheetBase {\r\n  elementKey: ElementKey\r\n  talent: TalentSheet\r\n}\r\ninterface ICharacterSheetTalents extends ICharacterSheetBase {\r\n  talents: Dict<ElementKey, TalentSheet>\r\n}\r\nexport type ICharacterSheet = ICharacterSheetTalent | ICharacterSheetTalents\r\n\r\nexport default class CharacterSheet {\r\n  sheet: ICharacterSheet;\r\n  data: Data;\r\n  constructor(charSheet: ICharacterSheet, data: Data) {\r\n    this.sheet = charSheet\r\n    this.data = data\r\n  }\r\n  static get = (charKey: CharacterKey | \"\"): Promise<CharacterSheet> | undefined => charKey ? characterSheets.then(c => c[charKey]) : undefined\r\n  static get getAll() { return characterSheets }\r\n  get name() { return this.sheet.name }\r\n  get nameWIthIcon() { return <span><ImgIcon src={this.thumbImgSide} sx={{ height: \"2em\", marginTop: \"-2em\", marginLeft: \"-0.5em\" }} /> {this.name}</span> }\r\n  get cardImg() { return this.sheet.cardImg }\r\n  get thumbImg() { return this.sheet.thumbImg }\r\n  get thumbImgSide() { return this.sheet.thumbImgSide }\r\n  get bannerImg() { return this.sheet.bannerImg }\r\n  get rarity() { return this.sheet.rarity }\r\n  get elementKey() { return \"elementKey\" in this.sheet ? this.sheet.elementKey : undefined }\r\n  get weaponTypeKey() { return this.sheet.weaponTypeKey }\r\n  get constellationName() { return this.sheet.constellationName }\r\n\r\n  isMelee = () => {\r\n    const weaponTypeKey = this.sheet.weaponTypeKey\r\n    return weaponTypeKey === \"sword\" || weaponTypeKey === \"polearm\" || weaponTypeKey === \"claymore\"\r\n  }\r\n  get isTraveler() {\r\n    return \"talents\" in this.sheet\r\n  }\r\n  getTalent = (eleKey: ElementKey = \"anemo\"): TalentSheet | undefined => {\r\n    if (\"talent\" in this.sheet) return this.sheet.talent\r\n    else return this.sheet.talents[eleKey]\r\n  }\r\n  getTalentOfKey = (talentKey: TalentSheetElementKey, eleKey: ElementKey = \"anemo\") => this.getTalent(eleKey)?.sheets[talentKey]\r\n\r\n  static getLevelString = (level: number, ascension: number): string =>\r\n    `${level}/${ascensionMaxLevel[ascension]}`\r\n}\r\n\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    fields,\r\n    conditional,\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character_WR\";\r\nimport { allElementsWithPhy, ArtifactSetKey, CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon\";\r\nimport { crawlObject, deepClone, layeredAssignment, objectKeyMap, objPathValue } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { reactions } from \"./reaction\";\r\nimport { Data, DisplaySub, Info, Input, NumNode, ReadNode, StrNode } from \"./type\";\r\nimport { NodeDisplay, UIData, valueString } from \"./uiData\";\r\nimport { constant, customRead, percent, resetData, setReadNodeKeys } from \"./utils\";\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nfunction inferInfoMut(data: Data, source?: Info[\"source\"]): Data {\r\n  crawlObject(data, [], (x: any) => x.operation, (x: NumNode, path: string[]) => {\r\n    if (path[0] === \"teamBuff\") path = path.slice(1)\r\n    const reference = objPathValue(input, path) as ReadNode<number> | undefined\r\n    if (reference)\r\n      x.info = { ...reference.info, prefix: undefined, source }\r\n    else if (path[0] !== \"tally\")\r\n      console.error(`Detect ${source} buff into non-existant key path ${path}`)\r\n  })\r\n\r\n  return data\r\n}\r\nfunction dataObjForArtifact(art: ICachedArtifact, mainStatAssumptionLevel: number = 0): Data {\r\n  const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n  const stats: [ArtifactSetKey | MainStatKey | SubstatKey, number][] = []\r\n  stats.push([art.mainStatKey, mainStatVal])\r\n  art.substats.forEach(({ key, accurateValue }) => key && stats.push([key, accurateValue]))\r\n  return {\r\n    art: {\r\n      ...Object.fromEntries(stats.map(([key, value]) =>\r\n        key.endsWith(\"_\") ? [key, percent(value / 100)] : [key, constant(value)])),\r\n      [art.slotKey]: {\r\n        id: constant(art.id), set: constant(art.setKey)\r\n      },\r\n    },\r\n    artSet: {\r\n      [art.setKey]: constant(1)\r\n    }\r\n  }\r\n}\r\nfunction dataObjForCharacter(char: ICachedCharacter): Data {\r\n  const result: Data = {\r\n    lvl: constant(char.level),\r\n    constellation: constant(char.constellation),\r\n    asc: constant(char.ascension),\r\n\r\n    premod: {\r\n      auto: constant(char.talent.auto),\r\n      skill: constant(char.talent.skill),\r\n      burst: constant(char.talent.burst),\r\n    },\r\n    enemy: {\r\n      ...objectKeyMap(allElementsWithPhy.map(ele => `${ele}_res_`), ele =>\r\n        percent((char.enemyOverride[`${ele.slice(0, -5)}_enemyRes_`] ?? 10) / 100)),\r\n      level: constant(char.enemyOverride.enemyLevel ?? char.level),\r\n    },\r\n    hit: {\r\n      hitMode: constant(char.hitMode)\r\n    },\r\n    customBonus: {},\r\n  }\r\n\r\n  for (const [key, value] of Object.entries(char.bonusStats))\r\n    result.customBonus![key] = key.endsWith('_') ? percent(value / 100) : constant(value)\r\n\r\n  if (char.enemyOverride.enemyDefRed_)\r\n    result.premod!.enemyDefRed_ = percent(char.enemyOverride.enemyDefRed_)\r\n  if (char.enemyOverride.enemyDefIgn_)\r\n    result.enemy!.defIgn = percent(char.enemyOverride.enemyDefIgn_)\r\n  if (char.elementKey) {\r\n    result.charEle = constant(char.elementKey)\r\n    result.display = {\r\n      basic: { [`${char.elementKey}_dmg_`]: input.total[`${char.elementKey}_dmg_`] },\r\n      reaction: reactions[char.elementKey]\r\n    }\r\n    layeredAssignment(result, [\"teamBuff\", \"tally\", char.elementKey], constant(1))\r\n  }\r\n\r\n  crawlObject(char.conditional, [\"conditional\"], (x: any) => typeof x === \"string\", (x: string, keys: string[]) =>\r\n    layeredAssignment(result, keys, constant(x)))\r\n  return result\r\n}\r\nfunction dataObjForWeapon(weapon: ICachedWeapon): Data {\r\n  return {\r\n    weapon: {\r\n      lvl: constant(weapon.level),\r\n      asc: constant(weapon.ascension),\r\n      refinement: constant(weapon.refinement),\r\n      refineIndex: constant(weapon.refinement - 1)\r\n    },\r\n  }\r\n}\r\n/** These read nodes are very context-specific, and cannot be used anywhere else outside of `uiDataForTeam` */\r\nconst teamBuff = setReadNodeKeys(deepClone(input), [\"teamBuff\"]); // Use ONLY by dataObjForTeam\r\nfunction uiDataForTeam(teamData: Dict<CharacterKey, Data[]>, activeCharKey?: CharacterKey): Dict<CharacterKey, { target: UIData, buffs: Dict<CharacterKey, UIData> }> {\r\n  // May the goddess of wisdom bless any and all souls courageous\r\n  // enough to attempt for the understanding of this abomination.\r\n\r\n  const mergedData = Object.entries(teamData).map(([key, data]) => [key, { ...mergeData(data) }] as [CharacterKey, Data])\r\n  const result = Object.fromEntries(mergedData.map(([key]) =>\r\n    [key, { targetRef: {} as Data, buffs: [] as Data[], calcs: {} as Dict<CharacterKey, Data> }]))\r\n\r\n  const customReadNodes = {}\r\n  function getReadNode(path: readonly string[]): ReadNode<number> {\r\n    const base = (path[0] === \"teamBuff\")\r\n      ? objPathValue(teamBuff, path.slice(1))\r\n      : objPathValue(input, path)\r\n    if (base) return base\r\n    const custom = objPathValue(customReadNodes, path)\r\n    if (custom) return custom\r\n    const newNode = customRead(path)\r\n    if (path[0] === \"teamBuff\" && path[1] === \"tally\") newNode.accu = \"add\"\r\n    layeredAssignment(customReadNodes, path, newNode)\r\n    return newNode\r\n  }\r\n\r\n  Object.values(result).forEach(({ targetRef, buffs, calcs }) =>\r\n    mergedData.forEach(([sourceKey, source]) => {\r\n      const sourceBuff = source.teamBuff\r\n      // Create new copy of `calc` as we're mutating it later\r\n      const buff: Data = {}, calc: Data = deepClone({ teamBuff: sourceBuff })\r\n      buffs.push(buff)\r\n      calcs[sourceKey] = calc\r\n\r\n      // This construction creates a `Data` representing buff\r\n      // from `source` applying to `target`. It has 3 data:\r\n      // - `target` contains the reference for the final\r\n      //   data. It is not populated at this stage,\r\n      // - `calc` contains the calculation of the buffs,\r\n      // - `buff` contains read nodes that point to the\r\n      //   calculation in `calc`.\r\n\r\n      crawlObject(sourceBuff, [], (x: any) => x.operation, (x: NumNode | StrNode, path: string[]) => {\r\n        const info: Info = { ...objPathValue(input, path), source: sourceKey, prefix: undefined, asConst }\r\n        layeredAssignment(buff, path, resetData(getReadNode([\"teamBuff\", ...path]), calc, info))\r\n\r\n        crawlObject(x, [], (x: any) => x?.operation === \"read\", (x: ReadNode<number | string>) => {\r\n          if (x.path[0] === \"targetBuff\") return // Ignore teamBuff access\r\n\r\n          let readNode: ReadNode<number | string> | undefined, data: Data\r\n          if (x.path[0] === \"target\") { // Link the node to target data\r\n            readNode = getReadNode(x.path.slice(1))\r\n            data = targetRef\r\n          } else { // Link the node to source data\r\n            readNode = x\r\n            data = result[sourceKey].targetRef\r\n          }\r\n          layeredAssignment(calc, x.path, resetData(readNode, data))\r\n        })\r\n      })\r\n    })\r\n  )\r\n  mergedData.forEach(([targetKey, data]) => {\r\n    delete data.teamBuff\r\n    const { targetRef, buffs } = result[targetKey]\r\n    const buff = mergeData(buffs)\r\n    crawlObject(buff ?? {}, [], (x => x.operation), (x: NumNode, path: string[]) => {\r\n      // CAUTION\r\n      // This is safe only because `buff` is created using only `resetData`\r\n      // and `mergeData`. So every node here is created from either of the\r\n      // two functions, so the mutation wont't affect existing nodes.\r\n      x.info = { ...(objPathValue(teamBuff, path) as ReadNode<number> | undefined)?.info, prefix: \"teamBuff\", pivot }\r\n    })\r\n    Object.assign(targetRef, mergeData([data, buff, { teamBuff: buff, activeCharKey: constant(activeCharKey) }]))\r\n    targetRef[\"target\"] = targetRef\r\n  })\r\n  const origin = new UIData(undefined as any, undefined)\r\n  const uiDataResult = Object.fromEntries(Object.entries(result).map(([key, value]) =>\r\n    [key, {\r\n      target: new UIData(value.targetRef, origin),\r\n      buff: Object.fromEntries(Object.entries(value.calcs).map(([key, value]) =>\r\n        [key, new UIData(value, origin)]))\r\n    }]))\r\n  return uiDataResult\r\n}\r\nfunction mergeData(data: Data[]): Data {\r\n  function internal(data: any[], path: string[]): any {\r\n    if (data.length <= 1) return data[0]\r\n    if (data[0].operation) {\r\n      if (path[0] === \"teamBuff\") path = path.slice(1)\r\n      const accu = path[0] === \"tally\"\r\n        ? \"add\" : (objPathValue(input, path) as ReadNode<number> | undefined)?.accu\r\n      if (accu === undefined) {\r\n        if (data.length !== 1)\r\n          throw new Error(`Multiple entries when merging \\`unique\\` for key ${path}`)\r\n        return data[0]\r\n      }\r\n      const result: NumNode = { operation: accu, operands: data }\r\n      return result\r\n    } else {\r\n      return Object.fromEntries([...new Set(data.flatMap(x => Object.keys(x) as string[]))]\r\n        .map(key => [key, internal(data.map(x => x[key]).filter(x => x), [...path, key])]))\r\n    }\r\n  }\r\n  return data.length ? internal(data, []) : {}\r\n}\r\n\r\nfunction computeUIData(data: Data[]): UIData {\r\n  return new UIData(mergeData(data), undefined)\r\n}\r\ntype ComparedNodeDisplay<V = number> = NodeDisplay<V> & { diff: V }\r\nfunction compareTeamBuffUIData(uiData1: UIData, uiData2: UIData): Input<ComparedNodeDisplay, ComparedNodeDisplay<string>> {\r\n  return compareInternal(uiData1.getTeamBuff(), uiData2.getTeamBuff())\r\n}\r\nfunction compareDisplayUIData(uiData1: UIData, uiData2: UIData): { [key: string]: DisplaySub<ComparedNodeDisplay> } {\r\n  return compareInternal(uiData1.getDisplay(), uiData2.getDisplay())\r\n}\r\nfunction compareInternal(data1: any | undefined, data2: any | undefined): any {\r\n  if (data1?.operation || data2?.operation) {\r\n    const d1 = data1 as NodeDisplay | undefined\r\n    const d2 = data2 as NodeDisplay | undefined\r\n\r\n    if ((d1 && !d1.operation) || (d2 && !d2.operation))\r\n      throw new Error(\"Unmatched structure when comparing UIData\")\r\n\r\n    const result: ComparedNodeDisplay = {\r\n      operation: true,\r\n      value: 0,\r\n      isEmpty: true,\r\n      unit: d2?.unit!,\r\n      formulas: [],\r\n      ...d1,\r\n      diff: (d2?.value ?? 0) - (d1?.value ?? 0)\r\n    }\r\n    if (typeof d1?.value === \"string\" || typeof d2?.value === \"string\") {\r\n      // In case `string` got involved, just use the other value\r\n      result.value = d1?.value ?? \"\" as any\r\n      result.diff = d2?.value ?? \"\" as any\r\n    }\r\n    return result\r\n  }\r\n\r\n  if (data1 || data2) {\r\n    const keys = new Set([...Object.keys(data1 ?? {}), ...Object.keys(data2 ?? {})])\r\n    return Object.fromEntries([...keys].map(key => [key, compareInternal(data1?.[key], data2?.[key])]))\r\n  }\r\n}\r\n\r\nexport type { NodeDisplay, UIData };\r\nexport {\r\n  dataObjForArtifact, dataObjForCharacter, dataObjForWeapon,\r\n  mergeData, computeUIData, valueString, inferInfoMut,\r\n  uiDataForTeam, compareTeamBuffUIData, compareDisplayUIData\r\n};\r\n","import { allEleEnemyResKeys } from \"../KeyMap\"\r\nimport { allArtifactSets, allElementsWithPhy, allRegions, allSlotKeys } from \"../Types/consts\"\r\nimport { crawlObject, deepClone, objectKeyMap, objectKeyValueMap } from \"../Util/Util\"\r\nimport { Data, Info, NumNode, ReadNode, StrNode } from \"./type\"\r\nimport { constant, equalStr, frac, infoMut, lookup, max, min, naught, percent, prod, read, res, setReadNodeKeys, stringRead, sum, unit } from \"./utils\"\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nconst allElements = allElementsWithPhy\r\nconst allTalents = [\"auto\", \"skill\", \"burst\"] as const\r\nconst allMoves = [\"normal\", \"charged\", \"plunging\", \"skill\", \"burst\", \"elemental\"] as const\r\nconst allArtModStats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\"] as const\r\nconst allArtNonModStats = [\"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nconst allTransformative = [\"overloaded\", \"shattered\", \"electrocharged\", \"superconduct\", \"swirl\"] as const\r\nconst allAmplifying = [\"vaporize\", \"melt\"] as const\r\nconst allMisc = [\r\n  \"stamina\", \"staminaDec_\", \"staminaSprintDec_\", \"staminaGlidingDec_\", \"staminaChargedDec_\",\r\n  \"incHeal_\", \"shield_\", \"cdRed_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"\r\n] as const\r\n\r\nconst allModStats = [\r\n  ...allArtModStats,\r\n  ...([\"all\", \"burning\", ...allTransformative, ...allAmplifying, ...allMoves] as const).map(x => `${x}_dmg_` as const),\r\n]\r\nconst allNonModStats = [\r\n  ...allArtNonModStats,\r\n  ...([\"all\", ...allMoves] as const).map(x => `${x}_dmgInc` as const),\r\n  ...([...allElements] as const).map(x => `${x}_critDMG_` as const),\r\n  ...allElements.map(x => `${x}_res_` as const),\r\n  ...allMoves.map(x => `${x}_critRate_` as const),\r\n  ...allEleEnemyResKeys,\r\n  \"enemyDefRed_\" as const,\r\n  ...allMisc,\r\n]\r\n\r\nconst talent = objectKeyMap(allTalents, _ => read())\r\nconst allModStatNodes = objectKeyMap(allModStats, key => read(undefined, { key }))\r\nconst allNonModStatNodes = objectKeyMap(allNonModStats, key => read(undefined, { key }))\r\n\r\nfor (const ele of allElements) {\r\n  allNonModStatNodes[`${ele}_res_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_enemyRes_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_critDMG_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmg_`].info!.variant = ele\r\n}\r\nfor (const reaction of [...allTransformative, ...allAmplifying]) {\r\n  allModStatNodes[`${reaction}_dmg_`].info!.variant = reaction\r\n}\r\n\r\nfunction withDefaultInfo<T>(info: Info, value: T): T {\r\n  value = deepClone(value)\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => x.info = { ...info, ...x.info, })\r\n  return value\r\n}\r\nfunction markAccu<T>(accu: ReadNode<number>[\"accu\"], value: T): void {\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => {\r\n    if (x.operation === \"read\" && x.type === \"number\") x.accu = accu\r\n  })\r\n}\r\n\r\n/** All read nodes */\r\nconst input = setReadNodeKeys(deepClone({\r\n  activeCharKey: stringRead(),\r\n  charKey: stringRead(), charEle: stringRead(), infusion: stringRead(), weaponType: stringRead(),\r\n  lvl: read(undefined, { key: \"level\", prefix: \"char\" }), constellation: read(), asc: read(), special: read(),\r\n\r\n  base: objectKeyMap(['atk', 'hp', 'def'], key => read(\"add\", { key })),\r\n  customBonus: withDefaultInfo({ prefix: \"custom\", pivot }, {\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n  }),\r\n  bonus: { ...talent },\r\n  premod: { ...talent, ...allModStatNodes, ...allNonModStatNodes },\r\n  total: withDefaultInfo({ prefix: \"total\", pivot }, {\r\n    ...talent, ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, read()]),\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n    /** Total Crit Rate capped to [0%, 100%] */\r\n    cappedCritRate: read(undefined, { key: \"critRate_\" }),\r\n  }),\r\n\r\n  art: withDefaultInfo({ prefix: \"art\", asConst }, {\r\n    ...objectKeyMap(allArtModStats, key => allModStatNodes[key]),\r\n    ...objectKeyMap(allArtNonModStats, key => allNonModStatNodes[key]),\r\n    ...objectKeyMap(allSlotKeys, _ => ({ id: stringRead(), set: stringRead() })),\r\n  }),\r\n  artSet: objectKeyMap(allArtifactSets, set => read(\"add\", { key: set })),\r\n\r\n  weapon: withDefaultInfo({ prefix: \"weapon\", asConst }, {\r\n    key: stringRead(), type: stringRead(),\r\n\r\n    lvl: read(), asc: read(), refinement: read(), refineIndex: read(),\r\n    main: read(), sub: read(), sub2: read(),\r\n  }),\r\n\r\n  team: { infusion: stringRead() },\r\n\r\n  enemy: {\r\n    def: read(\"add\", { key: \"enemyDef_multi\", pivot }),\r\n    ...objectKeyMap(allElements.map(ele => `${ele}_resMulti` as const), _ => read()),\r\n\r\n    level: read(undefined, { key: \"enemyLevel\" }),\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_res_`, read(undefined)]),\r\n    defRed: read(undefined),\r\n    defIgn: read(\"add\", { key: \"enemyDefIgn_\", pivot }),\r\n  },\r\n\r\n  hit: {\r\n    ele: stringRead(), reaction: stringRead(), move: stringRead(), hitMode: stringRead(),\r\n    base: read(\"add\", { key: \"base\" }),\r\n\r\n    dmgBonus: read(undefined, { key: \"dmg_\", pivot }),\r\n    dmgInc: read(undefined, { key: \"dmgInc\", pivot }),\r\n    dmg: read(),\r\n  },\r\n}))\r\n\r\nconst { base, bonus, customBonus, premod, total, art, hit, enemy } = input\r\n\r\n// Adjust `info` for printing\r\nmarkAccu('add', {\r\n  bonus, customBonus, premod, art,\r\n  total: objectKeyMap(allModStats, stat => total[stat]),\r\n})\r\nbonus.auto.info = { key: \"autoBoost\" }\r\nbonus.skill.info = { key: \"skillBoost\" }\r\nbonus.burst.info = { key: \"burstBoost\" }\r\nbase.atk.info = { key: \"atk\", prefix: \"base\", pivot }\r\ndelete total.critRate_.info!.pivot\r\ntotal.critRate_.info!.prefix = \"uncapped\"\r\n\r\n// Nodes that are not used anywhere else but `common` below\r\n\r\n/** Base Amplifying Bonus */\r\nconst baseAmpBonus = sum(unit, prod(25 / 9, frac(total.eleMas, 1400)))\r\n/** Effective reaction, taking into account the hit's element */\r\nexport const effectiveReaction = lookup(hit.ele, {\r\n  pyro: lookup(hit.reaction, { vaporize: constant(\"vaporize\"), melt: constant(\"melt\") }, undefined),\r\n  hydro: equalStr(hit.reaction, \"vaporize\", \"vaporize\"),\r\n  cryo: equalStr(hit.reaction, \"melt\", \"melt\"),\r\n}, undefined)\r\n\r\nconst common: Data = {\r\n  premod: {\r\n    ...objectKeyMap(allTalents, talent => bonus[talent]),\r\n    ...objectKeyMap(allNonModStats, key => customBonus[key]),\r\n    ...objectKeyMap([...allModStats, ...allArtNonModStats] as const, key => {\r\n      const operands: NumNode[] = []\r\n      switch (key) {\r\n        case \"atk\": case \"def\": case \"hp\":\r\n          operands.push(prod(base[key], sum(unit, premod[`${key}_`])))\r\n          break\r\n        case \"critRate_\":\r\n          operands.push(percent(0.05, { key, prefix: \"default\" }),\r\n            lookup(hit.move, objectKeyMap(allMoves, move => customBonus[`${move}_critRate_`]), 0))\r\n          break\r\n        case \"critDMG_\":\r\n          operands.push(percent(0.5, { key, prefix: \"default\" }),\r\n            lookup(hit.ele, objectKeyMap(allElements, ele => customBonus[`${ele}_critDMG_`]), 0))\r\n          break\r\n        case \"enerRech_\":\r\n          operands.push(percent(1, { key, prefix: \"default\" }))\r\n          break\r\n      }\r\n      return sum(...[...operands, art[key], customBonus[key]].filter(x => x))\r\n    }),\r\n  },\r\n  total: {\r\n    ...objectKeyMap(allTalents, talent => premod[talent]),\r\n    ...objectKeyMap(allModStats, key => premod[key]),\r\n    ...objectKeyMap(allNonModStats, key => premod[key]),\r\n    ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, sum(total[talent], -1)]),\r\n    stamina: sum(constant(100, { key: \"stamina\", prefix: \"default\" }), customBonus.stamina),\r\n\r\n    cappedCritRate: max(min(total.critRate_, unit), naught),\r\n  },\r\n\r\n  hit: {\r\n    dmgBonus: sum(\r\n      total.all_dmg_,\r\n      lookup(effectiveReaction, objectKeyMap(allAmplifying, reaction => total[`${reaction}_dmg_`]), naught),\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmg_`]), naught),\r\n      lookup(hit.ele, objectKeyMap(allElements, ele => total[`${ele}_dmg_`]), naught)\r\n    ),\r\n    dmgInc: sum(\r\n      total.all_dmgInc,\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmgInc`]), NaN)\r\n    ),\r\n    dmg: prod(\r\n      sum(hit.base, hit.dmgInc),\r\n      sum(unit, hit.dmgBonus),\r\n      lookup(hit.hitMode, {\r\n        hit: unit,\r\n        critHit: sum(unit, total.critDMG_),\r\n        avgHit: sum(unit, prod(total.cappedCritRate, total.critDMG_)),\r\n      }, NaN),\r\n      enemy.def,\r\n      lookup(hit.ele,\r\n        objectKeyMap(allElements, ele => enemy[`${ele}_resMulti` as const]), NaN),\r\n      lookup(effectiveReaction, {\r\n        melt: lookup(hit.ele, {\r\n          pyro: prod(2, baseAmpBonus),\r\n          cryo: prod(1.5, baseAmpBonus),\r\n        }, 1, { key: \"melt_dmg_\" }),\r\n        vaporize: lookup(hit.ele, {\r\n          hydro: prod(2, baseAmpBonus),\r\n          pyro: prod(1.5, baseAmpBonus),\r\n        }, 1, { key: \"vaporize_dmg_\" }),\r\n      }, 1),\r\n    ),\r\n  },\r\n\r\n  enemy: {\r\n    // TODO: shred cap of 90%\r\n    def: frac(sum(input.lvl, 100), prod(sum(enemy.level, 100), sum(unit, prod(-1, enemy.defRed)), sum(unit, prod(-1, enemy.defIgn)))),\r\n    defRed: total.enemyDefRed_,\r\n    ...objectKeyValueMap(allElements, ele =>\r\n      [`${ele}_resMulti`, res(infoMut(sum(enemy[`${ele}_res_`], total[`${ele}_enemyRes_`]), { key: `${ele}_res_`, variant: ele }))]),\r\n  },\r\n}\r\n\r\nconst target = setReadNodeKeys(deepClone(input), [\"target\"])\r\nconst tally = setReadNodeKeys(objectKeyMap([...allElements, ...allRegions], _ => read(\"add\")), [\"tally\"])\r\n\r\n/**\r\n * List of `input` nodes, rearranged to conform to the needs of the\r\n * UI code. This is a separate list so that the evolution of the UIs\r\n * does not rely on the structure of `input`. So the UI code can rearrange\r\n * nodes as it sees fit without requiring updates to data sheets, which\r\n * pertains ~90% of all `input`-related code, and so are very sensitive\r\n * to any changes to `input`. For zero overhead, use the nodes directly\r\n * from `input` instead of a copy.\r\n */\r\nconst uiInput = input\r\n\r\nexport {\r\n  input, uiInput, common, customBonus,\r\n\r\n  target, tally,\r\n}\r\n","import { AnyNode, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\r\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\r\n\r\n  function traverse(formula: (NumNode | StrNode)) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\r\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\r\n  const visiting = new Set<(NumNode | StrNode)>()\r\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n\r\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    let topDown = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual(result, formulas) ? formulas : result\r\n}\r\n\r\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\r\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\r\n  const visiting = new Set<AnyNode>()\r\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n\r\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\r\n    let topDownMapping = topDownByContext.get(parentContextId)\r\n    if (!topDownMapping) {\r\n      topDownMapping = new Map()\r\n      topDownByContext.set(parentContextId, topDownMapping)\r\n    }\r\n\r\n    let topDown = topDownMapping.get(formula)\r\n    if (topDown) return topDown\r\n    let topDownContextId: number\r\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n\r\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\r\n    if (!bottomUpMapping) {\r\n      bottomUpMapping = new Map()\r\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\r\n    }\r\n\r\n    let bottomUp = bottomUpMapping.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    visiting.add(topDown)\r\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\r\n    visiting.delete(topDown)\r\n\r\n    bottomUpMapping.set(topDown, bottomUp)\r\n    topDownMapping.set(formula, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\r\n    const operands = formula.operands.map(f => check(f, contextId))\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(f => check(f, baseContextId))\r\n  return arrayEqual(formulas, result) ? formulas : result\r\n}\r\n\r\ntype ContextID = number\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { forEachNodes, mapFormulas } from \"./internal\"\r\nimport { constant } from \"./utils\"\r\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode } from \"./type\"\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  formulas = constantFold(formulas, topLevelData, shouldFold)\r\n  formulas = flatten(formulas)\r\n  formulas = deduplicate(formulas)\r\n  return formulas\r\n}\r\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): (values: Dict<string, number>) => number[] {\r\n  // TODO: Use min-cut to minimize the size of interim array\r\n  type Reference = string | number | { ins: Reference[] }\r\n\r\n  const uniqueReadStrings = new Set<string>()\r\n  const uniqueNumbers = new Set<number>()\r\n  const mapping = new Map<NumNode, Reference>()\r\n\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\r\n          throw new Error(`Unsupported ${operation} node in precompute`)\r\n        const name = binding(f)\r\n        uniqueReadStrings.add(name)\r\n        mapping.set(f, name)\r\n        break\r\n      case \"add\": case \"min\": case \"max\": case \"mul\":\r\n      case \"threshold\": case \"res\": case \"sum_frac\":\r\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\r\n        break\r\n      case \"const\":\r\n        if (typeof f.value !== \"number\")\r\n          throw new Error(\"Found string constant while precomputing\")\r\n        const value = f.value\r\n        uniqueNumbers.add(value)\r\n        mapping.set(f as ConstantNode<number>, value)\r\n        break\r\n      case \"match\": case \"lookup\": case \"subscript\":\r\n      case \"prio\":\r\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  /**\r\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\r\n   *\r\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\r\n   * in the same order as formulas even when they are duplicated. Inputs\r\n   * are arranged in the same order as the read strings, even when they\r\n   * overlap with outputs. If an output is a constant or a compute node,\r\n   * only put the data in the output region.\r\n   */\r\n  const locations = new Map<NumNode | number | string, number>()\r\n\r\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\r\n  const constValues = [...uniqueNumbers]\r\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\r\n\r\n  formulas.forEach((f, i) => {\r\n    locations.set(f, i)\r\n    if (f.operation === \"const\") locations.set(f.value, i)\r\n  })\r\n  // After this line, if some outputs are also read node, `locations`\r\n  // will point to the one in the read node portion instead.\r\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\r\n  let offset = formulas.length + readStrings.length\r\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\r\n\r\n  // `locations` is stable from this point on. We now only append new values.\r\n  // There is no change to existing values.\r\n  //\r\n  // DO NOT read from `location` prior to this line.\r\n  mapping.forEach((ref, node) => {\r\n    if (typeof ref !== \"object\") {\r\n      locations.set(node, locations.get(ref)!)\r\n      return\r\n    }\r\n    if (!locations.has(node)) locations.set(node, offset++)\r\n    computations.push({\r\n      out: locations.get(node)!,\r\n      ins: node.operands.map(op => locations.get(op)!),\r\n      op: allOperations[node.operation],\r\n      buff: Array(node.operands.length).fill(0),\r\n    })\r\n  })\r\n\r\n  const buffer = Array(offset).fill(0)\r\n  buffer.forEach((_, i, array) => array[i] = NaN)\r\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\r\n\r\n  // Copy target for when some outputs are duplicated\r\n  const copyList = formulas.map((node, i) => {\r\n    const src = locations.get(node)!\r\n    return src !== i ? [src, i] : undefined!\r\n  }).filter(x => x)\r\n  const copyFormula = copyList.length ? () => {\r\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\r\n  } : undefined\r\n\r\n  return values => {\r\n    readStrings.forEach((id, i) => buffer[readOffset + i] = values[id] ?? 0)\r\n    computations.forEach(({ out, ins, op, buff }) => {\r\n      ins.forEach((i, j) => buff[j] = buffer[i])\r\n      buffer[out] = op(buff)\r\n    })\r\n    copyFormula?.()\r\n    return buffer\r\n  }\r\n}\r\n\r\nfunction flatten(formulas: NumNode[]): NumNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\r\n      const formula = _formula as ComputeNode\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<NumNode, number>(),\r\n      formulas: new Set<NumNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula as NumNode)) {\r\n        const formula = _formula as ComputeNode\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<NumNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  function fold(formula: StrNode, context: Context): StrNode\r\n  function fold(formula: NumNode, context: Context): NumNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\r\n    const old = context.processed.get(formula)\r\n    if (old) return old\r\n\r\n    const { operation } = formula\r\n    let result: NumNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": return formula\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = fold(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = fold(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        if (!first)\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = fold(first, context)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\r\n        if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const [index] = formula.operands.map(x => fold(x, context))\r\n        result = (index.operation === \"const\")\r\n          ? constant(formula.list[index.value])\r\n          : { ...formula, operands: [index] }\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined)\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined)\r\n          result = fold(operands[0], context)\r\n        else\r\n          result = fold({ operation: formula.accu, operands } as ComputeNode, context)\r\n        break\r\n      }\r\n      case \"data\":\r\n        if (formula.reset) context = origin\r\n        const map = nextContextMap.get(context)!\r\n        let nextContext = map.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          map.set(formula.data, nextContext)\r\n        }\r\n        result = fold(formula.operands[0], nextContext)\r\n        break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    context.processed.set(formula, result)\r\n    return result\r\n  }\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return formulas.map(x => fold(x, context))\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","import { crystalizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystalizeMulti1 = subscript(input.lvl, crystalizeLevelMultipliers)\r\nconst crystalizeElemas = prod(4000 / 9, frac(input.total.eleMas, 1400))\r\nconst crystalizeHit = infoMut(prod(sum(unit, /** + Crystalize bonus */ crystalizeElemas), crystalizeMulti1), { /** Crystalize Shield HP */ })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    ...objectKeyMap([\"pyro\", \"electro\", \"cryo\", \"hydro\"] as const, _ =>\r\n      prod(2.5, crystalizeHit)),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n","import { uiInput } from \".\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport KeyMap, { KeyMapPrefix, Unit } from \"../KeyMap\"\r\nimport { assertUnreachable, crawlObject, layeredAssignment, objPathValue } from \"../Util/Util\"\r\nimport { allOperations } from \"./optimization\"\r\nimport { ComputeNode, Data, DataNode, DisplaySub, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode, ThresholdNode, UIInput, Variant } from \"./type\"\r\n\r\nconst shouldWrap = true\r\n\r\nexport function valueString(value: number, unit: Unit, fixed = -1): string {\r\n  if (!isFinite(value)) {\r\n    if (value > 0) return `\\u221E`\r\n    if (value < 0) return `-\\u221E`\r\n    return 'NaN'\r\n  }\r\n  if (unit === \"%\") value *= 100\r\n  else unit = '' as any\r\n  if (Number.isInteger(value)) fixed = 0\r\n  else if (fixed === -1) {\r\n    if (unit === \"%\") fixed = 1\r\n    else fixed = Math.abs(value) < 10 ? 3 : Math.abs(value) < 1000 ? 2 : Math.abs(value) < 10000 ? 1 : 0\r\n  }\r\n  return `${value.toFixed(fixed)}${unit}`\r\n}\r\nexport interface NodeDisplay<V = number> {\r\n  /** Leave this here to make sure one can use `crawlObject` on hierarchy of `NodeDisplay` */\r\n  operation: true\r\n  prefix?: KeyMapPrefix\r\n  key?: string\r\n  value: V\r\n  /** Whether the node fails the conditional test (`threshold_add`, `match`, etc.) or consists solely of empty nodes */\r\n  isEmpty: boolean\r\n  unit: Unit\r\n  variant?: Variant\r\n  formula?: Displayable\r\n  formulas: Displayable[]\r\n}\r\n\r\nexport class UIData {\r\n  origin: UIData\r\n  children = new Map<Data, UIData>()\r\n\r\n  data: Data[]\r\n  nodes = new Map<NumNode | StrNode, ContextNodeDisplay<number | string | undefined>>()\r\n  processed = new Map<NumNode | StrNode, NodeDisplay<number | string | undefined>>()\r\n\r\n  display: any = undefined\r\n  teamBuff: any = undefined\r\n\r\n  constructor(data: Data, parent: UIData | undefined) {\r\n    if (data === undefined) {\r\n      // Secret *origin* initializer\r\n      this.data = []\r\n      this.origin = this\r\n    } else {\r\n      if (!parent)\r\n        parent = new UIData(undefined as any, undefined)\r\n\r\n      this.data = [data, ...parent.data]\r\n      this.origin = parent.origin\r\n    }\r\n  }\r\n\r\n  getDisplay(): {\r\n    [key: string]: DisplaySub<NodeDisplay>\r\n  } {\r\n    if (!this.display) this.display = this.getAll([\"display\"])\r\n    return this.display\r\n  }\r\n  getTeamBuff(): UIInput<NodeDisplay, NodeDisplay<string>> {\r\n    if (!this.teamBuff) {\r\n      const calculated = this.getAll([\"teamBuff\"]), result = {} as any\r\n      // Convert `input` to `uiInput`\r\n      crawlObject(uiInput, [], (x: any) => x.operation, (x: ReadNode<number> | ReadNode<string>, path: string[]) => {\r\n        const node = objPathValue(calculated, x.path) as NumNode | undefined\r\n        if (node) layeredAssignment(result, path, node)\r\n      })\r\n      this.teamBuff = result\r\n    }\r\n    return this.teamBuff\r\n  }\r\n  getAll(prefix: string[]): any {\r\n    const result = {}\r\n    for (const data of this.data) {\r\n      crawlObject(objPathValue(data, prefix) ?? {}, [], (x: any) => x.operation,\r\n        (x: NumNode, key: string[]) => layeredAssignment(result, key, this.get(x)))\r\n    }\r\n    return result\r\n  }\r\n  get(node: NumNode): NodeDisplay\r\n  get(node: StrNode): NodeDisplay<string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined> {\r\n    if (node === undefined) {\r\n      console.trace(\"Please report this bug with this trace\")\r\n      return { operation: true, value: undefined, isEmpty: true, unit: \"flat\", formulas: [] }\r\n    }\r\n    const old = this.processed.get(node)\r\n    if (old) return old\r\n\r\n    const result = computeNodeDisplay(this.computeNode(node))\r\n    this.processed.set(node, result)\r\n    return result\r\n  }\r\n  private computeNode(node: NumNode): ContextNodeDisplay\r\n  private computeNode(node: StrNode): ContextNodeDisplay<string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined> {\r\n    const old = this.nodes.get(node)\r\n    if (old) return old\r\n\r\n    const { operation, info } = node\r\n    let result: ContextNodeDisplay<number | string | undefined>\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        result = this._compute(node); break\r\n      case \"threshold\": result = this._threshold(node); break\r\n      case \"const\": result = this._constant(node.value); break\r\n      case \"subscript\": result = this._subscript(node); break\r\n      case \"read\": result = this._read(node); break\r\n      case \"data\": result = this._data(node); break\r\n      case \"match\": result = this._match(node); break\r\n      case \"lookup\": result = this._lookup(node); break\r\n      case \"prio\": {\r\n        const first = node.operands.find(x => this.computeNode(x).value !== undefined)\r\n        if (first) result = this.computeNode(first)\r\n        else result = illformed\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (info) {\r\n      const { key, prefix, source, variant, asConst } = info\r\n      let { pivot } = info\r\n      result = { ...result }\r\n\r\n      // Pivot all keyed nodes for debugging\r\n      // if (key) pivot = true\r\n\r\n      if (key) result.key = key\r\n      if (prefix) result.prefix = prefix\r\n      if (source) result.source = source\r\n      if (variant) result.variant = variant\r\n      if (pivot) result.pivot = pivot\r\n\r\n      if (asConst) {\r\n        delete result.formula\r\n        delete result.assignment\r\n        result.dependencies = new Set()\r\n      }\r\n      if (result.pivot || !result.formula)\r\n        result.mayNeedWrapping = false\r\n    }\r\n    createDisplay(result)\r\n\r\n    this.nodes.set(node, result)\r\n    return result\r\n  }\r\n\r\n  private readAll(path: readonly string[]): ContextNodeDisplay<number | string | undefined>[] {\r\n    return this.data.map(x => objPathValue(x, path) as NumNode | StrNode).filter(x => x).map(x => this.computeNode(x))\r\n  }\r\n  private readFirst(path: readonly string[]): ContextNodeDisplay<number | string | undefined> | undefined {\r\n    const data = this.data.map(x => objPathValue(x, path) as NumNode | StrNode).find(x => x)\r\n    return data && this.computeNode(data)\r\n  }\r\n\r\n  private _read(node: ReadNode<number | string | undefined>): ContextNodeDisplay<number | string | undefined> {\r\n    const { path } = node\r\n    const result = (node.accu === undefined)\r\n      ? this.readFirst(path) ?? (node.type === \"string\" ? this._constant(undefined) : illformed)\r\n      : this._accumulate(node.accu, this.readAll(path) as ContextNodeDisplay[])\r\n    return result\r\n  }\r\n  private _lookup(node: LookupNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const key = this.computeNode(node.operands[0]).value\r\n    const selected = node.table[key!] ?? node.operands[1]\r\n    if (!selected)\r\n      throw new Error(`Lookup Fail with key ${key}`)\r\n    return this.computeNode(selected)\r\n  }\r\n  private _match(node: MatchNode<StrNode | NumNode, StrNode | NumNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [v1Node, v2Node, matchNode, unmatchNode] = node.operands\r\n    const v1 = this.computeNode(v1Node), v2 = this.computeNode(v2Node)\r\n    const matching = v1.value === v2.value\r\n    let result = this.computeNode(matching ? matchNode : unmatchNode)\r\n    return ((matching && node.emptyOn === \"match\") || (!matching && node.emptyOn === \"unmatch\"))\r\n      ? makeEmpty(result.value) : result\r\n  }\r\n  private _threshold(node: ThresholdNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [valueNode, thresholdNode, pass, fail] = node.operands\r\n    const value = this.computeNode(valueNode), threshold = this.computeNode(thresholdNode)\r\n    const result = value.value >= threshold.value ? this.computeNode(pass) : this.computeNode(fail)\r\n    return (value.value >= threshold.value)\r\n      ? (node.emptyOn === \"ge\" ? makeEmpty(result.value) : result)\r\n      : (node.emptyOn === \"l\" ? makeEmpty(result.value) : result)\r\n  }\r\n  private _data(node: DataNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    let child = this.children.get(node.data)\r\n    if (!child) {\r\n      child = new UIData(node.data, node.reset ? this.origin : this)\r\n      this.children.set(node.data, child)\r\n    }\r\n    return child.computeNode(node.operands[0])\r\n  }\r\n  private _compute(node: ComputeNode): ContextNodeDisplay {\r\n    const { operation, operands } = node\r\n    return this._accumulate(operation, operands.map(x => this.computeNode(x)))\r\n  }\r\n  private _subscript(node: SubscriptNode<number>): ContextNodeDisplay {\r\n    const operand = this.computeNode(node.operands[0])\r\n    const value = node.list[operand.value] ?? NaN\r\n    return this._constant(value)\r\n  }\r\n  private _constant<V>(value: V): ContextNodeDisplay<V> {\r\n    return {\r\n      value, pivot: false,\r\n      empty: false,\r\n      mayNeedWrapping: false,\r\n      dependencies: new Set(),\r\n    }\r\n  }\r\n  private _accumulate(operation: ComputeNode[\"operation\"], operands: ContextNodeDisplay[]): ContextNodeDisplay {\r\n    let variant: Variant | undefined\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        variant = mergeVariants(operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n        const identity = allOperations[operation]([])\r\n        if (process.env.NODE_ENV !== \"development\")\r\n          operands = operands.filter(operand => operand.value !== identity)\r\n        if (!operands.length)\r\n          return variant ? { ...this._constant(identity), variant } : this._constant(identity)\r\n    }\r\n\r\n    let formula: { display: Displayable, dependencies: Displayable[] }\r\n    let mayNeedWrapping = false\r\n    switch (operation) {\r\n      case \"max\": formula = fStr`Max( ${{ operands }} )`; break\r\n      case \"min\": formula = fStr`Min( ${{ operands }} )`; break\r\n      case \"add\": formula = fStr`${{ operands, separator: ' + ' }}`; break\r\n      case \"mul\": formula = fStr`${{ operands, separator: ' * ', shouldWrap }}`; break\r\n      case \"sum_frac\": formula = fStr`${{ operands: [operands[0]], shouldWrap }} / ( ${{ operands, separator: ' + ' }} )`; break\r\n      case \"res\": {\r\n        const base = operands[0].value\r\n        if (base < 0) {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }} / 2`\r\n          mayNeedWrapping = true\r\n        }\r\n        else if (base >= 0.75) formula = fStr`100% / ( ${{ operands, shouldWrap }} * 4 + 100% )`\r\n        else {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }}`\r\n          mayNeedWrapping = true\r\n        }\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\":\r\n        if (operands.length <= 1) mayNeedWrapping = operands[0]?.mayNeedWrapping ?? true\r\n        else if (operation === \"add\") mayNeedWrapping = true\r\n    }\r\n\r\n    const value = allOperations[operation](operands.map(x => x.value))\r\n    const dependencies = new Set([...operands.flatMap(x =>\r\n      x.pivot && x.assignment\r\n        ? [x.assignment, ...x.dependencies]\r\n        : [...x.dependencies])])\r\n    const result: ContextNodeDisplay = {\r\n      formula: formula.display,\r\n      empty: operands.every(x => x.empty),\r\n      value, mayNeedWrapping,\r\n      pivot: false, dependencies,\r\n    }\r\n    if (variant) result.variant = variant\r\n    return result\r\n  }\r\n}\r\ntype ContextNodeDisplayList = { operands: ContextNodeDisplay[], separator?: string, shouldWrap?: boolean }\r\nfunction fStr(strings: TemplateStringsArray, ...list: ContextNodeDisplayList[]): { display: Displayable, dependencies: Displayable[] } {\r\n  const dependencies = new Set<Displayable>()\r\n  const predisplay: Displayable[] = []\r\n\r\n  strings.forEach((string, i) => {\r\n    predisplay.push(string)\r\n\r\n    const key = list[i]\r\n    if (key) {\r\n      const { operands, shouldWrap, separator = \", \" } = key\r\n      operands.forEach((item, i, array) => {\r\n        let itemFormula: Displayable\r\n        if (!item.pivot && item.formula) itemFormula = item.formula\r\n        else itemFormula = createFormulaComponent(item)\r\n\r\n        if (shouldWrap && item.mayNeedWrapping) {\r\n          predisplay.push(\"( \")\r\n          predisplay.push(itemFormula)\r\n          predisplay.push(\" )\")\r\n        } else {\r\n          predisplay.push(itemFormula)\r\n        }\r\n        if (i + 1 < array.length) predisplay.push(separator)\r\n        item.dependencies.forEach(x => dependencies.add(x))\r\n      })\r\n    }\r\n  })\r\n  return { display: mergeFormulaComponents(predisplay), dependencies: [...dependencies] }\r\n}\r\nfunction mergeVariants<V>(operands: ContextNodeDisplay<V>[]): ContextNodeDisplay<V>[\"variant\"] {\r\n  const unique = new Set(operands.map(x => x.variant))\r\n  if (unique.size > 1) unique.delete(undefined)\r\n  if (unique.size > 1) unique.delete(\"physical\")\r\n  return unique.values().next().value\r\n}\r\nfunction computeNodeDisplay<V>(node: ContextNodeDisplay<V>): NodeDisplay<V> {\r\n  const { key, prefix, dependencies, value, variant, formula, assignment, empty } = node\r\n  return {\r\n    operation: true,\r\n    key, value, variant, prefix,\r\n    isEmpty: empty,\r\n    unit: (key && KeyMap.unit(key)) || \"flat\",\r\n    formula, formulas: [...(assignment ? [assignment] : []), ...dependencies]\r\n  }\r\n}\r\n\r\n//* Comment/uncomment this line to toggle between string formulas and JSX formulas\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = <ColorText color=\"info\">{valueString(value, key ? KeyMap.unit(key) : \"flat\")}</ColorText>\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? <>{KeyMap.getPrefixStr(prefix)} </> : <></>\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? <ColorText color=\"secondary\"> ({source})</ColorText> : null\r\n    node.name = <><ColorText color={variant}>{prefixDisplay}{KeyMap.getNoUnit(key!)}</ColorText>{sourceDisplay}</>\r\n\r\n    if (formula)\r\n      node.assignment = <div id=\"formula\">{node.name} {node.valueDisplay} = {formula}</div>\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  //TODO: change formula size in the formula display element instead\r\n  return name ? <><span style={{ fontSize: \"85%\" }}>{name}</span> {valueDisplay}</> : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return <>{components.map((x, i) => <span key={i}>{x}</span>)}</>\r\n}\r\n/*/\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = valueString(value, key ? KeyMap.unit(key) : \"flat\")\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? `${KeyMap.getPrefixStr(prefix)} ` : \"\"\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? ` ${source}` : \"\"\r\n    node.name = `${prefixDisplay}${KeyMap.getNoUnit(key!)}${sourceDisplay}`\r\n\r\n    if (formula)\r\n      node.assignment = `${node.name} ${node.valueDisplay} = ${formula}`\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  return name ? `${name} ${valueDisplay}` : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return (components as string[]).join(\"\")\r\n}\r\n//*/\r\n\r\ninterface ContextNodeDisplay<V = number> {\r\n  key?: Info[\"key\"]\r\n  prefix?: Info[\"prefix\"]\r\n  source?: Info[\"source\"]\r\n  variant?: Info[\"variant\"]\r\n\r\n  pivot: boolean\r\n  empty: boolean\r\n\r\n  value: V\r\n\r\n  dependencies: Set<Displayable>\r\n\r\n  mayNeedWrapping: boolean\r\n\r\n  // Don't set these manually outside of `UIData.computeNode`\r\n  name?: Displayable\r\n  valueDisplay?: Displayable\r\n  formula?: Displayable\r\n  assignment?: Displayable\r\n}\r\n\r\nconst illformed: ContextNodeDisplay = {\r\n  value: NaN, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nfunction makeEmpty(emptyValue: number): ContextNodeDisplay<number>\r\nfunction makeEmpty(emptyValue: string | undefined): ContextNodeDisplay<string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined> {\r\n  return {\r\n    value: emptyValue, pivot: false, empty: true, dependencies: new Set(), mayNeedWrapping: false\r\n  }\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\r\n\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype Any = Num | Str\r\n\r\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\r\nexport const unit = percent(1), naught = percent(0)\r\n\r\nexport function constant(value: number, info?: Info): NumNode\r\nexport function constant(value: string | undefined, info?: Info): StrNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\r\n  return { operation: \"const\", operands: [], value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): NumNode {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { key: \"_\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\r\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\r\n  return { operation: \"lookup\", operands, table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Num[]): NumNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Num[]): NumNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Num[]): NumNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Num[]): NumNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Num, c: Num): NumNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Num): NumNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\r\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\r\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\nexport function stringRead(): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: Any[]): AnyNode[]\r\nfunction intoOps(values: Any[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: Num | Str): NumNode | StrNode\r\nfunction intoV(value: Any): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\n\r\ntype _NodeList = {\r\n  [key: string]: NodeList\r\n} & {\r\n  operation?: never\r\n}\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n\r\n/*\r\n * Deprecated\r\n */\r\n\r\n/**\r\n * value >= threshold ? value : emptyValue\r\n * @deprecated Use `greaterEq`, `lessEq`, or `greaterEqStr` instead\r\n */\r\nexport function threshold(value: Num, threshold: Num, pass: Str, fail: Str, info?: Info): StrNode\r\nexport function threshold(value: Num, threshold: Num, pass: Num, fail: Num, info?: Info): NumNode\r\nexport function threshold(value: Num, threshold: Num, pass: Num | Str, fail: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(value), intoV(threshold), intoV(pass), intoV(fail)] as any\r\n  return { operation: \"threshold\", operands, info }\r\n}\r\n/**\r\n * value >= threshold ? addition : 0\r\n * @deprecated Use `greaterEq` or `lessEq` instead\r\n */\r\nexport function threshold_add(value: Num, thres: Num, addition: Num, info?: Info): NumNode {\r\n  return threshold(value, thres, addition, 0, info)\r\n}\r\n\r\n/**\r\n * `v1` === `v2` ? `match` : 0\r\n * @deprecated Use `equal` instead\r\n */\r\nexport function match(v1: Str, v2: Str, match: Num, info?: Info): NumNode {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/**\r\n * `v1` === `v2` ? 0 : `unmatch`\r\n * @deprecated Use `unequal` instead\r\n */\r\nexport function unmatch(v1: Str, v2: Str, unmatch: Num, info?: Info): NumNode {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(unmatch)], info, emptyOn: \"match\" }\r\n}\r\n/**\r\n * `v1` === `v2` ? `match` : `unmatch`\r\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\r\n */\r\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport default function usePromise<T>(promise: Promise<T> | undefined, dependencies: any[]): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    promise?.then(res => pending && setRes(() => res), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res\r\n}"],"names":["Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","CloseButton","large","props","t","useTranslation","color","startIcon","sx","p","minWidth","DropdownButton","title","children","id","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","ImgIcon","name","slot","size","display","verticalAlign","ScrollModal","Modal","overflow","paddingTop","spacing","paddingBottom","ModalContainer","Container","padding","minHeight","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","variant","SolidToggleButtonGroup","ToggleButtonGroup","shouldForwardProp","prop","baseColor","selectedColor","contrastText","dark","SqBadge","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","borderRadius","StarIcon","icon","faStar","Stars","stars","colored","component","Array","keys","map","_","i","characterSheets","then","imp","default","CharacterSheet","charSheet","data","sheet","isMelee","weaponTypeKey","getTalent","eleKey","talent","talents","getTalentOfKey","talentKey","sheets","this","src","thumbImgSide","marginTop","marginLeft","cardImg","thumbImg","bannerImg","rarity","elementKey","constellationName","get","charKey","c","getLevelString","level","ascension","ascensionMaxLevel","talentTemplate","tr","img","fields","conditional","sections","text","talentStrMap","auto","skill","burst","passive","passive1","passive2","passive3","sprint","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","conditionalHeader","m","action","normalSrc","weaponKey","inferInfoMut","source","crawlObject","x","operation","path","slice","reference","objPathValue","input","info","prefix","console","error","dataObjForArtifact","art","mainStatAssumptionLevel","mainStatVal","Artifact","mainStatKey","Math","max","min","stats","push","substats","forEach","key","accurateValue","Object","fromEntries","value","endsWith","percent","constant","slotKey","set","setKey","artSet","dataObjForCharacter","char","result","lvl","constellation","asc","premod","enemy","objectKeyMap","allElementsWithPhy","ele","enemyOverride","enemyLevel","hit","hitMode","customBonus","entries","bonusStats","enemyDefRed_","enemyDefIgn_","defIgn","charEle","basic","reaction","reactions","layeredAssignment","dataObjForWeapon","weapon","refinement","refineIndex","teamBuff","setReadNodeKeys","deepClone","uiDataForTeam","teamData","activeCharKey","mergedData","mergeData","targetRef","buffs","calcs","customReadNodes","getReadNode","base","custom","newNode","customRead","accu","values","sourceKey","sourceBuff","buff","calc","asConst","resetData","readNode","targetKey","pivot","assign","origin","UIData","target","length","internal","Error","operands","Set","flatMap","filter","computeUIData","allElements","allTalents","allMoves","allArtModStats","allArtNonModStats","allTransformative","allAmplifying","allModStats","allNonModStats","allEleEnemyResKeys","read","allModStatNodes","allNonModStatNodes","withDefaultInfo","stringRead","infusion","weaponType","special","bonus","total","objectKeyValueMap","cappedCritRate","allSlotKeys","allArtifactSets","type","sub","sub2","team","def","defRed","move","dmgBonus","dmgInc","dmg","stat","atk","critRate_","baseAmpBonus","sum","unit","prod","frac","eleMas","effectiveReaction","lookup","pyro","vaporize","melt","hydro","equalStr","cryo","common","stamina","naught","all_dmg_","all_dmgInc","NaN","critHit","critDMG_","avgHit","res","infoMut","tally","allRegions","uiInput","forEachNodes","formulas","topDown","bottomUp","visiting","visited","traverse","formula","has","add","delete","mapFormulas","topDownMap","bottomUpMap","topDownMapped","Map","bottomUpMapped","check","arrayEqual","a","b","every","allCommutativeMonoidOperations","reduce","mul","allOperations","sum_frac","threshold","pass","fail","commutativeMonoidOperationSet","optimize","topLevelData","shouldFold","_formula","deduplicate","flatten","constantFold","f","flattened","dep","elementCounts","array","wrap","counts","next","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","processed","nextContextMap","fold","context","old","numericOperands","formulaOperands","folded","numericValue","isFinite","index","selected","table","first","find","op","v1","v2","match","unmatch","list","reset","nextContext","assertUnreachable","crystalizeMulti1","subscript","crystalizeLevelMultipliers","crystalizeElemas","crystalizeHit","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","transformativeReactions","multi","variants","swirl","anemo","electroSwirl","electro","pyroSwirl","cryoSwirl","hydroSwirl","shattered","geo","overloaded","electrocharged","superconduct","shouldWrap","valueString","fixed","Number","isInteger","abs","toFixed","parent","nodes","getAll","calculated","node","trace","isEmpty","dependencies","assignment","empty","KeyMap","computeNodeDisplay","computeNode","_compute","_threshold","_constant","_subscript","_read","_data","_match","_lookup","illformed","mayNeedWrapping","valueDisplay","prefixDisplay","sourceDisplay","createDisplay","readFirst","_accumulate","readAll","v1Node","v2Node","matchNode","unmatchNode","matching","emptyOn","makeEmpty","valueNode","thresholdNode","child","operand","unique","mergeVariants","identity","fStr","separator","strings","predisplay","string","item","itemFormula","createFormulaComponent","mergeFormulaComponents","style","components","emptyValue","MAX_VALUE","Infinity","defaultV","intoV","intoOps","equal","unequal","greaterEq","greaterEqStr","lessThan","nodeList","customStringRead","stringPrio","matchFull","useForceUpdate","stateDirty","update","usePromise","promise","setRes","useEffect","pending"],"sourceRoot":""}