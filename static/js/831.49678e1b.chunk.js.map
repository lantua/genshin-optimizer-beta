{"version":3,"file":"static/js/831.49678e1b.chunk.js","mappings":"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","sources":["Components/ConditionalWrapper.tsx","Components/StatIcon.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","Data/Weapons/WeaponSheet.tsx","PageCharacter/CharacterCard.tsx","ReactHooks/useCharSelectionCallback.tsx","Util/CharacterUtil.tsx","ReactHooks/useCharacterReducer.tsx","ReactHooks/useTeamData.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\r\n\r\ntype Prop = {\r\n  condition: boolean,\r\n  wrapper: (children: ReactNode) => ReactNode\r\n  falseWrapper?: (children: ReactNode) => ReactNode\r\n  children: ReactNode\r\n}\r\n// Wrap children with element provided by wrapper func when condition is true.\r\nexport default function ConditionalWrapper({ condition, wrapper, falseWrapper, children }: Prop) {\r\n  return (condition ? wrapper(children) : (falseWrapper ? falseWrapper(children) : children)) as JSX.Element;\r\n}","import { faDiceD20 } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faAnemo, faAtk, faCdReductionPrimary, faCdReductionSecondary, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRechargePrimary, faEnergyRechargeSecondary, faGeo, faHealingBonus, faHpPrimary, faHpSecondary, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\n\r\nexport function HPIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faHpPrimary as any} />\r\n    <FontAwesomeIcon icon={faHpSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\n\r\nexport function CdRedIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faCdReductionPrimary as any} />\r\n    <FontAwesomeIcon icon={faCdReductionSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\n\r\nexport function EnerRechIcon() {\r\n  return <span className=\"fa-layers \">\r\n    <FontAwesomeIcon icon={faEnergyRechargePrimary as any} />\r\n    <FontAwesomeIcon icon={faEnergyRechargeSecondary as any} style={{ color: \"grey\" }} />\r\n  </span>\r\n}\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  characterHP: <HPIcon />,\r\n  finalHP: <HPIcon />,\r\n  hp_: <HPIcon />,\r\n  hp: <HPIcon />,\r\n\r\n  baseATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  characterATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  finalATK: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  characterDEF: <FontAwesomeIcon icon={faDef as any} />,\r\n  finalDEF: <FontAwesomeIcon icon={faDef as any} />,\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faDiceD20 as any} />,\r\n  enerRech_: <EnerRechIcon />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <CdRedIcon />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [[`${ele}_dmg_`, coloredEleIcon[ele]], [`${ele}_res_`, coloredEleIcon[ele]]]))\r\n}\r\n\r\nexport default StatIcon\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character_WR\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon_WR\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\"\r\nimport { input } from \"../../Formula\"\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport IConditional from \"../../Types/IConditional_WR\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      // TODO: Prayer sets\r\n      // case \"PrayersForDestiny\":\r\n      // case \"PrayersForIllumination\":\r\n      // case \"PrayersForWisdom\":\r\n      // case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\r\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\r\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\r\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\r\n      if (setNums.length) artifactSetEffect[setKey] = setNums\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(\"setName\"),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">4-set</SqBadge>\r\n  }\r\n}\r\n","import { Translate } from '../../Components/Translate';\r\nimport { Data } from '../../Formula/type';\r\nimport { Rarity, WeaponKey, WeaponTypeKey } from '../../Types/consts';\r\nimport { DocumentSection } from '../../Types/sheet';\r\nimport { ICachedWeapon } from '../../Types/weapon_WR';\r\nimport { ascensionMaxLevel } from '../LevelData';\r\nimport type { WeaponData } from 'pipeline';\r\nimport IConditional from '../../Types/IConditional_WR';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport { input } from '../../Formula';\r\nconst weaponSheets = import('.').then(imp => imp.default)\r\n\r\nexport interface IWeaponSheet {\r\n  icon: string,\r\n  iconAwaken: string,\r\n  document: DocumentSection[],\r\n}\r\n\r\nexport default class WeaponSheet {\r\n  readonly key: WeaponKey;\r\n  readonly sheet: IWeaponSheet;\r\n  readonly data: Data;\r\n  readonly rarity: Rarity;\r\n  readonly weaponType: WeaponTypeKey;\r\n  constructor(key: WeaponKey, weaponSheet: IWeaponSheet, weaponData: WeaponData, data: Data) {\r\n    this.rarity = weaponData.rarity\r\n    this.weaponType = weaponData.weaponType\r\n    this.key = key\r\n    this.sheet = weaponSheet\r\n    this.data = data\r\n  }\r\n  static get = (weaponKey: WeaponKey | \"\"): Promise<WeaponSheet> | undefined => weaponKey ? weaponSheets.then(w => w[weaponKey]) : undefined\r\n  static get getAll() { return weaponSheets }\r\n  static getWeaponsOfType = (sheets: StrictDict<WeaponKey, WeaponSheet>, weaponType: string): Dict<WeaponKey, WeaponSheet> => Object.fromEntries(Object.entries(sheets).filter(([key, sheet]) => (sheet as WeaponSheet).weaponType === weaponType))\r\n  static getLevelString = (weapon: ICachedWeapon): string => `${weapon.level}/${ascensionMaxLevel[weapon.ascension]}`\r\n  tr = (strKey: string) => <Translate ns={`weapon_${this.key}_gen`} key18={strKey} />\r\n  get name() { return this.tr(\"name\") }\r\n  //when there is no substat, assume there is no passive.\r\n  get passiveName() { return this.rarity > 2 ? this.tr(\"passiveName\") : \"\" }\r\n  get description() { return this.tr(\"description\") }\r\n  passiveDescription = (refineIndex: number) => this.rarity > 2 ? this.tr(`passiveDescription.${refineIndex}`) : \"\"\r\n  get img() { return this.sheet.icon }\r\n  get imgAwaken() { return this.sheet.iconAwaken }\r\n  get document() { return this.sheet.document }\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string, imgAwaken: string): IConditional[\"header\"] => ({\r\n  title: tr(`passiveName`),\r\n  icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? img : imgAwaken} />,\r\n})\r\n\r\nexport const conditionaldesc = (tr: (string) => Displayable) =>\r\n  data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`)\r\n","import { Box, CardActionArea, CardContent, Chip, Grid, Skeleton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useMemo } from 'react';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { ascensionMaxLevel } from '../Data/LevelData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport { computeUIData, dataObjForWeapon, valueString } from '../Formula/api';\r\nimport { NumNode } from '../Formula/type';\r\nimport KeyMap from '../KeyMap';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { ICachedArtifact } from '../Types/artifact_WR';\r\nimport { allSlotKeys, CharacterKey, ElementKey, SlotKey } from '../Types/consts';\r\nimport { ICachedWeapon } from '../Types/weapon_WR';\r\nimport WeaponSheet from '../Data/Weapons/WeaponSheet';\r\n\r\ntype CharacterCardProps = {\r\n  characterKey: CharacterKey | \"\",\r\n  onClick?: (characterKey: CharacterKey) => void,\r\n  onClickHeader?: (characterKey: CharacterKey) => void,\r\n  artifactChildren?: Displayable,\r\n  weaponChildren?: Displayable,\r\n  characterChildren?: Displayable,\r\n  footer?: Displayable,\r\n}\r\nexport default function CharacterCard({ characterKey, artifactChildren, weaponChildren, characterChildren, onClick, onClickHeader, footer }: CharacterCardProps) {\r\n  const { teamData: teamDataContext } = useContext(DataContext)\r\n  const teamData = useTeamData(teamDataContext ? \"\" : characterKey) ?? (teamDataContext as TeamData | undefined)\r\n  const { character, characterSheet, target: data } = teamData?.[characterKey] ?? {}\r\n  const onClickHandler = useCallback(() => characterKey && onClick?.(characterKey), [characterKey, onClick])\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickHandler} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClickHandler],\r\n  )\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!teamData || !character || !characterSheet || !data) return null;\r\n  const dataContextObj: dataContextObj = {\r\n    character,\r\n    data,\r\n    characterSheet,\r\n    mainStatAssumptionLevel: 0,\r\n    teamData,\r\n    characterDispatch\r\n  }\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <DataContext.Provider value={dataContextObj}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n          <Header onClick={!onClick ? onClickHeader : undefined} />\r\n          <CardContent sx={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: 1, flexGrow: 1 }}>\r\n            <Weapon weaponId={character.equippedWeapon} />\r\n            {weaponChildren}\r\n            {/* will grow to fill the 100% height */}\r\n            <Box flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <ArtifactDisplay />\r\n              {artifactChildren}\r\n            </Box>\r\n            <Stats />\r\n            {characterChildren}\r\n          </CardContent>\r\n        </ConditionalWrapper>\r\n        {footer}\r\n      </CardLight>\r\n    </DataContext.Provider>\r\n  </Suspense>\r\n}\r\nfunction Header({ onClick }: { onClick?: (characterKey: CharacterKey) => void }) {\r\n  const { data, characterSheet } = useContext(DataContext)\r\n  const characterKey = data.get(input.charKey).value as CharacterKey\r\n  const characterEle = data.get(input.charEle).value as ElementKey\r\n  const characterLevel = data.get(input.lvl).value\r\n  const constellation = data.get(input.constellation).value\r\n  const ascension = data.get(input.asc).value\r\n  const autoBoost = data.get(input.bonus.auto).value\r\n  const skillBoost = data.get(input.bonus.skill).value\r\n  const burstBoost = data.get(input.bonus.burst).value\r\n\r\n  const tAuto = data.get(input.total.auto).value\r\n  const tSkill = data.get(input.total.skill).value\r\n  const tBurst = data.get(input.total.burst).value\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => characterKey && onClick?.(characterKey)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClick, characterKey],\r\n  )\r\n  return <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n    <Box display=\"flex\"\r\n      position=\"relative\"\r\n      className={`grad-${characterSheet.rarity}star`}\r\n      sx={{\r\n        \"&::before\": {\r\n          content: '\"\"',\r\n          display: \"block\", position: \"absolute\",\r\n          left: 0, top: 0,\r\n          width: \"100%\", height: \"100%\",\r\n          opacity: 0.7,\r\n          backgroundImage: `url(${characterSheet.bannerImg})`, backgroundPosition: \"center\", backgroundSize: \"cover\",\r\n        }\r\n      }}\r\n      width=\"100%\" >\r\n      <Box flexShrink={1} sx={{ maxWidth: { xs: \"40%\", lg: \"40%\" } }} alignSelf=\"flex-end\" display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Box\r\n          component=\"img\"\r\n          src={characterSheet.thumbImg}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          maxWidth={256}\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ py: 1, pr: 1 }} display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Chip label={<Typography variant=\"subtitle1\">{characterSheet.name}</Typography>} size=\"small\" color={characterEle} />\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item sx={{ textShadow: \"0 0 5px gray\" }}>\r\n            <Typography component=\"span\" variant=\"h6\" whiteSpace=\"nowrap\" >Lv. {characterLevel}</Typography>\r\n            <Typography component=\"span\" variant=\"h6\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h6\"><SqBadge>C{constellation}</SqBadge></Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item>\r\n            <Chip color={autoBoost ? \"info\" : \"secondary\"} label={<strong >{tAuto}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={skillBoost ? \"info\" : \"secondary\"} label={<strong >{tSkill}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={burstBoost ? \"info\" : \"secondary\"} label={<strong >{tBurst}</strong>} />\r\n          </Grid>\r\n        </Grid>\r\n        <Typography mt={1} ><Stars stars={characterSheet.rarity} colored /></Typography>\r\n      </Box>\r\n    </Box>\r\n  </ConditionalWrapper>\r\n}\r\nfunction Weapon({ weaponId }: { weaponId: string }) {\r\n  const database = useContext(DatabaseContext)\r\n  const weapon = database._getWeapon(weaponId)\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  const name = weaponSheet?.name\r\n  const mainVal = valueString(UIData.get(input.weapon.main).value, UIData.get(input.weapon.main).unit, 0)\r\n  const subKey = UIData.get(input.weapon.sub).key\r\n  const subVal = valueString(UIData.get(input.weapon.sub).value, UIData.get(input.weapon.sub).unit, UIData.get(input.weapon.sub).unit === \"flat\" ? 0 : undefined)\r\n  const levelName = WeaponSheet.getLevelString(weapon as ICachedWeapon)\r\n  return <CardDark>\r\n    <Box display=\"flex\" >\r\n      <Box flexShrink={1} maxWidth=\"35%\" display=\"flex\" flexDirection=\"column\" alignContent=\"flex-end\" className={`grad-${weaponSheet.rarity}star`} >\r\n        <Box\r\n          component=\"img\"\r\n          src={weaponSheet.img}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ p: 1 }}>\r\n        <Typography variant=\"body2\"><strong>{name}</strong></Typography>\r\n        <Typography whiteSpace=\"nowrap\" lineHeight={1}>\r\n          <SqBadge color=\"primary\" sx={{ mr: 1 }}>Lv. {levelName}</SqBadge>\r\n          {subKey && <SqBadge color=\"info\"> Refinement {weapon.refinement}</SqBadge>}\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\">ATK: {mainVal}</Typography>\r\n        {subKey && <Typography variant=\"subtitle2\" lineHeight={1}>{KeyMap.get(subKey)}: {subVal}</Typography>}\r\n      </Box>\r\n    </Box>\r\n  </CardDark>\r\n}\r\nfunction ArtifactDisplay() {\r\n  const database = useContext(DatabaseContext)\r\n  const { data } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const artifacts = useMemo(() =>\r\n    allSlotKeys.map(k => [k, database._getArt(data.get(input.art[k].id).value ?? \"\")]),\r\n    [data, database]) as Array<[SlotKey, ICachedArtifact | undefined]>;\r\n  if (!artifactSheets) return null\r\n  return <Grid container spacing={1} >\r\n    {artifacts.map(([key, art]) => {\r\n      if (!art) return null\r\n      const { setKey, slotKey, mainStatKey } = art\r\n      return <Grid item key={key} flexGrow={1}>\r\n        <Chip color=\"secondary\" sx={{ width: \"100%\" }} icon={<ImgIcon src={artifactSheets?.[setKey].slotIcons[slotKey]} size={2.5} />}\r\n          label={<span>{KeyMap.get(mainStatKey)}</span>} />\r\n      </Grid>\r\n    })}\r\n  </Grid>\r\n}\r\nfunction Stats() {\r\n  const { data } = useContext(DataContext)\r\n  const statkeys = [\"hp\", \"atk\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  statkeys.push(`${data.get(input.charEle).value}_dmg_`)\r\n  if (data.get(input.weaponType).value !== \"catalyst\")\r\n    statkeys.push(\"physical_dmg_\")\r\n\r\n  return <Box sx={{ width: \"100%\" }} >\r\n    {statkeys.map(statKey => {\r\n      const stat = data.get(input.total[statKey] as NumNode)\r\n      const val = valueString(stat.value, stat.unit, stat.unit === \"flat\" ? 0 : undefined)\r\n      return <Box sx={{ display: \"flex\" }} key={statKey}>\r\n        <Typography flexGrow={1} color={`${stat.variant}.main`}><strong>{StatIcon[statKey]} {KeyMap.get(stat.key!)}</strong></Typography>\r\n        <Typography>{val}</Typography>\r\n      </Box>\r\n    })}\r\n    {data.get(input.special).key && <Box sx={{ display: \"flex\" }} >\r\n      <Typography flexGrow={1}><strong>Specialized:</strong></Typography>\r\n      <Typography>{KeyMap.get(data.get(input.special).key!)}</Typography>\r\n    </Box>}\r\n  </Box>\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { initialCharacter } from \"../Util/CharacterUtil\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { defaultInitialWeapon } from \"../Util/WeaponUtil\";\r\n\r\n/**\r\n * Basically a history hook to go to the dedicated character page. Will create the character if it doesn't exist.\r\n * @returns\r\n */\r\nexport default function useCharSelectionCallback() {\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const cb = useCallback(\r\n    async (characterKey: CharacterKey) => {\r\n      const character = database._getChar(characterKey)\r\n      // Create a new character + weapon, with linking if char isnt in db.\r\n      if (!character) {\r\n        const newChar = initialCharacter(characterKey)\r\n        database.updateChar(newChar)\r\n        const characterSheet = await CharacterSheet.get(characterKey)\r\n        if (!characterSheet) return\r\n        const weapon = defaultInitialWeapon(characterSheet.weaponTypeKey)\r\n        const weaponId = database.createWeapon(weapon)\r\n        database.setWeaponLocation(weaponId, characterKey)\r\n      }\r\n      history.push(`/character/${characterKey}`)\r\n    },\r\n    [history, database],\r\n  )\r\n  return cb\r\n}\r\n","import { initialBuildSettings } from \"../PageBuild/BuildSetting\"\r\nimport { ICachedCharacter } from \"../Types/character_WR\"\r\nimport { allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { objectKeyMap } from \"./Util\"\r\n\r\nexport function initialCharacter(key: CharacterKey): ICachedCharacter {\r\n  return {\r\n    key, // the game character this is based off\r\n    level: 1,\r\n    ascension: 0,\r\n    hitMode: \"avgHit\",\r\n    reactionMode: \"\",\r\n    equippedArtifacts: objectKeyMap(allSlotKeys, () => \"\"),\r\n    equippedWeapon: \"\",\r\n    conditional: {},\r\n    bonusStats: {},\r\n    enemyOverride: {},\r\n    buildSettings: initialBuildSettings(),\r\n    talent: {\r\n      auto: 1,\r\n      skill: 1,\r\n      burst: 1,\r\n    },\r\n    infusionAura: \"\",\r\n    constellation: 0,\r\n    team: [\"\", \"\", \"\"],\r\n    compareData: false,\r\n  }\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { deepClone } from \"../Util/Util\";\r\n\r\ntype characterEquipWeapon = {\r\n  type: \"weapon\", id: string\r\n}\r\ntype characterReducerBonusStatsAction = {\r\n  type: \"editStats\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerenemyOverrideAction = {\r\n  type: \"enemyOverride\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerResetStatsAction = {\r\n  type: \"resetStats\",\r\n  statKey: string\r\n}\r\ntype characterTeamAction = {\r\n  type: \"team\",\r\n  index: number,\r\n  charKey: CharacterKey | \"\"\r\n}\r\nexport type characterReducerAction = characterEquipWeapon | characterReducerBonusStatsAction | characterReducerenemyOverrideAction | characterReducerResetStatsAction | characterTeamAction | Partial<ICachedCharacter>\r\n\r\nexport default function useCharacterReducer(characterKey: CharacterKey | \"\") {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  return useCallback((action: characterReducerAction): void => {\r\n    if (!characterKey) return\r\n\r\n    if (\"type\" in action) switch (action.type) {\r\n      case \"weapon\":\r\n        database.setWeaponLocation(action.id, characterKey)\r\n        break\r\n      case \"enemyOverride\": {\r\n        const character = database._getChar(characterKey)!\r\n        const enemyOverride = character.enemyOverride\r\n        const { statKey, value } = action\r\n        if (enemyOverride[statKey] === value) break\r\n        database.updateChar({ ...character, enemyOverride: { ...enemyOverride, [statKey]: value } })\r\n        break\r\n      }\r\n      case \"editStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey, value } = action\r\n\r\n        const bonusStats = deepClone(character.bonusStats)\r\n\r\n        if (bonusStats[statKey] === value) break\r\n        if (!value) delete bonusStats[statKey]\r\n        else bonusStats[statKey] = value\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"resetStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey } = action\r\n\r\n        const bonusStats = character.bonusStats\r\n        delete bonusStats[statKey]\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"team\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { team } = character\r\n\r\n        const { index, charKey: newCharKey } = action\r\n        const oldCharKey = team[index]\r\n        team[index] = newCharKey\r\n\r\n        // move the old char to \"inventory\"\r\n        if (oldCharKey) {\r\n          const oldChar = database._getChar(oldCharKey)\r\n          if (oldChar) database.updateChar({ ...oldChar, team: [\"\", \"\", \"\"] })\r\n        }\r\n\r\n        // unequip new char from its old teammates\r\n        if (newCharKey) {\r\n          const newChar = database._getChar(newCharKey)\r\n          if (newChar) {\r\n            newChar.team.forEach(t => {\r\n              if (!t) return\r\n              const tChar = database._getChar(t)\r\n              tChar && database.updateChar({ ...tChar, team: tChar.team.map(c => c === newCharKey ? \"\" : c) as ICachedCharacter[\"team\"] })\r\n            })\r\n          }\r\n        }\r\n\r\n        // equip new char to new teammates\r\n        team.forEach((t, tind) => {\r\n          if (!t) return\r\n          const newChar = database._getChar(t)\r\n          if (newChar) database.updateChar({ ...newChar, team: [characterKey, ...team].filter((_, i) => i !== tind + 1) as ICachedCharacter[\"team\"] })\r\n        })\r\n\r\n        // update src character\r\n        database.updateChar({ ...character, team })\r\n      }\r\n    } else\r\n      database.updateChar({ ...database._getChar(characterKey)!, ...action })\r\n  }, [characterKey, database])\r\n\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\";\r\nimport { TeamData } from \"../DataContext\";\r\nimport { common } from \"../Formula\";\r\nimport { dataObjForArtifact, dataObjForCharacter, uiDataForTeam, dataObjForWeapon } from \"../Formula/api\";\r\nimport { Data } from \"../Formula/type\";\r\nimport { ICachedArtifact } from \"../Types/artifact_WR\";\r\nimport { ICachedCharacter } from \"../Types/character_WR\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon_WR\";\r\nimport { objectMap } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport useForceUpdate from \"./useForceUpdate\";\r\n\r\ntype TeamDataBundle = {\r\n  team: CharacterKey[],\r\n  teamData: Dict<CharacterKey, Data[]>\r\n  teamBundle: Dict<CharacterKey, CharBundle>\r\n}\r\n\r\nexport default function useTeamData(characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0): TeamData | undefined {\r\n  const database = useContext(DatabaseContext)\r\n  const [dbDirty, setDbDirty] = useForceUpdate()\r\n  const [teamDataBundle, setTeamdataBundle] = useState(undefined as TeamDataBundle | undefined)\r\n  useEffect(() => {\r\n    getTeamData(database, characterKey, mainStatAssumptionLevel).then(r => setTeamdataBundle(r))\r\n  }, [dbDirty, characterKey, database, mainStatAssumptionLevel])\r\n\r\n  const { team = [], teamData, teamBundle } = teamDataBundle ?? {}\r\n\r\n  const [t1, t2, t3, t4] = team\r\n  useEffect(() =>\r\n    t1 ? database.followChar(t1, setDbDirty) : undefined,\r\n    [t1, setDbDirty, database])\r\n  useEffect(() =>\r\n    t2 ? database.followChar(t2, setDbDirty) : undefined,\r\n    [t2, setDbDirty, database])\r\n  useEffect(() =>\r\n    t3 ? database.followChar(t3, setDbDirty) : undefined,\r\n    [t3, setDbDirty, database])\r\n  useEffect(() =>\r\n    t4 ? database.followChar(t4, setDbDirty) : undefined,\r\n    [t4, setDbDirty, database])\r\n  if (!teamData || !teamBundle) return\r\n  const calcData = uiDataForTeam(teamData, characterKey as CharacterKey)\r\n  const data = objectMap(calcData, (obj, ck) => {\r\n    const { data: _, ...rest } = teamBundle[ck]!\r\n    return { ...obj, ...rest }\r\n  })\r\n\r\n  return data\r\n}\r\n\r\nexport async function getTeamData(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[]):\r\n  Promise<TeamDataBundle | undefined> {\r\n  if (!characterKey) return\r\n  const char1DataBundle = await getCharDataBundle(database, characterKey, mainStatAssumptionLevel, overrideArt)\r\n  if (!char1DataBundle) return\r\n  const team: CharacterKey[] = [characterKey]\r\n  const teamBundle = { [characterKey]: char1DataBundle }\r\n  const teamData: Dict<CharacterKey, Data[]> = { [characterKey]: char1DataBundle.data }\r\n\r\n  await Promise.all(char1DataBundle.character.team.map(async (ck) => {\r\n    if (!ck) return\r\n    const databundle = await getCharDataBundle(database, ck)\r\n    if (!databundle) return\r\n    team.push(ck)\r\n    teamBundle[ck] = databundle\r\n    teamData[ck] = databundle.data\r\n  }))\r\n\r\n  return { team, teamData, teamBundle }\r\n}\r\ntype CharBundle = {\r\n  character: ICachedCharacter,\r\n  weapon: ICachedWeapon,\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  data: Data[]\r\n}\r\nasync function getCharDataBundle(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[])\r\n  : Promise<CharBundle | undefined> {\r\n  if (!characterKey) return\r\n  const character = database._getChar(characterKey)\r\n  if (!character) return\r\n  const weapon = database._getWeapon(character.equippedWeapon)\r\n  if (!weapon) return\r\n  const characterSheet = await CharacterSheet.get(characterKey)\r\n  const weaponSheet = await WeaponSheet.get(weapon.key)\r\n  const artifactSheetsData = await ArtifactSheet.getAllData\r\n  if (!characterSheet || !weaponSheet || !artifactSheetsData) return\r\n  const artifacts = (overrideArt ?? Object.values(character.equippedArtifacts).map(a => database._getArt(a))).filter(a => a) as ICachedArtifact[]\r\n  const data = [\r\n    ...artifacts.map(a => dataObjForArtifact(a, mainStatAssumptionLevel)),\r\n    dataObjForCharacter(character),\r\n    characterSheet.data,\r\n    dataObjForWeapon(weapon),\r\n    weaponSheet.data,\r\n    artifactSheetsData,\r\n    common, // NEED TO PUT THIS AT THE END\r\n  ]\r\n  return { character, weapon, characterSheet, weaponSheet, data }\r\n}\r\n"],"names":["ConditionalWrapper","condition","wrapper","falseWrapper","children","HPIcon","className","icon","faHpPrimary","faHpSecondary","style","color","CdRedIcon","faCdReductionPrimary","faCdReductionSecondary","EnerRechIcon","faEnergyRechargePrimary","faEnergyRechargeSecondary","uncoloredEleIcons","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","coloredEleIcon","objectKeyMap","Object","keys","key","StatIcon","characterHP","finalHP","hp_","hp","baseATK","faAtk","characterATK","finalATK","atk_","atk","characterDEF","faDef","finalDEF","def_","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faDiceD20","enerRech_","heal_","faHealingBonus","cdRed_","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","DataContext","createContext","artifactSheets","then","imp","default","tr","setKey","strKey","ns","key18","allData","as","mergeData","values","map","s","data","ArtifactSheet","sheet","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","get","input","value","this","slots","slotIcons","src","name","rarity","allSlotKeys","icons","set","a","undefined","sheets","grouped","entries","forEach","Math","max","push","artifactSetEffect","setNums","k","parseInt","filter","sn","length","conditionalHeader","img","title","size","sx","m","action","weaponSheets","WeaponSheet","weaponSheet","weaponData","weaponType","passiveDescription","refineIndex","iconAwaken","weaponKey","w","getWeaponsOfType","getLevelString","weapon","level","ascensionMaxLevel","ascension","imgAwaken","conditionaldesc","CharacterCard","characterKey","artifactChildren","weaponChildren","characterChildren","onClick","onClickHeader","footer","teamDataContext","useContext","teamData","useTeamData","character","characterSheet","target","onClickHandler","useCallback","actionWrapperFunc","flexGrow","display","flexDirection","characterDispatch","useCharacterReducer","dataContextObj","mainStatAssumptionLevel","Suspense","fallback","variant","width","height","minHeight","Header","gap","Weapon","weaponId","equippedWeapon","ArtifactDisplay","Stats","characterEle","characterLevel","constellation","autoBoost","skillBoost","burstBoost","tAuto","tSkill","tBurst","position","content","left","top","opacity","backgroundImage","bannerImg","backgroundPosition","backgroundSize","flexShrink","maxWidth","xs","lg","alignSelf","zIndex","component","thumbImg","mt","py","pr","label","container","spacing","flexWrap","item","textShadow","whiteSpace","stars","colored","DatabaseContext","_getWeapon","usePromise","UIData","useMemo","computeUIData","dataObjForWeapon","mainVal","valueString","unit","subKey","subVal","levelName","alignContent","p","lineHeight","mr","refinement","KeyMap","database","artifacts","_getArt","id","art","mainStatKey","statkeys","statKey","stat","val","useCharSelectionCallback","history","useHistory","cb","_getChar","newChar","hitMode","reactionMode","equippedArtifacts","conditional","bonusStats","enemyOverride","buildSettings","initialBuildSettings","talent","auto","skill","burst","infusionAura","team","compareData","updateChar","CharacterSheet","defaultInitialWeapon","weaponTypeKey","createWeapon","setWeaponLocation","type","deepClone","index","newCharKey","charKey","oldCharKey","oldChar","t","tChar","c","tind","_","i","useForceUpdate","dbDirty","setDbDirty","useState","teamDataBundle","setTeamdataBundle","useEffect","getTeamData","r","teamBundle","t1","t2","t3","t4","followChar","calcData","uiDataForTeam","objectMap","obj","ck","rest","overrideArt","getCharDataBundle","char1DataBundle","Promise","all","databundle","artifactSheetsData","dataObjForArtifact","dataObjForCharacter","common"],"sourceRoot":""}