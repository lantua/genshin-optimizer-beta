{"version":3,"file":"static/js/222.11d42578.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, prod, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\nexport function singleDmgNode(base: MainStatKey, multiplier: number, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(input.total[base], multiplier,),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\n\r\nexport function dmgNode(base: MainStatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: {\r\n      base: prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]),\r\n      move: constant(move), // TODO: element ?: T, reaction ?: T, critType ?: T\r\n    },\r\n  }, additional]))\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, infoMut, match, matchFull, percent, prod, threshold, threshold_add, unmatch } from '../../../Formula/utils'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode, singleDmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, threshold_add(input.asc, 4,\r\n    match(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = threshold_add(input.constellation, 2,\r\n  match(\"c2\", condC2, datamine.constellation2.elemas), { key: `eleMas` })\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = threshold_add(input.constellation, 2,\r\n  match(\"c2p\", condC2P,\r\n    unmatch(target.charKey, key, datamine.constellation2.elemas)\r\n  ), { key: `eleMas` })\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = threshold(input.constellation, 6,\r\n  matchFull(\"c6\", condC6, \"anemo\", undefined),\r\n  undefined\r\n)\r\nconst c6Dmg_ = threshold_add(input.constellation, 6,\r\n  match(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, match(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, match(condSkillAbsorption, key, singleDmgNode(\"atk\", datamine.passive1.asorbAdd, \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 3 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cd}s - 10%` : `${datamine.skill.cd}s`,\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 ? `${datamine.skill.cdHold}s - 10%` : `${datamine.skill.cdHold}s`,\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: threshold_add(input.constellation, 2, 1,),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: threshold_add(input.constellation, 2,\r\n              unmatch(target.charKey, key, 1)),\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Skill Absorption\r\n            value: condSkillAbsorption,\r\n            path: condSkillAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }],\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(`a4.name_${eleKey}`),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: {\r\n        name: tr(\"passive3.name\"),\r\n        img: passive3,\r\n        sections: [{\r\n          text: tr(\"passive3.description\"),\r\n          fields: [{ //TODO: put into subsection since this is teambuff\r\n            //   header: conditionalHeader(\"passive3\", tr, passive3),\r\n            //   description: tr(\"passive3.description\"),\r\n            node: passive\r\n          }]\r\n        }],\r\n      },\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: {\r\n        name: tr(\"constellation6.name\"),\r\n        img: c6,\r\n        sections: [{\r\n          text: tr(\"constellation6.description\"),\r\n          conditional: {//Crimson Momiji\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6.after\"),\r\n            states: {\r\n              c6: {\r\n                fields: [\r\n                  // { // TODO:\r\n                  //   node: c6infusion\r\n                  // },\r\n                  {\r\n                    canShow: data => data.get(c6infusion).value === \"anemo\",\r\n                    text: <ColorText color=\"anemo\">Anemo Infusion</ColorText>\r\n                  },\r\n                  {\r\n                    node: c6NormDmg_\r\n                  }, {\r\n                    node: c6ChargedDmg_\r\n                  }, {\r\n                    node: c6PlungingDmg_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: datamine.constellation6.duration,\r\n                    unit: \"s\",\r\n                  }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      }\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../Components/Translate'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, match, prod, subscript, threshold_add } from '../../../Formula/utils'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst quillDmg = match(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = match(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst cryo_enemyRes_ = { ...enemyRes_ }\r\nconst physical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst asc1Buff = threshold_add(input.asc, 1,\r\n  match(condAsc1, \"field\",\r\n    match(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst buffAsc4Press = threshold_add(input.asc, 1,\r\n  match(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst buffAsc4Press_skill_dmg_ = { ...buffAsc4Press }\r\nconst buffAsc4Press_burst_dmg_ = { ...buffAsc4Press }\r\nconst buffAsc4Hold = threshold_add(input.asc, 1,\r\n  match(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst buffAsc4Hold_normal_dmg_ = { ...buffAsc4Hold }\r\nconst buffAsc4Hold_charged_dmg_ = { ...buffAsc4Hold }\r\nconst buffAsc4Hold_plunging_dmg_ = { ...buffAsc4Hold }\r\n\r\nconst con2Buff = threshold_add(input.constellation, 2,\r\n  match(condAsc1, \"field\",\r\n    match(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    quillDmg\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmgInc: quillDmg,\r\n      cryo_enemyRes_,\r\n      physical_enemyRes_,\r\n      cryo_dmg_: asc1Buff,\r\n      skill_dmg_: buffAsc4Press_skill_dmg_,\r\n      burst_dmg_: buffAsc4Press_burst_dmg_,\r\n      normal_dmg_: buffAsc4Hold_normal_dmg_,\r\n      charged_dmg_: buffAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: buffAsc4Hold_plunging_dmg_,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? <span>(<Translate ns=\"sheet\" key18=\"hits\" values={{ count: 2 }} />)</span> : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.3\"),\r\n            value: `${datamine.skill.duration}s / ${datamine.skill.durationHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.trigger}s / ${datamine.skill.triggerHold}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.5\"),\r\n            value: datamine.skill.cd\r\n          }, {\r\n            text: tr(\"skill.skillParams.6\"),\r\n            value: datamine.skill.cd\r\n          }, {\r\n            text: st(\"charges\"),\r\n            value: (data) => data.get(input.constellation).value >= 1 ? 3 : 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: quillDmg\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: threshold_add(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: <span>After Shenhe uses <strong>Spring Spirit Summoning</strong></span>,\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: buffAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: buffAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: buffAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: buffAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: buffAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: cryo_enemyRes_\r\n                }, {\r\n                  node: physical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: threshold_add(input.asc, 1, match(input.activeCharKey, input.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: \"Active Character in field\",\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: asc1Buff\r\n                }, {\r\n                  node: con2Buff\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: {\r\n        name: tr(\"constellation4.name\"),\r\n        img: c4,\r\n        sections: [{\r\n          text: tr(\"constellation4.description\"),\r\n        }],\r\n        // TODO: stacking boost to E\r\n      },\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, infoMut, match, percent, prod, sum, threshold_add, unmatch } from \"../../../Formula/utils\"\r\nimport { CharacterKey, Rarity, WeaponTypeKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { conditionalHeader, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// Conditional Input\r\n// Absorption Element\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\n// TODO: Check if total or premod\r\nconst asc1 = threshold_add(input.asc, 1,\r\n  unmatch(target.charKey, characterKey,\r\n    match(target.charEle, condSwirlReaction, datamine.passive1.eleMas)), { key: \"eleMas\" })\r\nconst asc4 = match(\"hit\", condSkillHitOpponent,\r\n  unmatch(target.charKey, characterKey,\r\n    threshold_add(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))), { key: \"eleMas\" })\r\nconst c6Base = threshold_add(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  match(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, match(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\nexport const data = dataObjForCharacterSheet(characterKey, \"anemo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: threshold_add(input.constellation, 3, 3),\r\n    burst: threshold_add(input.constellation, 5, 3),\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: sum(asc1, asc4) },\r\n    premod: c6Bonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star as Rarity,\r\n  elementKey: \"anemo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey as WeaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((percentArr, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: {\r\n        name: tr(\"passive1.name\"),\r\n        img: passive1,\r\n        sections: [{\r\n          text: tr(\"passive1.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSwirlReaction,\r\n            path: condSwirlReactionPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"eleSwirled\"),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: asc1,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive2: {\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n          conditional: { // Swirl Element\r\n            value: condSkillHitOpponent,\r\n            path: condSkillHitOpponentPath,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: trm(\"asc4\"),\r\n            states: {\r\n              hit: {\r\n                fields: [{\r\n                  node: asc4,\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }],\r\n              }\r\n            }\r\n          },\r\n        }]\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\n// import AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\n// import Beidou from './Beidou'\r\n// import Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\n// import Diluc from './Diluc'\r\n// import Diona from './Diona'\r\n// import Eula from './Eula'\r\n// import Fischl from './Fischl'\r\n// import Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\n// import HuTao from './HuTao'\r\n// import Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\n// import KamisatoAyaka from './KamisatoAyaka'\r\n// import Keqing from './Keqing'\r\n// import Klee from './Klee'\r\n// import KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\n// import Mona from './Mona'\r\n// import Ningguang from './Ningguang'\r\n// import Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\n// import RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\n// import SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\n// import Venti from './Venti'\r\n// import Xiao from './Xiao'\r\n// import Xiangling from './Xiangling'\r\n// import Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\n// import Yanfei from './Yanfei'\r\n// import Yoimiya from './Yoimiya'\r\n// import Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  // AratakiItto,\r\n  // Barbara,\r\n  // Beidou,\r\n  // Bennett,\r\n  // Chongyun,\r\n  // Diluc,\r\n  // Diona,\r\n  // Eula,\r\n  // Fischl,\r\n  // Ganyu,\r\n  // Gorou,\r\n  // HuTao,\r\n  // Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  // KamisatoAyaka,\r\n  // Keqing,\r\n  // Klee,\r\n  // KujouSara,\r\n  // Lisa,\r\n  // Mona,\r\n  // Ningguang,\r\n  // Noelle,\r\n  // Qiqi,\r\n  // RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  // SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  // Venti,\r\n  // Xiao,\r\n  // Xiangling,\r\n  // Xingqiu,\r\n  // Xinyan,\r\n  // Yanfei,\r\n  // Yoimiya,\r\n  // Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}`} key18={strKey} />\r\n  ]\r\n}\r\n"],"names":["absorbableEle","charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","allSubstats","key","input","getTalentType","move","singleDmgNode","base","multiplier","additional","data","mergeData","hit","prod","constant","dmgNode","lvlMultiplier","talentType","subscript","dataObjForCharacterSheet","element","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","infoMut","sum","prefix","asConst","endsWith","info","variant","slice","Error","special","allMainStatKeys","inferInfoMut","critRate_","data_gen","data_gen_src","trans","tr","trm","a","s","b","p1","p2","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","press","cd","hold","cdHold","burst","dot","add","duration","enerCost","passive1","asorbAdd","passive2","elemas_dmg_","constellation2","elemas","constellation6","auto_","cond","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","fromEntries","e","condSwirls","condReadNode","asc4","ele","threshold_add","match","percent","condC2Path","condC2","c2EleMas","condC2PPath","condC2P","c2PEleMas","unmatch","target","condC6Path","condC6","c6infusion","threshold","matchFull","undefined","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","dmgFormulas","arr","i","entries","pdmg","plow","phigh","normal_dmg_","charged_dmg_","plunging_dmg_","bonus","staminaSprintDec_","total","eleMas","infusion","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","textSuffix","Translate","ns","key18","count","get","canShow","unit","conditional","path","st","states","eleKey","color","sgt","c2","header","conditionalHeader","description","c2p","swirl","passive3","constellation1","talentTemplate","c1","constellation3","c3","constellation4","c4","constellation5","c5","c6","CharacterSheet","dmgAtk_","durationHold","trigger","triggerHold","res_","cryo_dmg_","press_dmg_","durationPress","hold_dmg_","durationInc","condQuillPath","condQuill","quillDmg","condBurstPath","condBurst","enemyRes_","cryo_enemyRes_","physical_enemyRes_","condAsc1Path","condAsc1","asc1Buff","condAsc4Path","condAsc4","buffAsc4Press","buffAsc4Press_skill_dmg_","buffAsc4Press_burst_dmg_","buffAsc4Hold","buffAsc4Hold_normal_dmg_","buffAsc4Hold_charged_dmg_","buffAsc4Hold_plunging_dmg_","con2Buff","all_dmgInc","skill_dmg_","burst_dmg_","quill","field","characterKey","dmg_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1","c6Base","c6Bonus","percentArr","KaedeharaKazuha","Shenhe","Sucrose","strKey","customStringRead","subKey","typeKey"],"sourceRoot":""}