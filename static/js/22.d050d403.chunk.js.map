{"version":3,"sources":["Components/Character/ThumbSide.tsx","Components/Character/LocationName.tsx","Components/ToggleButton/WeaponToggle.tsx","ReactHooks/useWeapon.tsx","Util/SortByFilters.ts","Components/SortByButton.tsx","Components/Weapon/WeaponSelectionModal.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","Util/WeaponSort.ts","PageWeapon/WeaponDisplay.tsx"],"names":["ThumbSide","styled","theme","display","width","height","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","get","component","name","nameWIthIcon","sx","WeaponToggle","value","onChange","props","cb","useCallback","e","newVal","exclusive","allWeaponTypeKeys","map","wt","src","Assets","weaponTypes","size","useWeapon","weaponID","database","useContext","DatabaseContext","useState","_getWeapon","weapon","setWeapon","useEffect","followWeapon","undefined","sortFunction","sortby","ascending","configs","Sort","a","b","config","aV","getValue","bV","localeCompare","filterOption","diff","tieBreaker","filterFunction","filterOptions","filterConfigs","obj","Object","entries","every","optionKey","optionVal","SortByButton","sortKeys","onChangeAsc","title","i18nKey","key","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","getAll","setWeaponfilter","weaponIdList","Set","allWeaponKeys","wKey","weaponType","sort","rarity","open","onClose","py","container","item","flexGrow","weaponKey","weaponSheet","lg","md","img","px","variant","stars","colored","large","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","characterSheets","characterKeys","_getCharKeys","ck","DropdownButton","color","thumbImg","thumbImgSide","BusinessCenter","Replay","MenuItem","ListItemIcon","Typography","noWrap","Divider","CharacterMenuItemArray","selectedCharacterKey","characterKey","WeaponCard","weaponId","onEdit","onDelete","canEquip","cs","weaponTypeKey","actionWrapperFunc","children","CardActionArea","equipOnChar","charKey","setWeaponLocation","UIData","useMemo","computeUIData","data","dataObjForWeapon","level","ascension","refinement","id","lock","input","type","stats","main","sub","sub2","x","imgAwaken","fallback","Skeleton","minHeight","ConditionalWrapper","condition","wrapper","CardLight","flexDirection","CardHeader","avatar","ImgIcon","fontSize","titleTypographyProps","action","IconButton","updateWeapon","Lock","LockOpen","Grid","flexWrap","pl","ascensionMaxLevel","maxWidth","alignContent","mt","Box","CardContent","node","displayVal","valueString","unit","StatIcon","KeyMap","xs","flexShrink","mr","ButtonGroup","Button","faEdit","faTrashAlt","weaponSortKeys","WeaponDisplayCard","lazy","initialState","editWeaponId","sortType","maxNumToDisplay","filterReducer","state","filterInit","initial","dbStorage","WeaponDisplay","useReducer","stateDisplatch","newWeaponModalShow","setnewWeaponModalShow","useForceUpdate","dbDirty","forceUpdate","scrollRef","useRef","invScrollRef","pageIdex","setpageIdex","ReactGA","pageview","followAnyWeapon","set","deleteWeapon","i18next","window","confirm","removeWeapon","editWeapon","setTimeout","current","scrollIntoView","behavior","newWeapon","createWeapon","initialWeapon","sortConfigs","wp","weaponSortConfigs","includes","weaponFilterConfigs","weapons","_getWeapons","totalWeaponNum","length","numPages","Math","ceil","currentPageIndex","clamp","weaponIdsToShow","slice","totalShowing","setPage","resetEditWeapon","mb","ref","footer","CardDark","p","pb","SolidToggleButtonGroup","allRarities","star","ToggleButton","alignItems","Pagination","count","page","xl","textAlign","justifyContent","borderRadius","faPlus","sm"],"mappings":"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","file":"static/js/22.d050d403.chunk.js","sourcesContent":["import { styled } from \"@mui/system\";\n\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\n  display: \"inline-block\",\n  width: \"auto\",\n  height: `2.3em`,\n  lineHeight: 1,\n  verticalAlign: \"text-bottom\",\n  marginTop: theme.spacing(-3),\n  marginLeft: theme.spacing(-1.25),\n  marginRight: theme.spacing(-1),\n  marginBottom: theme.spacing(-1),\n}))\n\nexport default ThumbSide","import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\n\nexport default function LocationName({ location }) {\n  const { t } = useTranslation(\"ui\");\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\n  </Typography>\n\n}\n","import { ToggleButton } from \"@mui/material\";\nimport { useCallback } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\n  onChange: (value: WeaponTypeKey | \"\") => void\n  value: WeaponTypeKey | \"\"\n}\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\n    </ToggleButton>)}\n  </SolidToggleButtonGroup>\n}","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}","type SortConfig<T> = {\n  getValue: (id: T) => number | string\n  tieBreaker?: string\n}\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\n\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\n    const aV = config.getValue(a)\n    const bV = config.getValue(b)\n    let diff = 0\n    if (typeof aV === \"string\" && typeof bV === \"string\")\n      diff = aV.localeCompare(bV)\n    else\n      diff = ((bV as number) - (aV as number))\n    return (ascending ? -1 : 1) * diff\n  }\n  return (a: T, b: T) => {\n    if (!configs[sortby]) return 0\n    const filterOption = configs[sortby]\n    let diff = Sort(a, b, ascending, filterOption)\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\n    return diff\n  }\n}\n\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\ntype SortByButtonProps = ButtonGroupProps & {\n  sortKeys: string[]\n  value: string\n  onChange: (value: string) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\n  const { t } = useTranslation(\"ui\")\n  return <ButtonGroup {...props} >\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\n      {sortKeys.map(key =>\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n    </DropdownButton>\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n    </Button>\n  </ButtonGroup>\n}","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport Assets from \"../../Assets/Assets\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport { Stars } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponFilter?: WeaponTypeKey,\n}\n\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\n\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\n\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\n    .filter(wKey => {\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\n      return true\n    })\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets[weaponKey]\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, valueString, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport KeyMap from \"../KeyMap\"\nimport { CharacterKey } from \"../Types/consts\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\n  const database = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const actionWrapperFunc = useCallback(\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\n    [onClick, weaponId],\n  )\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div className={`grad-${weaponSheet.rarity}star`} >\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\n              {lock ? <Lock /> : <LockOpen />}\n            </IconButton>} />\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\n            <Grid item flexGrow={1}>\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n            </Grid>\n            {/* use flex-end here to align the image to the bottom. */}\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\n            </Grid>\n          </Grid>\n        </div>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.key) return null\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n        {/* grow to fill the 100% heigh */}\n        <Box flexGrow={1} />\n        <CardContent sx={{ py: 1 }}>\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\n            <Grid item xs=\"auto\" flexShrink={1}>\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\n            </Grid>\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\n            <Grid item xs=\"auto\">\n              <ButtonGroup sx={{ height: \"100%\" }}>\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n                </Button>}\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n                </Button>}\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n      </CardLight>\n    </ConditionalWrapper>\n  </Suspense>\n}\n","import { WeaponKey } from \"../Types/consts\";\nimport { ICachedWeapon } from \"../Types/weapon\";\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\nexport const weaponSortKeys = [\"level\", \"rarity\"]\nexport type WeaponSortKey = typeof weaponSortKeys[number]\n\nexport function weaponSortConfigs(weaponSheets: Record<WeaponKey, WeaponSheet>): SortConfigs<WeaponSortKey, ICachedWeapon> {\n  return {\n    level: {\n      getValue: wp => wp.level ?? 0,\n      tieBreaker: \"rarity\"\n    },\n    rarity: {\n      getValue: wp => weaponSheets?.[wp.key]?.rarity,\n      tieBreaker: \"level\"\n    }\n  }\n}\nexport function weaponFilterConfigs(weaponSheets: Record<WeaponKey, WeaponSheet>): FilterConfigs<\"rarity\" | \"weaponType\", ICachedWeapon> {\n  return {\n    rarity: (wp, filter) => filter.includes(weaponSheets?.[wp.key]?.rarity),\n    weaponType: (wp, filter) => !filter || (filter === weaponSheets?.[wp.key]?.weaponType),\n  }\n}\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Box, Button, CardContent, Grid, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\nimport i18next from 'i18next';\nimport React, { lazy, Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport CardDark from '../Components/Card/CardDark';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport SortByButton from '../Components/SortByButton';\nimport { Stars } from '../Components/StarDisplay';\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\nimport WeaponSelectionModal from '../Components/Weapon/WeaponSelectionModal';\nimport { DatabaseContext } from '../Database/Database';\nimport { dbStorage } from '../Database/DBStorage';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allRarities, WeaponKey, WeaponTypeKey } from '../Types/consts';\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\nimport { clamp } from '../Util/Util';\nimport { weaponFilterConfigs, weaponSortConfigs, weaponSortKeys } from '../Util/WeaponSort';\nimport WeaponCard from './WeaponCard';\nimport WeaponSheet from '../Data/Weapons/WeaponSheet';\nimport { initialWeapon } from '../Util/WeaponUtil';\n\n//lazy load the weapon display\nconst WeaponDisplayCard = lazy(() => import('./WeaponDisplayCard'))\n\nconst initialState = () => ({\n  editWeaponId: \"\",\n  sortType: weaponSortKeys[0],\n  ascending: false,\n  rarity: [5, 4],\n  weaponType: \"\" as WeaponTypeKey | \"\",\n  maxNumToDisplay: 30,\n})\nexport type stateType = ReturnType<typeof initialState>\n\nfunction filterReducer(state: stateType, action): stateType {\n  return { ...state, ...action }\n}\nfunction filterInit(initial = initialState()): stateType {\n  return { ...initial, ...(dbStorage.get(\"WeaponDisplay.state\") ?? {}) }\n}\n\nexport default function WeaponDisplay(props) {\n  const database = useContext(DatabaseContext)\n  const [state, stateDisplatch] = useReducer(filterReducer, initialState(), filterInit)\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  const scrollRef = useRef<HTMLDivElement>(null)\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const [pageIdex, setpageIdex] = useState(0)\n  //set follow, should run only once\n  useEffect(() => {\n    ReactGA.pageview('/weapon')\n    return database.followAnyWeapon(forceUpdate)\n  }, [forceUpdate, database])\n\n  //save to db\n  useEffect(() => {\n    dbStorage.set(\"WeaponDisplay.state\", state)\n  }, [state])\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const deleteWeapon = useCallback(async (key) => {\n    const weapon = database._getWeapon(key)\n    if (!weapon) return\n    const name = i18next.t(`weapon_${weapon.key}_gen:name`)\n\n    if (!window.confirm(`Are you sure you want to remove ${name}?`)) return\n    database.removeWeapon(key)\n    if (state.editWeaponId === key)\n      stateDisplatch({ editWeaponId: \"\" })\n  }, [state.editWeaponId, stateDisplatch, database])\n\n  const editWeapon = useCallback(key => {\n    stateDisplatch({ editWeaponId: key })\n    setTimeout(() => {\n      scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }, 500);\n  }, [stateDisplatch, scrollRef])\n\n  const newWeapon = useCallback(\n    (weaponKey: WeaponKey) => {\n      editWeapon(database.createWeapon(initialWeapon(weaponKey)))\n    },\n    [database, editWeapon])\n\n  const { sortType, ascending, weaponType, rarity } = state\n  const sortConfigs = useMemo(() => weaponSheets && weaponSortConfigs(weaponSheets), [weaponSheets])\n  const filterConfigs = useMemo(() => weaponSheets && weaponFilterConfigs(weaponSheets), [weaponSheets])\n  const { weaponIdList, totalWeaponNum } = useMemo(() => {\n    const weapons = database._getWeapons()\n    const totalWeaponNum = weapons.length\n    if (!sortConfigs || !filterConfigs) return { weaponIdList: [], totalWeaponNum }\n    const weaponIdList = weapons.filter(filterFunction({ weaponType, rarity }, filterConfigs))\n      .sort(sortFunction(sortType, ascending, sortConfigs)).map(weapon => weapon.id);\n    return dbDirty && { weaponIdList, totalWeaponNum }\n  }, [dbDirty, database, sortConfigs, filterConfigs, sortType, ascending, rarity, weaponType])\n\n  const { weaponIdsToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(weaponIdList.length / state.maxNumToDisplay)\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\n    return { weaponIdsToShow: weaponIdList.slice(currentPageIndex * state.maxNumToDisplay, (currentPageIndex + 1) * state.maxNumToDisplay), numPages, currentPageIndex }\n  }, [weaponIdList, pageIdex, state.maxNumToDisplay])\n\n  //for pagination\n  const totalShowing = weaponIdList.length !== totalWeaponNum ? `${weaponIdList.length}/${totalWeaponNum}` : `${totalWeaponNum}`\n  const setPage = useCallback(\n    (e, value) => {\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      setpageIdex(value - 1);\n    },\n    [setpageIdex, invScrollRef],\n  )\n\n  const resetEditWeapon = useCallback(() => stateDisplatch({ editWeaponId: \"\" }), [stateDisplatch])\n\n  const { editWeaponId } = state\n  return <Box sx={{\n    mt: 1,\n    // select all excluding last\n    \"> div\": { mb: 1 },\n  }}>\n    {/* editor/character detail display */}\n    {!!editWeaponId && <Box ref={scrollRef} >\n      <WeaponDisplayCard\n        weaponId={editWeaponId}\n        footer\n        onClose={resetEditWeapon}\n      />\n    </Box>}\n    <CardDark ref={invScrollRef} sx={{ p: 2, pb: 1 }}>\n      <Grid container spacing={1} sx={{ mb: 1 }}>\n        <Grid item>\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => stateDisplatch({ weaponType })} value={weaponType} size=\"small\" />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <SolidToggleButtonGroup sx={{ height: \"100%\" }} onChange={(e, newVal) => stateDisplatch({ rarity: newVal })} value={rarity} size=\"small\">\n            {allRarities.map(star => <ToggleButton key={star} value={star}><strong>{star}{' '}</strong><Stars stars={1} /></ToggleButton>)}\n          </SolidToggleButtonGroup>\n        </Grid>\n        <Grid item >\n          <SortByButton sx={{ height: \"100%\" }} sortKeys={weaponSortKeys}\n            value={sortType} onChange={sortType => stateDisplatch({ sortType })}\n            ascending={ascending} onChangeAsc={ascending => stateDisplatch({ ascending })}\n          />\n        </Grid>\n      </Grid>\n      <Grid container alignItems=\"flex-end\">\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <Typography color=\"text.secondary\">\n            {/* <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} > */}\n            Showing <b>{weaponIdsToShow.length}</b> out of {totalShowing} Weapons\n            {/* </Trans> */}\n          </Typography>\n        </Grid>\n      </Grid>\n    </CardDark>\n    <Grid container spacing={1}>\n      <Suspense fallback={<Grid item xs={12}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 500 }} /></Grid>}>\n        {!editWeaponId && <Grid item xs={6} md={4} lg={4} xl={3}>\n          <CardDark sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\n            <CardContent>\n              <Typography sx={{ textAlign: \"center\" }}>Add New Weapon</Typography>\n            </CardContent>\n            <WeaponSelectionModal show={newWeaponModalShow} onHide={() => setnewWeaponModalShow(false)} onSelect={newWeapon} />\n            <Box sx={{\n              flexGrow: 1,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n            >\n              <Button onClick={() => setnewWeaponModalShow(true)} sx={{\n                borderRadius: \"1em\"\n              }}>\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\n              </Button>\n            </Box>\n          </CardDark>\n        </Grid>}\n        {weaponIdsToShow.map(weaponId =>\n          <Grid item key={weaponId} xs={12} sm={6} md={4} lg={4} xl={3} >\n            <WeaponCard\n              weaponId={weaponId}\n              onDelete={deleteWeapon}\n              onEdit={editWeapon}\n              canEquip\n            />\n          </Grid>)}\n      </Suspense>\n    </Grid>\n  </Box>\n}\n"],"sourceRoot":""}