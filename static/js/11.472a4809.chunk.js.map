{"version":3,"file":"static/js/11.472a4809.chunk.js","mappings":"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","sources":["Components/Weapon/WeaponSelectionModal.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","PageWeapon/WeaponDisplayCard.tsx","ReactHooks/useWeapon.tsx"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport Assets from \"../../Assets/Assets\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport { Stars } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponFilter?: WeaponTypeKey,\n}\n\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\n\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\n\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\n    .filter(wKey => {\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\n      return true\n    })\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets[weaponKey]\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\n/**\n * @deprecated\n */\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\n/**\n * @deprecated\n */\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { ExpandMore } from \"@mui/icons-material\"\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useState } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../Formula/type\"\nimport { NodeDisplay } from \"../Formula/uiData\"\nimport KeyMap, { valueString } from \"../KeyMap\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport CardDark from \"./Card/CardDark\"\nimport CardLight from \"./Card/CardLight\"\nimport ColorText from \"./ColoredText\"\nimport ExpandButton from \"./ExpandButton\"\nimport ImgIcon from \"./Image/ImgIcon\"\n\nexport default function FormulaCalcCard() {\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <Typography>Formulas {\"&\"} Calculations</Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <CalculationDisplay />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\n    <Box sx={{ mr: -1, mb: -1 }}>\n      {sections.map(([key, Nodes]) =>\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Box>\n  </Suspense>\n}\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  if (!header) return null\n  const { title, icon, action } = header\n  return <CardDark sx={{ mb: 1 }}>\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([key, node]) =>\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\n          </AccordionDetails>\n        </Accordion>)}\n    </CardContent>\n  </CardDark>\n}\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\nimport CardLight from '../../Components/Card/CardLight';\nimport ImgIcon from '../../Components/Image/ImgIcon';\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from '../../Formula';\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\nimport { objectKeyMap } from '../../Util/Util';\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\n\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\n  const { data, character, mainStatAssumptionLevel } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const history = useHistory()\n  const edit = useCallback(\n    artid => history.push({\n      pathname: \"/artifact\",\n      artToEditId: artid\n    } as any), [history])\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  // TODO: We can also listen only to equipped artifacts\n  const [, updateArt] = useForceUpdate()\n  useEffect(() => database.followAnyArt(updateArt))\n\n  const equipArts = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\n    database.equipArtifacts(character.key, newBuild)\n  }, [character, data, database])\n\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\n  }, [character, database])\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\n  return <>\n    <CardLight sx={{ mb: 1 }}>\n      <CardContent>\n        <StatDisplayComponent />\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\n          </Grid>\n          <Grid item flexGrow={1}></Grid>\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\n        </Grid>\n      </CardContent>\n    </CardLight>\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\n            <Divider />\n            <CardContent >\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n        )}\n      </Grid>\n      {artIds.map(id => !!id && <Grid item xs={6} md={4} key={id} >\n        <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(id)} />\n      </Grid>)}\n    </Grid>\n  </>\n}\nexport default CharacterArtifactPane\n","import { PersonAdd } from \"@mui/icons-material\";\nimport { CardContent, Divider, Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useContext, useMemo } from 'react';\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport { DataContext, dataContextObj } from \"../../DataContext\";\nimport { uiInput as input } from \"../../Formula\";\nimport { NodeDisplay } from \"../../Formula/uiData\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ElementKey } from \"../../Types/consts\";\nimport { DocumentSection } from \"../../Types/sheet\";\nimport { objPathValue, range } from \"../../Util/Util\";\nimport CharacterCard from \"../CharacterCard\";\n\nexport default function CharacterTeamBuffsPane() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <TeamBuffDisplay />\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\n    <Grid container spacing={1}>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) => nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) => nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) => nodes.push([[\"enemy\", key], node]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      Team Buffs\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container columnSpacing={2} rowSpacing={1}>\n        {nodes.map(([path, n], i) => n && !n.isEmpty && <Grid item {...statBreakpoint} key={n.key} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n// function ResonanceDisplay() {\n//   const { data, characterDispatch } = useContext(DataContext)\n//   return <CardLight>\n//     <CardContent>\n//       Team Resonance\n//     </CardContent>\n//     <Divider />\n//     <CardContent>\n//       <Grid container spacing={1}>\n//         {resonanceSheets.map((doc, i) =>\n//           <Grid item key={i} xs={12} md={6} lg={4} >\n//             <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\n//               <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\n//               <Divider />\n//               <CardContent>\n//                 {doc.description}\n//               </CardContent>\n//               {doc.conditionals.map(cond =>\n//                 <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\n//               )}\n//             </CardDark>\n//           </Grid>\n//         )}\n//       </Grid>\n//     </CardContent>\n//   </CardLight>\n// }\nfunction TeammateDisplay({ index }: { index: number }) {\n  const dataContext = useContext(DataContext)\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\n  const activeCharacterKey = active.key\n  const characterKey = active.team[index]\n  const characterDispatch = useCharacterReducer(characterKey)\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\n  const onClickHandler = useCharSelectionCallback()\n\n  const dataBundle = teamData[characterKey]\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\n    character: dataBundle.character,\n    characterSheet: dataBundle.characterSheet,\n    data: dataBundle.target,\n    teamData: teamData,\n    mainStatAssumptionLevel: 0,\n    characterDispatch\n  }\n  return <CardLight>\n    <CardContent>\n      <CharacterDropdownButton fullWidth value={characterKey}\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\n    </CardContent>\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n      <CharacterCard characterKey={characterKey}\n        onClickHeader={onClickHandler}\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\n      />\n    </DataContext.Provider>}\n  </CardLight>\n\n}\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, } = useContext(DataContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sections = useMemo(() => artifactSheets &&\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\n    , [artifactSheets, data])\n  if (!sections) return null\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { teamData, character: { key: charKey } } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\n}\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\n\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\n  </Box >\n}\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\nimport React, { useContext, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport { Stars } from \"../../Components/StarDisplay\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport { DataContext } from \"../../DataContext\";\nimport { uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport KeyMap, { valueString } from \"../../KeyMap\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport StatInput from \"../StatInput\";\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\nimport { range } from \"../../Util/Util\";\nexport default function CharacterOverviewPane() {\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const charEle = data.get(input.charEle).value as ElementKey\n  const weaponTypeKey = characterSheet.weaponTypeKey\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.bonus.auto).value,\n    skill: data.get(input.bonus.skill).value,\n    burst: data.get(input.bonus.burst).value,\n  }\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={3}  >\n      {/* Image card with star and name and level */}\n      <CardLight >\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\n        <CardContent>\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\n          <Grid container spacing={1} mt={1}>\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\n              <Grid item xs={4} key={tKey}>\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\n                  overlap=\"circular\"\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    \"& > .MuiBadge-badge\": {\n                      fontSize: \"1.25em\",\n                      padding: \".25em .4em\",\n                      borderRadius: \".5em\",\n                      lineHeight: 1,\n                      height: \"1.25em\"\n                    }\n                  }}>\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\n                </Badge>\n              </Grid>)}\n          </Grid>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\n          <Grid container spacing={1}>\n            {range(1, 6).map(i =>\n              <Grid item xs={4} key={i}>\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey, charEle)?.img}\n                  sx={{\n                    cursor: \"pointer\",\n                    ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\n                  }}\n                  width=\"100%\" height=\"auto\"\n                  onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })} />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardLight>\n    </Grid>\n    <Grid item xs={12} md={9} sx={{\n      \"> div:not(:last-child)\": { mb: 1 }\n    }} >\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\n      <MainStatsCards />\n    </Grid>\n  </Grid >\n}\nconst EDIT = \"Edit Stats\"\nconst EXIT = \"EXIT\"\n\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatReadNodes = [\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\n]\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\n\nconst miscStatReadNodes = [\n  input.total.all_dmg_,\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\n  input.total.normal_dmg_, input.total.normal_critRate_,\n  input.total.charged_dmg_, input.total.charged_critRate_,\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\n  input.total.skill_dmg_, input.total.skill_critRate_,\n  input.total.burst_dmg_, input.total.burst_critRate_,\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x]),\n  input.total.dmgRed_\n]\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\n\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\n\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\n    {nodes.map(rn => <Grid item key={rn.info?.key} {...statBreakpoint} >\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\n    </Grid>)}\n    {extra}\n  </Grid>\n}\n\nfunction MainStatsCards() {\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const specialNode = data.get(input.special)\n\n  return <>\n    <TeamBuffDisplay />\n    <StatDisplayCard\n      title=\"Main Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\n        </Grid>}\n      />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {mainEditKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Other Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {otherStatKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              defaultValue={undefined}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Misc Stats\"\n      content={<StatDisplayContent statBreakpoint={{\n        xs: 12, sm: 6, md: 6,\n      }} nodes={miscStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {miscStatkeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n  </>\n}\nfunction StatDisplayCard({ title, content, editContent }) {\n  const [edit, setedit] = useState(false)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\n        </Button>\n      </Box>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {edit ? editContent : content}\n    </CardContent>\n  </CardLight>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\nimport React, { useCallback, useContext, useState } from 'react';\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from \"../../Formula\";\nimport { ElementKey } from \"../../Types/consts\";\nimport KeyMap, { valueString } from '../../KeyMap'\nimport { NodeDisplay } from '../../Formula/uiData'\nimport { NumNode } from \"../../Formula/type\";\nimport { range } from \"../../Util/Util\";\nexport default function CharacterTalentPane() {\n  const { data, character, characterSheet } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1} sx={{ mb: 1 }}>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>)}\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Grid>}\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"passive\"\n          subtitle=\"Passive\"\n        />\n      </Grid>}\n    </Grid>\n    <Grid container spacing={1}>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>\n      })}\n    </Grid>\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\n    <Grid container spacing={1}>\n      {/* constellations */}\n      {range(1, 6).map(i => {\n        let tKey = `constellation${i}` as TalentSheetElementKey\n        return <Grid item key={i} xs={12} md={4}\n          sx={{ opacity: constellation >= i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i}`}\n            onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\n          />\n        </Grid>\n      })}\n    </Grid>\n  </>\n}\nconst ReactionComponents = {\n  superconduct: SuperConductCard,\n  electrocharged: ElectroChargedCard,\n  overloaded: OverloadedCard,\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\n  shattered: ShatteredCard,\n  crystallize: CrystallizeCard,\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight sx={{ mb: 1 }}>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).map(([key, node]) => {\n          const Ele = ReactionComponents[key]\n          if (!Ele) return null\n          return <Grid item key={key}><Ele node={node} /></Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\n\nconst swirlEleToDisplay = {\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\n} as const\n\nfunction SwirlCard() {\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\n  const { data } = useContext(DataContext)\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\n  </CardDark>\n}\n\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\n  </CardContent></CardDark>\n}\n\nconst crystallizeEleToDisplay = {\n  \"geo\": <ColorText color=\"crystallize\">{KeyMap.get(\"crystallize\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_crystallize\")}</ColorText> {StatIcon.pyro}+{StatIcon.geo}</span>,\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_crystallize\")}</ColorText> {StatIcon.electro}+{StatIcon.geo}</span>,\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_crystallize\")}</ColorText> {StatIcon.cryo}+{StatIcon.geo}</span>,\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_crystallize\")}</ColorText> {StatIcon.hydro}+{StatIcon.geo}</span>\n} as const\n\nfunction CrystallizeCard() {\n  const [ele, setele] = useState(Object.keys(crystallizeEleToDisplay)[0])\n  const { data } = useContext(DataContext)\n  const node = ele === \"geo\" ? data.getDisplay().reaction!.crystallize! : data.getDisplay().reaction![`${ele}Crystallize`]!\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={crystallizeEleToDisplay[ele]} color=\"success\">\n      {Object.entries(crystallizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\n  </CardDark>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\n      talent[tKey] = newTalentLevelKey\n      characterDispatch({ talent })\n    }\n    header = <>\n      <CardContent sx={{ py: 1 }}>\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\n          {range(1, talentLimits[asc]).map(i =>\n            <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\n        </DropdownButton>\n      </CardContent>\n      <Divider />\n    </>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\nimport { Suspense, useCallback, useContext, useState } from 'react';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\nimport ThumbSide from '../Components/Character/ThumbSide';\nimport CloseButton from '../Components/CloseButton';\nimport ColorText from '../Components/ColoredText';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport { sgt } from '../Data/Characters/SheetUtil';\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useTeamData from '../ReactHooks/useTeamData';\nimport { CharacterKey } from '../Types/consts';\nimport { clamp } from '../Util/Util';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  value: string;\n  current: string | boolean;\n}\n\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\n  if (value !== current) return null\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n    <div\n      role=\"tabpanel\"\n      hidden={value !== current}\n      id={`simple-tabpanel-${value}`}\n      aria-labelledby={`simple-tab-${value}`}\n      {...other}\n    >\n      {children}\n    </div>\n  </Suspense>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  footer?: JSX.Element\n  newteamData?: TeamData,\n  mainStatAssumptionLevel?: number,\n  onClose?: (any) => void,\n  tabName?: string,\n  isFlex?: boolean,\n}\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName, isFlex }: CharacterDisplayCardProps) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\n\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\n  const onTab = useCallback((e, v) => settab(v), [settab])\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n  if (!teamData || !character || !characterSheet || !charUIData) return <></>\n  const { compareData } = character\n  // main CharacterDisplayCard\n  const dataContextValue: dataContextObj = {\n    character,\n    characterSheet,\n    mainStatAssumptionLevel,\n    data: (newteamData ? newteamData[characterKey]!.target : charUIData),\n    teamData: (newteamData ? newteamData : teamData),\n    oldData: (compareData && newteamData) ? charUIData : undefined,\n    characterDispatch\n  }\n  return <CardDark >\n    <DataContext.Provider value={dataContextValue}>\n      <CardContent sx={{\n        \"> div:not(:last-child)\": { mb: 1 },\n      }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <CharSelectDropdown />\n          </Grid>\n          <Grid item>\n            {/* Compare against new build toggle */}\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>\n                <small>Show New artifact Stats</small>\n              </ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>\n                <small>Compare against equipped artifacts</small>\n              </ToggleButton>\n            </SolidToggleButtonGroup>}\n          </Grid>\n          <Grid item flexGrow={1} />\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\n          {!!onClose && <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>}\n        </Grid>\n        <CardLight>\n          <Tabs\n            onChange={onTab}\n            value={tab}\n            variant=\"fullWidth\"\n          >\n            <Tab value=\"character\" label=\"Character\" />\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\n            <Tab value=\"talent\" label=\"Talents\" />\n          </Tabs>\n        </CardLight>\n        <DamageOptionsCard />\n        <FormulaCalcCard />\n        <EnemyExpandCard />\n\n        {/* Character Panel */}\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\n        {/* Artifacts Panel */}\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\n        </DataContext.Provider>\n        {/* new build panel */}\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\n        {/* Buffs panel */}\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\n        {/* talent panel */}\n        <TabPanel value=\"talent\" current={tab}>\n          <CharacterTalentPane />\n        </TabPanel >\n      </CardContent>\n      {!!footer && <Divider />}\n      {footer && <CardContent >\n        {footer}\n      </CardContent>}\n    </DataContext.Provider>\n  </CardDark>\n}\n\n\nfunction CharSelectDropdown() {\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  const setLevel = useCallback((level) => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    characterDispatch({ level, ascension })\n  }, [characterDispatch])\n  const setAscension = useCallback(() => {\n    if (!character) return\n    const { level = 1, ascension = 0 } = character\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\n    else characterDispatch({ ascension: lowerAscension })\n  }, [characterDispatch, character])\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\n  return <>\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\n    <Grid container spacing={1}>\n      <Grid item>\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\n      </Grid>\n      <Grid item>\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\n          </DropdownButton>}\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setLevel} value={level}\n              startAdornment=\"Lvl. \"\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n              disabled={!characterSheet} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\n            {milestoneLevels.map(([lv, as]) => {\n              const sameLevel = lv === ascensionMaxLevel[as]\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n              const selected = lv === level && as === ascension\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n            })}\n          </DropdownButton>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  </>\n}\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport KeyMap, { valueString } from \"../KeyMap\"\nimport { CharacterKey } from \"../Types/consts\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\n  const database = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const actionWrapperFunc = useCallback(\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\n    [onClick, weaponId],\n  )\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div className={`grad-${weaponSheet.rarity}star`} >\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\n              {lock ? <Lock /> : <LockOpen />}\n            </IconButton>} />\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\n            <Grid item flexGrow={1}>\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n            </Grid>\n            {/* use flex-end here to align the image to the bottom. */}\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\n            </Grid>\n          </Grid>\n        </div>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.key) return null\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n        {/* grow to fill the 100% heigh */}\n        <Box flexGrow={1} />\n        <CardContent sx={{ py: 1 }}>\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\n            <Grid item xs=\"auto\" flexShrink={1}>\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\n            </Grid>\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\n            <Grid item xs=\"auto\">\n              <ButtonGroup sx={{ height: \"100%\" }}>\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n                </Button>}\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n                </Button>}\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n      </CardLight>\n    </ConditionalWrapper>\n  </Suspense>\n}\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\nimport { useCallback, useContext, useMemo, useState } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\nimport CloseButton from \"../Components/CloseButton\"\nimport ColorText from \"../Components/ColoredText\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../Components/ModalWrapper\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport { CharacterKey } from \"../Types/consts\"\nimport { ICachedWeapon } from \"../Types/weapon\"\nimport { clamp } from \"../Util/Util\"\nimport WeaponCard from \"./WeaponCard\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\nimport { DataContext } from \"../DataContext\"\n\ntype WeaponStatsEditorCardProps = {\n  weaponId: string\n  footer?: boolean\n  onClose?: () => void\n}\nexport default function WeaponDisplayCard({\n  weaponId: propWeaponId,\n  footer = false,\n  onClose\n}: WeaponStatsEditorCardProps) {\n  const { data } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const weapon = useWeapon(propWeaponId)\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\n  const weaponTypeKey = weaponSheet?.weaponType\n\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\n    database.updateWeapon(newWeapon, propWeaponId)\n  }, [propWeaponId, database])\n\n  const setLevel = useCallback(level => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    weaponDispatch({ level, ascension })\n  }, [weaponDispatch])\n\n  const setAscension = useCallback(() => {\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\n    else weaponDispatch({ ascension: lowerAscension })\n  }, [weaponDispatch, ascension, level])\n\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n  const [showModal, setshowModal] = useState(false)\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1}>\n          <Grid container spacing={1}>\n            <Grid item >\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\n              <ButtonGroup>\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\n                <DropdownButton title={`Refinement ${refinement}`}>\n                  <MenuItem>Select Weapon Refinement</MenuItem>\n                  <Divider />\n                  {[...Array(5).keys()].map(key =>\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\n                      {`Refinement ${key + 1}`}\n                    </MenuItem>)}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item >\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\n                <CustomNumberInputButtonGroupWrapper >\n                  <CustomNumberInput onChange={setLevel} value={level}\n                    startAdornment=\"Lvl. \"\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n                  />\n                </CustomNumberInputButtonGroupWrapper>\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n                <DropdownButton title={\"Select Level\"} >\n                  {milestoneLevels.map(([lv, as]) => {\n                    const sameLevel = lv === ascensionMaxLevel[as]\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n                    const selected = lv === level && as === ascension\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n                  })}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item>\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\n                {lock ? \"Locked\" : \"Unlocked\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        {!!onClose && <Grid item  >\n          <CloseButton onClick={onClose} />\n        </Grid>}\n        {database === localDatabase && <Grid item >\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\n        </Grid>}\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\n          <Typography><small>{weaponSheet.description}</small></Typography>\n        </Box>\n        <Box sx={{ mb: -1 }} flexGrow={1} >\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n            <CardDark >\n              <CardContent>\n                <Typography>Main Stats</Typography>\n              </CardContent>\n              <FieldDisplayList>\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return <NodeFieldDisplay key={n.key} node={n} component={ListItem} />\n                })}\n              </FieldDisplayList>\n            </CardDark>\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\n          </Box>\n        </Box>\n      </Box>}\n    </CardContent>\n    {footer && id && <CardContent sx={{ py: 1 }}>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\n        </Grid>\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\n      </Grid>\n    </CardContent>}\n  </CardLight>\n}\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\n  const database = useContext(DatabaseContext)\n  const [show, setShow] = useState(false)\n  const open = () => setShow(true)\n  const close = () => setShow(false)\n\n  const clickHandler = (id) => {\n    onChangeId(id)\n    close()\n  }\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const weaponIdList = database.weapons.keys.filter(wKey => {\n    const dbWeapon = database._getWeapon(wKey)\n    if (!dbWeapon) return false\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\n    return true\n  })\n\n\n  return <>\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\n    <ModalWrapper open={show} onClose={close} >\n      <CardDark>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={close} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Grid container spacing={1}>\n            {weaponIdList.map(weaponId =>\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  </>\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}"],"names":["WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","usePromise","WeaponSheet","useState","setWeaponfilter","useEffect","weaponIdList","Set","allWeaponKeys","wKey","weaponType","sort","a","b","rarity","open","onClose","sx","py","container","item","flexGrow","value","onChange","disabled","size","onClick","spacing","map","weaponKey","weaponSheet","lg","md","height","display","component","src","img","width","className","px","variant","name","Assets","stars","colored","large","Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","FormulaCalcCard","expanded","setexpanded","toggle","useCallback","CardLight","CardContent","Grid","Typography","color","ExpandButton","expand","ExpandMore","Collapse","in","timeout","unmountOnExit","pt","CalculationDisplay","data","useContext","DataContext","sections","getDisplaySections","Suspense","fallback","Skeleton","Box","mr","mb","key","Nodes","FormulaCalc","displayNs","sectionKey","header","getDisplayHeader","title","icon","action","CardDark","CardHeader","avatar","ImgIcon","m","titleTypographyProps","Divider","Object","entries","node","isEmpty","Accordion","bgcolor","AccordionSummary","expandIcon","KeyMap","valueString","unit","AccordionDetails","formulas","subform","i","newBuild","character","mainStatAssumptionLevel","database","DatabaseContext","history","useHistory","edit","artid","push","pathname","artToEditId","artifactSheets","ArtifactSheet","useForceUpdate","updateArt","followAnyArt","equipArts","window","confirm","fromEntries","allSlotKeys","s","get","input","id","equipArtifacts","unequipArts","objectKeyMap","_","artIds","slotKey","setEffects","useMemo","StatDisplayComponent","Button","localDatabase","Card","p","t","palette","warning","dark","xs","sm","flexDirection","gap","setKey","setNumKeyArr","defIconSrc","setNumKey","SetEffectDisplay","ArtifactCard","artifactId","onEdit","CharacterTeamBuffsPane","alignItems","TeamBuffDisplay","range","TeammateDisplay","index","statBreakpoint","oldData","teamBuffs","getTeamBuff","nodes","total","forEach","premod","enemy","length","columnSpacing","rowSpacing","path","n","oldValue","objPathValue","dataContext","active","teamData","activeCharacterDispatch","characterDispatch","activeCharacterKey","characterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","characterSheet","target","CharacterDropdownButton","fullWidth","charKey","type","ck","includes","unSelectText","unSelectIcon","PersonAdd","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","setEffectDocument","DisplaySectionsTeamCond","document","talent","getTalent","values","sheets","sts","section","conditional","teamBuff","ConditionalDisplay","fieldContext","CharacterOverviewPane","charEle","weaponTypeKey","level","ascension","constellation","tlvl","auto","skill","burst","tBoost","CardMedia","cardImg","StatIcon","CharacterSheet","mt","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","fontSize","padding","borderRadius","lineHeight","getTalentOfKey","textAlign","constellationName","cursor","WeaponDisplayCard","weaponId","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatReadNodes","allElementsWithPhy","ele","x","otherStatKeys","info","miscStatReadNodes","keys","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","extra","rn","specialNode","StatDisplayCard","content","justifyContent","editContent","statName","StatInput","placeholder","bonusStats","percent","onValueChange","defaultValue","undefined","setedit","faSave","faEdit","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","opacity","onClickTitle","ReactionComponents","superconduct","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","getDisplay","reaction","DropdownButton","element","MenuItem","selected","shattered","information","BootstrapTooltip","placement","faQuestionCircle","crystallize","crystallizeEleToDisplay","Ele","talentLimits","actionWrapeprFunc","children","CardActionArea","levelBoost","newTalentLevelKey","talentSheet","ConditionalWrapper","condition","wrapper","flexWrap","pl","DocumentDisplay","TabPanel","current","other","role","hidden","CharacterDisplayCard","footer","newteamData","tabName","isFlex","useTeamData","charUIData","tab","settab","onTab","e","v","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","exclusive","ToggleButton","CloseButton","Tabs","Tab","label","showModal","setshowModal","setCharacter","setLevel","clamp","ascensionMaxLevel","ascenML","setAscension","lowerAscension","elementKey","CharacterSelectionModal","startIcon","ThumbSide","thumbImgSide","ButtonGroup","contentDark","main","sheet","talents","eleKey","CustomNumberInput","startAdornment","inputProps","min","max","ambiguousLevel","milestoneLevels","lv","as","lvlstr","inventory","noUnselect","props","useTranslation","characterSheets","characterKeys","_getCharKeys","thumbImg","BusinessCenter","Replay","ListItemIcon","noWrap","CharacterMenuItemArray","selectedCharacterKey","WeaponCard","onDelete","canEquip","weapon","useWeapon","cs","actionWrapperFunc","equipOnChar","setWeaponLocation","UIData","computeUIData","dataObjForWeapon","refinement","location","lock","imgAwaken","minHeight","IconButton","updateWeapon","Lock","LockOpen","maxWidth","alignContent","displayVal","flexShrink","LocationName","faTrashAlt","propWeaponId","weaponDispatch","newWeapon","ws","initialWeaponFilter","weaponUIData","Array","contentLight","SwapBtn","onChangeId","minWidth","description","process","passiveName","gutterBottom","passiveDescription","ListItem","setShow","close","clickHandler","weapons","dbWeapon","_getWeapon","weaponID","setWeapon","followWeapon"],"sourceRoot":""}