{"version":3,"file":"static/js/11.64b3eaa0.chunk.js","mappings":"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","sources":["Components/Weapon/WeaponSelectionModal.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","PageWeapon/WeaponDisplayCard.tsx"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","/**\r\n * @deprecated\r\n */\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static printStat = (statKey, stats, premod = false) => <></>\r\n}\r\n","import Assets from \"../../Assets/Assets\";\r\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport Stat from \"../../Stat\";\r\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\n//this template only works if there is no variation in normal attacks.(no multi hits)\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalDocSection = (tr, formula, data) => ({\r\n  text: tr(`auto.fields.normal`),\r\n  fields: data.normal.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\r\n    formula: formula.normal[i],\r\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\r\n  }))\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [{\r\n    text: sgt(`charged.dmg`),\r\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina,\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\r\n  text: tr(`auto.fields.charged`),\r\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\r\n  ({\r\n    text: sgt(`normal.hit${i + 1}`),\r\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged[i],\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  })), {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: stamina\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr`auto.fields.plunging`,\r\n  fields: [{\r\n    text: sgt(`plunging.dmg`),\r\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.dmg,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.low\"),\r\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.low,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }, {\r\n    text: sgt(\"plunging.high\"),\r\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\r\n    formula: formula.plunging.high,\r\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.spinning\"),\r\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.spinning,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.final\"),\r\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.final,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.stamina\"),\r\n    value: data.charged.stam ?? 40,\r\n    unit: \"/s\"\r\n  }, {\r\n    text: sgt(\"maxDuration\"),\r\n    value: data.charged.maxDuration ?? 5,\r\n    unit: \"s\"\r\n  }]\r\n})\r\n/**\r\n * @deprecated\r\n */\r\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\r\n  text: tr(\"auto.fields.charged\"),\r\n  fields: [{\r\n    text: sgt(\"charged.aimed\"),\r\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\r\n    formula: formula.charged.hit,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\r\n  }, {\r\n    text: sgt(\"charged.fullyAimed\"),\r\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\r\n    formula: formula.charged.full,\r\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\r\n  }]\r\n})\r\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\r\n/**\r\n * @deprecated\r\n */\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    ...(boostKey ? {\r\n      conditional: {\r\n        key: boostKey,\r\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\r\n        maxStack: 0,\r\n        stats: {\r\n          [boostKey]: boostAmt\r\n        }\r\n      } as IConditional\r\n    } : {})\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n/**\r\n * @deprecated\r\n */\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { ExpandMore } from \"@mui/icons-material\"\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useState } from \"react\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\r\nimport { DisplaySub } from \"../Formula/type\"\r\nimport { NodeDisplay, valueString } from \"../Formula/uiData\"\r\nimport KeyMap from \"../KeyMap\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CardLight from \"./Card/CardLight\"\r\nimport ColorText from \"./ColoredText\"\r\nimport ExpandButton from \"./ExpandButton\"\r\nimport ImgIcon from \"./Image/ImgIcon\"\r\n\r\nexport default function FormulaCalcCard() {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Formulas {\"&\"} Calculations</Typography>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    <Box sx={{ mr: -1, mb: -1 }}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Box>\r\n  </Suspense>\r\n}\r\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  if (!header) return null\r\n  const { title, icon, action } = header\r\n  return <CardDark sx={{ mb: 1 }}>\r\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([key, node]) =>\r\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\r\n          <AccordionSummary expandIcon={<ExpandMore />}>\r\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\r\n          </AccordionDetails>\r\n        </Accordion>)}\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from '../../Types/consts';\r\nimport { objectKeyMap } from '../../Util/Util';\r\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\r\n  const { data, oldData, character, mainStatAssumptionLevel } = useContext(DataContext)\r\n\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!oldData) return\r\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\r\n    database.equipArtifacts(character.key, newBuild)\r\n  }, [character, data, oldData, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!character) return\r\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\r\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\r\n  }, [character, database])\r\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\r\n  const artSetNums = Object.entries(input.artSet).map(([key, value]) => [key, data.get(value).value]) as [ArtifactSetKey, number][]\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n        {artifactSheets && ArtifactSheet.setEffects(artifactSheets, artSetNums).map(([setKey, setNumKeyArr]) =>\r\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\r\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n            <Divider />\r\n            <CardContent >\r\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\r\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\r\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </CardLight>\r\n        )}\r\n      </Grid>\r\n      {artIds.map((id, i) =>\r\n        !!id && <Grid item xs={6} md={4} key={i} >\r\n          <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(id)} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { PersonAdd } from \"@mui/icons-material\";\r\nimport { CardContent, Divider, Grid } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React, { useContext } from 'react';\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport resonanceSheets from \"../../Conditional/Resonance\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport { DataContext, dataContextObj } from \"../../DataContext\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { NodeDisplay } from \"../../Formula/uiData\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { objPathValue, range } from \"../../Util/Util\";\r\nimport CharacterCard from \"../CharacterCard\";\r\n\r\nexport default function CharacterTeamBuffsPane() {\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\r\n    <TeamBuffDisplay />\r\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\r\n    <Grid container spacing={1}>\r\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\r\n        <TeammateDisplay index={i} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </Box>\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\nexport function TeamBuffDisplay() {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const teamBuffs = data.getTeamBuff()\r\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\r\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) => nodes.push([[\"total\", key], node]))\r\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) => nodes.push([[\"premod\", key], node]))\r\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) => nodes.push([[\"enemy\", key], node]))\r\n  if (!nodes.length) return null\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Buffs\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container columnSpacing={2} rowSpacing={1}>\r\n        {nodes.map(([path, n], i) => n && !n.isEmpty && <Grid item {...statBreakpoint} key={n.key} >\r\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction ResonanceDisplay() {\r\n  const { data, characterDispatch } = useContext(DataContext)\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Resonance\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {/* {resonanceSheets.map((doc, i) =>\r\n          <Grid item key={i} xs={12} md={6} lg={4} >\r\n            <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\r\n              <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n              <Divider />\r\n              <CardContent>\r\n                {doc.description}\r\n              </CardContent>\r\n              {doc.conditionals.map(cond =>\r\n                <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\r\n              )}\r\n            </CardDark>\r\n          </Grid>\r\n        )} */}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction TeammateDisplay({ index }: { index: number }) {\r\n  const dataContext = useContext(DataContext)\r\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\r\n  const activeCharacterKey = active.key\r\n  const characterKey = active.team[index]\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\r\n  const onClickHandler = useCharSelectionCallback()\r\n\r\n  const dataBundle = teamData[characterKey]\r\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\r\n    character: dataBundle.character,\r\n    characterSheet: dataBundle.characterSheet,\r\n    data: dataBundle.target,\r\n    teamData: teamData,\r\n    mainStatAssumptionLevel: 0,\r\n    characterDispatch\r\n  }\r\n  return <CardLight>\r\n    <CardContent>\r\n      <CharacterDropdownButton fullWidth value={characterKey}\r\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\r\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\r\n    </CardContent>\r\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\r\n      <CharacterCard characterKey={characterKey}\r\n        onClickHeader={onClickHandler}\r\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\r\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\r\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\r\n      />\r\n    </DataContext.Provider>}\r\n  </CardLight>\r\n\r\n}\r\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  if (!artifactSheets) return null\r\n  const sections = Object.values(artifactSheets).flatMap(s => Object.values(s.setEffects).flatMap(se => se?.document)).filter(d => d) as DocumentSection[]\r\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\r\n}\r\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const weaponSheet = teamData[charKey]!.weaponSheet\r\n\r\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\r\n}\r\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\r\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const characterSheet = teamData[charKey]!.characterSheet\r\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\r\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\r\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\r\n}\r\n\r\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\r\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\r\n  </Box >\r\n}\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport { DataContext } from \"../../DataContext\";\r\nimport { valueString } from \"../../Formula/api\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ReadNode } from \"../../Formula/type\";\r\nimport KeyMap from \"../../KeyMap\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\r\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\r\nexport default function CharacterOverviewPane() {\r\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = data.get(input.lvl).value\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  const tlvl = {\r\n    auto: data.get(input.total.auto).value,\r\n    skill: data.get(input.total.skill).value,\r\n    burst: data.get(input.total.burst).value,\r\n  }\r\n  const tBoost = {\r\n    auto: data.get(input.bonus.auto).value,\r\n    skill: data.get(input.bonus.skill).value,\r\n    burst: data.get(input.bonus.burst).value,\r\n  }\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {[...Array(6).keys()].map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}` as TalentSheetElementKey, charEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\r\n      <MainStatsCards />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\r\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\r\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\r\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\r\n\r\nconst otherStatReadNodes = [\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\r\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\r\n]\r\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst miscStatReadNodes = [\r\n  input.total.all_dmg_,\r\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\r\n  input.total.normal_dmg_, input.total.normal_critRate_,\r\n  input.total.charged_dmg_, input.total.charged_critRate_,\r\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\r\n  input.total.skill_dmg_, input.total.skill_critRate_,\r\n  input.total.burst_dmg_, input.total.burst_critRate_,\r\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x])\r\n]\r\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n    {nodes.map((rn, i) => <Grid item key={i} {...statBreakpoint} >\r\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\r\n    </Grid>)}\r\n    {extra}\r\n  </Grid>\r\n}\r\n\r\nfunction MainStatsCards() {\r\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const specialNode = data.get(input.special)\r\n\r\n  return <>\r\n    <TeamBuffDisplay />\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\r\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\r\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\r\n        </Grid>}\r\n      />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {mainEditKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              defaultValue={undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<StatDisplayContent statBreakpoint={{\r\n        xs: 12, sm: 6, md: 6,\r\n      }} nodes={miscStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport KeyMap from '../../KeyMap'\r\nimport { NodeDisplay, valueString } from '../../Formula/uiData'\r\nimport { NumNode } from \"../../Formula/type\";\r\nexport default function CharacterTalentPane() {\r\n  const { data, character, characterSheet } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(character.key)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\r\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  return <>\r\n    <ReactionDisplay />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}` as TalentSheetElementKey\r\n        return <Grid item key={i} xs={12} md={4}\r\n          sx={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct: SuperConductCard,\r\n  electrocharged: ElectroChargedCard,\r\n  overloaded: OverloadedCard,\r\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\r\n  shattered: ShatteredCard,\r\n  // crystalize_hit: CrystalizeCard, // TODO: crystallize\r\n}\r\nfunction ReactionDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(reaction).map(([key, node]) => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele node={node} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\nfunction SwirlCard() {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const { data } = useContext(DataContext)\r\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\r\n  </CardDark>\r\n}\r\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\n// TODO: crystallize\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <ColorText color=\"crystalize\">{KeyMap.get(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span>{KeyMap.get(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span>{KeyMap.get(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span>{KeyMap.get(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span>{KeyMap.get(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\nfunction CrystalizeCard() {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    {/* <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box> */}\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  talentKey: TalentSheetElementKey,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\r\n    const level = data.get(input.total[talentKey]).value\r\n    const asc = data.get(input.asc).value\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {[...Array(talentLimits[asc]).keys()].map(i =>\r\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n  }\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useState } from 'react';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport ColorText from '../Components/ColoredText';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\r\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport { sgt } from '../Data/Characters/SheetUtil';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { clamp } from '../Util/Util';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  footer?: JSX.Element\r\n  newteamData?: TeamData,\r\n  mainStatAssumptionLevel?: number,\r\n  onClose?: (any) => void,\r\n  tabName?: string,\r\n  isFlex?: boolean,\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName, isFlex }: CharacterDisplayCardProps) {\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\r\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\r\n  if (!teamData || !character || !characterSheet || !charUIData) return <></>\r\n  const { compareData } = character\r\n  // main CharacterDisplayCard\r\n  const dataContextValue: dataContextObj = {\r\n    character,\r\n    characterSheet,\r\n    mainStatAssumptionLevel,\r\n    data: (newteamData ? newteamData[characterKey]!.target : charUIData),\r\n    teamData: (newteamData ? newteamData : teamData),\r\n    oldData: (compareData && newteamData) ? charUIData : undefined,\r\n    characterDispatch\r\n  }\r\n  return <CardDark >\r\n    <DataContext.Provider value={dataContextValue}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            <CharSelectDropdown />\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n              <ToggleButton value={false} disabled={!compareData}>\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} disabled={compareData}>\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1} />\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <DamageOptionsCard />\r\n        <FormulaCalcCard />\r\n        <EnemyExpandCard />\r\n\r\n        {/* Character Panel */}\r\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\r\n        {/* Artifacts Panel */}\r\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\r\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\r\n        </DataContext.Provider>\r\n        {/* new build panel */}\r\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\r\n        {/* Buffs panel */}\r\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\r\n        {/* talent panel */}\r\n        <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane />\r\n        </TabPanel >\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent >\r\n        {footer}\r\n      </CardContent>}\r\n    </DataContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\n\r\nfunction CharSelectDropdown() {\r\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\r\n  const [showModal, setshowModal] = useState(false)\r\n  const setCharacter = useCharSelectionCallback()\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    if (!character) return\r\n    const { level = 1, ascension = 0 } = character\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, character])\r\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\r\n  return <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    <Grid container spacing={1}>\r\n      <Grid item>\r\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\r\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n          </DropdownButton>}\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setLevel} value={level}\r\n              startAdornment=\"Lvl. \"\r\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n              disabled={!characterSheet} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n            {milestoneLevels.map(([lv, as]) => {\r\n              const sameLevel = lv === ascensionMaxLevel[as]\r\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n              const selected = lv === level && as === ascension\r\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n            })}\r\n          </DropdownButton>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  </>\r\n}\r\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, valueString, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport KeyMap from \"../KeyMap\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const databaseWeapon = useWeapon(weaponId)\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\r\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {stats.map(node => {\r\n            if (!node.key) return null\r\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\r\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\r\n              <Typography>{displayVal}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}\r\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useMemo, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\r\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\nimport { DataContext } from \"../DataContext\"\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const { data } = useContext(DataContext)\r\n\r\n  const database = useContext(DatabaseContext)\r\n  const weapon = useWeapon(propWeaponId)\r\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\r\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n                <DropdownButton title={\"Select Level\"} >\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        {database === localDatabase && <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\r\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\r\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n          <Typography><small>{weaponSheet.description}</small></Typography>\r\n        </Box>\r\n        <Box sx={{ mb: -1 }} flexGrow={1} >\r\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\r\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\r\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            <CardDark >\r\n              <CardContent>\r\n                <Typography>Main Stats</Typography>\r\n              </CardContent>\r\n              <FieldDisplayList>\r\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\r\n                  const n = weaponUIData.get(node)\r\n                  if (n.isEmpty || !n.value) return null\r\n                  return <ListItem key={i}><NodeFieldDisplay node={n} /></ListItem>\r\n                })}\r\n              </FieldDisplayList>\r\n            </CardDark>\r\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\r\n          </Box>\r\n        </Box>\r\n      </Box>}\r\n    </CardContent>\r\n    {footer && id && <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n        </Grid>\r\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n      </Grid>\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}\r\n"],"names":["WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","usePromise","WeaponSheet","useState","setWeaponfilter","useEffect","weaponIdList","Set","allWeaponKeys","wKey","weaponType","sort","a","b","rarity","open","onClose","sx","py","container","item","flexGrow","value","onChange","disabled","size","onClick","spacing","map","weaponKey","weaponSheet","lg","md","height","display","component","src","img","width","className","px","variant","name","Assets","stars","colored","large","Stat","this","Error","printStat","statKey","stats","sgt","strKey","ns","key18","FormulaCalcCard","expanded","setexpanded","toggle","useCallback","Typography","color","ExpandButton","expand","ExpandMore","Collapse","in","timeout","unmountOnExit","pt","CalculationDisplay","data","useContext","DataContext","sections","getDisplaySections","Suspense","fallback","Skeleton","Box","mr","mb","key","Nodes","FormulaCalc","displayNs","sectionKey","header","getDisplayHeader","title","icon","action","CardHeader","avatar","ImgIcon","m","titleTypographyProps","Object","entries","node","isEmpty","Accordion","bgcolor","AccordionSummary","expandIcon","KeyMap","valueString","unit","AccordionDetails","formulas","subform","i","newBuild","oldData","character","mainStatAssumptionLevel","database","DatabaseContext","history","useHistory","edit","artid","push","pathname","artToEditId","artifactSheets","ArtifactSheet","useForceUpdate","updateArt","followAnyArt","equipArts","window","confirm","fromEntries","allSlotKeys","s","get","input","id","equipArtifacts","unequipArts","objectKeyMap","_","artIds","slotKey","artSetNums","StatDisplayComponent","Button","localDatabase","Card","p","t","palette","warning","dark","xs","sm","flexDirection","gap","setKey","setNumKeyArr","defIconSrc","setNumKey","SetEffectDisplay","ArtifactCard","artifactId","onEdit","CharacterTeamBuffsPane","alignItems","TeamBuffDisplay","range","TeammateDisplay","index","statBreakpoint","teamBuffs","getTeamBuff","nodes","total","forEach","premod","enemy","length","columnSpacing","rowSpacing","path","n","oldValue","objPathValue","dataContext","active","teamData","activeCharacterDispatch","characterDispatch","activeCharacterKey","characterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","characterSheet","target","CharacterDropdownButton","fullWidth","charKey","type","ck","includes","unSelectText","unSelectIcon","PersonAdd","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","values","flatMap","setEffects","se","document","d","DisplaySectionsTeamCond","talent","getTalent","sheets","sts","section","conditional","teamBuff","ConditionalDisplay","fieldContext","CharacterOverviewPane","charEle","weaponTypeKey","level","ascension","constellation","tlvl","auto","skill","burst","tBoost","CardMedia","cardImg","StatIcon","CharacterSheet","mt","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","fontSize","padding","borderRadius","lineHeight","getTalentOfKey","textAlign","constellationName","Array","keys","cursor","WeaponDisplayCard","weaponId","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatReadNodes","allElementsWithPhy","ele","x","otherStatKeys","info","miscStatReadNodes","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","extra","rn","specialNode","StatDisplayCard","content","justifyContent","editContent","statName","StatInput","placeholder","bonusStats","percent","onValueChange","defaultValue","undefined","setedit","faSave","faEdit","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","opacity","onClickTitle","ReactionComponents","superconduct","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","getDisplay","reaction","element","selected","shattered","information","BootstrapTooltip","placement","faQuestionCircle","Ele","talentLimits","actionWrapeprFunc","children","CardActionArea","levelBoost","newTalentLevelKey","talentSheet","ConditionalWrapper","condition","wrapper","flexWrap","pl","DocumentDisplay","TabPanel","current","other","role","hidden","CharacterDisplayCard","footer","newteamData","tabName","isFlex","useTeamData","charUIData","tab","settab","onTab","e","v","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","exclusive","ToggleButton","CloseButton","Tabs","Tab","label","showModal","setshowModal","setCharacter","setLevel","clamp","ascensionMaxLevel","ascenML","setAscension","lowerAscension","elementKey","CharacterSelectionModal","startIcon","ThumbSide","thumbImgSide","ButtonGroup","contentDark","main","sheet","talents","eleKey","CustomNumberInput","startAdornment","inputProps","min","max","ambiguousLevel","milestoneLevels","lv","as","lvlstr","inventory","noUnselect","props","useTranslation","characterSheets","characterKeys","_getCharKeys","DropdownButton","thumbImg","BusinessCenter","Replay","MenuItem","ListItemIcon","noWrap","Divider","CharacterMenuItemArray","selectedCharacterKey","WeaponCard","onDelete","canEquip","weapon","useWeapon","cs","actionWrapperFunc","equipOnChar","setWeaponLocation","UIData","useMemo","computeUIData","dataObjForWeapon","refinement","location","lock","imgAwaken","minHeight","CardLight","IconButton","updateWeapon","Lock","LockOpen","Grid","maxWidth","alignContent","CardContent","displayVal","flexShrink","LocationName","faTrashAlt","propWeaponId","weaponDispatch","newWeapon","ws","initialWeaponFilter","weaponUIData","contentLight","SwapBtn","onChangeId","minWidth","description","process","passiveName","gutterBottom","passiveDescription","setShow","close","clickHandler","weapons","dbWeapon","_getWeapon"],"sourceRoot":""}