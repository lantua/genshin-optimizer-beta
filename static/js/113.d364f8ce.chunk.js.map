{"version":3,"file":"static/js/113.d364f8ce.chunk.js","mappings":"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","sources":["Data/Characters/AratakiItto/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { total: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.ss.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.stam,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"skill.skillParams.3\"),\r\n              value: datamine.skill.cd,\r\n              unit: \"s\"\r\n            }\r\n          ],\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [\r\n              {\r\n                node: nodeP1AtkSpd\r\n              },\r\n            ]\r\n          }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: tr(\"constellation4.description\"),\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              {\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              },\r\n              {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 20, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 50, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_`})\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtk = equal(activeInArea, 1, prod(atkIncRatio, input.base.atk))\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  equal(c6AndCorrectWep, 1, datamine.constellation6.pyro_dmg))\r\nconst activeInAreaC6Infusion = equalStr(activeInArea, 1,\r\n  equalStr(c6AndCorrectWep, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n      atk: activeInAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((percentArr, i) =>\r\n          ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]),\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\",\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\",\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: {\r\n            value: condInArea,\r\n            path: condInAreaPath,\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            description: tr(\"burst.description\"),\r\n            name: st(\"activeCharField\"),\r\n            teamBuff: true,\r\n            states: {\r\n              activeInArea: {\r\n                fields: [{\r\n                  text: tr(\"burst.skillParams.2\"),\r\n                  value: data => data.get(atkIncRatio).value * 100,\r\n                  unit: \"%\",\r\n                }, {\r\n                  node: infoMut(activeInAreaAtk, { key: `sheet:increase.atk` })\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            canShow: greaterEq(input.asc, 4, 4),\r\n            value: condInArea,\r\n            path: condInAreaPath,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            name: st(\"activeCharField\"),\r\n            states: {\r\n              activeInArea: {\r\n                fields: [{ // Node will not show CD reduction, have to use value instead\r\n                  text: st(\"skillCDRed\"),\r\n                  value: datamine.passive2.cd_red,\r\n                  unit: \"%\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {  \r\n            canShow: c6AndCorrectWep,\r\n            value: condInArea,\r\n            path: condInAreaPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"activeCharField\"),\r\n            teamBuff: true,\r\n            states: {\r\n              activeInArea: {\r\n                fields: [{\r\n                  node: activeInAreaC6PyroDmg\r\n                }, {\r\n                  text: <ColorText color={elementKey}>{st(\"infusion.pyro\")}</ColorText>\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value > 1,\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.cd_red,\r\n        unit: \"%\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        text: trm(\"additionalATKRatio\"),\r\n        node: c1Atk\r\n      }, {\r\n        node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value / 100);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, datamine.passive2.pyroInc)\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n    secondHitBoost: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional),\r\n    thirdHitBoost: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n          },\r\n          {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n          },],\r\n          conditional: {\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6C.name\"),\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6DmgBonus,\r\n                }, {\r\n                  node: nodeC6SpdBonus\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C.name\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }\r\n          ]))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_ = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6em = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      heal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6low`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6healing_,\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6low`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC6em,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    cryo_enemyRes_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }]\r\n          }, {\r\n            conditional: {\r\n              value: condA1,\r\n              path: condA1Path,\r\n              canShow: greaterEq(input.asc, 1, 1),\r\n              name: trm(\"a1.condName\"),\r\n              header: conditionalHeader(\"passive1\", tr, passive1),\r\n              states: {\r\n                on: {\r\n                  fields: [{\r\n                    text: trm(\"a1.critRateInc\"),\r\n                    value: `+${datamine.passive1.critRateInc * 100}`,\r\n                    unit: \"%\"\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: `${datamine.passive1.duration}s`,\r\n                  }]\r\n                }\r\n              }\r\n            }\r\n          }, {\r\n            conditional: {\r\n              value: condC1,\r\n              path: condC1Path,\r\n              canShow: greaterEq(input.constellation, 1, 1),\r\n              name: trm(\"c1.condName\"),\r\n              header: conditionalHeader(\"constellation1\", tr, c1),\r\n              states: {\r\n                on: {\r\n                  fields: [{\r\n                    node: cryo_enemyRes_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: `${datamine.constellation1.duration}s`,\r\n                  }]\r\n                }\r\n              }\r\n            }\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2.charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: `${datamine.burst.duration}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: `${datamine.burst.cd}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            value: condA4,\r\n            path: condA4Path,\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            teamBuff: true,\r\n            name: trm(\"a4.condName\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: cryo_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            value: condC4,\r\n            path: condC4Path,\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            teamBuff: true,\r\n            name: trm(\"c4.condName\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst skill_dmg_ = greaterEq(input.constellation, 1, percent(datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_ = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    c1Dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        node: infoMut(dmgFormulas.skill.c1Dmg, { key: `char_${key}:c1CondName` }),\r\n        textSuffix: \"(C1)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: (data) => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [\r\n        {\r\n          canShow: (data) => data.get(input.asc).value >= 4,\r\n          text: st(\"energyRegen\"),\r\n          value: datamine.passive2.energyRegen\r\n        }\r\n      ]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"c4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: anemo_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgRed_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P,\r\n    unequal(input.activeCharKey, key, datamine.constellation2.elemas)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 \r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cd}`,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: data => data.get(input.constellation).value >= 1\r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cdHold}`,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: greaterEq(input.constellation, 2, 1),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            // Only show the description once\r\n            description: eleKey === \"hydro\" ? tr(\"passive2.description\"): \"\",\r\n            name: trm(`a4.name_${eleKey}`),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{\r\n        //TODO: put into subsection since this is teambuff\r\n        //   description: tr(\"passive3.description\"),\r\n        node: passive\r\n      }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: afterRecastInfusion,\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst skillTenguAmbush_ = equal(target.activeCharKey, target.charKey, equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' }))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              node: skillTenguAmbush_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1 = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, target.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, target.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: trm(\"pressDuration\"),\r\n            value: datamine.skill.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"pressQuota\"),\r\n            value: datamine.skill.trigger,\r\n          }, {\r\n            text: st(\"pressCD\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: trm(\"holdDuration\"),\r\n            value: datamine.skill.durationHold,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"holdQuota\"),\r\n            value: datamine.skill.triggerHold,\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: datamine.skill.cdHold,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            description: tr(\"skill.description\"),\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: nodeSkill\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(\"asc4Cond\"),\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: nodeAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: nodeAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: nodeAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // CONSTELLATION4\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            value: condC4,\r\n            path: condC4Path,\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4\"),\r\n            states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n              name: i.toString(),\r\n              fields: [{ node: c4Inc }]\r\n            }))\r\n          }\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            // value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            value: (data) => data.get(input.constellation).value >= 2\r\n              ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n              : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            description: tr(\"burst.description\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: nodeBurstCryo_enemyRes_\r\n                }, {\r\n                  node: nodeBurstPhysical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: greaterEq(input.asc, 1, equal(input.activeCharKey, target.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"activeCharField\"),\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: nodeAsc1\r\n                }, {\r\n                  node: nodeC2\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Condition = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, 1)))\r\nconst asc1 = equal(asc1Condition, 1, datamine.passive1.eleMas)\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        canShow: greaterEq(input.asc, 1, unequal(target.charKey, characterKey, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: asc1,\r\n          }, {\r\n            // TODO: uncomment after `target` bug is fixed\r\n            // canShow: data => data.get(asc1Condition).value,\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(target.charKey, characterKey, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: asc4,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}),\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6 \r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\"),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\"),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = {...normal_dmg_}\r\nconst plunging_dmg_ = {...normal_dmg_}\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst, \r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4, \r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2, \r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod : {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion,\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })\r\nconst atk_ = unequal(input.activeCharKey, characterKey, sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = uiData => uiData.get(input.constellation).value >= 6 && uiData.get(condSkill).value === 'skill'\r\nconst canShowA4 = uiData => uiData.get(input.asc).value >= 4\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, prod(percent(datamine.constellation6.dmg_), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: charTr(\"skillState\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [\r\n                {\r\n                  node: pyro_dmg_\r\n                },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive1.duration,\r\n                  unit: \"s\"\r\n                }\r\n              ]\r\n\r\n            }]))\r\n        }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: canShowA4,\r\n        node: infoMut(atk_, { key: `char_${characterKey}_gen:passive2.name` })\r\n      }, {\r\n        canShow: canShowA4,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive2.duration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [\r\n              {\r\n                node: c2pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation2.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport Keqing from './Keqing'\r\n// import Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  AratakiItto,\r\n  // Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  // Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  // Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  // Klee,\r\n  KujouSara,\r\n  // Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["key","data_gen","data_gen_src","trans","tr","trm","datamine","normal","hitArr","skillParam_gen","charged","sSlash","akSlash","akFinal","stam","plunging","dmg","low","high","ss","duration","skill","hp","ss_cd","cd","burst","atkSpd","defConv","resDec","cost","passive1","maxStacks","atkSPD_","passive2","def_","constellation4","atk_","constellation6","charged_critDMG_","cond","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","prod","subscript","input","nodeBurstAtk","equal","nodeBurstAtkSpd","allNodeBurstRes","Object","fromEntries","allElementsWithPhy","ele","nodeBurstInfusion","equalStr","nodeA4Bonus","greaterEq","percent","nodeP1AtkSpd","lookup","range","map","i","constant","nodeC4Atk","nodeC4Def","nodeC6CritDMG","dmgFormulas","arr","dmgNode","total","charged_dmgInc","entries","name","nodeC3","nodeC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","atk","sum","infusion","sheet","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","weaponTypeKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","infoMut","value","unit","variant","talentTemplate","path","states","on","st","values","undefined","canShow","count","passive3","constellation1","c1","constellation2","c2","constellation3","c3","c4","header","conditionalHeader","description","sgt","constellation5","c5","c6","CharacterSheet","a","s","b","spinningDmg","finalDmg","stamina","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","burstDmg","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","skillDmg","electroResShred_","condC6Path","condC6","condA4Path","condA4","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shieldElement","shieldNodeTalent","shield","baseDmg","dmgOneHit","dmgTwoHits","shieldNode","customDmgNode","hit","customBonus","normal_dmg_","charged_dmg_","electro_enemyRes_","dmg1","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","enerCost","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","target","c1AddlAtk","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","regen","healNodeTalent","atkInc","pyro_dmg_","team","enerRech_","percentArr","calculateSkillCD","conditional","get","color","skillCD","cdFactor","result","p1","p2","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","atkSpdInc","maxStack","condC1Path","condC1","condC2Path","condC2","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","skill_dmg_","thirdHit","secondHitBoost","thirdHitBoost","all_dmg_","aimed","aimedCharged","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","energyRegen","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","condA1Path","condA1","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_","nodeC6em","staminaDec_","moveSPD_","eleMas","heal_","fixed","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","unknown","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","cryo_enemyRes_","physical_enemyRes_","physical_dmg_","lightSwordAdditional","burst_dmg_","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","textSuffix","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","customHealNode","frostflake","frostflakeBloom","inheritedHp","critRateInc","cryoDmgBonus","opCryoRes","enerRegen","cryo_dmg_","naught","critRate_","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","min","critRateTeam_1","unequal","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_","c1Dmg","dmg2","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","plunging_dmg_","staminaSprintDec_","eleKey","c2p","swirl","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","condAfterBurstPath","condAfterBurst","afterBurst","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_","x","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","hydro_dmg_","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_dmg_","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","cooldown","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","heal","devotionShield","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","nBonus_","cBonus_","sBonus_","p","heal_ratio_","hp_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","normal_dmgInc","skill_dmgInc","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Condition","asc1","c6Base","c6Bonus","slice","fully","pressDmg","pressCD","holdDmg","holdCD","baseTicks","absorbDmg","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","base","absorb","staminaGlidingDec_","sectionTemplate","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","hpThresh","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","condSkillPath","condSkill","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","nodeC6","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","cdRed","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","uiData","canShowA4","normalEntries","kindlingEntries","dataObj","includes","shield_","triggerNum","normalInc","allElements","tally","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","objectKeyValueMap","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","burst_dmgInc","AratakiItto","Beidou","Bennett","Diluc","Diona","Eula","Fischl","Ganyu","HuTao","Jean","KaedeharaKazuha","KamisatoAyaka","Keqing","KujouSara","Mona","Ningguang","Noelle","RaidenShogun","SangonomiyaKokomi","Shenhe","Sucrose","Venti","Xiangling","Xiao","Xingqiu","YaeMiko","Yoimiya","YunJin","Zhongli","strKey","ns","key18","customStringRead","subKey","typeKey"],"sourceRoot":""}