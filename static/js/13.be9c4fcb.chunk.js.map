{"version":3,"sources":["Components/FieldDisplay.tsx","Components/CustomNumberInput.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/ThumbSide.tsx","Components/DocumentDisplay.tsx","Components/ExpandButton.tsx","Components/Character/LocationName.tsx","ReactHooks/useWeapon.tsx","Stat.tsx","Data/Characters/SheetUtil.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Formula/DisplayUtil.tsx","PageArtifact/RollProbability.ts","PageArtifact/PercentBadge.tsx","Components/TextButton.tsx","PageCharacter/StatInput.tsx","Components/Weapon/WeaponSelectionModal.tsx","PageArtifact/ArtifactCard.tsx","ReactHooks/useArtifact.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","Components/Artifact/SetEffectDisplay.tsx","Components/Character/StatDisplayComponent.tsx","Components/EnemyEditor.tsx","Components/HitModeEditor.tsx","PageWeapon/WeaponDisplayCard.tsx","Components/FormulaCalcCard.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx"],"names":["FieldDisplay","field","fieldContext","component","useContext","DataContext","data","oldData","useMemo","canShow","node","get","dataNode","target","isEmpty","oldNode","oldValue","value","NodeFieldDisplay","suffix","textSuffix","BasicFieldDisplay","v","evalIfFunc","variant","width","sx","display","justifyContent","color","text","toFixed","fixed","unit","fieldText","key","KeyMap","fieldFormulaText","formula","fieldVal","diff","valueString","formulaTextOverlay","placement","title","cursor","ml","icon","faQuestionCircle","StatIcon","FieldDisplayList","styled","List","theme","borderRadius","shape","overflow","margin","backgroundColor","palette","contentDark","main","contentDarker","StyledInputBase","InputBase","primary","transition","dark","Wrapper","Button","padding","height","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","onChange","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","onKeyDOwn","type","onKeyDown","BootstrapTooltip","className","arrow","classes","popper","tooltipClasses","common","black","tooltip","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","t","useTranslation","database","DatabaseContext","characterSheets","usePromise","CharacterSheet","getAll","characterSheet","characterKeys","_getCharKeys","ck","sort","name","startIcon","thumbImg","src","thumbImgSide","onClick","selected","noWrap","CharacterMenuItemArray","selectedCharacterKey","map","characterKey","ThumbSide","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","DocumentDisplay","sections","sectionsDisplay","section","i","talentText","fields","flexDirection","gap","length","ListItem","conditional","hideDesc","s","ExpandButton","expand","other","transform","transitions","create","duration","shortest","LocationName","location","nameWIthIcon","useWeapon","weaponID","_getWeapon","weapon","setWeapon","followWeapon","undefined","Stat","this","Error","printStat","statKey","stats","st","strKey","Translate","ns","key18","sgt","ConditionalSelector","conditionalValue","character","characterDispatch","setConditional","conditionalValues","deepClone","layeredAssignment","path","Object","keys","states","entries","stateKey","badge","SqBadge","fullWidth","size","CheckBox","CheckBoxOutlineBlank","state","DropdownButton","MenuItem","Divider","ConditionalDisplay","hideHeader","condVal","description","header","action","CardDark","CardHeader","avatar","titleTypographyProps","CardContent","Box","mb","m","errHeader","talentMap","normal","charged","plunging","skill","burst","passive","passive1","passive2","passive3","fromEntries","range","getDisplayHeader","sectionKey","a","includes","split","namespace","ArtifactSheet","sheet","defIconSrc","WeaponSheet","asc","input","img","imgAwaken","cKey","charKey","cEle","charEle","talentKey","talent","getTalentOfKey","actionText","getDisplaySections","getDisplay","basic","reaction","startsWith","artifact","rest","k","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","b","probability","_target","rarity","NaN","level","substats","required","Set","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","M","rolls","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","currentCount","sum","calculatePFillerRolls","values","PercentBadge","valid","clamp","floor","badgeColor","DisabledButton","secondary","TextButton","FlexButtonGroup","ButtonGroup","StatInput","placeholder","defaultValue","onValueChange","percent","onReset","restProps","whiteSpace","flexBasis","flexGrow","px","inputProps","textAlign","endAdornment","WeaponSelectionModal","show","onHide","onSelect","propWeaponFilter","weaponFilter","weaponSheets","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","open","onClose","py","container","item","weaponKey","weaponSheet","lg","md","Assets","weaponTypes","stars","colored","large","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","artifactID","_getArt","setArtifact","followArt","useArtifact","setKey","editable","localDatabase","art","id","lock","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","Typography","faInfoCircle","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","fallback","Skeleton","minHeight","CardLight","pt","pb","pr","alignItems","Chip","label","pl","IconButton","updateArt","Lock","LockOpen","Grid","flexWrap","maxWidth","mt","alignSelf","CardMedia","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","mr","opacity","my","CardActions","xs","flexShrink","setArtLocation","faEdit","Tooltip","faBan","faChartLine","faTrashAlt","BusinessCenter","Replay","ListItemIcon","WeaponCard","weaponId","canEquip","cs","weaponTypeKey","actionWrapperFunc","CardActionArea","equipOnChar","setWeaponLocation","UIData","computeUIData","dataObjForWeapon","ascension","refinement","sub","sub2","ConditionalWrapper","condition","wrapper","ImgIcon","fontSize","updateWeapon","ascensionMaxLevel","alignContent","displayVal","SetEffectDisplay","setEffectText","document","setEffectDocument","StatDisplayComponent","columns","sm","Nodes","Section","displayNs","displayNsReads","objectMap","nodeKey","customRead","every","EnemyExpandCard","expanded","setexpanded","toggle","eLvlNode","enemy","eDefRed","defRed","eDefIgn","defIgn","allElementsWithPhy","element","EnemyResText","p","in","timeout","unmountOnExit","EnemyEditor","content","isFinite","uncoloredEleIcons","bsProps","href","rel","bgcolor","contentLight","getStr","lvl","eleKey","elementImmunity","Number","MAX_VALUE","faCheckSquare","faSquare","infusionVals","pyro","cryo","InfusionAuraDropdown","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","exclusive","baseColor","hydro","HitModeToggle","hitMode","DamageOptionsCard","WeaponDisplayCard","propWeaponId","footer","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","ws","initialWeaponFilter","showModal","setshowModal","weaponUIData","startAdornment","ambiguousLevel","milestoneLevels","lv","as","lvlstr","SwapBtn","onChangeId","minWidth","process","getLevelString","passiveName","gutterBottom","passiveDescription","refineIndex","setShow","close","clickHandler","weapons","dbWeapon","FormulaCalcCard","ExpandMore","Collapse","CalculationDisplay","FormulaCalc","Accordion","AccordionSummary","expandIcon","AccordionDetails","formulas","subform","CharacterArtifactPane","newBuild","history","useHistory","edit","artid","pathname","artToEditId","artifactSheets","useForceUpdate","followAnyArt","equipArts","window","confirm","allSlotKeys","equipArtifacts","unequipArts","objectKeyMap","artIds","Card","warning","setNumKeyArr","CharacterTeamBuffsPane","TeamBuffDisplay","TeammateDisplay","statBreakpoint","teamBuffs","getTeamBuff","nodes","premod","columnSpacing","rowSpacing","objPathValue","dataContext","active","teamData","activeCharacterDispatch","activeCharacterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","PersonAdd","Provider","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","DisplaySectionsTeamCond","getTalent","sheets","sts","teamBuff","CharacterOverviewPane","constellation","tlvl","auto","tBoost","bonus","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","constellationName","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","mainEditKeys","otherStatReadNodes","ele","otherStatKeys","info","miscStatReadNodes","all_dmg_","normal_dmg_","normal_critRate_","charged_dmg_","charged_critRate_","plunging_dmg_","plunging_critRate_","skill_dmg_","skill_critRate_","burst_dmg_","burst_critRate_","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","rn","specialNode","special","StatDisplayCard","editContent","bonusStats","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","subtitle","enabled","style","onClickTitle","ReactionComponents","superconduct","electro","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","shattered","information","Ele","anemo","geo","talentLimits","actionWrapeprFunc","levelBoost","newTalentLevelKey","talentSheet","TabPanel","role","hidden","CharacterDisplayCard","newteamData","tabName","isFlex","useTeamData","charUIData","tab","settab","onTab","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","ToggleButton","CloseButton","Tabs","Tab","setCharacter","elementKey","CharacterSelectionModal","talents"],"mappings":"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","file":"static/js/13.be9c4fcb.chunk.js","sourcesContent":["import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, List, styled, Typography } from \"@mui/material\";\nimport React, { useContext, useMemo } from 'react';\nimport { DataContext, dataContextObj } from \"../DataContext\";\nimport { NodeDisplay, valueString } from \"../Formula/api\";\nimport KeyMap from \"../KeyMap\";\nimport { IBasicFieldDisplay, IFieldDisplay } from \"../Types/IFieldDisplay_WR\";\nimport { evalIfFunc } from \"../Util/Util\";\nimport BootstrapTooltip from \"./BootstrapTooltip\";\nimport ColorText from \"./ColoredText\";\nimport StatIcon from \"./StatIcon\";\nimport { data as dataNode } from '../Formula/utils'\nimport { Data } from \"../Formula/type\";\n\nexport default function FieldDisplay({ field, fieldContext, component }: { field: IFieldDisplay, fieldContext?: dataContextObj, component?: React.ElementType }) {\n  const { data, oldData } = useContext(DataContext)\n  const canShow = useMemo(() => field?.canShow?.(data) ?? true, [field, data])\n  if (!canShow) return null\n  if (\"node\" in field) {\n    // TODO: remove as Data\n    const node = fieldContext ? data.get(dataNode(field.node, { target: fieldContext.data.data[0] } as Data)) : data.get(field.node)\n    if (node.isEmpty) return null\n    if (oldData) {\n      const oldNode = fieldContext ? oldData.get(dataNode(field.node, { target: fieldContext.oldData!.data[0] } as Data)) : oldData.get(field.node)\n      const oldValue = oldNode.isEmpty ? 0 : oldNode.value\n      return <NodeFieldDisplay node={node} oldValue={oldValue} suffix={field.textSuffix} component={component} />\n    }\n    else return <NodeFieldDisplay node={node} suffix={field.textSuffix} component={component} />\n  }\n  return <BasicFieldDisplay field={field} component={component} />\n}\n\nfunction BasicFieldDisplay({ field, component }: { field: IBasicFieldDisplay, component?: React.ElementType }) {\n  const { data } = useContext(DataContext)\n  const v = evalIfFunc(field.value, data)\n  const variant = evalIfFunc(field.variant, data)\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\n    <ColorText color={variant}><b>{field.text}</b></ColorText>\n    <Typography >{typeof v === \"number\" ? v.toFixed?.(field.fixed) : v}{field.unit}</Typography>\n  </Box>\n}\n\nexport function NodeFieldDisplay({ node, oldValue, suffix, component }: { node: NodeDisplay, oldValue?: number, suffix?: Displayable, component?: React.ElementType }) {\n  if (node.isEmpty) return null\n\n  suffix = suffix && <span> {suffix}</span>\n  const fieldText = node.key ? KeyMap.get(node.key) : \"\"\n  const fieldFormulaText = node.formula\n  let fieldVal = \"\" as Displayable\n  if (oldValue) {\n    const diff = node.value - oldValue\n    fieldVal = <span>{valueString(oldValue, node.unit)}{diff ? <ColorText color={diff > 0 ? \"success\" : \"error\"}> {diff > 0 ? \"+\" : \"\"}{valueString(diff, node.unit)}</ColorText> : \"\"}</span>\n  } else fieldVal = valueString(node.value, node.unit)\n  const formulaTextOverlay = !!node.formula && <BootstrapTooltip placement=\"top\" title={<Typography>{fieldFormulaText}</Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\", ml: 1 }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\" }} component={component} >\n    <ColorText color={node.variant}>{node.key && (<span>{StatIcon[node.key]} </span>)}<b>{fieldText}</b>{suffix}{formulaTextOverlay}</ColorText>\n    <Typography >{fieldVal}</Typography>\n  </Box>\n}\n\nexport const FieldDisplayList = styled(List)(({ theme }) => ({\n  borderRadius: theme.shape.borderRadius,\n  overflow: \"hidden\",\n  margin: 0,\n  '> .MuiListItem-root:nth-of-type(even)': {\n    backgroundColor: theme.palette.contentDark.main\n  },\n  '> .MuiListItem-root:nth-of-type(odd)': {\n    backgroundColor: theme.palette.contentDarker.main\n  },\n}));\n","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\ntype props = Omit<InputProps, \"onChange\"> & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  transition: \"all 0.5s ease\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-focused\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}))\n\nconst Wrapper = styled(Button)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  padding: 0,\n  overflow: \"hidden\",\n  \"div\": {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}))\n\n// wrap the Input with this when using the input in a buttongroup\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\n}\n\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\n  const [number, setNumber] = useState(value)\n  const [focused, setFocus] = useState(false)\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\n  const onBlur = useCallback(\n    () => {\n      onChange(number)\n      setFocus(false)\n    },\n    [onChange, number, setFocus],\n  )\n  const onFocus = useCallback(\n    () => {\n      setFocus(true)\n    },\n    [setFocus],\n  )\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n  return <StyledInputBase\n    value={(focused && !number) ? \"\" : number}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={onInputChange}\n    onBlur={onBlur}\n    onFocus={onFocus}\n    disabled={disabled}\n    onKeyDown={onKeyDOwn}\n    {...props}\n  />\n}","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\n\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} arrow classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.arrow}`]: {\n    color: theme.palette.common.black,\n  },\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.common.black,\n  },\n}));\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { styled } from \"@mui/system\";\n\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\n  display: \"inline-block\",\n  width: \"auto\",\n  height: `2.3em`,\n  lineHeight: 1,\n  verticalAlign: \"text-bottom\",\n  marginTop: theme.spacing(-3),\n  marginLeft: theme.spacing(-1.25),\n  marginRight: theme.spacing(-1),\n  marginBottom: theme.spacing(-1),\n}))\n\nexport default ThumbSide","import { Box, ListItem } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { DocumentSection } from \"../Types/sheet\"\nimport { evalIfFunc } from \"../Util/Util\"\nimport ConditionalDisplay from \"./ConditionalDisplay\"\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\n\nexport default function DocumentDisplay({ sections }: { sections: DocumentSection[] }) {\n  const { data } = useContext(DataContext)\n  const sectionsDisplay = sections?.map((section, i) => {\n    if (section.canShow && !section.canShow(data)) return null\n    const talentText = evalIfFunc(section.text, data)\n    const fields = section.fields ?? []\n    return <Box key={\"section\" + i} display=\"flex\" flexDirection=\"column\" gap={1}>\n      {talentText && <div>{talentText}</div>}\n      {fields.length > 0 && <FieldDisplayList>\n        {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} component={ListItem} />)}\n      </FieldDisplayList>}\n      {!!section.conditional && <ConditionalDisplay conditional={section.conditional} hideDesc />}\n    </Box>\n  }).filter(s => s)\n  if (!sectionsDisplay.length) return null\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sectionsDisplay}</Box>\n}\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean;\n}\nconst ExpandButton = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props;\n  return <IconButton {...other} />;\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: (theme as any).transitions.create('transform', {\n    duration: (theme as any).transitions.duration.shortest,\n  }),\n}));\n\nexport default ExpandButton","import { BusinessCenter } from \"@mui/icons-material\";\nimport { Typography } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\n\nexport default function LocationName({ location }) {\n  const { t } = useTranslation(\"ui\");\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\n  return <Typography component=\"span\">\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\n  </Typography>\n\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useWeapon(weaponID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\n  useEffect(() =>\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\n    [weaponID, setWeapon, database])\n  return weapon\n}","/**\n * @deprecated\n */\nexport default class Stat {\n  //do not instantiate.\n  constructor() {\n    if (this instanceof Stat)\n      throw Error('A static class cannot be instantiated.');\n  }\n  static printStat = (statKey, stats, premod = false) => <></>\n}\n","import Assets from \"../../Assets/Assets\";\nimport { getTalentStatKey, getTalentStatKeyVariant } from \"../../PageBuild/Build\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport SqBadge from \"../../Components/SqBadge\";\nimport { Translate } from \"../../Components/Translate\";\nimport Stat from \"../../Stat\";\nimport { DocumentSection, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\nimport { ElementKey, WeaponTypeKey } from \"../../Types/consts\";\nimport IConditional from \"../../Types/IConditional\";\n/**\n * @deprecated\n */\nexport const st = (strKey: string) => <Translate ns=\"sheet\" key18={strKey} />\n/**\n * @deprecated\n */\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\n\n//this template only works if there is no variation in normal attacks.(no multi hits)\n/**\n * @deprecated\n */\nexport const normalDocSection = (tr, formula, data) => ({\n  text: tr(`auto.fields.normal`),\n  fields: data.normal.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"normal\", stats), stats)}</span>,\n    formula: formula.normal[i],\n    variant: stats => getTalentStatKeyVariant(\"normal\", stats),\n  }))\n})\n/**\n * @deprecated\n */\nexport const chargedDocSection = (tr, formula, data, stamina = 25): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [{\n    text: sgt(`charged.dmg`),\n    formulaText: stats => <span>{data.charged.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.dmg,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: stamina,\n  }]\n})\n/**\n * @deprecated\n */\nexport const chargedHitsDocSection = (tr, formula, data, stamina = 20): DocumentSection => ({\n  text: tr(`auto.fields.charged`),\n  fields: [...data.charged.hitArr.map((percentArr, i) =>\n  ({\n    text: sgt(`normal.hit${i + 1}`),\n    formulaText: stats => <span>{percentArr[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged[i],\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  })), {\n    text: sgt(\"charged.stamina\"),\n    value: stamina\n  }]\n})\n/**\n * @deprecated\n */\nexport const plungeDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr`auto.fields.plunging`,\n  fields: [{\n    text: sgt(`plunging.dmg`),\n    formulaText: stats => <span>{data.plunging.dmg[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.dmg,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.low\"),\n    formulaText: stats => <span>{data.plunging.low[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.low,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }, {\n    text: sgt(\"plunging.high\"),\n    formulaText: stats => <span>{data.plunging.high[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"plunging\", stats), stats)}</span>,\n    formula: formula.plunging.high,\n    variant: stats => getTalentStatKeyVariant(\"plunging\", stats),\n  }]\n})\n/**\n * @deprecated\n */\nexport const claymoreChargedDocSection = (tr, formula, data): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.spinning\"),\n    formulaText: stats => <span>{data.charged.spinning[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.spinning,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.final\"),\n    formulaText: stats => <span>{data.charged.final[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.final,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.stamina\"),\n    value: data.charged.stam ?? 40,\n    unit: \"/s\"\n  }, {\n    text: sgt(\"maxDuration\"),\n    value: data.charged.maxDuration ?? 5,\n    unit: \"s\"\n  }]\n})\n/**\n * @deprecated\n */\nexport const bowChargedDocSection = (tr, formula, data, elementKey: ElementKey): DocumentSection => ({\n  text: tr(\"auto.fields.charged\"),\n  fields: [{\n    text: sgt(\"charged.aimed\"),\n    formulaText: stats => <span>{data.charged.hit[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats), stats)}</span>,\n    formula: formula.charged.hit,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats),\n  }, {\n    text: sgt(\"charged.fullyAimed\"),\n    formulaText: stats => <span>{data.charged.full[stats.tlvl.auto]}% {Stat.printStat(getTalentStatKey(\"charged\", stats, elementKey), stats)}</span>,\n    formula: formula.charged.full,\n    variant: stats => getTalentStatKeyVariant(\"charged\", stats, elementKey),\n  }]\n})\ntype BoostKey = \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n/**\n * @deprecated\n */\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, boostKey?: BoostKey, boostAmt: number = 3): TalentSheetElement => ({\n  name: tr(`${talentKey}.name`),\n  img,\n  sections: [{\n    text: tr(`${talentKey}.description`),\n    ...(boostKey ? {\n      conditional: {\n        key: boostKey,\n        canShow: stats => stats.constellation >= parseInt(talentKey.split(\"constellation\")[1] ?? 3),\n        maxStack: 0,\n        stats: {\n          [boostKey]: boostAmt\n        }\n      }\n    } : {})\n  }],\n})\n\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\n  auto: \"Auto\",\n  skill: \"Skill\",\n  burst: \"Burst\",\n  passive: \"Passive\",\n  passive1: \"Ascension 1\",\n  passive2: \"Ascension 4\",\n  passive3: \"Passive\",\n  sprint: \"Sprint\",\n  constellation1: \"C1\",\n  constellation2: \"C2\",\n  constellation3: \"C3\",\n  constellation4: \"C4\",\n  constellation5: \"C5\",\n  constellation6: \"C6\"\n}\n/**\n * @deprecated\n */\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(`${talentKey}.name`),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\n  }\n}\n/**\n * @deprecated\n */\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\nimport { Button, Divider, MenuItem } from '@mui/material';\nimport React, { useCallback, useContext } from 'react';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport SqBadge from '../Components/SqBadge';\nimport { DataContext } from '../DataContext';\nimport IConditional from '../Types/IConditional_WR';\nimport { deepClone, layeredAssignment } from '../Util/Util';\n\nexport default function ConditionalSelector({ conditional, conditionalValue, disabled = false, }:\n  { conditional: IConditional, conditionalValue?: string, disabled?: boolean }) {\n  const { character, characterDispatch } = useContext(DataContext)\n  const setConditional = useCallback((v?: string) => {\n    const conditionalValues = deepClone(character.conditional)\n    layeredAssignment(conditionalValues, conditional.path, v)\n    characterDispatch({ conditional: conditionalValues })\n  }, [conditional, character, characterDispatch])\n\n  if (Object.keys(conditional.states).length === 1) {\n    const [stateKey, st] = Object.entries(conditional.states)[0]\n    const badge = st.name && <SqBadge color={\"success\"}>{st.name}</SqBadge>\n    return <Button fullWidth size=\"small\" onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\n      {conditional.name} {badge}\n    </Button>\n  } else {//complex conditional\n    const state = conditionalValue ? conditional.states[conditionalValue] : undefined\n    const badge = state?.name && <SqBadge color={state ? \"success\" : \"secondary\"}>{state ? state.name : \"Not Active\"}</SqBadge>\n    return <DropdownButton fullWidth size=\"small\" title={<span>{conditional.name} {badge}</span>} disabled={disabled}>\n      <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\n        <span>Not Active</span>\n      </MenuItem>\n      <Divider />\n      {Object.entries(conditional.states).map(([stateKey, st]) =>\n        <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\n    </DropdownButton>\n  }\n}\n","import { Box, CardContent, CardHeader, Divider, ListItem } from \"@mui/material\"\nimport { useContext } from \"react\"\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\nimport { DataContext, dataContextObj } from \"../DataContext\"\nimport IConditional from \"../Types/IConditional_WR\"\nimport { evalIfFunc } from \"../Util/Util\"\nimport CardDark from \"./Card/CardDark\"\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\nimport { data as dataNode } from '../Formula/utils'\nimport { Data } from \"../Formula/type\"\n\ntype ConditionalDisplayProps = {\n  conditional: IConditional,\n  hideHeader?: boolean,\n  hideDesc?: boolean,\n  fieldContext?: dataContextObj\n}\n\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false, fieldContext }: ConditionalDisplayProps) {\n  const dataContext = useContext(DataContext)\n  const { data } = dataContext\n  // TODO: as Data\n  const canShow = conditional.canShow ? !(fieldContext ? data.get(dataNode(conditional.canShow, { target: fieldContext.data.data[0] } as Data)).isEmpty : data.get(conditional.canShow).isEmpty) : true\n  if (!canShow) return null\n  const condVal = data.get(conditional.value).value\n\n  const description = !hideDesc && evalIfFunc(conditional.description, data)\n  let { icon, title, action } = conditional.header ?? {}\n  icon = evalIfFunc(icon, data)\n  const fields = condVal && conditional.states[condVal]?.fields\n\n  return <CardDark>\n    {!hideHeader && conditional.header && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\n    {!hideHeader && conditional.header && <Divider />}\n    {!!conditional.name && <CardContent>\n      {description && <Box mb={1}>{description}</Box>}\n      <ConditionalSelector\n        conditional={conditional}\n        conditionalValue={condVal} />\n    </CardContent>}\n    {fields &&\n      <FieldDisplayList sx={{ m: 0 }}>\n        {fields.map((field, i) => <FieldDisplay key={i} field={field} fieldContext={fieldContext} component={ListItem} />)}\n      </FieldDisplayList>\n    }\n  </CardDark>\n}\n","import { Typography } from \"@mui/material\";\nimport { input } from \".\";\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\nimport ColorText from \"../Components/ColoredText\";\nimport SqBadge from \"../Components/SqBadge\";\nimport { ArtifactSetKey, CharacterKey, ElementKey, WeaponKey } from \"../Types/consts\";\nimport { range } from \"../Util/Util\";\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\nimport { DisplaySub } from \"./type\";\nimport { NodeDisplay, UIData } from \"./uiData\";\n\nconst errHeader = {\n  title: <ColorText color=\"warning\">ERROR</ColorText>\n}\n\nconst talentMap = {\n  normal: \"Normal Atk.\",\n  charged: \"Charged Atk.\",\n  plunging: \"Plunging Atk.\",\n  skill: \"Ele. Skill\",\n  burst: \"Ele. Burst\",\n  passive: \"Passive\",\n  passive1: \"1st Asc. Pass.\",\n  passive2: \"4th Asc. Pass.\",\n  passive3: \"Util. Pass.\",\n  ...Object.fromEntries(range(1, 6).map(i => [`constellation${i}`, `Const. ${i}`]))\n}\nexport async function getDisplayHeader(data: UIData, sectionKey: string): Promise<{\n  title: Displayable,\n  icon?: string,\n  action?: Displayable\n}> {\n  if (!sectionKey) return errHeader\n  if (sectionKey === \"basic\") return { title: \"Basic Stats\" }\n  else if (sectionKey === \"reaction\") return { title: \"Transformative Reactions\" }\n  else if (sectionKey.includes(\":\")) {\n    const [namespace, key] = sectionKey.split(\":\")\n    if (namespace === \"artifact\") {\n      const sheet = await ArtifactSheet.get(key as ArtifactSetKey)\n      if (!sheet) return errHeader\n      return {\n        title: sheet.name,\n        icon: sheet.defIconSrc\n      }\n    } else if (namespace === \"weapon\") {\n      const sheet = await WeaponSheet.get(key as WeaponKey)\n      if (!sheet) return errHeader\n      const asc = data.get(input.weapon.asc).value\n      return {\n        title: sheet.name,\n        icon: asc < 2 ? sheet.img : sheet.imgAwaken\n      }\n    }\n  } else {\n    const cKey = data.get(input.charKey).value\n    const cEle = data.get(input.charEle).value\n    if (!cKey || !cEle) return errHeader\n    const sheet = await CharacterSheet.get(cKey as CharacterKey)\n    const talentKey = [\"normal\", \"charged\", \"plunging\"].includes(sectionKey) ? \"auto\" : sectionKey\n    const talent = sheet?.getTalentOfKey(talentKey as any, cEle as ElementKey)\n    if (!talent) return errHeader\n    const actionText = talentMap[sectionKey]\n    return {\n      icon: talent.img,\n      title: talent.name,\n      action: actionText ? <SqBadge ><Typography variant=\"subtitle2\">{actionText}</Typography></SqBadge> : undefined\n    }\n  }\n  return errHeader\n}\n/**\n * Use this function to reorganize the sections to have basic stats at the beginning, and reation at the end.\n * @param data\n * @returns\n */\nexport function getDisplaySections(data: UIData,): [string, DisplaySub<NodeDisplay>][] {\n  const display = data.getDisplay()\n  const sections = Object.entries(display)\n  const basic = sections.filter(([k]) => k === \"basic\")\n  const reaction = sections.filter(([k]) => k === \"reaction\")\n  const weapon = sections.filter(([k]) => k.startsWith(\"weapon\"))\n  const artifact = sections.filter(([k]) => k.startsWith(\"artifact\"))\n  const rest = sections.filter(([k]) => k !== \"basic\" && k !== \"reaction\" && !k.startsWith(\"weapon\") && !k.startsWith(\"artifact\"))\n\n  return [\n    ...basic,\n    ...rest,\n    ...weapon,\n    ...artifact,\n    ...reaction\n  ]\n}\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\nimport { crawlObject, layeredAssignment } from '../Util/Util'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\n\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\n// probability distribution and require separate consideration.\n\n// Notations for the remainder of this file.\n//\n// i, j, k := substat\n// E(i) := Extra substat that rolls into substat i\n// T(i) := Targetted (extra) substat for substat i\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\n// Nu(i) := # of upgrade rolls into substat i\n//\n// E := { E1, E2, ... }\n// T := { T1, T2, ... }\n// N(i) := Nf(i) + Nu(i)\n// Nf := Nf(1) + Nf(2) + ...\n// Nu := Nu(1) + Nu(2) + ...\n//\n// For example, if the artifact has 14 atk, and the target atk is 30,\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\n//\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\n\nconst allWeights = [3, 4, 6] as const\ntype Weight = typeof allWeights[number]\n\n/**\n * Weight used when rolling a filler roll. Each roll will choose from available\n * substats (excluding main stat and existing substats) with these weights.\n */\nconst fWeight: StrictDict<SubstatKey, Weight> = {\n  hp: 6, atk: 6, def: 6,\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\n  critRate_: 3, critDMG_: 3\n}\n\n/**\n * Probability of observing a filler sequence with particular weights\n *\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\n */\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\n  if (prefix.length === 5) {\n    layeredAssignment(pFillerSeq, prefix as any, current)\n    return\n  }\n\n  for (const i of allWeights)\n    if (prob[i] > 0)\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\n}\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\n\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\n\n/**\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\n *\n * 0 <= n <= 5; 0 <= r <= n\n */\nconst cnr = Array(6).fill(0).map((_, n) => {\n  const result = [1]\n  let r = 0, value = 1\n  while (++r <= n) {\n    value *= n - r + 1\n    value /= r\n    result.push(value)\n  }\n\n  return result\n})\n\n/**\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\n *\n * 0 <= n <= 5; 0 <= i < 3*n + 1\n */\nconst pNExtra = [[1]]\nwhile (pNExtra.length < 6) {\n  const last = pNExtra[pNExtra.length - 1]\n  const next = Array(last.length + 3).fill(0)\n  last.forEach((value, i) => {\n    for (const j of [0, 1, 2, 3]) {\n      next[i + j] += value\n    }\n  })\n\n  pNExtra.push(next.map(x => x / 4))\n}\nfor (const array of pNExtra) {\n  let accu = array.reduce((a, b) => a + b)\n  array.forEach((x, i, array) => {\n    array[i] = accu\n    accu -= x\n  })\n}\n\n/** Probability that `artifact` will have at least `target` stats at max level */\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\n\n  const { rarity, level, substats } = artifact\n\n  // `target = target - mainstat - substat` to find the extra substats we need\n  // Also count filler rolls (4 - # of substats) while we're at it\n  const target = { ..._target }, required = new Set(Object.keys(target))\n  let numFillerSlots = 0\n  {\n    const key = artifact.mainStatKey\n    if (key in target) {\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\n\n      delete target[key]\n      required.delete(key as SubstatKey)\n    }\n  }\n  for (const { key, value } of substats) {\n    if (key) {\n      if (required.has(key)) {\n        required.delete(key)\n        if (target[key]! > value)\n          target[key]! -= value\n        else delete target[key] // Requirement already met\n      }\n    } else numFillerSlots += 1\n  }\n  numFillerSlots += 4 - substats.length\n\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\n\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\n\n  // normalize `target`\n  for (const [key, value] of Object.entries(target))\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\n\n  let minTotalUpgrades = 0\n  const targetEntries = Object.entries(target).map(([key, target]) => {\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\n    minTotalUpgrades += minUpgrade\n    return { target, filler, minUpgrade }\n  }).reverse()\n\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\n\n  /**\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\n   *\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\n   *\n   * Then\n   *\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\n   *\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\n   *\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\n   *  g(0, N) = 1\n   *  g(0, n) = 0 for n != N\n   *\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\n   */\n\n  // At this point,\n  //  `target` = ceil(T / alpha)\n  //  `numUpgradeRolls` = Nu\n\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\n\n  // Keep applying `target` from first to last.\n  // At each step i in the loop, `result[n]` = g(i, n)\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\n    const next: typeof result = {}\n\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\n      // rolls = m; extra = T(i) / alpha - 7n\n\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\n      const extra = target - 7 * (rolls + filler)\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\n      //        = f(m + Nf(i), T(i))\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\n\n      for (const [_remaining, probability] of Object.entries(result)) {\n        const remaining = parseInt(_remaining)\n        if (remaining < rolls) continue\n\n        // n := remaining - m\n        // remaining = n + m\n        // probability = g(i, n + m)\n\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\n        //          = h(n + m, m, |K| - i)\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\n        const index = remaining - rolls // n\n\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\n      }\n    }\n    result = next\n  })\n\n  // At this point, `result[i]` = g(|K|, i)\n\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\n}\n\n/**\n * Pr[ N(k) = n | N = m, |K| = M ]\n *\n * 0 <= n <= N <= 5; 0 <= M <= 4\n */\nfunction pRollInto(m: number, n: number, M: number) {\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\n}\n\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\n\n  const mainStatRatio = fWeight[mainStat] ?? 0\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\n\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\n  for (const { key } of substats) {\n    if (key) {\n      const ratio = fWeight[key]\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\n      numUnusedSubstats[ratio] -= 1\n    }\n  }\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\n\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\n  for (const key of required) requiredCount[fWeight[key]] += 1\n\n  let total = 0\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\n    total += prob\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\n    for (const key of path) currentCount[key] += 1\n\n    let sum = prob\n    for (const i of allWeights) {\n      const current = currentCount[i], required = requiredCount[i]\n      if (current < required) return\n      sum *= cnr[current][required]\n    }\n\n    pFillerRolls += sum\n  })\n\n  for (const i of allWeights)\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\n  return pFillerRolls / total\n}\n\nexport { probability }\n","import SqBadge from '../Components/SqBadge';\nimport { clamp } from '../Util/Util';\n\nexport default function PercentBadge({ value, valid }: Data) {\n  let [badgeColor, text] = typeof value === 'number' ?\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\n  if (!valid) badgeColor = \"error\"\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\n}\n\ntype Data = {\n  valid: boolean,\n  value: number | string,\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\nimport { ReactNode } from \"react\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport TextButton from \"../Components/TextButton\"\n\ntype StatInputInput = ButtonGroupProps & {\n  name: Displayable,\n  children?: ReactNode,\n  value: number,\n  placeholder?: string,\n  defaultValue?: number,\n  onValueChange: (newValue: number | undefined) => void,\n  percent?: boolean,\n  disabled?: boolean,\n  onReset?: () => void\n}\nconst FlexButtonGroup = styled(ButtonGroup)({\n  display: \"flex\"\n})\n\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\n\n  return <FlexButtonGroup {...restProps} >\n    {children}\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\n      {name}\n    </TextButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n      <CustomNumberInput\n        sx={{ px: 1 }}\n        inputProps={{\n          sx: { textAlign: \"right\" }\n        }}\n        float={percent}\n        placeholder={placeholder}\n        value={value}\n        onChange={onValueChange}\n        disabled={disabled}\n        endAdornment={percent ? \"%\" : undefined}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\n      <Replay />\n    </Button>\n  </FlexButtonGroup>\n}\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useEffect, useState } from \"react\"\nimport Assets from \"../../Assets/Assets\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\nimport CardDark from \"../Card/CardDark\"\nimport CardLight from \"../Card/CardLight\"\nimport CloseButton from \"../CloseButton\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport ModalWrapper from \"../ModalWrapper\"\nimport { Stars } from \"../StarDisplay\"\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\n\ntype WeaponSelectionModalProps = {\n  show: boolean,\n  onHide: () => void,\n  onSelect: (wKey: WeaponKey) => void,\n  filter?: (sheet: WeaponSheet) => boolean,\n  weaponFilter?: WeaponTypeKey,\n}\n\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\n\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\n\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\n    .filter(wKey => {\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\n      return true\n    })\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\n\n  if (!weaponSheets) return null\n\n  return <ModalWrapper open={show} onClose={onHide}>\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\n          </Grid >\n          <Grid item>\n            <CloseButton onClick={onHide} />\n          </Grid >\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent><Grid container spacing={1}>\n        {weaponIdList.map(weaponKey => {\n          const weaponSheet = weaponSheets[weaponKey]\n          return <Grid item key={weaponKey} lg={3} md={4}>\n            <CardLight sx={{ height: \"100%\" }} >\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\n                <Box sx={{ flexGrow: 1, px: 1 }}>\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\n                </Box>\n              </CardActionArea>\n            </CardLight>\n          </Grid>\n        })}\n      </Grid></CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={onHide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Lock, LockOpen } from '@mui/icons-material';\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\nimport React, { Suspense, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\nimport CardLight from '../Components/Card/CardLight';\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\nimport LocationName from '../Components/Character/LocationName';\nimport ColorText from '../Components/ColoredText';\nimport SqBadge from '../Components/SqBadge';\nimport { Stars } from '../Components/StarDisplay';\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\nimport useArtifact from '../ReactHooks/useArtifact';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\nimport { CharacterKey } from '../Types/consts';\nimport { valueStringWithUnit } from '../Util/UIUtil';\nimport { clamp } from '../Util/Util';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\nimport PercentBadge from './PercentBadge';\nimport { probability } from './RollProbability';\nimport KeyMap from '../KeyMap';\n\ntype Data = {\n  artifactId?: string,\n  artifactObj?: ICachedArtifact,\n  onEdit?: (string) => void,\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\n  effFilter?: Set<SubstatKey>,\n  probabilityFilter?: Dict<SubstatKey, number>\n}\nconst allSubstatFilter = new Set(allSubstats)\n\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\n  const { t } = useTranslation([\"artifact\"]);\n  const database = useContext(DatabaseContext)\n  const databaseArtifact = useArtifact(artifactId)\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\n\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\n  const art = artifactObj ?? databaseArtifact\n  if (!art) return null\n\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}</ColorText>\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\n  const artifactValid = maxEfficiency !== 0\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\n  const slotDesc = sheet?.getSlotDesc(slotKey)\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n  const setEffects = sheet?.setEffects\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\n    <span>\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\n      </span>)}\n    </span>\n  }>\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\n  </BootstrapTooltip>\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\n            {lock ? <Lock /> : <LockOpen />}\n          </IconButton>\n        </Box>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item flexGrow={1}>\n            <Typography color=\"text.secondary\" variant=\"body2\">\n              <SlotNameWithIcon slotKey={slotKey} />\n            </Typography>\n            <Typography variant=\"h6\">\n              {KeyMap.get(mainStatKey)}\n            </Typography>\n            <Typography variant=\"h5\">\n              <strong>{mainStatVal}</strong>\n            </Typography>\n            <Stars stars={rarity} colored />\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\n          </Grid>\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\n            <CardMedia\n              component=\"img\"\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\n              width=\"100%\"\n              height=\"auto\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\n        {substats.map((stat: ICachedSubstat, i) => {\n          if (!stat.value) return null\n          const numRolls = stat.rolls?.length ?? 0\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\n          const efficiency = stat.efficiency ?? 0\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\n          const statName = KeyMap.get(stat.key)\n          return (<Box key={i} sx={{ display: \"flex\" }}>\n            <Box sx={{ flexGrow: 1 }}>\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, KeyMap.unit(stat.key))}`}</Typography>\n            </Box>\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\n          </Box>)\n        })}\n        <Box sx={{ display: \"flex\", my: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\n        </Box>\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\n        </Box>}\n        <Box flexGrow={1} />\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\n      </CardContent>\n      <CardActions>\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item xs=\"auto\" flexShrink={1}>\n            {editable ?\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\n          </Grid>\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\n          {editable && <Grid item xs=\"auto\">\n            <ButtonGroup sx={{ height: \"100%\" }}>\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n              </Button>}\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\n                </Button>\n              </Tooltip>\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n              </Button>}\n            </ButtonGroup>\n          </Grid>}\n        </Grid>\n      </CardActions>\n    </CardLight >\n  </Suspense>\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { DatabaseContext } from \"../Database/Database\";\n\nexport default function useArtifact(artifactID: string | undefined = \"\") {\n  const database = useContext(DatabaseContext)\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\n  useEffect(() =>\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\n    [artifactID, setArtifact, database])\n  return artifact\n}","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Lock, LockOpen } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\nimport LocationName from \"../Components/Character/LocationName\"\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport StatIcon from \"../Components/StatIcon\"\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, valueString, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport KeyMap from \"../KeyMap\"\nimport { CharacterKey } from \"../Types/consts\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\n\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\n  const database = useContext(DatabaseContext)\n  const databaseWeapon = useWeapon(weaponId)\n  const weapon = databaseWeapon\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\n\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n\n  const actionWrapperFunc = useCallback(\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\n    [onClick, weaponId],\n  )\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\n\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n\n  if (!weapon || !weaponSheet || !UIData) return null;\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\n        <div className={`grad-${weaponSheet.rarity}star`} >\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\n              {lock ? <Lock /> : <LockOpen />}\n            </IconButton>} />\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\n            <Grid item flexGrow={1}>\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\n            </Grid>\n            {/* use flex-end here to align the image to the bottom. */}\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\n            </Grid>\n          </Grid>\n        </div>\n        <CardContent>\n          {stats.map(node => {\n            if (!node.key) return null\n            const displayVal = valueString(node.value, node.unit, node.unit === \"flat\" ? 0 : undefined)\n            return <Box key={node.key} sx={{ display: \"flex\" }}>\n              <Typography flexGrow={1}>{StatIcon[node.key]} {KeyMap.get(node.key)}</Typography>\n              <Typography>{displayVal}</Typography>\n            </Box>\n          })}\n        </CardContent>\n        {/* grow to fill the 100% heigh */}\n        <Box flexGrow={1} />\n        <CardContent sx={{ py: 1 }}>\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\n            <Grid item xs=\"auto\" flexShrink={1}>\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\n            </Grid>\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\n            <Grid item xs=\"auto\">\n              <ButtonGroup sx={{ height: \"100%\" }}>\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\n                </Button>}\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\n                </Button>}\n              </ButtonGroup>\n            </Grid>\n          </Grid>\n        </CardContent>\n\n      </CardLight>\n    </ConditionalWrapper>\n  </Suspense>\n}\n","import { Box, CardContent, Typography } from \"@mui/material\"\nimport CardDark from \"../Card/CardDark\"\nimport DocumentDisplay from \"../DocumentDisplay\"\nimport SqBadge from \"../SqBadge\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\n\ntype Data = {\n  setKey: ArtifactSetKey,\n  setNumKey: SetNum\n}\n\nexport default function SetEffectDisplay({ setKey, setNumKey }: Data) {\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\n  if (!sheet) return null\n\n  const setEffectText = sheet.setEffectDesc(setNumKey)\n  const document = sheet.setEffectDocument(setNumKey)\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n    <CardDark>\n      <CardContent>\n        <Typography><SqBadge color=\"success\">{setNumKey}-Set</SqBadge> {setEffectText}</Typography>\n      </CardContent>\n    </CardDark>\n    {document ? <DocumentDisplay sections={document} /> : null}\n  </Box>\n}\n","import { Masonry } from \"@mui/lab\"\nimport { CardContent, CardHeader, Divider } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { useContext, useMemo } from \"react\"\nimport CardDark from \"../Card/CardDark\"\nimport { NodeFieldDisplay } from \"../FieldDisplay\"\nimport ImgIcon from \"../Image/ImgIcon\"\nimport { DataContext } from \"../../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../../Formula/type\"\nimport { NodeDisplay } from \"../../Formula/uiData\"\nimport { customRead } from \"../../Formula/utils\"\nimport usePromise from \"../../ReactHooks/usePromise\"\nimport { objectMap } from \"../../Util/Util\"\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Box sx={{ mr: -1, mb: -1 }}>\n    <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\n      {sections.map(([key, Nodes]) =>\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Masonry >\n  </Box>\n}\n\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data, oldData } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\n  // TODO: Should still show the section if `oldData` contains some non-empty entries\n  if (!header || Object.values(displayNs).every(x => x.isEmpty)) return null\n  const { title, icon, action } = header\n  return <CardDark >\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([nodeKey, n]) => <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} />)}\n    </CardContent>\n  </CardDark>\n}\n","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { ExpandMore } from \"@mui/icons-material\";\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\nimport { useCallback, useContext, useState } from 'react';\nimport StatInput from \"../PageCharacter/StatInput\";\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport { valueString } from \"../Formula/uiData\";\nimport KeyMap from '../KeyMap';\nimport { allElementsWithPhy, ElementKeyWithPhy } from \"../Types/consts\";\nimport CardLight from \"./Card/CardLight\";\nimport ColorText from \"./ColoredText\";\nimport ExpandButton from \"./ExpandButton\";\nimport { uncoloredEleIcons } from \"./StatIcon\";\n\nexport function EnemyExpandCard() {\n  const { data } = useContext(DataContext)\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1} alignItems=\"center\">\n          <Grid container spacing={1}>\n            <Grid item>\n              <Chip size=\"small\" color=\"success\" label={<span>{KeyMap.get(eLvlNode.key)} <strong>{eLvlNode.value}</strong></span>} />\n            </Grid>\n            {allElementsWithPhy.map(element => <Grid item key={element}>\n              <Typography key={element} ><EnemyResText element={element} /></Typography>\n            </Grid>)}\n            <Grid item>\n              <Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography>\n            </Grid>\n            <Grid item>\n              <Typography>DEF Ignore {valueString(eDefIgn.value, eDefIgn.unit)}</Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n            size=\"small\"\n            sx={{ p: 0 }}\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <EnemyEditor />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\n  const { data } = useContext(DataContext)\n  const node = data.get(input.enemy[`${element}_res_`])\n  const immune = !isFinite(node.value)\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\n    <span >{uncoloredEleIcons[element]}RES <strong>{valueString(node.value, node.unit)}</strong></span>\n  return <ColorText color={element}>{content}</ColorText>\n}\n\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\n  const { data, characterDispatch } = useContext(DataContext)\n  const defaultVal = 10\n\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  return <Grid container spacing={1}>\n    <Grid item {...bsProps}>\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\n        To get the specific resistance values of enemies, please visit the wiki.\n      </Button>\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eLvlNode.key)}</b>}\n        value={eLvlNode.value}\n        placeholder={KeyMap.getStr(eLvlNode.key)}\n        defaultValue={data.get(input.lvl).value}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\n      />\n    </Grid>\n    {allElementsWithPhy.map(eleKey => {\n      const statKey = `${eleKey}_enemyRes_`\n      const node = data.get(input.enemy[`${eleKey}_res_`])\n      const elementImmunity = !isFinite(node.value)\n      return <Grid item key={eleKey} {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n          name={<b>{KeyMap.get(node.key)}</b>}\n          value={node.value * 100}\n          placeholder={KeyMap.getStr(node.key)}\n          defaultValue={defaultVal}\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\n          disabled={elementImmunity}\n          percent\n        >\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} >\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\n          </Button>\n        </StatInput>\n      </Grid>\n    })}\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eDefRed.key)}</b>}\n        value={eDefRed.value}\n        placeholder={KeyMap.getStr(eDefRed.key)}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item {...bsProps}>\n      <StatInput\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\n        name={<b>{KeyMap.get(eDefIgn.key)}</b>}\n        value={eDefIgn.value}\n        placeholder={KeyMap.getStr(eDefIgn.key)}\n        defaultValue={0}\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\n        percent\n      />\n    </Grid>\n    <Grid item xs={12}>\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\n    </Grid>\n  </Grid>\n}\n","import { CardContent, Grid, MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\nimport { useContext } from 'react';\nimport { DataContext } from \"../DataContext\";\nimport { uiInput as input } from \"../Formula\";\nimport { ElementKey } from \"../Types/consts\";\nimport CardLight from \"./Card/CardLight\";\nimport ColorText from \"./ColoredText\";\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\nimport StatIcon, { uncoloredEleIcons } from \"./StatIcon\";\nconst infusionVals = {\n  \"\": <span>No External Infusion</span>,\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\n}\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\">\nexport function InfusionAuraDropdown(props: InfusionAuraDropdownProps) {\n  const { characterSheet, character: { infusionAura }, characterDispatch } = useContext(DataContext)\n  if (!characterSheet?.isMelee()) return null\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} {...props}>\n    {Object.entries(infusionVals).map(([key, text]) =>\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\n        selected={key === infusionAura} disabled={key === infusionAura}\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\n  </DropdownButton>\n}\n\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nexport function ReactionToggle(props: ReactionToggleProps) {\n  const { data, character: { reactionMode, infusionAura }, characterDispatch } = useContext(DataContext)\n  const charEleKey = data.get(input.charEle).value as ElementKey\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={reactionMode} onChange={(e, reactionMode) => characterDispatch({ reactionMode })} {...props}>\n    <ToggleButton value=\"\" >No Reactions</ToggleButton >\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value=\"pyro_vaporize\"  >\n      <ColorText color=\"vaporize\">Vaporize(Pyro){StatIcon.hydro}+{StatIcon.pyro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"}  >\n      <ColorText color=\"melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"}  >\n      <ColorText color=\"vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</ColorText>\n    </ToggleButton >}\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"}  >\n      <ColorText color=\"melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</ColorText>\n    </ToggleButton >}\n  </SolidToggleButtonGroup>\n}\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\">\nexport function HitModeToggle(props: HitModeToggleProps) {\n  const { character: { hitMode }, characterDispatch } = useContext(DataContext)\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\n    value={hitMode} onChange={(e, hitMode) => characterDispatch({ hitMode })} {...props} >\n    <ToggleButton value=\"avgHit\">Avg. DMG</ToggleButton>\n    <ToggleButton value=\"hit\">Non Crit DMG</ToggleButton>\n    <ToggleButton value=\"critHit\">Crit Hit DMG</ToggleButton>\n  </SolidToggleButtonGroup>\n}\n\n\nexport function DamageOptionsCard() {\n  return <CardLight>\n    <CardContent>\n      <Grid container spacing={1}>\n        <Grid item><HitModeToggle size=\"small\" /></Grid>\n        <Grid item><InfusionAuraDropdown /></Grid>\n        <Grid item><ReactionToggle size=\"small\" /></Grid>\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\nimport { useCallback, useContext, useMemo, useState } from \"react\"\nimport Assets from \"../Assets/Assets\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\nimport CloseButton from \"../Components/CloseButton\"\nimport ColorText from \"../Components/ColoredText\"\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\nimport ImgIcon from \"../Components/Image/ImgIcon\"\nimport ModalWrapper from \"../Components/ModalWrapper\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\nimport { uiInput as input } from \"../Formula\"\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport useWeapon from \"../ReactHooks/useWeapon\"\nimport { CharacterKey } from \"../Types/consts\"\nimport { ICachedWeapon } from \"../Types/weapon\"\nimport { clamp } from \"../Util/Util\"\nimport WeaponCard from \"./WeaponCard\"\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\nimport { DataContext } from \"../DataContext\"\n\ntype WeaponStatsEditorCardProps = {\n  weaponId: string\n  footer?: boolean\n  onClose?: () => void\n}\nexport default function WeaponDisplayCard({\n  weaponId: propWeaponId,\n  footer = false,\n  onClose\n}: WeaponStatsEditorCardProps) {\n  const { data } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const weapon = useWeapon(propWeaponId)\n  const { key = \"\", level, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\n  const weaponTypeKey = weaponSheet?.weaponType\n\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\n    database.updateWeapon(newWeapon, propWeaponId)\n  }, [propWeaponId, database])\n\n  const setLevel = useCallback(level => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    weaponDispatch({ level, ascension })\n  }, [weaponDispatch])\n\n  const setAscension = useCallback(() => {\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\n    else weaponDispatch({ ascension: lowerAscension })\n  }, [weaponDispatch, ascension, level])\n\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\n\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\n  const filter = useCallback(\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\n    [weaponSheet],\n  )\n  const [showModal, setshowModal] = useState(false)\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\n\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Grid container spacing={1}>\n        <Grid item flexGrow={1}>\n          <Grid container spacing={1}>\n            <Grid item >\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\n              <ButtonGroup>\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\n                <DropdownButton title={`Refinement ${refinement}`}>\n                  <MenuItem>Select Weapon Refinement</MenuItem>\n                  <Divider />\n                  {[...Array(5).keys()].map(key =>\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\n                      {`Refinement ${key + 1}`}\n                    </MenuItem>)}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item >\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\n                <CustomNumberInputButtonGroupWrapper >\n                  <CustomNumberInput onChange={setLevel} value={level}\n                    startAdornment=\"Lvl. \"\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n                  />\n                </CustomNumberInputButtonGroupWrapper>\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n                <DropdownButton title={\"Select Level\"} >\n                  {milestoneLevels.map(([lv, as]) => {\n                    const sameLevel = lv === ascensionMaxLevel[as]\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n                    const selected = lv === level && as === ascension\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n                  })}\n                </DropdownButton>\n              </ButtonGroup>\n            </Grid>\n            <Grid item>\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\n                {lock ? \"Locked\" : \"Unlocked\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n        {!!onClose && <Grid item  >\n          <CloseButton onClick={onClose} />\n        </Grid>}\n        {database === localDatabase && <Grid item >\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\n        </Grid>}\n      </Grid>\n    </CardContent>\n    <Divider />\n    <CardContent >\n      {weaponSheet && weaponUIData && <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\n        <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\n          <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\n          <Typography><small>{weaponSheet.description}</small></Typography>\n        </Box>\n        <Box sx={{ mb: -1 }} flexGrow={1} >\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n            <CardDark >\n              <CardContent>\n                <Typography>Main Stats</Typography>\n              </CardContent>\n              <FieldDisplayList>\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return <NodeFieldDisplay key={n.key} node={n} component={ListItem} />\n                })}\n              </FieldDisplayList>\n            </CardDark>\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\n          </Box>\n        </Box>\n      </Box>}\n    </CardContent>\n    {footer && id && <CardContent sx={{ py: 1 }}>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\n        </Grid>\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\n      </Grid>\n    </CardContent>}\n  </CardLight>\n}\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\n  const database = useContext(DatabaseContext)\n  const [show, setShow] = useState(false)\n  const open = () => setShow(true)\n  const close = () => setShow(false)\n\n  const clickHandler = (id) => {\n    onChangeId(id)\n    close()\n  }\n\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\n\n  const weaponIdList = database.weapons.keys.filter(wKey => {\n    const dbWeapon = database._getWeapon(wKey)\n    if (!dbWeapon) return false\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\n    return true\n  })\n\n\n  return <>\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\n    <ModalWrapper open={show} onClose={close} >\n      <CardDark>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={close} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Grid container spacing={1}>\n            {weaponIdList.map(weaponId =>\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  </>\n}\n","import { ExpandMore } from \"@mui/icons-material\"\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, CardHeader, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useCallback, useContext, useState } from \"react\"\nimport { DataContext } from \"../DataContext\"\nimport { getDisplayHeader, getDisplaySections } from \"../Formula/DisplayUtil\"\nimport { DisplaySub } from \"../Formula/type\"\nimport { NodeDisplay, valueString } from \"../Formula/uiData\"\nimport KeyMap from \"../KeyMap\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport CardDark from \"./Card/CardDark\"\nimport CardLight from \"./Card/CardLight\"\nimport ColorText from \"./ColoredText\"\nimport ExpandButton from \"./ExpandButton\"\nimport ImgIcon from \"./Image/ImgIcon\"\n\nexport default function FormulaCalcCard() {\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\n  return <CardLight>\n    <CardContent>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <Typography>Formulas {\"&\"} Calculations</Typography>\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\n        </Grid>\n        <Grid item>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Grid>\n      </Grid>\n    </CardContent>\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n      <CardContent sx={{ pt: 0 }}>\n        <CalculationDisplay />\n      </CardContent>\n    </Collapse>\n  </CardLight>\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = getDisplaySections(data)\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\n    <Box sx={{ mr: -1, mb: -1 }}>\n      {sections.map(([key, Nodes]) =>\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\n    </Box>\n  </Suspense>\n}\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\n  const { data } = useContext(DataContext)\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\n  if (!header) return null\n  const { title, icon, action } = header\n  return <CardDark sx={{ mb: 1 }}>\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\n    <Divider />\n    <CardContent>\n      {Object.entries(displayNs).map(([key, node]) =>\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\n          <AccordionSummary expandIcon={<ExpandMore />}>\n            <Typography><ColorText color={node.variant}>{KeyMap.get(node.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\n          </AccordionDetails>\n        </Accordion>)}\n    </CardContent>\n  </CardDark>\n}\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\nimport CardLight from '../../Components/Card/CardLight';\nimport ImgIcon from '../../Components/Image/ImgIcon';\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from '../../Formula';\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\nimport { objectKeyMap } from '../../Util/Util';\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\n\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\n  const { data, character, mainStatAssumptionLevel } = useContext(DataContext)\n\n  const database = useContext(DatabaseContext)\n  const history = useHistory()\n  const edit = useCallback(\n    artid => history.push({\n      pathname: \"/artifact\",\n      artToEditId: artid\n    } as any), [history])\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  // TODO: We can also listen only to equipped artifacts\n  const [, updateArt] = useForceUpdate()\n  useEffect(() => database.followAnyArt(updateArt))\n\n  const equipArts = useCallback(() => {\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\n    database.equipArtifacts(character.key, newBuild)\n  }, [character, data, database])\n\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\n  }, [character, database])\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\n  return <>\n    <CardLight sx={{ mb: 1 }}>\n      <CardContent>\n        <StatDisplayComponent />\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\n          </Grid>\n          <Grid item flexGrow={1}></Grid>\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\n        </Grid>\n      </CardContent>\n    </CardLight>\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\n            <Divider />\n            <CardContent >\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={1}>\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n        )}\n      </Grid>\n      {artIds.map(id => !!id && <Grid item xs={6} md={4} key={id} >\n        <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(id)} />\n      </Grid>)}\n    </Grid>\n  </>\n}\nexport default CharacterArtifactPane\n","import { PersonAdd } from \"@mui/icons-material\";\nimport { CardContent, Divider, Grid } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React, { useContext, useMemo } from 'react';\nimport CardLight from \"../../Components/Card/CardLight\";\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport resonanceSheets from \"../../Conditional/Resonance\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport { DataContext, dataContextObj } from \"../../DataContext\";\nimport { uiInput as input } from \"../../Formula\";\nimport { NodeDisplay } from \"../../Formula/uiData\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ElementKey } from \"../../Types/consts\";\nimport { DocumentSection } from \"../../Types/sheet\";\nimport { objPathValue, range } from \"../../Util/Util\";\nimport CharacterCard from \"../CharacterCard\";\n\nexport default function CharacterTeamBuffsPane() {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n    <TeamBuffDisplay />\n    {/* <ResonanceDisplay characterKey={characterKey} build={build} /> */}\n    <Grid container spacing={1}>\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\n        <TeammateDisplay index={i} />\n      </Grid>)}\n    </Grid>\n  </Box>\n}\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) => nodes.push([[\"total\", key], node]))\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) => nodes.push([[\"premod\", key], node]))\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) => nodes.push([[\"enemy\", key], node]))\n  if (!nodes.length) return null\n  return <CardLight>\n    <CardContent>\n      Team Buffs\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container columnSpacing={2} rowSpacing={1}>\n        {nodes.map(([path, n], i) => n && !n.isEmpty && <Grid item {...statBreakpoint} key={n.key} >\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\n        </Grid>)}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction ResonanceDisplay() {\n  const { data, characterDispatch } = useContext(DataContext)\n  return <CardLight>\n    <CardContent>\n      Team Resonance\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container spacing={1}>\n        {/* {resonanceSheets.map((doc, i) =>\n          <Grid item key={i} xs={12} md={6} lg={4} >\n            <CardDark sx={{ opacity: doc.canShow(build) ? 1 : 0.5, height: \"100%\" }}>\n              <CardHeader avatar={doc?.header?.icon} title={doc?.header?.title} action={doc?.header?.action} titleTypographyProps={{ variant: \"subtitle2\" }} />\n              <Divider />\n              <CardContent>\n                {doc.description}\n              </CardContent>\n              {doc.conditionals.map(cond =>\n                <ConditionalDisplay key={cond.key} conditional={cond} stats={build} onChange={val => characterDispatch({ conditionalValues: val })} />\n              )}\n            </CardDark>\n          </Grid>\n        )} */}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const dataContext = useContext(DataContext)\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\n  const activeCharacterKey = active.key\n  const characterKey = active.team[index]\n  const characterDispatch = useCharacterReducer(characterKey)\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\n  const onClickHandler = useCharSelectionCallback()\n\n  const dataBundle = teamData[characterKey]\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\n    character: dataBundle.character,\n    characterSheet: dataBundle.characterSheet,\n    data: dataBundle.target,\n    teamData: teamData,\n    mainStatAssumptionLevel: 0,\n    characterDispatch\n  }\n  return <CardLight>\n    <CardContent>\n      <CharacterDropdownButton fullWidth value={characterKey}\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\n    </CardContent>\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\n      <CharacterCard characterKey={characterKey}\n        onClickHeader={onClickHandler}\n        artifactChildren={<CharArtifactCondDisplay dataContext={dataContext} />}\n        weaponChildren={<CharWeaponCondDisplay dataContext={dataContext} />}\n        characterChildren={<CharTalentCondDisplay dataContext={dataContext} />}\n      />\n    </DataContext.Provider>}\n  </CardLight>\n\n}\nfunction CharArtifactCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, } = useContext(DataContext)\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sections = useMemo(() => artifactSheets &&\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\n      .flatMap(([setKey, setNums]) =>\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\n    , [artifactSheets, data])\n  if (!sections) return null\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\nfunction CharWeaponCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n\n  return <DisplaySectionsTeamCond sections={weaponSheet.document} dataContext={dataContext} />\n}\nfunction CharTalentCondDisplay({ dataContext }: { dataContext: dataContextObj }) {\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\n  return <DisplaySectionsTeamCond sections={sections} dataContext={dataContext} />\n}\n\nfunction DisplaySectionsTeamCond({ sections, dataContext }: { sections: DocumentSection[], dataContext: dataContextObj }) {\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} pt={0} >\n    {sections.map(section => section.conditional?.teamBuff && <ConditionalDisplay conditional={section.conditional} fieldContext={dataContext} />)}\n  </Box >\n}\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\nimport React, { useContext, useState } from \"react\";\nimport Assets from \"../../Assets/Assets\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\nimport { Stars } from \"../../Components/StarDisplay\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport { DataContext } from \"../../DataContext\";\nimport { valueString } from \"../../Formula/api\";\nimport { uiInput as input } from \"../../Formula\";\nimport { ReadNode } from \"../../Formula/type\";\nimport KeyMap from \"../../KeyMap\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { amplifyingReactions, transformativeReactions } from \"../../StatConstants\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport StatInput from \"../StatInput\";\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\nimport { range } from \"../../Util/Util\";\nexport default function CharacterOverviewPane() {\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const charEle = data.get(input.charEle).value as ElementKey\n  const weaponTypeKey = characterSheet.weaponTypeKey\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.bonus.auto).value,\n    skill: data.get(input.bonus.skill).value,\n    burst: data.get(input.bonus.burst).value,\n  }\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={3}  >\n      {/* Image card with star and name and level */}\n      <CardLight >\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\n        <CardContent>\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\n          <Grid container spacing={1} mt={1}>\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\n              <Grid item xs={4} key={tKey}>\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\n                  overlap=\"circular\"\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right',\n                  }}\n                  sx={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    \"& > .MuiBadge-badge\": {\n                      fontSize: \"1.25em\",\n                      padding: \".25em .4em\",\n                      borderRadius: \".5em\",\n                      lineHeight: 1,\n                      height: \"1.25em\"\n                    }\n                  }}>\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\n                </Badge>\n              </Grid>)}\n          </Grid>\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\n          <Grid container spacing={1}>\n            {range(1, 6).map(i =>\n              <Grid item xs={4} key={i}>\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey, charEle)?.img}\n                  sx={{\n                    cursor: \"pointer\",\n                    ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\n                  }}\n                  width=\"100%\" height=\"auto\"\n                  onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })} />\n              </Grid>)}\n          </Grid>\n        </CardContent>\n      </CardLight>\n    </Grid>\n    <Grid item xs={12} md={9} sx={{\n      \"> div:not(:last-child)\": { mb: 1 }\n    }} >\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\n      <MainStatsCards />\n    </Grid>\n  </Grid >\n}\nconst EDIT = \"Edit Stats\"\nconst EXIT = \"EXIT\"\n\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\n\nconst otherStatReadNodes = [\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\n]\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\n\nconst miscStatReadNodes = [\n  input.total.all_dmg_,\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\n  input.total.normal_dmg_, input.total.normal_critRate_,\n  input.total.charged_dmg_, input.total.charged_critRate_,\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\n  input.total.skill_dmg_, input.total.skill_critRate_,\n  input.total.burst_dmg_, input.total.burst_critRate_,\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x])\n]\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\n\nconst statBreakpoint = {\n  xs: 12, sm: 6, md: 6, lg: 4,\n} as const\n\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\n  const { data, oldData } = useContext(DataContext)\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\n    {nodes.map(rn => <Grid item key={rn.info?.key} {...statBreakpoint} >\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\n    </Grid>)}\n    {extra}\n  </Grid>\n}\n\nfunction MainStatsCards() {\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const specialNode = data.get(input.special)\n\n  return <>\n    <TeamBuffDisplay />\n    <StatDisplayCard\n      title=\"Main Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\n          <span><b>Special:</b> <ColorText color={specialNode.variant}>{specialNode.key && StatIcon[specialNode.key]} {specialNode.key && KeyMap.get(specialNode.key)}</ColorText></span>\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\n        </Grid>}\n      />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {mainEditKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Other Stats\"\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {otherStatKeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              defaultValue={undefined}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n    <StatDisplayCard\n      title=\"Misc Stats\"\n      content={<StatDisplayContent statBreakpoint={{\n        xs: 12, sm: 6, md: 6,\n      }} nodes={miscStatReadNodes} />}\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\n        {miscStatkeys.map(statKey => {\n          const statName = KeyMap.get(statKey)\n          return <Grid item xs={12} lg={6} key={statKey}>\n            <StatInput\n              name={<span>{StatIcon[statKey]} {statName}</span>}\n              placeholder={KeyMap.getStr(statKey)}\n              value={character.bonusStats[statKey] ?? 0}\n              percent={KeyMap.unit(statKey) === \"%\"}\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\n            />\n          </Grid>\n        })}\n      </Grid>}\n    />\n  </>\n}\nfunction StatDisplayCard({ title, content, editContent }) {\n  const [edit, setedit] = useState(false)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"subtitle1\">{title}</Typography>\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\n        </Button>\n      </Box>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      {edit ? editContent : content}\n    </CardContent>\n  </CardLight>\n}\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\nimport React, { useCallback, useContext, useState } from 'react';\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\nimport CardDark from \"../../Components/Card/CardDark\";\nimport CardLight from \"../../Components/Card/CardLight\";\nimport ColorText from \"../../Components/ColoredText\";\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\nimport StatIcon from \"../../Components/StatIcon\";\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\nimport { TalentSheetElementKey } from \"../../Types/character\";\nimport { DataContext } from '../../DataContext';\nimport { uiInput as input } from \"../../Formula\";\nimport { ElementKey } from \"../../Types/consts\";\nimport KeyMap from '../../KeyMap'\nimport { NodeDisplay, valueString } from '../../Formula/uiData'\nimport { NumNode } from \"../../Formula/type\";\nimport { range } from \"../../Util/Util\";\nexport default function CharacterTalentPane() {\n  const { data, character, characterSheet } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n  return <>\n    <ReactionDisplay />\n    <Grid container spacing={1} sx={{ mb: 1 }}>\n      {/* auto, skill, burst */}\n      {skillBurstList.map(([tKey, tText]) =>\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>)}\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"sprint\"\n          subtitle=\"Alternative Sprint\"\n        />\n      </Grid>}\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\n        <SkillDisplayCard\n          talentKey=\"passive\"\n          subtitle=\"Passive\"\n        />\n      </Grid>}\n    </Grid>\n    <Grid container spacing={1}>\n      {/* passives */}\n      {passivesList.map(([tKey, tText, asc]) => {\n        let enabled = ascension >= asc\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={tText}\n          />\n        </Grid>\n      })}\n    </Grid>\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\n    <Grid container spacing={1}>\n      {/* constellations */}\n      {range(1, 6).map(i => {\n        let tKey = `constellation${i}` as TalentSheetElementKey\n        return <Grid item key={i} xs={12} md={4}\n          sx={{ opacity: constellation >= i ? 1 : 0.5 }}>\n          <SkillDisplayCard\n            talentKey={tKey}\n            subtitle={`Contellation Lv. ${i}`}\n            onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\n          />\n        </Grid>\n      })}\n    </Grid>\n  </>\n}\nconst ReactionComponents = {\n  superconduct: SuperConductCard,\n  electrocharged: ElectroChargedCard,\n  overloaded: OverloadedCard,\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\n  shattered: ShatteredCard,\n  // crystalize_hit: CrystalizeCard, // TODO: crystallize\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return <CardLight sx={{ mb: 1 }}>\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(reaction).map(([key, node]) => {\n          const Ele = ReactionComponents[key]\n          if (!Ele) return null\n          return <Grid item key={key}><Ele node={node} /></Grid>\n        })}\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\n  </CardContent></CardDark>\n}\n\nconst swirlEleToDisplay = {\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\n} as const\nfunction SwirlCard() {\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\n  const { data } = useContext(DataContext)\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\n  </CardDark>\n}\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\n  </BootstrapTooltip>\n\n  return <CardDark><CardContent sx={{ p: 1 }}>\n    <ColorText color=\"shattered\">{KeyMap.get(node.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\n  </CardContent></CardDark>\n}\n// TODO: crystallize\nconst crystalizeEleToDisplay = {\n  \"default\": <ColorText color=\"crystalize\">{KeyMap.get(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\n  \"pyro\": <span>{KeyMap.get(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\n  \"electro\": <span>{KeyMap.get(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\n  \"cryo\": <span>{KeyMap.get(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\n  \"hydro\": <span>{KeyMap.get(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\n} as const\nfunction CrystalizeCard() {\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\n  return <CardDark sx={{ display: \"flex\" }}>\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\n    </DropdownButton>\n    {/* <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box> */}\n  </CardDark>\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey,\n  subtitle: string,\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\n\n  const actionWrapeprFunc = useCallback(\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\n    [onClickTitle],\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\n      talent[tKey] = newTalentLevelKey\n      characterDispatch({ talent })\n    }\n    header = <>\n      <CardContent sx={{ py: 1 }}>\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\n          {range(1, talentLimits[asc]).map(i =>\n            <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\n        </DropdownButton>\n      </CardContent>\n      <Divider />\n    </>\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\n\n  return <CardLight sx={{ height: \"100%\" }}>\n    {header}\n    <CardContent>\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\n          <Grid item>\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\n          </Grid>\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\n          </Grid>\n        </Grid>\n      </ConditionalWrapper>\n      {/* Display document sections */}\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\n    </CardContent>\n  </CardLight>\n}\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\nimport { Suspense, useCallback, useContext, useState } from 'react';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\nimport ThumbSide from '../Components/Character/ThumbSide';\nimport CloseButton from '../Components/CloseButton';\nimport ColorText from '../Components/ColoredText';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport { sgt } from '../Data/Characters/SheetUtil';\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\nimport useTeamData from '../ReactHooks/useTeamData';\nimport { CharacterKey } from '../Types/consts';\nimport { clamp } from '../Util/Util';\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  value: string;\n  current: string | boolean;\n}\n\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\n  if (value !== current) return null\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\n    <div\n      role=\"tabpanel\"\n      hidden={value !== current}\n      id={`simple-tabpanel-${value}`}\n      aria-labelledby={`simple-tab-${value}`}\n      {...other}\n    >\n      {children}\n    </div>\n  </Suspense>\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey,\n  footer?: JSX.Element\n  newteamData?: TeamData,\n  mainStatAssumptionLevel?: number,\n  onClose?: (any) => void,\n  tabName?: string,\n  isFlex?: boolean,\n}\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName, isFlex }: CharacterDisplayCardProps) {\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\n\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\n  const onTab = useCallback((e, v) => settab(v), [settab])\n\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\n  if (!teamData || !character || !characterSheet || !charUIData) return <></>\n  const { compareData } = character\n  // main CharacterDisplayCard\n  const dataContextValue: dataContextObj = {\n    character,\n    characterSheet,\n    mainStatAssumptionLevel,\n    data: (newteamData ? newteamData[characterKey]!.target : charUIData),\n    teamData: (newteamData ? newteamData : teamData),\n    oldData: (compareData && newteamData) ? charUIData : undefined,\n    characterDispatch\n  }\n  return <CardDark >\n    <DataContext.Provider value={dataContextValue}>\n      <CardContent sx={{\n        \"> div:not(:last-child)\": { mb: 1 },\n      }}>\n        <Grid container spacing={1}>\n          <Grid item>\n            <CharSelectDropdown />\n          </Grid>\n          <Grid item>\n            {/* Compare against new build toggle */}\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\n              <ToggleButton value={false} disabled={!compareData}>\n                <small>Show New artifact Stats</small>\n              </ToggleButton>\n              <ToggleButton value={true} disabled={compareData}>\n                <small>Compare against equipped artifacts</small>\n              </ToggleButton>\n            </SolidToggleButtonGroup>}\n          </Grid>\n          <Grid item flexGrow={1} />\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\n          {!!onClose && <Grid item>\n            <CloseButton onClick={onClose} />\n          </Grid>}\n        </Grid>\n        <CardLight>\n          <Tabs\n            onChange={onTab}\n            value={tab}\n            variant=\"fullWidth\"\n          >\n            <Tab value=\"character\" label=\"Character\" />\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\n            {!isFlex && <Tab value=\"buffs\" label=\"Team Buffs\" />}\n            <Tab value=\"talent\" label=\"Talents\" />\n          </Tabs>\n        </CardLight>\n        <DamageOptionsCard />\n        <FormulaCalcCard />\n        <EnemyExpandCard />\n\n        {/* Character Panel */}\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\n        {/* Artifacts Panel */}\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\n        </DataContext.Provider>\n        {/* new build panel */}\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\n        {/* Buffs panel */}\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\n        {/* talent panel */}\n        <TabPanel value=\"talent\" current={tab}>\n          <CharacterTalentPane />\n        </TabPanel >\n      </CardContent>\n      {!!footer && <Divider />}\n      {footer && <CardContent >\n        {footer}\n      </CardContent>}\n    </DataContext.Provider>\n  </CardDark>\n}\n\n\nfunction CharSelectDropdown() {\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  const setLevel = useCallback((level) => {\n    level = clamp(level, 1, 90)\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\n    characterDispatch({ level, ascension })\n  }, [characterDispatch])\n  const setAscension = useCallback(() => {\n    if (!character) return\n    const { level = 1, ascension = 0 } = character\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\n    else characterDispatch({ ascension: lowerAscension })\n  }, [characterDispatch, character])\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\n  return <>\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\n    <Grid container spacing={1}>\n      <Grid item>\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\n      </Grid>\n      <Grid item>\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\n          </DropdownButton>}\n          <CustomNumberInputButtonGroupWrapper >\n            <CustomNumberInput onChange={setLevel} value={level}\n              startAdornment=\"Lvl. \"\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\n              disabled={!characterSheet} />\n          </CustomNumberInputButtonGroupWrapper>\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\n            {milestoneLevels.map(([lv, as]) => {\n              const sameLevel = lv === ascensionMaxLevel[as]\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\n              const selected = lv === level && as === ascension\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\n            })}\n          </DropdownButton>\n        </ButtonGroup>\n      </Grid>\n    </Grid>\n  </>\n}\n"],"sourceRoot":""}