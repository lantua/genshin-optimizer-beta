{"version":3,"file":"static/js/885.4f370d25.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/ExpandButton.tsx","Components/InfoComponent.tsx","Components/SortByButton.tsx","Components/StatFilterCard.tsx","Components/TextButton.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","PageArtifact/ArtifactSort.ts","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx","PageArtifact/ArtifactFilter.tsx","PageArtifact/ProbabilityFilter.tsx","PageArtifact/ArtifactDisplay.tsx","Util/SortByFilters.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: 100, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={\"Level: \"}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n    />\r\n  </Card>\r\n}","import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n        <ListItemIcon>\r\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {artifactSheets?.[setKey]?.name}\r\n        </ListItemText>\r\n      </MenuItem >)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { dbStorage } from \"../Database/DBStorage\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CloseButton from \"./CloseButton\"\r\nimport ModalWrapper from \"./ModalWrapper\"\r\nimport { Translate } from \"./Translate\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    dbStorage.set(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <CardDark >\r\n    <Grid container>\r\n      <Grid item flexGrow={1}>\r\n        <Typography variant=\"caption\" pl={1} >\r\n          {displayText}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\r\n          <Translate ns=\"ui\" key18=\"info\" />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\r\n      <CardDark >\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{modalTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={closeModal} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\r\n            {children}\r\n          </Suspense>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <CloseButton large onClick={closeModal} />\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper >\r\n  </CardDark>\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Minimum Final Stat Filter</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(statFilters).map(([statKey, min]) => {\r\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Grid>\r\n        })}\r\n        <Grid item xs={12}>\r\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character_WR\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon_WR\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      // TODO: Prayer sets\r\n      // case \"PrayersForDestiny\":\r\n      // case \"PrayersForIllumination\":\r\n      // case \"PrayersForWisdom\":\r\n      // case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, setToSlots: [ArtifactSetKey, number][]) {\r\n    let artifactSetEffect: [ArtifactSetKey, SetNum[]][] = []\r\n    setToSlots.forEach(([set, slots]) => {\r\n      if (!slots) return\r\n      let setNum = Object.keys(sheets[set]?.setEffects ?? {})\r\n        .map(setNum => parseInt(setNum) as SetNum)\r\n        .filter(setNum => setNum <= slots)\r\n      if (setNum.length)\r\n        artifactSetEffect.push([set, setNum])\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n}\r\n","import { ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\r\nimport { allArtifactRarities, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\r\nimport Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { probability } from \"./RollProbability\";\r\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\r\nexport const artifactSortKeysTC = [\"probability\"] as const\r\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\r\nexport type FilterOption = {\r\n  artSetKey: ArtifactSetKey | \"\",\r\n  rarity: ArtifactRarity[],\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  slotKey: SlotKey | \"\",\r\n  mainStatKey: MainStatKey | \"\"\r\n  substats: (SubstatKey | \"\")[]\r\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\r\n  excluded: \"excluded\" | \"included\" | \"\",\r\n}\r\n\r\ntype ArtifactSortFilter = {\r\n  filterOption: FilterOption\r\n  ascending: boolean\r\n  sortType: ArtifactSortKey\r\n}\r\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\r\n  filterOption: {\r\n    artSetKey: \"\",\r\n    rarity: [...allArtifactRarities],\r\n    levelLow: 0,\r\n    levelHigh: 20,\r\n    slotKey: \"\",\r\n    mainStatKey: \"\",\r\n    substats: [\"\", \"\", \"\", \"\"],\r\n    location: \"\",\r\n    excluded: \"\",\r\n  },\r\n  ascending: false,\r\n  sortType: artifactSortKeys[0],\r\n})\r\n\r\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\r\n  return {\r\n    rarity: {\r\n      getValue: art => art.rarity ?? 0,\r\n      tieBreaker: \"level\"\r\n    },\r\n    level: {\r\n      getValue: art => art.level ?? 0,\r\n      tieBreaker: \"artsetkey\"\r\n    },\r\n    artsetkey: {\r\n      getValue: art => art.setKey ?? \"\",\r\n      tieBreaker: \"level\"\r\n    },\r\n    efficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\r\n    },\r\n    mefficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\r\n    },\r\n    probability: {\r\n      getValue: art => {\r\n        if (!Object.keys(probabilityFilter).length) return 0\r\n        const prob = (art as any).probability\r\n        if (prob === undefined) return probability(art, probabilityFilter);\r\n        return prob\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\r\n  return {\r\n    excluded: (art, filter) => {\r\n      if (filter === \"excluded\" && !art.exclude) return false\r\n      if (filter === \"included\" && art.exclude) return false\r\n      return true\r\n    },\r\n    location: (art, filter) => {\r\n      if (!filter) return true\r\n      if (filter === \"Inventory\" && !art.location) return true\r\n      if (filter === \"Equipped\" && art.location) return true\r\n      if (filter === art.location) return true\r\n      return false\r\n    },\r\n    artSetKey: (art, filter) => !filter || filter === art.setKey,\r\n    slotKey: (art, filter) => !filter || filter === art.slotKey,\r\n    mainStatKey: (art, filter) => !filter || filter === art.mainStatKey,\r\n    levelLow: (art, filter) => filter <= art.level,\r\n    levelHigh: (art, filter) => filter >= art.level,\r\n    rarity: (art, filter) => filter.includes(art.rarity),\r\n    substats: (art, filter) => {\r\n      for (const filterKey of filter)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <BootstrapTooltip placement=\"top\" title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>}>\r\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\r\n        </BootstrapTooltip>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}","import { Box, Button, ButtonGroup, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { valueString } from '../../../Util/UIUtil';\r\nimport { clamp } from '../../../Util/Util';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport PercentBadge from '../../PercentBadge';\r\nimport KeyMap from '../../../KeyMap';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton title={key ? KeyMap.get(key) : t('editor.substat.substatFormat', { value: index + 1 })} disabled={!artifact} color={key ? \"success\" : \"primary\"} sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              {KeyMap.get(k)}\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = valueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={i} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{valueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { BorrowManager } from './BorrowManager';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap from '../KeyMap';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{valueStringWithUnit(value.value, KeyMap.unit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = KeyMap.unit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, ExpandMore, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Collapse, Grid, MenuItem, Skeleton, styled, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ExpandButton from '../Components/ExpandButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact, validateArtifact } from '../Database/validation';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\nimport KeyMap from '../KeyMap';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\n\r\ntype ArtifactEditorArgument = { artifactIdToEdit: string, cancelEdit: () => void }\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: ArtifactEditorArgument) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [expanded, setExpanded] = useState(() => !database._getArts().length)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setExpanded(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setExpanded])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [uploadFiles])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setExpanded(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: expanded ? \"100%\" : 64 }} />}><CardDark >\r\n    <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n    <CardHeader\r\n      action={\r\n        <ExpandButton\r\n          expand={expanded}\r\n          onClick={() => setExpanded(!expanded)}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n        >\r\n          <ExpandMore />\r\n        </ExpandButton>\r\n      }\r\n      title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n    />\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit={false}><CardContent sx={{ pt: 0 }}>\r\n      <Grid container spacing={1} sx={{ mb: 1 }}>\r\n        {/* Left column */}\r\n        <Grid item xs={12} md={6} lg={6} sx={{\r\n          // select all excluding last\r\n          \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n        }}>\r\n          {/* set & rarity */}\r\n          <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n            {/* Artifact Set */}\r\n            <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\r\n            {/* rarity dropdown */}\r\n            <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n          </ButtonGroup>\r\n\r\n          {/* level */}\r\n          <Box component=\"div\" display=\"flex\">\r\n            <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n              value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n            />\r\n            <ButtonGroup >\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n            </ButtonGroup>\r\n          </Box>\r\n\r\n          {/* slot */}\r\n          <Box component=\"div\" display=\"flex\">\r\n            <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n            <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n              <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                <Typography color=\"text.secondary\">\r\n                  {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                </Typography>\r\n              </Suspense>\r\n            </CardLight>\r\n          </Box>\r\n\r\n          {/* main stat */}\r\n          <Box component=\"div\" display=\"flex\">\r\n            <DropdownButton title={<b>{artifact ? KeyMap.get(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >{KeyMap.get(mainStatK)}</MenuItem>)}\r\n            </DropdownButton>\r\n            <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n              <Typography color=\"text.secondary\">\r\n                {artifact ? `${valueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n              </Typography>\r\n            </CardLight>\r\n          </Box>\r\n\r\n          {/* Current/Max Substats Efficiency */}\r\n          <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n          {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n          {/* Image OCR */}\r\n          <CardLight>\r\n            <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n              {/* TODO: artifactDispatch not overwrite */}\r\n              <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                <Grid container spacing={1} alignItems=\"center\">\r\n                  <Grid item flexGrow={1}>\r\n                    <label htmlFor=\"contained-button-file\">\r\n                      <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                      <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                        Upload Screenshot (or Ctrl-V)\r\n                      </Button>\r\n                    </label>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                      setModalShow(true)\r\n                      ReactGA.modalview('/artifact/how-to-upload')\r\n                    }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                  </Grid>\r\n                </Grid>\r\n                {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                  <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                </Box>}\r\n                {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                  {!firstProcessed && firstOutstanding && <Grid item>\r\n                    <CircularProgress size=\"1em\" />\r\n                  </Grid>}\r\n                  <Grid item flexGrow={1}>\r\n                    <Typography>\r\n                      <span>\r\n                        Screenshots in file-queue: <b>{remaining}</b>\r\n                        {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                      </span>\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                  </Grid>\r\n                </Grid></CardDark>}\r\n              </Suspense>\r\n            </CardContent>\r\n          </CardLight>\r\n        </Grid>\r\n\r\n        {/* Right column */}\r\n        <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n          {texts && <CardLight><CardContent>\r\n            <div>{texts.slotKey}</div>\r\n            <div>{texts.mainStatKey}</div>\r\n            <div>{texts.mainStatVal}</div>\r\n            <div>{texts.rarity}</div>\r\n            <div>{texts.level}</div>\r\n            <div>{texts.substats}</div>\r\n            <div>{texts.setKey}</div>\r\n          </CardContent></CardLight>}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Duplicate/Updated/Edit UI */}\r\n      {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\r\n        <Grid item lg={4} md={6} ><CardLight>\r\n          <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n          <ArtifactCard artifactObj={cachedArtifact} />\r\n        </CardLight></Grid>\r\n        <Grid item lg={4} md={6} ><CardLight>\r\n          <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n          <ArtifactCard artifactObj={old} />\r\n        </CardLight></Grid>\r\n      </Grid>}\r\n\r\n      {/* Error alert */}\r\n      {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n      {/* Buttons */}\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          {oldType === \"edit\" ?\r\n            <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n              {t`editor.btnSave`}\r\n            </Button> :\r\n            <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n              {t`editor.btnAdd`}\r\n            </Button>}\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>\r\n        </Grid>\r\n        <Grid item>\r\n          {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n        </Grid>\r\n        {old && oldType !== \"edit\" && <Grid item>\r\n          <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent></Collapse>\r\n  </CardDark ></Suspense>\r\n}\r\n","import { faBan, faChartLine, faTrash, faUserShield, faUserSlash } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { BusinessCenter, Lock, LockOpen, Replay } from \"@mui/icons-material\"\r\nimport { Button, CardContent, Divider, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, ToggleButton, Typography } from \"@mui/material\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport ArtifactLevelSlider from \"../Components/Artifact/ArtifactLevelSlider\"\r\nimport ArtifactSetDropdown from \"../Components/Artifact/ArtifactSetDropdown\"\r\nimport ArtifactSlotDropdown from \"../Components/Artifact/ArtifactSlotDropdown\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport { CharacterMenuItemArray } from \"../Components/Character/CharacterDropdownButton\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport SolidToggleButtonGroup from \"../Components/SolidToggleButtonGroup\"\r\nimport SortByButton from \"../Components/SortByButton\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { GlobalSettingsContext } from \"../GlobalSettings\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { allMainStatKeys, allSubstats, ICachedArtifact } from \"../Types/artifact\"\r\nimport { allArtifactRarities, CharacterKey } from \"../Types/consts\"\r\nimport { ArtifactSortKey, artifactSortKeys, artifactSortKeysTC, FilterOption } from \"./ArtifactSort\"\r\nimport KeyMap from \"../KeyMap\"\r\n\r\nexport default function ArtifactFilter({ artifactIds, filterOption, sortType, ascending, filterOptionDispatch, filterDispatch }:\r\n  { artifactIds: string[], filterOption: FilterOption, sortType: ArtifactSortKey, ascending: boolean, filterOptionDispatch: (any) => void, filterDispatch: (any) => void }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { globalSettings: { tcMode } } = useContext(GlobalSettingsContext)\r\n  const database = useContext(DatabaseContext)\r\n  const { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock } = useMemo(() => {\r\n    const artifacts = artifactIds.map(id => database._getArt(id)) as ICachedArtifact[]\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 0 : 1), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n    const numDelete = numUnlock\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock }\r\n  }, [artifactIds, database])\r\n\r\n  const { artSetKey, slotKey, mainStatKey, rarity, levelLow, levelHigh, substats,\r\n    location = \"\", excluded = \"\" } = filterOption\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(location as CharacterKey), [location])\r\n\r\n  let locationDisplay\r\n  if (!location) locationDisplay = t(\"filterLocation.any\")\r\n  else if (location === \"Inventory\") locationDisplay = <span><BusinessCenter /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (location === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (excluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (excluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifactIds.map(id => database.setArtLocation(id, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${numDelete} artifacts?`) &&\r\n    artifactIds.map(id => !database._getArt(id)?.lock && database.removeArt(id))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: true }, id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: false }, id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numUnlock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: true }, id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numLock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: false }, id))\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n    <CardDark  >\r\n      <CardContent>\r\n        <Grid container sx={{ mb: 1 }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => filterDispatch({ type: \"reset\" })} startIcon={<Replay />}>\r\n              <Trans t={t} i18nKey=\"ui:reset\" />\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} sx={{ mb: 1 }}>\r\n          {/* left */}\r\n          <Grid item xs={12} md={6} sx={{\r\n            //select all excluding last\r\n            \"> *:nth-last-of-type(n+2)\": { mb: 1 }\r\n          }}>\r\n            {/* Artifact Set */}\r\n            <div><ArtifactSetDropdown hasUnselect selectedSetKey={artSetKey} onChange={setKey => filterOptionDispatch({ artSetKey: setKey })} fullWidth /></div>\r\n            {/* Artifact stars filter */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\r\n              {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artiface level filter */}\r\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\r\n              setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n              setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n              setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n            {/* Sort */}\r\n            <SortByButton fullWidth sortKeys={[...artifactSortKeys.filter(key => (artifactSortKeysTC as unknown as string[]).includes(key) ? tcMode : true)]}\r\n              value={sortType} onChange={sortType => filterDispatch({ sortType })}\r\n              ascending={ascending} onChangeAsc={ascending => filterDispatch({ ascending })}\r\n            />\r\n          </Grid>\r\n          {/* right */}\r\n          <Grid item container xs={12} md={6} spacing={1}>\r\n            {/* right-left */}\r\n            <Grid item xs={6} sx={{\r\n              //select all excluding last\r\n              \"> *:nth-last-of-type(n+2)\": { mb: 1 }\r\n            }} >\r\n              {/* Artifact Slot */}\r\n              <ArtifactSlotDropdown fullWidth hasUnselect slotKey={slotKey} onChange={slotKey => filterOptionDispatch({ slotKey })} />\r\n              {/* Main Stat filter */}\r\n              <DropdownButton fullWidth title={KeyMap.get(mainStatKey) ?? t(`mainStat`)} color={mainStatKey ? \"success\" : \"primary\"}  >\r\n                <MenuItem selected={mainStatKey === \"\"} disabled={mainStatKey === \"\"} onClick={() => filterOptionDispatch({ mainStatKey: \"\" })}>\r\n                  <ListItemIcon><Replay /></ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n                <Divider />\r\n                {allMainStatKeys.map(statKey =>\r\n                  <MenuItem key={statKey} selected={mainStatKey === statKey} disabled={mainStatKey === statKey} onClick={() => filterOptionDispatch({ mainStatKey: statKey })} >\r\n                    {KeyMap.get(statKey)}\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              {/* location */}\r\n              <LocationDropdown dropdownProps={{ color: location ? \"success\" : \"primary\" }} title={locationDisplay} onChange={location => filterOptionDispatch({ location })} selectedCharacterKey={location} />\r\n              {/* exclusion state */}\r\n              <DropdownButton fullWidth title={excludedDisplay} color={excluded ? (excluded === \"included\" ? \"success\" : \"error\") : \"primary\"}>\r\n                <MenuItem selected={excluded === \"\"} disabled={excluded === \"\"} onClick={() => filterOptionDispatch({ excluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></MenuItem>\r\n                <MenuItem selected={excluded === \"excluded\"} disabled={excluded === \"excluded\"} onClick={() => filterOptionDispatch({ excluded: \"excluded\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faBan} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n                <MenuItem selected={excluded === \"included\"} disabled={excluded === \"included\"} onClick={() => filterOptionDispatch({ excluded: \"included\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faChartLine} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n              </DropdownButton>\r\n            </Grid>\r\n            {/* right-right */}\r\n            <Grid item xs={6} sx={{\r\n              // select all excluding last\r\n              \"> *:nth-last-of-type(n+2)\": { mb: 1 }\r\n            }} >\r\n              {/* substat filter */}\r\n              {substats.map((substatKey, index) =>\r\n                <DropdownButton fullWidth key={index} title={substatKey ? KeyMap.get(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })} color={substatKey ? \"success\" : \"primary\"}>\r\n                  <MenuItem\r\n                    selected={substatKey === \"\"}\r\n                    disabled={substatKey === \"\"}\r\n                    onClick={() => {\r\n                      substats[index] = \"\"\r\n                      filterOptionDispatch({ substats })\r\n                    }}\r\n                  >\r\n                    <ListItemIcon>\r\n                      <Replay />\r\n                    </ListItemIcon>\r\n                    <ListItemText>\r\n                      <Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans>\r\n                    </ListItemText>\r\n                  </MenuItem>\r\n                  <Divider />\r\n                  {allSubstats.filter(key => !substats.includes(key)).map(key =>\r\n                    <MenuItem key={key}\r\n                      onClick={() => {\r\n                        substats[index] = key\r\n                        filterOptionDispatch({ substats })\r\n                      }}\r\n                    >{KeyMap.get(key)}</MenuItem>\r\n                  )}\r\n                </DropdownButton>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numUnequip} onClick={unequipArtifacts} startIcon={<FontAwesomeIcon icon={faUserSlash} />}>\r\n              <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numUnequip ? \"success\" : \"secondary\"}>{numUnequip}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numDelete} onClick={deleteArtifacts} startIcon={<FontAwesomeIcon icon={faTrash} />}>\r\n              <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numDelete ? \"success\" : \"secondary\"}>{numDelete}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numInclude} onClick={excludeArtifacts} startIcon={<FontAwesomeIcon icon={faBan} />}>\r\n              <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Exclude Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numInclude ? \"success\" : \"secondary\"}>{numInclude}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numExclude} onClick={includeArtifacts} startIcon={<FontAwesomeIcon icon={faChartLine} />}>\r\n              <Trans t={t} i18nKey=\"button.includeArtifacts\" >Include Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numExclude ? \"success\" : \"secondary\"}>{numExclude}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numLock} onClick={unlockArtifacts} startIcon={<LockOpen />}>\r\n              <Trans t={t} i18nKey=\"button.unlockrtifacts\" >Unlock Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numLock ? \"success\" : \"secondary\"}>{numLock}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={3}>\r\n            <Button fullWidth color=\"error\" disabled={!numUnlock} onClick={lockArtifacts} startIcon={<Lock />}>\r\n              <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans>\r\n              <SqBadge sx={{ ml: 1 }} color={numUnlock ? \"success\" : \"secondary\"}>{numUnlock}</SqBadge>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={6} display=\"flex\" justifyContent=\"space-around\">\r\n            <Typography variant=\"caption\" color=\"text.secondary\"><Trans t={t} i18nKey=\"buttonHint\">Note: the red buttons above only applies to <b>filtered artifacts</b></Trans></Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </Suspense>\r\n}\r\n\r\nfunction LocationDropdown({ title, onChange, selectedCharacterKey, dropdownProps }) {\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  return <DropdownButton fullWidth {...dropdownProps} title={title}>\r\n    <MenuItem key=\"unselect\" selected={selectedCharacterKey === \"\"} disabled={selectedCharacterKey === \"\"} onClick={() => onChange(\"\")}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"inventory\" selected={selectedCharacterKey === \"Inventory\"} disabled={selectedCharacterKey === \"Inventory\"} onClick={() => onChange(\"Inventory\")}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"equipped\" selected={selectedCharacterKey === \"Equipped\"} disabled={selectedCharacterKey === \"Equipped\"} onClick={() => onChange(\"Equipped\")}>\r\n      <ListItemIcon>\r\n        <FontAwesomeIcon icon={faUserShield} />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <Divider />\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, database._getCharKeys().sort(), onChange, selectedCharacterKey)}\r\n  </DropdownButton>\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useCallback } from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { StatFilterItem } from \"../Components/StatFilterCard\"\r\nimport { allSubstats, SubstatKey } from \"../Types/artifact\"\r\n\r\nexport default function ProbabilityFilter({ probabilityFilter: statFilters = {}, setProbabilityFilter: setStatFilters, disabled = false }: {\r\n  probabilityFilter: Dict<SubstatKey, number>,\r\n  setProbabilityFilter: (object: Dict<SubstatKey, number>) => void,\r\n  disabled?: boolean\r\n}) {\r\n  const remainingKeys = allSubstats.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],\r\n  )\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"h6\">\r\n        Roll Probability Calculator <SqBadge color=\"success\">TC Feature</SqBadge>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={6}>\r\n          <CardLight>\r\n            <CardContent>\r\n              <Typography>\r\n                This UI only pops up when \"Sort by\" <strong>Probability</strong>.\r\n                In conjunction with the Artifact Filters above, this UI allows you to set a criteria for substats values, and it will sort the artifacts by those with the highest probability to roll into those criteria values.\r\n                <ColorText color=\"warning\"> Artifacts that already reach the criteria(100%) or are at 0% are hidden.</ColorText>\r\n              </Typography>\r\n\r\n            </CardContent>\r\n          </CardLight>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} container spacing={1}>\r\n          {Object.entries(statFilters).map(([statKey, min]) => {\r\n            return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n              delete statFilters[statKey]\r\n              setStatFilters({ ...statFilters })\r\n            }} /></Grid>\r\n          })}\r\n          <Grid item xs={12}>\r\n            <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark >\r\n}\r\n","import { Replay } from '@mui/icons-material';\r\nimport { Alert, Box, Button, CardContent, Grid, Link, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { dbStorage } from '../Database/DBStorage';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport { allSubstats, SubstatKey } from '../Types/artifact';\r\nimport { artifactFilterConfigs, artifactSortConfigs, initialArtifactSortFilter, artifactSortKeys } from './ArtifactSort';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { clamp } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ArtifactFilter from './ArtifactFilter';\r\nimport ProbabilityFilter from './ProbabilityFilter';\r\nimport { GlobalSettingsContext } from '../GlobalSettings';\r\nimport { probability } from './RollProbability';\r\nimport KeyMap from '../KeyMap';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nfunction intialState() {\r\n  return {\r\n    ...initialArtifactSortFilter(),\r\n    maxNumArtifactsToDisplay: 50,\r\n    effFilter: [...allSubstats] as SubstatKey[],\r\n    probabilityFilter: {} as Dict<SubstatKey, number>,\r\n  }\r\n}\r\n\r\ntype State = ReturnType<typeof intialState>\r\ntype ResetAction = {\r\n  type: \"reset\"\r\n}\r\nfunction filterReducer(state: State, action: Partial<State> | ResetAction): State {\r\n  if ((action as any).type === \"reset\")\r\n    return { ...state, ...initialArtifactSortFilter() }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(): State {\r\n  return { ...intialState(), ...(dbStorage.get(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { globalSettings: { tcMode } } = useContext(GlobalSettingsContext)\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [state, stateDispatch] = useReducer(filterReducer, undefined, filterInit)\r\n\r\n  const { effFilter, filterOption, ascending, probabilityFilter, maxNumArtifactsToDisplay } = state\r\n  let { sortType } = state\r\n  const showProbability = tcMode && sortType === \"probability\"\r\n  //force the sortType back to a normal value after exiting TC mode\r\n  if (sortType === \"probability\" && !tcMode) stateDispatch({ sortType: artifactSortKeys[0] })\r\n\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef<HTMLDivElement>(null)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback((id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(id => {\r\n    scrollRef?.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    setartToEditId(id);\r\n  }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  useEffect(() => {\r\n    dbStorage.set(\"ArtifactDisplay.state\", state)\r\n  }, [state])\r\n\r\n  const filterOptionDispatch = useCallback((action) => {\r\n    stateDispatch({\r\n      filterOption: {\r\n        ...filterOption,\r\n        ...action\r\n      }\r\n    })\r\n  }, [stateDispatch, filterOption])\r\n\r\n  const setProbabilityFilter = useCallback(probabilityFilter => stateDispatch({ probabilityFilter }), [stateDispatch],)\r\n\r\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\r\n  const sortConfigs = useMemo(() => artifactSortConfigs(effFilterSet, probabilityFilter), [effFilterSet, probabilityFilter])\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const { artifactIds, totalArtNum } = useMemo(() => {\r\n    const { sortType = artifactSortKeys[0], ascending = false, filterOption } = state\r\n    let allArtifacts = database._getArts()\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    const sortFunc = sortFunction(sortType, ascending, sortConfigs)\r\n    //in probability mode, filter out the artifacts that already reach criteria\r\n    if (showProbability) {\r\n      allArtifacts.forEach(art => (art as any).probability = probability(art, probabilityFilter))\r\n      allArtifacts = allArtifacts.filter(art => (art as any).probability && (art as any).probability !== 1)\r\n    }\r\n    const artifactIds = allArtifacts.filter(filterFunc).sort(sortFunc).map(art => art.id)\r\n    return { artifactIds, totalArtNum: allArtifacts.length, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [state, dbDirty, database, sortConfigs, filterConfigs, probabilityFilter, showProbability])\r\n\r\n\r\n  const { artifactsToShow: artifactIdsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifactIds.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifactIds.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifactIds, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  //for pagination\r\n  const totalShowing = artifactIds.length !== totalArtNum ? `${artifactIds.length}/${totalArtNum}` : `${totalArtNum}`\r\n  const setPage = useCallback(\r\n    (e, value) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      setpageIdex(value - 1);\r\n    },\r\n    [setpageIdex, invScrollRef],\r\n  )\r\n\r\n  return <Box sx={{\r\n    mt: 1,\r\n    \"> div\": { mb: 1 },\r\n  }}>\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n\r\n    {noArtifact && <Alert severity=\"info\" variant=\"filled\">Looks like you haven't added any artifacts yet. If you want, there are <Link color=\"warning.main\" component={RouterLink} to=\"/scanner\">automatic scanners</Link> that can speed up the import process!</Alert>}\r\n\r\n    <Box ref={scrollRef} >\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </Box>\r\n    <ArtifactFilter artifactIds={artifactIds} filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filterDispatch={stateDispatch} sortType={sortType} ascending={ascending} />\r\n    {showProbability && <ProbabilityFilter probabilityFilter={probabilityFilter} setProbabilityFilter={setProbabilityFilter} />}\r\n    <CardDark ref={invScrollRef}>\r\n      <CardContent>\r\n        <Grid container sx={{ mb: 1 }}>\r\n          <Grid item flexGrow={1}><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Substats to use in efficiency calculation</Trans></span></Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => stateDispatch({ effFilter: [...allSubstats] })} startIcon={<Replay />}><Trans t={t} i18nKey=\"ui:reset\" /></Button>\r\n          </Grid>\r\n        </Grid>\r\n        <EfficiencyFilter selectedKeys={effFilter} onChange={n => stateDispatch({ effFilter: n })} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <PaginationCard count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n    <Grid container spacing={1} >\r\n      <Suspense fallback={<Grid item xs={12}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} /></Grid>}>\r\n        {artifactIdsToShow.map((art, i) =>\r\n          <Grid item key={i} xs={12} sm={6} md={4} lg={4} xl={3} >\r\n            <ArtifactCard\r\n              artifactId={art}\r\n              effFilter={effFilterSet}\r\n              onDelete={deleteArtifact}\r\n              onEdit={editArtifact}\r\n              probabilityFilter={showProbability ? probabilityFilter : undefined}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Suspense>\r\n    </Grid>\r\n    {numPages > 1 && <PaginationCard count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />}\r\n  </Box >\r\n}\r\n\r\nfunction PaginationCard({ count, page, onChange, numShowing, total, t }) {\r\n  return <CardDark >\r\n    <CardContent>\r\n      <Grid container sx={{ alignItems: \"center\" }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={count} page={page} onChange={onChange} />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography color=\"text.secondary\">\r\n            <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n              Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Artifacts\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n\r\nfunction EfficiencyFilter({ selectedKeys, onChange }) {\r\n  const keys1 = allSubstats.slice(0, 6)\r\n  const keys2 = allSubstats.slice(6)\r\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\r\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          {KeyMap.get(key)}\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          {KeyMap.get(key)}\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\r\n}"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","disabled","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","BootstrapTooltip","styled","className","arrow","classes","popper","theme","tooltipClasses","palette","common","black","backgroundColor","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","database","useContext","DatabaseContext","characterSheets","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","thumbImg","thumbImgSide","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","characterKey","ThumbSide","height","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","primary","main","transition","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","number","setNumber","focused","setFocus","parseFunc","parseFloat","onBlur","onFocus","onInputChange","target","onKeyDOwn","key","type","onKeyDown","ExpandButton","expand","other","transform","transitions","create","duration","shortest","InfoComponent","pageKey","text","modalTitle","dbStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","container","item","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","large","SortByButton","sortKeys","ascending","onChangeAsc","faSortAmountDownAlt","faSortAmountUp","StatFilterCard","statFilters","setStatFilters","data","DataContext","statKeys","get","input","push","charEle","remainingKeys","some","k","setFilter","sKey","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","placeholder","faTrashAlt","DisabledButton","secondary","TextButton","createContext","then","imp","default","tr","strKey","allData","as","mergeData","values","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","this","slots","slotIcons","rarity","allSlotKeys","icons","set","a","sheets","grouped","forEach","Math","setToSlots","artifactSetEffect","artifactSortKeys","artifactSortKeysTC","initialArtifactSortFilter","filterOption","artSetKey","allArtifactRarities","mainStatKey","substats","location","excluded","sortType","ArtifactRarityDropdown","DropdownButton","MenuItem","ArtifactSlotDropdown","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","CustomNumberTextField","state","setState","sendChange","toString","TextField","SubstatEfficiencyDisplayCard","efficiency","valid","eff","CardLight","Grid","placement","Typography","Trans","Box","component","FontAwesomeIcon","cursor","PercentBadge","SubstatInput","index","artifact","setSubstat","rolls","accurateValue","reduce","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","ButtonGroup","whiteSpace","allSubstats","v","newValue","valueString","artifactSubstatRollCorrection","p","SqBadge","count","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","Snippet","gutterBottom","href","rel","scan_art_main","BorrowManager","init","deinit","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","image","canvas","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","level","lock","exclude","rarityRates","objectKeyMap","score","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","findIndex","mainStatVal","mainStatValScore","chosen","resultMainStatVal","every","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStringWithUnit","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","_getArts","expanded","setExpanded","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","processingCurrent","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","isValid","currentEfficiency","maxEfficiency","Skeleton","CardHeader","ExpandMore","Collapse","in","timeout","unmountOnExit","pt","mb","lg","id","label","mr","my","margin","ImgIcon","mainStatK","flexDirection","gap","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","CircularProgress","ArtifactCard","artifactObj","Add","updateArt","createArt","confirm","process","Update","ArtifactFilter","locationDisplay","excludedDisplay","artifactIds","filterOptionDispatch","filterDispatch","tcMode","GlobalSettingsContext","globalSettings","artifacts","numUnlock","art","numLock","numDelete","numUnequip","numExclude","numInclude","locationCharacterSheet","BusinessCenter","faUserShield","nameWIthIcon","faBan","faChartLine","fullWidth","SolidToggleButtonGroup","newVal","ToggleButton","LocationDropdown","dropdownProps","substatKey","sm","setArtLocation","faUserSlash","removeArt","faTrash","LockOpen","Lock","ProbabilityFilter","probabilityFilter","setProbabilityFilter","InfoDisplay","React","filterReducer","filterInit","maxNumArtifactsToDisplay","effFilter","ArtifactDisplay","stateDispatch","showProbability","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","editArtifact","scrollIntoView","behavior","cancelEditArtifact","noArtifact","sortConfigs","getValue","tieBreaker","artsetkey","mefficiency","probability","prob","artifactSortConfigs","filterConfigs","filterKey","allArtifacts","filterFunc","filterFunction","sortFunc","sortFunction","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","artifactIdsToShow","totalShowing","setPage","returnObjects","Link","RouterLink","to","ref","EfficiencyFilter","selectedKeys","n","PaginationCard","page","numShowing","total","minHeight","xl","artifactId","onDelete","onEdit","Pagination","keys1","keys2","selKeys1","selKeys2","arr","sortby","configs","Sort","config","aV","bV","localeCompare","diff","filterOptions","obj","optionKey","optionVal"],"sourceRoot":""}