{"version":3,"file":"static/js/611.24a33dd0.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/BootstrapTooltip.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/InfoComponent.tsx","Components/SortByButton.tsx","Components/StatFilterCard.tsx","Components/TextButton.tsx","Data/Artifacts/ArtifactSheet.tsx","DataContext.tsx","PageArtifact/ArtifactSort.ts","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx","Components/Artifact/ArtifactMainStatMultipleSelectChip.tsx","Components/Artifact/ArtifactSetMultipleSelectChip.tsx","Components/Artifact/ArtifactSubStatMultipleSelectChip.tsx","PageArtifact/ArtifactFilter.tsx","PageArtifact/ProbabilityFilter.tsx","PageArtifact/ArtifactDisplay.tsx","Types/artifact_WR.ts","Util/SortByFilters.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\nimport { useCallback, useEffect, useState } from \"react\"\nimport { clamp } from \"../../Util/Util\"\nimport CustomNumberInput from \"../CustomNumberInput\"\n\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false }: {\n  levelLow: number,\n  levelHigh: number,\n  setLow: (low: number) => void,\n  setHigh: (high: number) => void,\n  setBoth: (low: number, high: number) => void,\n  dark?: boolean\n}) {\n  const [sliderLow, setsliderLow] = useState(levelLow)\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\n  const setSlider = useCallback(\n    (e, [l, h]) => {\n      setsliderLow(l)\n      setsliderHigh(h)\n    },\n    [setsliderLow, setsliderHigh])\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\n\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\n    <CustomNumberInput\n      value={sliderLow}\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\n      sx={{ pl: 2, width: 100, }}\n      inputProps={{ sx: { textAlign: \"center\" } }}\n      startAdornment={\"Level: \"}\n    />\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\n      getAriaLabel={() => 'Arifact Level Range'}\n      value={[sliderLow, sliderHigh]}\n      onChange={setSlider}\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\n      valueLabelDisplay=\"auto\"\n      min={0} max={20} step={1} marks\n    />\n    <CustomNumberInput\n      value={sliderHigh}\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\n      sx={{ px: 1, width: 50, }}\n      inputProps={{ sx: { textAlign: \"center\" } }}\n    />\n  </Card>\n}","import { Replay } from \"@mui/icons-material\";\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\nimport React, { useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\nimport ImgIcon from \"../Image/ImgIcon\";\nimport { Stars } from \"../StarDisplay\";\n\ntype props = Omit<ButtonProps, \"onChange\"> & {\n  selectedSetKey?: ArtifactSetKey | \"\"\n  onChange: (setKey: ArtifactSetKey | \"\") => void\n  hasUnselect?: boolean\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\n}\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\n  const { t } = useTranslation(\"artifact\")\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const sheet = artifactSheets?.[selectedSetKey]\n  const displaySets = useMemo(() => {\n    if (artifactSetsByRarity) return artifactSetsByRarity\n    if (!artifactSheets) return {}\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\n  }, [artifactSheets, artifactSetsByRarity])\n  return <DropdownButton\n    {...props}\n    title={sheet?.name ?? t`editor.set.artifactSet`}\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\n    color={sheet ? \"success\" : \"primary\"}\n  >\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <ListItemText>\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\n      </ListItemText>\n    </MenuItem >}\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\n        <Typography>\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\n        </Typography>\n      </MenuItem>] : []),\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\n        <ListItemIcon>\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\n        </ListItemIcon>\n        <ListItemText>\n          {artifactSheets?.[setKey]?.name}\n        </ListItemText>\n      </MenuItem >)\n    ])}\n  </DropdownButton>\n}\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\n\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\n  <Tooltip {...props} arrow classes={{ popper: className }} />\n))(({ theme }) => ({\n  [`& .${tooltipClasses.arrow}`]: {\n    color: theme.palette.common.black,\n  },\n  [`& .${tooltipClasses.tooltip}`]: {\n    backgroundColor: theme.palette.common.black,\n  },\n}));\nexport default BootstrapTooltip","import { BusinessCenter, Replay } from \"@mui/icons-material\";\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\nimport { useContext } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\nimport { DatabaseContext } from \"../../Database/Database\";\nimport usePromise from \"../../ReactHooks/usePromise\";\nimport { CharacterKey } from \"../../Types/consts\";\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\nimport ThumbSide from \"./ThumbSide\";\n\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\n  value: CharacterKey | \"\"\n  onChange: (ck: CharacterKey | \"\") => void\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\n  inventory?: boolean\n  noUnselect?: boolean,\n  unSelectText?: Displayable,\n  unSelectIcon?: Displayable,\n}\n\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\n  const { t } = useTranslation(\"ui\");\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\n  return <DropdownButton\n    {...props}\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\n    color={value ? \"success\" : \"primary\"}\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`inventory`}\n      </Typography>\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {t`unselect`}\n      </Typography>\n    </MenuItem>)}\n    {!noUnselect && <Divider key=\"div\" />}\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\n  </DropdownButton >\n}\n\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\n  return characterKeys.map(characterKey =>\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\n      <ListItemIcon>\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\n      </ListItemIcon>\n      <Typography variant=\"inherit\" noWrap>\n        {characterSheets?.[characterKey]?.name}\n      </Typography>\n    </MenuItem>)\n}\n","import { styled } from \"@mui/system\";\n\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\n  display: \"inline-block\",\n  width: \"auto\",\n  height: `2.3em`,\n  lineHeight: 1,\n  verticalAlign: \"text-bottom\",\n  marginTop: theme.spacing(-3),\n  marginLeft: theme.spacing(-1.25),\n  marginRight: theme.spacing(-1),\n  marginBottom: theme.spacing(-1),\n}))\n\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\ntype props = Omit<InputProps, \"onChange\"> & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  transition: \"all 0.5s ease\",\n  \"&:hover\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-focused\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n  },\n}))\n\nconst Wrapper = styled(Button)(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  padding: 0,\n  overflow: \"hidden\",\n  \"div\": {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}))\n\n// wrap the Input with this when using the input in a buttongroup\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\n}\n\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\n  const [number, setNumber] = useState(value)\n  const [focused, setFocus] = useState(false)\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\n  const onBlur = useCallback(\n    () => {\n      onChange(number)\n      setFocus(false)\n    },\n    [onChange, number, setFocus],\n  )\n  const onFocus = useCallback(\n    () => {\n      setFocus(true)\n    },\n    [setFocus],\n  )\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\n  return <StyledInputBase\n    value={(focused && !number) ? \"\" : number}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={onInputChange}\n    onBlur={onBlur}\n    onFocus={onFocus}\n    disabled={disabled}\n    onKeyDown={onKeyDOwn}\n    {...props}\n  />\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\nimport { Suspense, useState } from \"react\"\nimport { dbStorage } from \"../Database/DBStorage\"\nimport { getRandomElementFromArray } from \"../Util/Util\"\nimport CardDark from \"./Card/CardDark\"\nimport CloseButton from \"./CloseButton\"\nimport ModalWrapper from \"./ModalWrapper\"\nimport { Translate } from \"./Translate\"\n\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\n  const closeModal = () => {\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\n    infoShown[pageKey] = false\n    dbStorage.set(\"infoShown\", infoShown)\n    setshowInfoModal(false)\n  }\n  return <CardDark >\n    <Grid container>\n      <Grid item flexGrow={1}>\n        <Typography variant=\"caption\" pl={1} >\n          {displayText}\n        </Typography>\n      </Grid>\n      <Grid item xs=\"auto\">\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\n          <Translate ns=\"ui\" key18=\"info\" />\n        </Button>\n      </Grid>\n    </Grid>\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\n      <CardDark >\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">{modalTitle}</Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={closeModal} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\n            {children}\n          </Suspense>\n        </CardContent>\n        <Divider />\n        <CardContent sx={{ py: 1 }}>\n          <CloseButton large onClick={closeModal} />\n        </CardContent>\n      </CardDark>\n    </ModalWrapper >\n  </CardDark>\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\n\ntype SortByButtonProps = ButtonGroupProps & {\n  sortKeys: string[]\n  value: string\n  onChange: (value: string) => void\n  ascending: boolean\n  onChangeAsc: (value: boolean) => void\n}\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\n  const { t } = useTranslation(\"ui\")\n  return <ButtonGroup {...props} >\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\n      {sortKeys.map(key =>\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\n    </DropdownButton>\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\n    </Button>\n  </ButtonGroup>\n}","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\nimport React, { useCallback, useContext } from 'react';\nimport CardLight from './Card/CardLight';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\nimport DropdownButton from './DropdownMenu/DropdownButton';\nimport { DataContext } from '../DataContext';\nimport { uiInput as input } from '../Formula';\nimport KeyMap, { StatKey } from '../KeyMap';\nimport { ElementKey } from '../Types/consts';\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\n  const { data } = useContext(DataContext)\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\n  const charEle = data.get(input.charEle).value as ElementKey\n  statKeys.push(`${charEle}_dmg_`)\n\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\n  return <CardLight>\n    <CardContent sx={{ py: 1 }}>\n      <Typography>Minimum Final Stat Filter</Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container spacing={1}>\n        {Object.entries(statFilters).map(([statKey, min]) => {\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\n            delete statFilters[statKey]\n            setStatFilters({ ...statFilters })\n          }} /></Grid>\n        })}\n        <Grid item xs={12}>\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\n        </Grid>\n      </Grid>\n    </CardContent>\n  </CardLight>\n}\n\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\n}) {\n  const isFloat = KeyMap.unit(statKey) === \"%\"\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\n  return <ButtonGroup sx={{ width: \"100%\" }}>\n    <DropdownButton\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\n      disabled={disabled}\n    >\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\n    </DropdownButton>\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\n      <CustomNumberInput\n        disabled={!statKey}\n        float={isFloat}\n        value={value}\n        placeholder=\"Min Value\"\n        onChange={onChange}\n        sx={{ px: 2 }}\n      />\n    </CustomNumberInputButtonGroupWrapper>\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\n  </ButtonGroup>\n}\n","import { Button, ButtonProps, styled } from \"@mui/material\";\n\nconst DisabledButton = styled(Button)(({ theme }) => ({\n  \"&.Mui-disabled\": {\n    backgroundColor: theme.palette.primary.dark,\n    color: theme.palette.text.secondary,\n  }\n}))\n\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\n  return <DisabledButton {...props} disabled  >\n    {children}\n  </DisabledButton>\n}\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\nimport { Translate } from \"../../Components/Translate\";\nimport { mergeData } from \"../../Formula/api\";\nimport { Data } from \"../../Formula/type\";\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\nimport { DocumentSection } from \"../../Types/sheet\";\nimport { UIData } from \"../../Formula/uiData\"\nimport { input } from \"../../Formula\"\nimport SqBadge from \"../../Components/SqBadge\";\nimport IConditional from \"../../Types/IConditional_WR\";\n\n// TODO: remove typecasting once all sheets populated\nconst artifactSheets = import(\".\").then(imp => imp.default)\n\nexport interface IArtifactSheet {\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\n  rarity: readonly ArtifactRarity[],\n  icons: Dict<SlotKey, string>,\n  setEffects: Dict<SetNum, SetEffectEntry>\n}\nexport interface SetEffectEntry {\n  document?: DocumentSection[],\n}\n\n\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\nexport class ArtifactSheet {\n  readonly sheet: IArtifactSheet\n  readonly key: ArtifactSetKey\n  readonly data: Data\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\n    this.sheet = sheet\n    this.key = setKey\n    this.data = data\n  }\n\n  get name() { return tr(this.key, \"setName\") }\n  get defIconSrc() {\n    const slotKey = this.slots[0]\n    if (!this.slotIcons[slotKey]) return undefined\n    return this.slotIcons[slotKey]\n  }\n  get defIcon() { return <ImgIcon src={this.defIconSrc} sx={{ fontSize: \"1.5em\" }} /> }\n  /**\n   * @deprecated use src directly\n   */\n  get nameWithIcon() {\n    const slotKey = this.slots[0]\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\n  }\n\n  //This is only for OCR, because we only scan in english right now.\n  get nameRaw(): string { return this.sheet.name }\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\n  get slots(): SlotKey[] {\n    switch (this.key) {\n      case \"PrayersForDestiny\":\n      case \"PrayersForIllumination\":\n      case \"PrayersForWisdom\":\n      case \"PrayersToSpringtime\": return [\"circlet\"]\n      default: return [...allSlotKeys]\n    }\n  }\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\n\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\n  static get getAll() { return artifactSheets }\n  static get getAllData() { return allData }\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\n    Object.entries(sheets).forEach(([key, sheet]) => {\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\n      if (grouped[rarity]) grouped[rarity]!.push(key)\n      else grouped[rarity] = [key]\n    })\n    return grouped\n  }\n\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\n      if (setNums.length) artifactSetEffect[setKey] = setNums\n    })\n    return artifactSetEffect\n  }\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\n}\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\n  return {\n    title: tr(\"setName\"),\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\n    action: <SqBadge color=\"success\">4-set</SqBadge>\n  }\n}\n","import { createContext } from \"react\"\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\nimport { UIData } from \"./Formula/uiData\"\nimport { ICachedCharacter } from \"./Types/character_WR\"\nimport { CharacterKey } from \"./Types/consts\"\nimport { ICachedWeapon } from \"./Types/weapon_WR\"\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\nexport type TeamData = Partial<Record<CharacterKey, {\n  target: UIData\n  buffs: Dict<CharacterKey, UIData>\n  character: ICachedCharacter\n  weapon: ICachedWeapon\n  characterSheet: CharacterSheet\n  weaponSheet: WeaponSheet\n}>>\nexport type dataContextObj = {\n  character: ICachedCharacter\n  characterSheet: CharacterSheet\n  data: UIData\n  oldData?: UIData\n  mainStatAssumptionLevel: number\n  teamData: TeamData\n  characterDispatch: (_: any) => void\n}\n\n// If using this context without a Provider, then stuff will crash...\n// In theory, none of the components that uses this context should work without a provider...\nexport const DataContext = createContext({} as dataContextObj)\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\nimport Artifact from \"../Data/Artifacts/Artifact\";\nimport { probability } from \"./RollProbability\";\nimport { SubstatKey } from \"../Types/artifact_WR\";\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\nexport const artifactSortKeysTC = [\"probability\"] as const\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\nexport type FilterOption = {\n  artSetKeys: ArtifactSetKey[],\n  rarity: ArtifactRarity[],\n  levelLow: number,\n  levelHigh: number,\n  slotKeys: SlotKey[],\n  mainStatKeys: MainStatKey[],\n  substats: SubstatKey[]\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\n  excluded: \"excluded\" | \"included\" | \"\",\n}\n\ntype ArtifactSortFilter = {\n  filterOption: FilterOption\n  ascending: boolean\n  sortType: ArtifactSortKey\n}\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\n  filterOption: {\n    artSetKeys: [],\n    rarity: [...allArtifactRarities],\n    levelLow: 0,\n    levelHigh: 20,\n    slotKeys: [...allSlotKeys],\n    mainStatKeys: [],\n    substats: [],\n    location: \"\",\n    excluded: \"\",\n  },\n  ascending: false,\n  sortType: artifactSortKeys[0],\n})\n\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\n  return {\n    rarity: {\n      getValue: art => art.rarity ?? 0,\n      tieBreaker: \"level\"\n    },\n    level: {\n      getValue: art => art.level ?? 0,\n      tieBreaker: \"artsetkey\"\n    },\n    artsetkey: {\n      getValue: art => art.setKey ?? \"\",\n      tieBreaker: \"level\"\n    },\n    efficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\n    },\n    mefficiency: {\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\n    },\n    probability: {\n      getValue: art => {\n        if (!Object.keys(probabilityFilter).length) return 0\n        const prob = (art as any).probability\n        if (prob === undefined) return probability(art, probabilityFilter);\n        return prob\n      }\n    }\n  }\n}\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\n  return {\n    excluded: (art, filter) => {\n      if (filter === \"excluded\" && !art.exclude) return false\n      if (filter === \"included\" && art.exclude) return false\n      return true\n    },\n    location: (art, filter) => {\n      if (!filter) return true\n      if (filter === \"Inventory\" && !art.location) return true\n      if (filter === \"Equipped\" && art.location) return true\n      if (filter === art.location) return true\n      return false\n    },\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\n    slotKeys: (art, filter) => filter.length ? filter.includes(art.slotKey) : true,\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\n    levelLow: (art, filter) => filter <= art.level,\n    levelHigh: (art, filter) => filter >= art.level,\n    rarity: (art, filter) => filter.includes(art.rarity),\n    substats: (art, filter) => {\n      for (const filterKey of filter)\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\n      return true\n    }\n  }\n}\n","import { ButtonProps, MenuItem } from \"@mui/material\";\nimport { useTranslation } from \"react-i18next\";\nimport { ArtifactRarity } from \"../../Types/consts\";\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\nimport { Stars } from \"../StarDisplay\";\n\ntype props = ButtonProps & {\n  rarity?: ArtifactRarity\n  onChange: (rarity: ArtifactRarity) => void\n  filter: (ArtifactRarity) => boolean\n}\n\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\n  const { t } = useTranslation(\"artifact\")\n  return <DropdownButton\n    {...props}\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\n    color={rarity ? \"success\" : \"primary\"}\n  >\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\n        <Stars stars={rarity} />\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { Replay } from \"@mui/icons-material\"\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\nimport { useTranslation } from \"react-i18next\"\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\n\ntype ArtifactSlotDropdownProps = ButtonProps & {\n  slotKey?: SlotKey | \"\"\n  onChange: (slotKey: SlotKey | \"\") => void\n  hasUnselect?: boolean\n}\n\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  return <DropdownButton\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\n    color={slotKey ? \"success\" : \"primary\"}\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\n    {...props}\n  >\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <ListItemText>\n        {t`ui:unselect`}\n      </ListItemText>\n    </MenuItem>}\n    {hasUnselect && <Divider />}\n    {allSlotKeys.map(key =>\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\n        <ListItemIcon>\n          {artifactSlotIcon(key)}\n        </ListItemIcon>\n        <ListItemText>\n          {t(`artifact:slotName:${key}`)}\n        </ListItemText>\n      </MenuItem>)}\n  </DropdownButton>\n}\n","import { TextField, TextFieldProps } from '@mui/material'\nimport { useCallback, useEffect, useState } from 'react'\ntype props = TextFieldProps & {\n  value?: number | undefined,\n  onChange: (newValue: number | undefined) => void,\n  disabled?: boolean\n  float?: boolean,\n  allowEmpty?: boolean,\n}\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\n  const [state, setState] = useState(\"\")\n  const sendChange = useCallback(\n    () => {\n      if (state === \"\") return onChange(0)\n      const parseFunc = float ? parseFloat : parseInt\n      onChange(parseFunc(state))\n    },\n    [onChange, state, float],\n  )\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\n\n  return <TextField\n    value={state}\n    aria-label=\"custom-input\"\n    type=\"number\"\n    onChange={(e: any) => setState(e.target.value)}\n    onBlur={sendChange}\n    disabled={disabled}\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\n    {...props}\n  />\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Box, Grid, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans } from 'react-i18next';\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\nimport CardLight from '../../../Components/Card/CardLight';\nimport PercentBadge from '../../PercentBadge';\n\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\n  return <CardLight sx={{ py: 1, px: 2 }}>\n    <Grid container spacing={1}>\n      <Grid item>{t(`editor.${eff}`)}</Grid>\n      <Grid item flexGrow={1}>\n        <BootstrapTooltip placement=\"top\" title={<span>\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\n        </span>}>\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\n        </BootstrapTooltip>\n      </Grid>\n      <Grid item xs=\"auto\">\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\n      </Grid>\n    </Grid>\n  </CardLight>\n}\n","import { Box, Button, ButtonGroup, Grid, MenuItem, Typography } from '@mui/material';\nimport React from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport CardLight from '../../../Components/Card/CardLight';\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\nimport SqBadge from '../../../Components/SqBadge';\nimport TextButton from '../../../Components/TextButton';\nimport Artifact from '../../../Data/Artifacts/Artifact';\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\nimport { clamp } from '../../../Util/Util';\nimport PercentBadge from '../../PercentBadge';\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\n  const { t } = useTranslation(\"artifact\")\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\n\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\n  const unit = KeyMap.unit(key), rollNum = rolls.length\n\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\n\n  if (artifact) {\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\n    const rarity = artifact.rarity\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\n    const maxRollNum = numUpgrades + high - 3;\n    allowedRolls = maxRollNum - rollNum\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\n  }\n  const rollOffset = 7 - rollData.length\n\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\n\n  return <CardLight>\n    <Box sx={{ display: \"flex\" }}>\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\n        <DropdownButton title={key ? KeyMap.get(key) : t('editor.substat.substatFormat', { value: index + 1 })} disabled={!artifact} color={key ? \"success\" : \"primary\"} sx={{ whiteSpace: \"nowrap\" }}>\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\n          {allSubstats.filter(key => mainStatKey !== key)\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\n              {KeyMap.get(k)}\n            </MenuItem>)}\n        </DropdownButton>\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\n          <CustomNumberInput\n            float={unit === \"%\"}\n            placeholder={t`editor.substat.selectSub`}\n            value={key ? value : undefined}\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\n            disabled={!key}\n            error={!!error}\n            sx={{\n              px: 1,\n            }}\n            inputProps={{\n              sx: { textAlign: \"right\" }\n            }}\n          />\n        </CustomNumberInputButtonGroupWrapper>\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\n        {rollData.map((v, i) => {\n          let newValue = cacheValueString(accurateValue + v, unit)\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\n        })}\n      </ButtonGroup>\n    </Box>\n    <Box sx={{ p: 1, }}>\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\n        <Grid item>\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\n          </SqBadge>\n        </Grid>\n        <Grid item flexGrow={1}>\n          {!!rolls.length && [...rolls].sort().map(val =>\n            <Typography component=\"span\" key={val} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\n        </Grid>\n        <Grid item xs=\"auto\" flexShrink={1}>\n          <Typography>\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\n            </Trans>\n          </Typography>\n        </Grid>\n      </Grid>}\n\n    </Box>\n  </CardLight >\n}\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\nimport CardDark from '../../../Components/Card/CardDark';\nimport CloseButton from '../../../Components/CloseButton';\nimport ModalWrapper from '../../../Components/ModalWrapper';\nimport scan_art_main from \"./imgs/scan_art_main.png\";\nimport Snippet from \"./imgs/snippet.png\";\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\n  return <ModalWrapper open={modalShow} onClose={hide} >\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Grid container>\n          <Grid item flexGrow={1}>\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\n          </Grid>\n          <Grid item>\n            <CloseButton onClick={hide} />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Alert variant=\"outlined\" severity=\"warning\">\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\n        </Alert>\n        <Grid container spacing={1} mt={1}>\n          <Grid item xs={8} md={4}>\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\n          </Grid>\n          <Grid item xs={12} md={8}>\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\n            <Typography variant=\"h6\">Single artifact</Typography>\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\n          </Grid>\n          <Grid item xs={12} md={7}>\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\n          </Grid>\n          <Grid item xs={8} md={5}>\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\n          </Grid>\n        </Grid>\n      </CardContent>\n      <Divider />\n      <CardContent sx={{ py: 1 }}>\n        <CloseButton large onClick={hide} />\n      </CardContent>\n    </CardDark>\n  </ModalWrapper>\n}","export class BorrowManager<T> {\n  data: Dict<string, { value: T, refCount: number }> = {}\n  init: (key: string) => T\n  deinit: (key: string, value: T) => void\n\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\n    this.init = init\n    this.deinit = deinit\n  }\n\n  /**\n   * Borrow the object corresponding to `key`, creating the object as necessary.\n   * The borrowing ends when `callback`'s promise is fulfilled.\n   * When the last borrowing ends, `deinit` the object.\n   *\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\n   */\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\n    if (!this.data[key]) {\n      this.data[key] = { value: this.init(key), refCount: 0 }\n    }\n\n    const box = this.data[key]!\n    box.refCount += 1\n    const result = await callback(box.value)\n    box.refCount -= 1\n    if (!box.refCount) {\n      // Last user. Cleaning up\n      delete this.data[key]\n      this.deinit(key, box.value)\n    }\n    return result\n  }\n}\n","import React from 'react';\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\nimport ColorText from '../Components/ColoredText';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport KeyMap, { valueString } from '../KeyMap';\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\nimport { BorrowManager } from './BorrowManager';\n\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\nconst workerCount = 2\n\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\n  const scheduler = createScheduler()\n  const promises = Array(workerCount).fill(0).map(async _ => {\n    const worker = createWorker({\n      errorHandler: console.error\n    })\n\n    await worker.load()\n    await worker.loadLanguage(language)\n    await worker.initialize(language)\n    scheduler.addWorker(worker)\n  })\n\n  await Promise.any(promises)\n  return scheduler\n}, (_language, value) => {\n  value.then(value => value.terminate())\n})\n\nexport type ProcessedEntry = {\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\n}\nexport type OutstandingEntry = {\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\n}\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\ntype ProcessingMessage = { type: \"processing\" }\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\ntype PopMessage = { type: \"pop\" }\ntype ClearMessage = { type: \"clear\" }\ntype Color = [number, number, number] // RGB\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\n  switch (message.type) {\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\n    case \"processing\": // Processing `outstanding` head. Refresh\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\n    case \"processed\":\n      if (queue.outstanding[0].file === message.file)\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\n      return queue // Not in the list, ignored\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\n    case \"clear\": return { processed: [], outstanding: [] }\n  }\n}\n\nexport function processEntry(entry: OutstandingEntry) {\n  if (entry.result) return\n\n  const { file, fileName } = entry\n  entry.imageURL = fileToURL(file)\n  entry.result = entry.imageURL.then(async imageURL => {\n    const sheets = await ArtifactSheet.getAll\n    const ocrResult = await ocr(imageURL)\n\n    const [artifact, texts] = findBestArtifact(\n      sheets, ocrResult.rarities,\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\n      parseSlotKeys(ocrResult.whiteTexts),\n      parseSubstats(ocrResult.substatTexts),\n      parseMainStatKeys(ocrResult.whiteTexts),\n      parseMainStatValues(ocrResult.whiteTexts)\n    )\n\n    return { file, result: { fileName, imageURL, artifact, texts } }\n  })\n}\n\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\n  const reader = new FileReader()\n  reader.onloadend = ({ target }) =>\n    resolve(target!.result as string)\n  reader.readAsDataURL(file)\n})\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\n  const img = new Image()\n  img.onload = ({ target }) =>\n    resolve(imageToImageData(target as HTMLImageElement))\n  img.src = urlFile\n})\nfunction imageToImageData(image: HTMLImageElement): ImageData {\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\n  canvas.width = image.width\n  canvas.height = image.height\n  context.drawImage(image, 0, 0, image.width, image.height)\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\n}\nfunction imageDataToCanvas(imageData: ImageData) {\n  // create off-screen canvas element\n  const canvas = document.createElement('canvas')\n  canvas.width = imageData.width\n  canvas.height = imageData.height\n\n  // update canvas with new data\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\n  return canvas // produces a PNG file\n}\n\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\n  const imageData = await urlToImageData(imageURL)\n\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\n\n  const awaits = [\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\n  ]\n\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\n}\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\n  const canvas = imageDataToCanvas(imageData)\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\n  return rec.data.lines.map(line => line.text)\n}\n\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\n  // TODO: restore\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\n\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    // TODO: restore\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n    location: \"\", lock: false, exclude: false,\n  }]\n\n  // Rate each rarity\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\n    let score = 0\n    if (textSetKeys.size) {\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\n      score += count / textSetKeys.size\n    }\n    if (substats.length) {\n      const count = substats.reduce((count, substat) =>\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\n      score += count / substats.length * 2\n    }\n    return score\n  })\n\n  // Test all *probable* combinations\n  for (const slotKey of allSlotKeys) {\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\n      const relevantMainStatValues = mainStatValues\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\n        .map(value => value.mainStatValue)\n\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\n        const rarity = parseInt(rarityString) as ArtifactRarity\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\n        const rarityScore = mainStatScore + rarityIndividualScore\n\n        if (rarityScore + 2 < bestScore) continue // Early bail out\n\n        for (const minimumMainStatValue of relevantMainStatValues) {\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\n          const mainStatVal = values[level]\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\n\n          for (const setKey of setKeys) {\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\n            if (score >= bestScore) {\n              if (score > bestScore) bestArtifacts = []\n              bestScore = score\n              bestArtifacts.push({\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\n              })\n            }\n          }\n        }\n        if (rarityScore >= bestScore) {\n          const level = 0\n          for (const setKey of setKeys) {\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\n\n            if (score > bestScore) bestArtifacts = []\n            bestScore = score\n            bestArtifacts.push({\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\n            })\n          }\n        }\n      }\n    }\n  }\n\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\n  const chosen = {\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\n  } as Dict<keyof ICachedArtifact, Set<string>>\n\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\n  result.substats = substats.filter((substat, i) =>\n    substat.key !== result.mainStatKey &&\n    substats.slice(0, i).every(other => other.key !== substat.key))\n  for (let i = result.substats.length; i < 4; i++)\n    result.substats.push({ key: \"\", value: 0 })\n\n  for (const other of bestArtifacts) {\n    chosen.setKey!.add(other.setKey)\n    chosen.rarity!.add(other.rarity as any)\n    chosen.level!.add(other.level as any)\n    chosen.slotKey!.add(other.slotKey)\n    chosen.mainStatKey!.add(other.mainStatKey)\n  }\n\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\n  }\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\n  }\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\n  }\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\n  }\n\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\n    if (recommended.size > 1)\n      texts[key] = ambiguousText(result[key], [...available], name, text)\n    else if (recommended.size === 1)\n      texts[key] = detectedText(result[key], name, text)\n    else if (chosen[key]!.size > 1)\n      texts[key] = unknownText(result[key], name, text)\n    else\n      texts[key] = inferredText(result[key], name, text)\n  }\n\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{valueString(value.value, KeyMap.unit(value.key))}</>)}</div>)\n  }</>\n\n  const unit = KeyMap.unit(result.mainStatKey)\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\n    if (mainStatKeys.has(result.mainStatKey)) {\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\n    } else {\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\n    }\n  } else {\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}</>)\n  }\n\n  return [result, texts]\n}\n\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\n  const results = new Set<ArtifactSetKey>([])\n  for (const text of texts)\n    for (const key of allArtifactSets)\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\n  const results = new Set<Rarity>([])\n  for (let y = 0; y < height; y++) {\n    let star = 0, onStar = false;\n    for (let x = 0; x < width; x++) {\n      let i = (y * width + x) * 4\n      let r = d[i], g = d[i + 1], b = d[i + 2];\n      if (colorCloseEnough({ r, g, b }, starColor)) {\n        if (!onStar) {\n          onStar = true\n          star++\n        }\n      } else {\n        onStar = false\n      }\n    }\n\n    if (lastRowNum !== star) {\n      lastRowNum = star\n      rowsWithNumber = 1;\n    } else if (lastRowNum) {\n      rowsWithNumber++\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\n    }\n  }\n  return results\n}\nfunction colorCloseEnough(color1, color2, threshold = 5) {\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\n  return intCloseEnough(color1.r, color2.r) &&\n    intCloseEnough(color1.g, color2.g) &&\n    intCloseEnough(color1.b, color2.b)\n}\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\n  const results = new Set<SlotKey>()\n  for (const text of texts)\n    for (const key of allSlotKeys)\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\n        results.add(key)\n  return results\n}\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\n  const results = new Set<MainStatKey>([])\n  for (const text of texts)\n    for (const key of allMainStatKeys) {\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\n        results.add(key)\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\n        results.add(key)\n    }\n  return results\n}\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\n  const results: { mainStatValue: number, unit?: string }[] = []\n  for (const text of texts) {\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\n    let match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\n    match = regex.exec(text)\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\n  }\n  return results\n}\nfunction parseSubstats(texts: string[]): ISubstat[] {\n  const matches: ISubstat[] = []\n  for (let text of texts) {\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\n    //parse substats\n    allSubstats.forEach(key => {\n      const name = KeyMap.getStr(key)\n      const regex = KeyMap.unit(key) === \"%\" ?\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\n      const match = regex.exec(text)\n      if (match)\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\n    })\n  }\n  return matches.slice(0, 4)\n}\n\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\n  const { region = \"all\", mode = \"color\" } = options\n  const d = Uint8ClampedArray.from(pixelData.data)\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\n  const bw = mode === \"bw\", invert = mode === \"invert\"\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n  for (let i = 0; i < d.length; i += 4) {\n    const r = d[i], g = d[i + 1], b = d[i + 2];\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\n      r >= color1[0] && r <= color2[0] &&\n      g >= color1[1] && g <= color2[1] &&\n      b >= color1[2] && b <= color2[2]) {\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\n      else if (invert) {\n        d[i] = 255 - r\n        d[i + 1] = 255 - g\n        d[i + 2] = 255 - b\n      } // else orignal color\n    } else {\n      d[i] = d[i + 1] = d[i + 2] = 255\n    }\n  }\n  return new ImageData(d, pixelData.width, pixelData.height)\n}\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Add, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, MenuItem, Skeleton, styled, Typography } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport { Trans, useTranslation } from 'react-i18next';\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\nimport CardDark from '../Components/Card/CardDark';\nimport CardLight from '../Components/Card/CardLight';\nimport CloseButton from '../Components/CloseButton';\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\nimport ImgIcon from '../Components/Image/ImgIcon';\nimport ModalWrapper from '../Components/ModalWrapper';\nimport Artifact from '../Data/Artifacts/Artifact';\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\nimport { DatabaseContext } from '../Database/Database';\nimport { parseArtifact, validateArtifact } from '../Database/validation';\nimport KeyMap, { cacheValueString } from '../KeyMap';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport usePromise from '../ReactHooks/usePromise';\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\nimport { clamp, deepClone } from '../Util/Util';\nimport ArtifactCard from './ArtifactCard';\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\n\nconst maxProcessingCount = 3, maxProcessedCount = 16\nconst allSubstatFilter = new Set(allSubstats)\ntype ResetMessage = { type: \"reset\" }\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\ninterface IEditorArtifact {\n  setKey: ArtifactSetKey,\n  slotKey: SlotKey,\n  level: number,\n  rarity: ArtifactRarity,\n  mainStatKey: MainStatKey,\n  substats: ISubstat[],\n}\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\n  switch (action.type) {\n    case \"reset\": return\n    case \"substat\": {\n      const { index, substat } = action\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\n      if (oldIndex === -1 || oldIndex === index)\n        state!.substats[index] = substat\n      else  // Already in used, swap the items instead\n        [state!.substats[index], state!.substats[oldIndex]] =\n          [state!.substats[oldIndex], state!.substats[index]]\n      return { ...state! }\n    }\n    case \"overwrite\": return action.artifact\n    case \"update\": return { ...state!, ...action.artifact }\n  }\n}\n\nconst InputInvis = styled('input')({\n  display: 'none',\n});\n\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: { artifactIdToEdit: string, cancelEdit: () => void }) {\n  const { t } = useTranslation(\"artifact\")\n\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n\n  const database = useContext(DatabaseContext)\n\n  const [show, setShow] = useState(false)\n\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\n\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\n\n  const [modalShow, setModalShow] = useState(false)\n\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\n\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\n\n  const remaining = processed.length + outstanding.length\n\n  const image = firstProcessed?.imageURL ?? processingImageURL\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\n\n  useEffect(() => {\n    if (!artifact && artifactProcessed)\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\n  }, [artifact, artifactProcessed, artifactDispatch])\n\n  useEffect(() => {\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\n    const processingCurrent = numProcessing && !outstanding[0].result\n    outstanding.slice(0, numProcessing).forEach(processEntry)\n    if (processingCurrent)\n      dispatchQueue({ type: \"processing\" })\n  }, [processed.length, outstanding])\n\n  useEffect(() => {\n    if (processingResult)\n      dispatchQueue({ type: \"processed\", ...processingResult })\n  }, [processingResult, dispatchQueue])\n\n  const uploadFiles = useCallback((files: FileList) => {\n    setShow(true)\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\n  }, [dispatchQueue, setShow])\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\n\n  useEffect(() => {\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\n    window.addEventListener('paste', pasteFunc);\n    return () =>\n      window.removeEventListener('paste', pasteFunc)\n  }, [uploadFiles])\n\n  const onUpload = useCallback(\n    e => {\n      uploadFiles(e.target.files)\n      e.target.value = null // reset the value so the same file can be uploaded again...\n    },\n    [uploadFiles],\n  )\n\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\n\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\n    const validated = validateArtifact(artifact, artifactIdToEdit)\n    if (old) {\n      validated.artifact.location = old.location\n      validated.artifact.exclude = old.exclude\n    }\n    return validated\n  }, [artifact, artifactIdToEdit, old])\n\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\n  useEffect(() => {\n    if (artifactIdToEdit === \"new\") {\n      setShow(true)\n      artifactDispatch({ type: \"reset\" })\n    }\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\n    if (databaseArtifact) {\n      setShow(true)\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\n    }\n  }, [artifactIdToEdit, database, dirtyDatabase])\n\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\n  const reset = useCallback(() => {\n    cancelEdit?.();\n    dispatchQueue({ type: \"pop\" })\n    artifactDispatch({ type: \"reset\" })\n  }, [cancelEdit, artifactDispatch])\n  const update = useCallback((newValue: Partial<IArtifact>) => {\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\n\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\n    }\n\n    if (newValue.setKey) {\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\n    }\n    if (newValue.rarity)\n      newValue.level = artifact?.level ?? 0\n    if (newValue.level)\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\n    if (newValue.slotKey)\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\n\n    if (newValue.mainStatKey) {\n      newValue.substats = [0, 1, 2, 3].map(i =>\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\n    }\n    artifactDispatch({ type: \"update\", artifact: newValue })\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\n    artifactDispatch({ type: \"substat\", index, substat })\n  }, [artifactDispatch])\n  const isValid = !errors.length\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\n  const preventClosing = processed.length || outstanding.length\n  const onClose = useCallback(\n    (e) => {\n      if (preventClosing) e.preventDefault()\n      setShow(false)\n      cancelEdit()\n    }, [preventClosing, setShow, cancelEdit])\n  return <ModalWrapper open={show} onClose={onClose} >\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\n      <CardHeader\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\n      />\n      <CardContent sx={{ pt: 0 }}>\n        <Grid container spacing={1} sx={{ mb: 1 }}>\n          {/* Left column */}\n          <Grid item xs={12} md={6} lg={6} sx={{\n            // select all excluding last\n            \"> div:nth-last-of-type(n+2)\": { mb: 1 }\n          }}>\n            {/* set & rarity */}\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\n              {/* Artifact Set */}\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\n              {/* rarity dropdown */}\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\n            </ButtonGroup>\n\n            {/* level */}\n            <Box component=\"div\" display=\"flex\">\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\n              />\n              <ButtonGroup >\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\n              </ButtonGroup>\n            </Box>\n\n            {/* slot */}\n            <Box component=\"div\" display=\"flex\">\n              <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\n                  <Typography color=\"text.secondary\">\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\n                  </Typography>\n                </Suspense>\n              </CardLight>\n            </Box>\n\n            {/* main stat */}\n            <Box component=\"div\" display=\"flex\">\n              <DropdownButton title={<b>{artifact ? KeyMap.get(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >{KeyMap.get(mainStatK)}</MenuItem>)}\n              </DropdownButton>\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                <Typography color=\"text.secondary\">\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unitStr(artifact.mainStatKey)}` : t`mainStat`}\n                </Typography>\n              </CardLight>\n            </Box>\n\n            {/* Current/Max Substats Efficiency */}\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\n\n            {/* Image OCR */}\n            <CardLight>\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\n                {/* TODO: artifactDispatch not overwrite */}\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\n                  <Grid container spacing={1} alignItems=\"center\">\n                    <Grid item flexGrow={1}>\n                      <label htmlFor=\"contained-button-file\">\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\n                          Upload Screenshot (or Ctrl-V)\n                        </Button>\n                      </label>\n                    </Grid>\n                    <Grid item>\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\n                        setModalShow(true)\n                        ReactGA.modalview('/artifact/how-to-upload')\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\n                    </Grid>\n                  </Grid>\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\n                  </Box>}\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\n                    {!firstProcessed && firstOutstanding && <Grid item>\n                      <CircularProgress size=\"1em\" />\n                    </Grid>}\n                    <Grid item flexGrow={1}>\n                      <Typography>\n                        <span>\n                          Screenshots in file-queue: <b>{remaining}</b>\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\n                        </span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\n                    </Grid>\n                  </Grid></CardDark>}\n                </Suspense>\n              </CardContent>\n            </CardLight>\n          </Grid>\n\n          {/* Right column */}\n          <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* substat selections */}\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\n            {texts && <CardLight><CardContent>\n              <div>{texts.slotKey}</div>\n              <div>{texts.mainStatKey}</div>\n              <div>{texts.mainStatVal}</div>\n              <div>{texts.rarity}</div>\n              <div>{texts.level}</div>\n              <div>{texts.substats}</div>\n              <div>{texts.setKey}</div>\n            </CardContent></CardLight>}\n          </Grid>\n        </Grid>\n\n        {/* Duplicate/Updated/Edit UI */}\n        {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\n          <Grid item lg={4} md={6} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\n            <ArtifactCard artifactObj={cachedArtifact} />\n          </CardLight></Grid>\n          <Grid item lg={4} md={6} ><CardLight>\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\n            <ArtifactCard artifactObj={old} />\n          </CardLight></Grid>\n        </Grid>}\n\n        {/* Error alert */}\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\n\n        {/* Buttons */}\n        <Grid container spacing={2}>\n          <Grid item>\n            {oldType === \"edit\" ?\n              <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} color=\"primary\">\n                {t`editor.btnSave`}\n              </Button> :\n              <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\n                {t`editor.btnAdd`}\n              </Button>}\n          </Grid>\n          <Grid item flexGrow={1}>\n            <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>\n          </Grid>\n          <Grid item>\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\n          </Grid>\n          {old && oldType !== \"edit\" && <Grid item>\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\n          </Grid>}\n        </Grid>\n      </CardContent>\n    </CardDark ></Suspense>\n  </ModalWrapper>\n}\n","import { ListItemIcon, ListItemText } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { Theme, useTheme } from '@mui/material/styles';\nimport KeyMap from '../../KeyMap';\nimport { allMainStatKeys, MainStatKey } from '../../Types/artifact_WR';\nimport StatIcon from '../StatIcon';\n\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight: personName.includes(name)\n      ? theme.typography.fontWeightMedium\n      : theme.typography.fontWeightRegular,\n  };\n}\n\nexport default function ArtifactMainStatMultipleSelectChip({ mainStatKeys, setMainStatKeys }:\n  { mainStatKeys: MainStatKey[], setMainStatKeys: (keys: MainStatKey[]) => void }) {\n  const theme = useTheme();\n\n  const handleChange = (event: SelectChangeEvent<typeof mainStatKeys>) => {\n    const { target: { value }, } = event\n    setMainStatKeys((typeof value === 'string' ? value.split(',') : value) as MainStatKey[]);// On autofill we get a stringified value.\n  };\n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id=\"main-stat-multiple-chip-label\">Main Stats</InputLabel>\n        <Select\n          labelId=\"main-stat-multiple-chip-label\"\n          id=\"main-stat-multiple-chip\"\n          multiple\n          value={mainStatKeys}\n          onChange={handleChange}\n          input={<OutlinedInput id=\"main-stat-select-multiple-chip\" label=\"Main Stats\" />}\n          renderValue={(selected) => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map((value) =>\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\n              )}\n            </Box>\n          )}\n        >\n          {allMainStatKeys.map(statKey => <MenuItem key={statKey} value={statKey}>\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, mainStatKeys, theme) }}>\n              {KeyMap.get(statKey)}\n            </ListItemText>\n          </MenuItem>)}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import { Divider, ListItemIcon, ListItemText, Typography } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { Theme, useTheme } from '@mui/material/styles';\nimport { useMemo } from 'react';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\nimport usePromise from '../../ReactHooks/usePromise';\nimport { ArtifactSetKey, Rarity } from '../../Types/consts';\nimport { Stars } from '../StarDisplay';\n\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight: personName.includes(name)\n      ? theme.typography.fontWeightMedium\n      : theme.typography.fontWeightRegular,\n  };\n}\n\nexport default function ArtifactSetMultipleSelectChip({ artSetKeys, setArtSetKeys }:\n  { artSetKeys: ArtifactSetKey[], setArtSetKeys: (keys: ArtifactSetKey[]) => void }) {\n  const { t } = useTranslation(\"artifact\")\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\n  const theme = useTheme();\n\n  const handleChange = (event: SelectChangeEvent<typeof artSetKeys>) => {\n    const { target: { value }, } = event\n    setArtSetKeys((typeof value === 'string' ? value.split(',') : value) as ArtifactSetKey[]);// On autofill we get a stringified value.\n  };\n  const displaySets = useMemo(() => {\n    if (!artifactSheets) return {}\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\n  }, [artifactSheets])\n  if (!artifactSheets) return null\n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id=\"artifact-set-multiple-chip-label\">Artifact Sets</InputLabel>\n        <Select\n          labelId=\"artifact-set-multiple-chip-label\"\n          id=\"artifact-set-multiple-chip\"\n          multiple\n          value={artSetKeys}\n          onChange={handleChange}\n          input={<OutlinedInput id=\"artifact-set-select-multiple-chip\" label=\"Artifact Sets\" />}\n          renderValue={(selected) => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map((value) =>\n                <Chip key={value} icon={artifactSheets[value]?.defIcon} label={artifactSheets[value].name} />\n              )}\n            </Box>\n          )}\n        >\n          {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\n            ...((i > 0) && sets.length ? [<Divider key={`${star}divi`} />] : []),\n            ...(sets.length ? [<MenuItem key={`${star}header`} style={{ pointerEvents: 'none' }} >\n              <Typography>\n                <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\n              </Typography>\n            </MenuItem>] : []),\n            ...sets.map(setKey => <MenuItem key={setKey} value={setKey}>\n              <ListItemIcon>{artifactSheets[setKey]?.defIcon}</ListItemIcon>\n              <ListItemText primaryTypographyProps={{ style: getStyles(setKey, artSetKeys, theme) }}>\n                {artifactSheets[setKey]?.name}\n              </ListItemText>\n            </MenuItem >)\n          ])}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import { ListItemIcon, ListItemText } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport Chip from '@mui/material/Chip';\nimport FormControl from '@mui/material/FormControl';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { Theme, useTheme } from '@mui/material/styles';\nimport KeyMap from '../../KeyMap';\nimport { allSubstats, SubstatKey } from '../../Types/artifact_WR';\nimport StatIcon from '../StatIcon';\n\n\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\n  return {\n    fontWeight: personName.includes(name)\n      ? theme.typography.fontWeightMedium\n      : theme.typography.fontWeightRegular,\n  };\n}\n\nexport default function ArtifactSubStatMultipleSelectChip({ subStatKeys, setSubStatKeys }:\n  { subStatKeys: SubstatKey[], setSubStatKeys: (keys: SubstatKey[]) => void }) {\n  const theme = useTheme();\n\n  const handleChange = (event: SelectChangeEvent<typeof subStatKeys>) => {\n    const { target: { value }, } = event\n    setSubStatKeys((typeof value === 'string' ? value.split(',') : value) as SubstatKey[]);// On autofill we get a stringified value.\n  };\n  return (\n    <div>\n      <FormControl fullWidth>\n        <InputLabel id=\"sub-stat-multiple-chip-label\">Sub Stats</InputLabel>\n        <Select\n          labelId=\"sub-stat-multiple-chip-label\"\n          id=\"sub-stat-multiple-chip\"\n          multiple\n          value={subStatKeys}\n          onChange={handleChange}\n          input={<OutlinedInput id=\"sub-stat-select-multiple-chip\" label=\"Sub Stats\" />}\n          renderValue={(selected) => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map((value) =>\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.get(value)} />\n              )}\n            </Box>\n          )}\n        >\n          {allSubstats.map(statKey => <MenuItem key={statKey} value={statKey}>\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, subStatKeys, theme) }}>\n              {KeyMap.get(statKey)}\n            </ListItemText>\n          </MenuItem>)}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n","import { faBan, faChartLine, faTrash, faUserShield, faUserSlash } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { BusinessCenter, Lock, LockOpen, Replay } from \"@mui/icons-material\"\nimport { Button, CardContent, Divider, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, ToggleButton, Typography } from \"@mui/material\"\nimport { Box } from \"@mui/system\"\nimport { Suspense, useContext, useMemo } from \"react\"\nimport { Trans, useTranslation } from \"react-i18next\"\nimport ArtifactLevelSlider from \"../Components/Artifact/ArtifactLevelSlider\"\nimport ArtifactMainStatMultipleSelectChip from \"../Components/Artifact/ArtifactMainStatMultipleSelectChip\"\nimport ArtifactSetMultipleSelectChip from \"../Components/Artifact/ArtifactSetMultipleSelectChip\"\nimport ArtifactSubStatMultipleSelectChip from \"../Components/Artifact/ArtifactSubStatMultipleSelectChip\"\nimport { artifactSlotIcon } from \"../Components/Artifact/SlotNameWIthIcon\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport { CharacterMenuItemArray } from \"../Components/Character/CharacterDropdownButton\"\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\nimport SolidToggleButtonGroup from \"../Components/SolidToggleButtonGroup\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { Stars } from \"../Components/StarDisplay\"\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\nimport { DatabaseContext } from \"../Database/Database\"\nimport usePromise from \"../ReactHooks/usePromise\"\nimport { ICachedArtifact } from \"../Types/artifact\"\nimport { allArtifactRarities, allSlotKeys, CharacterKey } from \"../Types/consts\"\nimport { FilterOption } from \"./ArtifactSort\"\n\nexport default function ArtifactFilter({ filterOption, filterOptionDispatch, filterDispatch, numShowing, total, }:\n  { filterOption: FilterOption, filterOptionDispatch: (any) => void, filterDispatch: (any) => void, numShowing: number, total: number }) {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\n    location = \"\", excluded = \"\" } = filterOption\n  const locationCharacterSheet = usePromise(CharacterSheet.get(location as CharacterKey), [location])\n\n  let locationDisplay\n  if (!location) locationDisplay = t(\"filterLocation.any\")\n  else if (location === \"Inventory\") locationDisplay = <span><BusinessCenter /> {t(\"filterLocation.inventory\")}</span>\n  else if (location === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\n\n  let excludedDisplay\n  if (excluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\n  else if (excluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\n\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\n    <CardDark  >\n      <CardContent>\n        <Grid container>\n          <Grid item >\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></Typography>\n          </Grid>\n          <Grid item flexGrow={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n            {numShowing !== total && <Typography>Filtered {numShowing} / {total}</Typography>}\n          </Grid>\n          <Grid item>\n            <Button size=\"small\" color=\"error\" onClick={() => filterDispatch({ type: \"reset\" })} startIcon={<Replay />}>\n              <Trans t={t} i18nKey=\"ui:reset\" />\n            </Button>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1} mt={1}>\n          {/* left */}\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* Artifact stars filter */}\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\n              {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\n            </SolidToggleButtonGroup>\n            {/* Artifact Slot */}\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ slotKeys: newVal })} value={slotKeys} size=\"small\">\n              {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\n            </SolidToggleButtonGroup>\n            {/* Artiface level filter */}\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\n              setLow={levelLow => filterOptionDispatch({ levelLow })}\n              setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\n              setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\n            <Box display=\"flex\" gap={1}>\n              {/* location */}\n              <LocationDropdown dropdownProps={{ color: location ? \"success\" : \"primary\" }} title={locationDisplay} onChange={location => filterOptionDispatch({ location })} selectedCharacterKey={location} />\n              {/* exclusion state */}\n              <DropdownButton fullWidth title={excludedDisplay} color={excluded ? (excluded === \"included\" ? \"success\" : \"error\") : \"primary\"}>\n                <MenuItem selected={excluded === \"\"} disabled={excluded === \"\"} onClick={() => filterOptionDispatch({ excluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></MenuItem>\n                <MenuItem selected={excluded === \"excluded\"} disabled={excluded === \"excluded\"} onClick={() => filterOptionDispatch({ excluded: \"excluded\" })}>\n                  <ListItemIcon>\n                    <FontAwesomeIcon icon={faBan} />\n                  </ListItemIcon>\n                  <ListItemText>\n                    <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans>\n                  </ListItemText>\n                </MenuItem>\n                <MenuItem selected={excluded === \"included\"} disabled={excluded === \"included\"} onClick={() => filterOptionDispatch({ excluded: \"included\" })}>\n                  <ListItemIcon>\n                    <FontAwesomeIcon icon={faChartLine} />\n                  </ListItemIcon>\n                  <ListItemText>\n                    <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans>\n                  </ListItemText>\n                </MenuItem>\n              </DropdownButton>\n            </Box>\n          </Grid>\n          {/* right */}\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\n            {/* Artifact Set */}\n            <ArtifactSetMultipleSelectChip artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\n            <ArtifactMainStatMultipleSelectChip mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\n            <ArtifactSubStatMultipleSelectChip subStatKeys={substats} setSubStatKeys={substats => filterOptionDispatch({ substats })} />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </CardDark>\n  </Suspense>\n}\n\n\nfunction LocationDropdown({ title, onChange, selectedCharacterKey, dropdownProps }) {\n  const database = useContext(DatabaseContext)\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n\n  return <DropdownButton fullWidth {...dropdownProps} title={title}>\n    <MenuItem key=\"unselect\" selected={selectedCharacterKey === \"\"} disabled={selectedCharacterKey === \"\"} onClick={() => onChange(\"\")}>\n      <ListItemIcon>\n        <Replay />\n      </ListItemIcon>\n      <ListItemText>\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\n      </ListItemText>\n    </MenuItem>\n    <MenuItem key=\"inventory\" selected={selectedCharacterKey === \"Inventory\"} disabled={selectedCharacterKey === \"Inventory\"} onClick={() => onChange(\"Inventory\")}>\n      <ListItemIcon>\n        <BusinessCenter />\n      </ListItemIcon>\n      <ListItemText>\n        <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans>\n      </ListItemText>\n    </MenuItem>\n    <MenuItem key=\"equipped\" selected={selectedCharacterKey === \"Equipped\"} disabled={selectedCharacterKey === \"Equipped\"} onClick={() => onChange(\"Equipped\")}>\n      <ListItemIcon>\n        <FontAwesomeIcon icon={faUserShield} />\n      </ListItemIcon>\n      <ListItemText>\n        <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans>\n      </ListItemText>\n    </MenuItem>\n    <Divider />\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, database._getCharKeys().sort(), onChange, selectedCharacterKey)}\n  </DropdownButton>\n}\n\nexport function ArtifactRedButtons({ artifactIds, filterOption }:\n  { artifactIds: string[], filterOption: FilterOption }) {\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const database = useContext(DatabaseContext)\n  const { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock } = useMemo(() => {\n    const artifacts = artifactIds.map(id => database._getArt(id)) as ICachedArtifact[]\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 0 : 1), 0)\n    const numLock = artifacts.length - numUnlock\n    const numDelete = numUnlock\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\n    const numInclude = artifacts.length - numExclude\n\n    return { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock }\n  }, [artifactIds, database])\n\n  const unequipArtifacts = () =>\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\n    artifactIds.map(id => database.setArtLocation(id, \"\"))\n\n  const deleteArtifacts = () =>\n    window.confirm(`Are you sure you want to delete ${numDelete} artifacts?`) &&\n    artifactIds.map(id => !database._getArt(id)?.lock && database.removeArt(id))\n\n  const excludeArtifacts = () =>\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\n    artifactIds.map(id => database.updateArt({ exclude: true }, id))\n\n  const includeArtifacts = () =>\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\n    artifactIds.map(id => database.updateArt({ exclude: false }, id))\n\n  const lockArtifacts = () =>\n    window.confirm(`Are you sure you want to lock ${numUnlock} artifacts?`) &&\n    artifactIds.map(id => database.updateArt({ lock: true }, id))\n\n  const unlockArtifacts = () =>\n    window.confirm(`Are you sure you want to unlock ${numLock} artifacts?`) &&\n    artifactIds.map(id => database.updateArt({ lock: false }, id))\n\n  return <Grid container spacing={1} alignItems=\"center\">\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numUnequip} onClick={unequipArtifacts} startIcon={<FontAwesomeIcon icon={faUserSlash} />}>\n        <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numUnequip ? \"success\" : \"secondary\"}>{numUnequip}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numDelete} onClick={deleteArtifacts} startIcon={<FontAwesomeIcon icon={faTrash} />}>\n        <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numDelete ? \"success\" : \"secondary\"}>{numDelete}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numInclude} onClick={excludeArtifacts} startIcon={<FontAwesomeIcon icon={faBan} />}>\n        <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Exclude Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numInclude ? \"success\" : \"secondary\"}>{numInclude}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numExclude} onClick={includeArtifacts} startIcon={<FontAwesomeIcon icon={faChartLine} />}>\n        <Trans t={t} i18nKey=\"button.includeArtifacts\" >Include Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numExclude ? \"success\" : \"secondary\"}>{numExclude}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numLock} onClick={unlockArtifacts} startIcon={<LockOpen />}>\n        <Trans t={t} i18nKey=\"button.unlockrtifacts\" >Unlock Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numLock ? \"success\" : \"secondary\"}>{numLock}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={6} md={3}>\n      <Button fullWidth color=\"error\" disabled={!numUnlock} onClick={lockArtifacts} startIcon={<Lock />}>\n        <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans>\n        <SqBadge sx={{ ml: 1 }} color={numUnlock ? \"success\" : \"secondary\"}>{numUnlock}</SqBadge>\n      </Button>\n    </Grid>\n    <Grid item xs={12} sm={12} md={6} display=\"flex\" justifyContent=\"space-around\">\n      <Typography variant=\"caption\" color=\"text.secondary\"><Trans t={t} i18nKey=\"buttonHint\">Note: the red buttons above only applies to <b>currently filtered artifacts</b></Trans></Typography>\n    </Grid>\n  </Grid>\n}\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\nimport { useCallback } from \"react\"\nimport CardDark from \"../Components/Card/CardDark\"\nimport CardLight from \"../Components/Card/CardLight\"\nimport ColorText from \"../Components/ColoredText\"\nimport SqBadge from \"../Components/SqBadge\"\nimport { StatFilterItem } from \"../Components/StatFilterCard\"\nimport { allSubstats, SubstatKey } from \"../Types/artifact\"\n\nexport default function ProbabilityFilter({ probabilityFilter: statFilters = {}, setProbabilityFilter: setStatFilters, disabled = false }: {\n  probabilityFilter: Dict<SubstatKey, number>,\n  setProbabilityFilter: (object: Dict<SubstatKey, number>) => void,\n  disabled?: boolean\n}) {\n  const remainingKeys = allSubstats.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],\n  )\n  return <CardDark>\n    <CardContent sx={{ py: 1 }}>\n      <Typography variant=\"h6\">\n        Roll Probability Calculator <SqBadge color=\"success\">TC Feature</SqBadge>\n      </Typography>\n    </CardContent>\n    <Divider />\n    <CardContent>\n      <Grid container spacing={1}>\n        <Grid item xs={12} md={6}>\n          <CardLight>\n            <CardContent>\n              <Typography>\n                This UI only pops up when \"Sort by\" <strong>Probability</strong>.\n                In conjunction with the Artifact Filters above, this UI allows you to set a criteria for substats values, and it will sort the artifacts by those with the highest probability to roll into those criteria values.\n                <ColorText color=\"warning\"> Artifacts that already reach the criteria(100%) or are at 0% are hidden.</ColorText>\n              </Typography>\n\n            </CardContent>\n          </CardLight>\n        </Grid>\n        <Grid item xs={12} md={6} container spacing={1}>\n          {Object.entries(statFilters).map(([statKey, min]) => {\n            return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\n              delete statFilters[statKey]\n              setStatFilters({ ...statFilters })\n            }} /></Grid>\n          })}\n          <Grid item xs={12}>\n            <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </CardContent>\n  </CardDark >\n}\n","import { Replay } from '@mui/icons-material';\nimport { Alert, Box, Button, CardContent, Grid, Link, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { Link as RouterLink } from 'react-router-dom';\nimport CardDark from '../Components/Card/CardDark';\nimport InfoComponent from '../Components/InfoComponent';\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\nimport { DatabaseContext } from '../Database/Database';\nimport { dbStorage } from '../Database/DBStorage';\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\nimport { allSubstats, SubstatKey } from '../Types/artifact';\nimport { artifactFilterConfigs, artifactSortConfigs, initialArtifactSortFilter, artifactSortKeys, artifactSortKeysTC } from './ArtifactSort';\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\nimport { clamp } from '../Util/Util';\nimport ArtifactCard from './ArtifactCard';\nimport ArtifactEditor from './ArtifactEditor';\nimport ArtifactFilter, { ArtifactRedButtons } from './ArtifactFilter';\nimport ProbabilityFilter from './ProbabilityFilter';\nimport { GlobalSettingsContext } from '../GlobalSettings';\nimport { probability } from './RollProbability';\nimport KeyMap from '../KeyMap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport SortByButton from '../Components/SortByButton';\n\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\nfunction intialState() {\n  return {\n    ...initialArtifactSortFilter(),\n    maxNumArtifactsToDisplay: 50,\n    effFilter: [...allSubstats] as SubstatKey[],\n    probabilityFilter: {} as Dict<SubstatKey, number>,\n  }\n}\n\ntype State = ReturnType<typeof intialState>\ntype ResetAction = {\n  type: \"reset\"\n}\nfunction filterReducer(state: State, action: Partial<State> | ResetAction): State {\n  if ((action as any).type === \"reset\")\n    return { ...state, ...initialArtifactSortFilter() }\n  return { ...state, ...action }\n}\nfunction filterInit(): State {\n  return { ...intialState(), ...(dbStorage.get(\"ArtifactDisplay.state\") ?? {}) }\n}\nexport default function ArtifactDisplay(props) {\n  const { globalSettings: { tcMode } } = useContext(GlobalSettingsContext)\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\n  const database = useContext(DatabaseContext)\n  const [state, stateDispatch] = useReducer(filterReducer, undefined, filterInit)\n\n  const { effFilter, filterOption, ascending, probabilityFilter, maxNumArtifactsToDisplay } = state\n  let { sortType } = state\n  const showProbability = tcMode && sortType === \"probability\"\n  //force the sortType back to a normal value after exiting TC mode\n  if (sortType === \"probability\" && !tcMode) stateDispatch({ sortType: artifactSortKeys[0] })\n\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\n  const [pageIdex, setpageIdex] = useState(0)\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\n  const deleteArtifact = useCallback((id: string) => database.removeArt(id), [database])\n  const editArtifact = useCallback(id => setartToEditId(id), [])\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\n\n  useEffect(() => {\n    ReactGA.pageview('/artifact')\n    return database.followAnyArt(forceUpdate)\n  }, [database, forceUpdate])\n\n  useEffect(() => {\n    dbStorage.set(\"ArtifactDisplay.state\", state)\n  }, [state])\n\n  const filterOptionDispatch = useCallback((action) => {\n    stateDispatch({\n      filterOption: {\n        ...filterOption,\n        ...action\n      }\n    })\n  }, [stateDispatch, filterOption])\n\n  const setProbabilityFilter = useCallback(probabilityFilter => stateDispatch({ probabilityFilter }), [stateDispatch],)\n\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\n  const sortConfigs = useMemo(() => artifactSortConfigs(effFilterSet, probabilityFilter), [effFilterSet, probabilityFilter])\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const { artifactIds, totalArtNum } = useMemo(() => {\n    const { sortType = artifactSortKeys[0], ascending = false, filterOption } = state\n    let allArtifacts = database._getArts()\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    const sortFunc = sortFunction(sortType, ascending, sortConfigs)\n    //in probability mode, filter out the artifacts that already reach criteria\n    if (showProbability) {\n      allArtifacts.forEach(art => (art as any).probability = probability(art, probabilityFilter))\n      allArtifacts = allArtifacts.filter(art => (art as any).probability && (art as any).probability !== 1)\n    }\n    const artifactIds = allArtifacts.filter(filterFunc).sort(sortFunc).map(art => art.id)\n    return { artifactIds, totalArtNum: allArtifacts.length, ...dbDirty }//use dbDirty to shoo away warnings!\n  }, [state, dbDirty, database, sortConfigs, filterConfigs, probabilityFilter, showProbability])\n\n\n  const { artifactsToShow: artifactIdsToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(artifactIds.length / maxNumArtifactsToDisplay)\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\n    return { artifactsToShow: artifactIds.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\n  }, [artifactIds, pageIdex, maxNumArtifactsToDisplay])\n\n  //for pagination\n  const totalShowing = artifactIds.length !== totalArtNum ? `${artifactIds.length}/${totalArtNum}` : `${totalArtNum}`\n  const setPage = useCallback(\n    (e, value) => {\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n      setpageIdex(value - 1);\n    },\n    [setpageIdex, invScrollRef],\n  )\n\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} my={1}>\n    <InfoComponent\n      pageKey=\"artifactPage\"\n      modalTitle={t`info.title`}\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\n    >\n      <InfoDisplay />\n    </InfoComponent>\n\n    {noArtifact && <Alert severity=\"info\" variant=\"filled\">Looks like you haven't added any artifacts yet. If you want, there are <Link color=\"warning.main\" component={RouterLink} to=\"/scanner\">automatic scanners</Link> that can speed up the import process!</Alert>}\n\n    <ArtifactEditor\n      artifactIdToEdit={artToEditId}\n      cancelEdit={cancelEditArtifact}\n    />\n    <ArtifactFilter filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filterDispatch={stateDispatch}\n      numShowing={artifactIdsToShow.length} total={totalArtNum} />\n    {showProbability && <ProbabilityFilter probabilityFilter={probabilityFilter} setProbabilityFilter={setProbabilityFilter} />}\n    <CardDark ref={invScrollRef}>\n      <CardContent>\n        <Grid container sx={{ mb: 1 }}>\n          <Grid item flexGrow={1}><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Substats to use in efficiency calculation</Trans></span></Grid>\n          <Grid item>\n            <Button size=\"small\" color=\"error\" onClick={() => stateDispatch({ effFilter: [...allSubstats] })} startIcon={<Replay />}><Trans t={t} i18nKey=\"ui:reset\" /></Button>\n          </Grid>\n        </Grid>\n        <EfficiencyFilter selectedKeys={effFilter} onChange={n => stateDispatch({ effFilter: n })} />\n      </CardContent>\n    </CardDark>\n    <CardDark ><CardContent>\n      <Grid container alignItems=\"center\" sx={{ pb: 2 }}>\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item flexGrow={1}>\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\n        </Grid>\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\n          <SortByButton fullWidth sortKeys={[...artifactSortKeys.filter(key => (artifactSortKeysTC as unknown as string[]).includes(key) ? tcMode : true)]}\n            value={sortType} onChange={sortType => stateDispatch({ sortType })}\n            ascending={ascending} onChangeAsc={ascending => stateDispatch({ ascending })}\n          />\n        </Grid>\n      </Grid>\n      <ArtifactRedButtons artifactIds={artifactIds} filterOption={filterOption} />\n    </CardContent></CardDark>\n\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\n      <Grid container spacing={1} >\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\n          <CardDark sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\n            <CardContent>\n              <Typography sx={{ textAlign: \"center\" }}>Add New Artifact</Typography>\n            </CardContent>\n            <Box sx={{\n              flexGrow: 1,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\"\n            }}\n            >\n              <Button onClick={() => editArtifact(\"new\")} sx={{\n                borderRadius: \"1em\"\n              }}>\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\n              </Button>\n            </Box>\n          </CardDark>\n        </Grid>\n        {artifactIdsToShow.map(artId =>\n          <Grid item key={artId} xs={12} sm={6} md={4} lg={4} xl={3} >\n            <ArtifactCard\n              artifactId={artId}\n              effFilter={effFilterSet}\n              onDelete={deleteArtifact}\n              onEdit={editArtifact}\n              probabilityFilter={showProbability ? probabilityFilter : undefined}\n            />\n          </Grid>\n        )}\n      </Grid>\n    </Suspense>\n    {numPages > 1 && <CardDark ><CardContent>\n      <Grid container>\n        <Grid item flexGrow={1}>\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\n        </Grid>\n        <Grid item>\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\n        </Grid>\n      </Grid>\n    </CardContent></CardDark>}\n  </Box >\n}\n\nfunction ShowingArt({ count, page, onChange, numShowing, total, t }) {\n  return <Typography color=\"text.secondary\">\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Artifacts\n    </Trans>\n  </Typography>\n}\n\nfunction EfficiencyFilter({ selectedKeys, onChange }) {\n  const keys1 = allSubstats.slice(0, 6)\n  const keys2 = allSubstats.slice(6)\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\n  return <Grid container spacing={1}>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          {KeyMap.get(key)}\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n    <Grid item xs={12} md={6}>\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\n          {KeyMap.get(key)}\n        </ToggleButton>)}\n      </SolidToggleButtonGroup>\n    </Grid>\n  </Grid>\n}\n","import { ArtifactRarity, ArtifactSetKey, CharacterKey, ElementKey, SlotKey } from \"./consts\";\n\nexport interface IArtifact {\n  setKey: ArtifactSetKey,\n  slotKey: SlotKey,\n  level: number,\n  rarity: ArtifactRarity,\n  mainStatKey: MainStatKey,\n  location: CharacterKey | \"\",\n  lock: boolean,\n  substats: ISubstat[],\n\n  // GO-specific\n  exclude: boolean,\n}\nexport interface ICachedArtifact extends IArtifact {\n  id: string,\n  mainStatVal: number,\n  substats: ICachedSubstat[],\n}\n\nexport interface ISubstat {\n  key: SubstatKey | \"\"\n  value: number\n}\nexport interface ICachedSubstat extends ISubstat {\n  rolls: number[],\n  efficiency: number,\n  accurateValue: number\n}\n/**\n * @deprecated use values in KeyMap\n */\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | ElementalEnemyRESStatKey | SpecializedStatKey\n\ntype ElementalRESStatKey = `${ElementKey | \"physical\"}_res_`\ntype ElementalEnemyRESStatKey = `${ElementKey | \"physical\"}_enemyRes_`\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystallize_dmg_\"\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\n\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\",] as const\n\n// TODO: Check if these actually applies\n// TODO: do these belong here?\ntype SpecializedStatKey = \"normal_critRate_\" | \"charged_critRate_\" | \"skill_critRate_\" | \"burst_critRate_\" | \"plunging_dmg_\" | \"shield_\" | \"enemyDefRed_\" | \"skillCDRed_\" | \"incHeal_\" | \"weakspotDMG_\" | \"dmg_\" | \"moveSPD_\" | \"staminaDec_\" | \"atkSPD_\" | \"cdRed_\" | \"finalHP\" | \"finalATK\" | \"finalDEF\" | \"staminaGlidingDec_\" | \"staminaSprintDec_\" | \"staminaChargedDec_\" | \"autoBoost\" | \"skillBoost\" | \"burstBoost\"\n\nexport type MainStatKey = typeof allMainStatKeys[number]\nexport type SubstatKey = typeof allSubstats[number]\n","type SortConfig<T> = {\n  getValue: (id: T) => number | string\n  tieBreaker?: string\n}\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\n\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\n    const aV = config.getValue(a)\n    const bV = config.getValue(b)\n    let diff = 0\n    if (typeof aV === \"string\" && typeof bV === \"string\")\n      diff = aV.localeCompare(bV)\n    else\n      diff = ((bV as number) - (aV as number))\n    return (ascending ? -1 : 1) * diff\n  }\n  return (a: T, b: T) => {\n    if (!configs[sortby]) return 0\n    const filterOption = configs[sortby]\n    let diff = Sort(a, b, ascending, filterOption)\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\n    return diff\n  }\n}\n\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\n}\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","disabled","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","BootstrapTooltip","styled","className","arrow","classes","popper","theme","tooltipClasses","palette","common","black","backgroundColor","CharacterDropdownButton","unSelectText","unSelectIcon","inventory","noUnselect","filter","database","useContext","DatabaseContext","characterSheets","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","thumbImg","thumbImgSide","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","characterKey","ThumbSide","height","lineHeight","verticalAlign","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","primary","main","transition","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","number","setNumber","focused","setFocus","parseFunc","parseFloat","onBlur","onFocus","onInputChange","target","onKeyDOwn","key","type","onKeyDown","InfoComponent","pageKey","text","modalTitle","dbStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","container","item","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","large","SortByButton","sortKeys","ascending","onChangeAsc","faSortAmountDownAlt","faSortAmountUp","StatFilterCard","statFilters","setStatFilters","data","DataContext","statKeys","get","input","push","charEle","remainingKeys","some","k","setFilter","sKey","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","placeholder","faTrashAlt","DisabledButton","secondary","TextButton","then","imp","default","tr","strKey","allData","as","mergeData","values","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","this","slots","slotIcons","rarity","allSlotKeys","icons","set","a","sheets","grouped","forEach","Math","artifactSetEffect","setNums","sn","conditionalHeader","img","m","action","createContext","artifactSortKeys","artifactSortKeysTC","initialArtifactSortFilter","filterOption","artSetKeys","allArtifactRarities","slotKeys","mainStatKeys","substats","location","excluded","sortType","ArtifactRarityDropdown","DropdownButton","MenuItem","ArtifactSlotDropdown","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","CustomNumberTextField","state","setState","sendChange","toString","TextField","SubstatEfficiencyDisplayCard","efficiency","valid","eff","CardLight","Grid","placement","Typography","Trans","Box","component","FontAwesomeIcon","cursor","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","rolls","accurateValue","reduce","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","ButtonGroup","whiteSpace","allSubstats","v","newValue","cacheValueString","artifactSubstatRollCorrection","p","SqBadge","count","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","Snippet","gutterBottom","href","rel","scan_art_main","BorrowManager","init","deinit","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","image","canvas","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","level","lock","exclude","rarityRates","objectKeyMap","score","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","findIndex","mainStatVal","mainStatValScore","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","valueString","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","processingCurrent","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","Skeleton","CardHeader","pt","mb","lg","id","label","mr","my","margin","ImgIcon","mainStatK","flexDirection","gap","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","CircularProgress","ArtifactCard","artifactObj","Add","updateArt","createArt","confirm","process","Update","getStyles","personName","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMainStatMultipleSelectChip","setMainStatKeys","useTheme","FormControl","fullWidth","InputLabel","Select","labelId","event","split","OutlinedInput","renderValue","flexWrap","Chip","StatIcon","primaryTypographyProps","style","ArtifactSetMultipleSelectChip","setArtSetKeys","defIcon","pointerEvents","ArtifactSubStatMultipleSelectChip","subStatKeys","setSubStatKeys","ArtifactFilter","locationDisplay","excludedDisplay","filterOptionDispatch","filterDispatch","numShowing","total","locationCharacterSheet","BusinessCenter","faUserShield","nameWIthIcon","faBan","faChartLine","SolidToggleButtonGroup","newVal","ToggleButton","LocationDropdown","dropdownProps","ArtifactRedButtons","artifactIds","artifacts","numUnlock","art","numLock","numDelete","numUnequip","numExclude","numInclude","sm","setArtLocation","faUserSlash","removeArt","faTrash","LockOpen","Lock","ProbabilityFilter","probabilityFilter","setProbabilityFilter","InfoDisplay","React","filterReducer","filterInit","maxNumArtifactsToDisplay","effFilter","ArtifactDisplay","tcMode","GlobalSettingsContext","globalSettings","stateDispatch","showProbability","artToEditId","setartToEditId","pageIdex","setpageIdex","invScrollRef","useRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","editArtifact","cancelEditArtifact","noArtifact","_getArts","sortConfigs","getValue","tieBreaker","artsetkey","mefficiency","probability","prob","artifactSortConfigs","filterConfigs","filterKey","allArtifacts","filterFunc","filterFunction","sortFunc","sortFunction","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","artifactIdsToShow","totalShowing","setPage","scrollIntoView","behavior","returnObjects","Link","RouterLink","to","ref","EfficiencyFilter","selectedKeys","n","pb","Pagination","page","ShowingArt","xl","minHeight","borderRadius","faPlus","artId","artifactId","onDelete","onEdit","keys1","keys2","selKeys1","selKeys2","arr","sortby","configs","Sort","config","aV","bV","localeCompare","diff","filterOptions","obj","optionKey","optionVal"],"sourceRoot":""}