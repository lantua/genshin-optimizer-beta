{"version":3,"file":"static/js/939.aea2d948.chunk.js","mappings":"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","sources":["Data/Characters/AratakiItto/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx"],"sourcesContent":["import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.total.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: customDmgNode(sum(\r\n      prod(subscript(input.total.autoIndex, datamine.charged.akSlash, { key: '_' }), input.total.atk),\r\n      nodeA4Bonus), \"charged\"),\r\n    akFinal: customDmgNode(sum(\r\n      prod(subscript(input.total.autoIndex, datamine.charged.akFinal, { key: '_' }), input.total.atk),\r\n      nodeA4Bonus), \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.ss.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.stam,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            {\r\n              node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"skill.skillParams.3\"),\r\n              value: datamine.skill.cd,\r\n              unit: \"s\"\r\n            }\r\n          ],\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n                text: st(\"infusion.geo\"),\r\n                variant: \"geo\",\r\n              }, {\r\n                node: nodeBurstAtkSpd,\r\n              },\r\n              ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n              {\r\n                node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n              }, {\r\n                text: tr(\"burst.skillParams.2\"),\r\n                value: datamine.burst.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [\r\n              {\r\n                node: nodeP1AtkSpd\r\n              },\r\n            ]\r\n          }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: tr(\"constellation4.description\"),\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              {\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              },\r\n              {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 20, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 50, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc)\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"inArea\")\r\nconst inArea = equal(\"inArea\", condInArea, 1)\r\nconst inAreaAtk = equal(inArea, 1,\r\n  prod(atkIncRatio, input.base.atk))\r\n\r\nconst inAreaA4 = greaterEq(input.asc, 4,\r\n  equal(inArea, 1, datamine.passive2.cd_red))\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst inAreaC6PyroDmg = equal(inArea, 1,\r\n  equal(c6AndCorrectWep, 1, datamine.constellation6.pyro_dmg))\r\nconst inAreaC6Infusion = equalStr(inArea, 1,\r\n  equalStr(c6AndCorrectWep, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: inAreaAtk,\r\n  },\r\n  constellation1: {\r\n    addlATK: prod(c1Atk, input.base.atk)\r\n  },\r\n  constellation4: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg)\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: inAreaC6PyroDmg,\r\n      atk: inAreaAtk,\r\n    },\r\n    team: {\r\n      infusion: inAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((percentArr, i) =>\r\n          ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              node: infoMut(inAreaAtk, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value > 1,\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.cd_red,\r\n        unit: \"%\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 4, 4),\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        states: {\r\n          inArea: {\r\n            fields: [{ // Node will not show CD reduction, have to use value instead\r\n              text: st(\"skillCDRed\"),\r\n              value: datamine.passive2.cd_red,\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        text: trm(\"additionalATKRatio\"),\r\n        value: datamine.constellation1.atk_inc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 1,\r\n        node: infoMut(dmgFormulas.constellation1.addlATK, { key: `char_${key}:additionalATK` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: trm(\"belowHP\"),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: c6AndCorrectWep,\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: trm(\"withinArea\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inArea: {\r\n            fields: [{\r\n              node: inAreaC6PyroDmg\r\n            }, {\r\n              text: <ColorText color={elementKey}>{st(\"infusion.pyro\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(inAreaA4).value / 100);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, datamine.passive2.pyroInc)\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n    secondHitBoost: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional),\r\n    thirdHitBoost: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n          },\r\n          {\r\n            canShow: data => data.get(input.constellation).value >= 4,\r\n            node: infoMut(dmgFormulas.skill.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n          },\r\n          {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n          },],\r\n          conditional: {\r\n            value: condC6,\r\n            path: condC6Path,\r\n            name: trm(\"c6C.name\"),\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6DmgBonus,\r\n                }, {\r\n                  node: nodeC6SpdBonus\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }],\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: tr(\"burst.skillParams.4\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C.name\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }\r\n          ]))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    cryo_enemyRes_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }]\r\n          }, {\r\n            conditional: {\r\n              value: condA1,\r\n              path: condA1Path,\r\n              canShow: greaterEq(input.asc, 1, 1),\r\n              name: trm(\"a1.condName\"),\r\n              header: conditionalHeader(\"passive1\", tr, passive1),\r\n              states: {\r\n                on: {\r\n                  fields: [{\r\n                    text: trm(\"a1.critRateInc\"),\r\n                    value: `+${datamine.passive1.critRateInc * 100}`,\r\n                    unit: \"%\"\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: `${datamine.passive1.duration}s`,\r\n                  }]\r\n                }\r\n              }\r\n            }\r\n          }, {\r\n            conditional: {\r\n              value: condC1,\r\n              path: condC1Path,\r\n              canShow: greaterEq(input.constellation, 1, 1),\r\n              name: trm(\"c1.condName\"),\r\n              header: conditionalHeader(\"constellation1\", tr, c1),\r\n              states: {\r\n                on: {\r\n                  fields: [{\r\n                    node: cryo_enemyRes_\r\n                  }, {\r\n                    text: sgt(\"duration\"),\r\n                    value: `${datamine.constellation1.duration}s`,\r\n                  }]\r\n                }\r\n              }\r\n            }\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2.charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: `${datamine.burst.duration}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: `${datamine.burst.cd}s`,\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            value: condA4,\r\n            path: condA4Path,\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            teamBuff: true,\r\n            name: trm(\"a4.condName\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: cryo_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            value: condC4,\r\n            path: condC4Path,\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            teamBuff: true,\r\n            name: trm(\"c4.condName\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: trm(\"passive2.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // TODO: this percent of 0.04% is displayed as 0.0%\r\n      prod(percent(datamine.passive2.elemas_dmg_), input.premod.eleMas)\r\n    ))]))\r\n\r\n/** TODO: the C2 actually only applies to \"active\" character, so the following needs to be changed... */\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P,\r\n    unequal(target.charKey, key, datamine.constellation2.elemas)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...asc4,\r\n      staminaSprintDec_: passive,\r\n    },\r\n    total: {\r\n      eleMas: c2PEleMas,\r\n    },\r\n  },\r\n  infusion: c6infusion,\r\n  premod: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  total: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: data => data.get(input.constellation).value >= 1 \r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cd}`,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: data => data.get(input.constellation).value >= 1\r\n              ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd*(1-0.10)}` \r\n              : `${datamine.skill.cdHold}`,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: data => data.get(input.constellation).value >= 1,\r\n            text: trm(\"c1\"),\r\n          }]\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: { // Burst Absorption\r\n            value: condBurstAbsorption,\r\n            path: condBurstAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // C2\r\n            canShow: greaterEq(input.constellation, 2, 1),\r\n            value: condC2,\r\n            path: condC2Path,\r\n            name: trm(\"c2\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2: {\r\n                fields: [{\r\n                  node: c2EleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: { // C2 Party\r\n            canShow: greaterEq(input.constellation, 2, unequal(target.charKey, key, 1)),\r\n            value: condC2P,\r\n            path: condC2PPath,\r\n            teamBuff: true,\r\n            description: tr(\"constellation2.description\"),\r\n            name: trm(\"c2p\"),\r\n            header: conditionalHeader(\"constellation2\", tr, c2),\r\n            states: {\r\n              c2p: {\r\n                fields: [{\r\n                  node: c2PEleMas\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: { // Cannot use talentTemplate because this has multiple conditionals\r\n        name: tr(\"passive2.name\"),\r\n        img: passive2,\r\n        sections: [{\r\n          text: tr(\"passive2.description\"),\r\n        }, ...absorbableEle.map(eleKey => ({\r\n          conditional: { // Poetics of Fuubutsu\r\n            value: condSwirls[eleKey],\r\n            path: condSwirlPaths[eleKey],\r\n            teamBuff: true,\r\n            // Only show the description once\r\n            description: eleKey === \"hydro\" ? tr(\"passive2.description\"): \"\",\r\n            name: trm(`a4.name_${eleKey}`),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            states: {\r\n              swirl: {\r\n                fields: [{\r\n                  node: asc4[`${eleKey}_dmg_`]\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }))],\r\n      },\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{\r\n        //TODO: put into subsection since this is teambuff\r\n        //   description: tr(\"passive3.description\"),\r\n        node: passive\r\n      }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, datamine.constellation2.snowflake), \"burst\", { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: afterSprintInfusion,\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }], { //sprint\r\n        value: condAfterSprint,\r\n        path: condAfterSprintPath,\r\n        name: trm(\"afterSprint\"),\r\n        states: {\r\n          afterSprint: {\r\n            fields: [{\r\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n              text: <ColorText color=\"cryo\">Cryo Infusion</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.sprint.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        //After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        //sprint\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condAfterApplySprint,\r\n        path: condAfterApplySprintPath,\r\n        name: trm(\"afterSprintCryo\"),\r\n        states: {\r\n          afterApplySprint: {\r\n            fields: [{\r\n              text: trm(\"staminaRestore\"),\r\n              value: datamine.passive2.stamina,\r\n            }, {\r\n              node: afterApplySprintCryo\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"snowflakeDMG\"),\r\n        value: datamine.constellation2.snowflake,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        // Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            }, {\r\n              node: c6ChargedDmg_,\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: {ele: constant(elementKey) }}))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = {...afterBurstCritRate_}\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6, \r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: afterRecastInfusion,\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">Electro Infusion</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", {count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst skillTenguAmbush_ = equal(target.activeCharKey, target.charKey, equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' }))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              node: skillTenguAmbush_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: nodeBurstInfusion\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.premod.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1 = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    equal(input.activeCharKey, input.charKey,\r\n      datamine.passive1.cryo_dmg_\r\n    )\r\n  )\r\n)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: trm(\"pressDuration\"),\r\n            value: datamine.skill.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"pressQuota\"),\r\n            value: datamine.skill.trigger,\r\n          }, {\r\n            text: st(\"pressCD\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: trm(\"holdDuration\"),\r\n            value: datamine.skill.durationHold,\r\n            unit: \"s\"\r\n          }, {\r\n            text: trm(\"holdQuota\"),\r\n            value: datamine.skill.triggerHold,\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: datamine.skill.cdHold,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }],\r\n          conditional: {\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            description: tr(\"skill.description\"),\r\n            value: condQuill,\r\n            path: condQuillPath,\r\n            name: trm(\"quill\"),\r\n            states: {\r\n              quill: {\r\n                fields: [{\r\n                  node: nodeSkill\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC4\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAsc4,\r\n            path: condAsc4Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            description: tr(\"passive2.description\"),\r\n            name: trm(\"asc4Cond\"),\r\n            states: {\r\n              press: {\r\n                name: \"Press\",\r\n                fields: [{\r\n                  node: nodeAsc4Press_skill_dmg_\r\n                }, {\r\n                  node: nodeAsc4Press_burst_dmg_\r\n                }]\r\n              },\r\n              hold: {\r\n                name: \"Hold\",\r\n                fields: [{\r\n                  node: nodeAsc4Hold_normal_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_charged_dmg_\r\n                }, {\r\n                  node: nodeAsc4Hold_plunging_dmg_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // CONSTELLATION4\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            value: condC4,\r\n            path: condC4Path,\r\n            header: conditionalHeader(\"constellation4\", tr, passive2),\r\n            description: tr(\"constellation4.description\"),\r\n            name: trm(\"c4\"),\r\n            states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n              name: i.toString(),\r\n              fields: [{ node: c4Inc }]\r\n            }))\r\n          }\r\n        }],\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            // value: (data) => `${datamine.burst.duration}` + (data.get(input.constellation).value >= 2 ? `s + ${datamine.constellation2.durationInc}` : \"\"),\r\n            value: (data) => data.get(input.constellation).value >= 2\r\n              ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n              : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: datamine.burst.enerCost,\r\n          }]\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condBurst,\r\n            path: condBurstPath,\r\n            name: tr(\"burst.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            description: tr(\"burst.description\"),\r\n            states: {\r\n              burst: {\r\n                fields: [{\r\n                  node: nodeBurstCryo_enemyRes_\r\n                }, {\r\n                  node: nodeBurstPhysical_enemyRes_\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // ASC1 Party + cond 2\r\n            canShow: greaterEq(input.asc, 1, equal(input.activeCharKey, input.charKey, 1)),\r\n            value: condAsc1,\r\n            path: condAsc1Path,\r\n            teamBuff: true,\r\n            header: conditionalHeader(\"passive1\", tr, passive1),\r\n            description: tr(\"passive1.description\"),\r\n            name: st(\"activeCharField\"),\r\n            states: {\r\n              field: {\r\n                fields: [{\r\n                  node: nodeAsc1\r\n                }, {\r\n                  node: nodeC2\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }],\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { absorbableEle, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst characterKey: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(characterKey, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(characterKey, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(characterKey, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Condition = greaterEq(input.asc, 1,\r\n  unequal(target.charKey, characterKey,\r\n    equal(target.charEle, condSwirlReaction, 1)))\r\nconst asc1 = equal(asc1Condition, 1, datamine.passive1.eleMas)\r\nconst asc4 = equal(\"hit\", condSkillHitOpponent,\r\n  unequal(target.charKey, characterKey,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas))))\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(characterKey, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(`auto.fields.normal`),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          },\r\n          {\r\n            text: tr(`auto.fields.charged`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${characterKey}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: {\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${characterKey}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.1\"),\r\n            value: datamine.skill.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            canShow: (data) => data.get(input.constellation).value >= 1,\r\n            text: st(\"charges\"),\r\n            value: 2\r\n          }]\r\n        }]\r\n      },\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dot, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.enerCost,\r\n          }],\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            name: st(\"eleAbsor\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n              }]\r\n            }]))\r\n          },\r\n        }, {\r\n          conditional: { // Absorption\r\n            value: condAbsorption,\r\n            path: condAbsorptionPath,\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            description: tr(\"constellation6.description\"),\r\n            name: st(\"eleAbsor\"),\r\n            teamBuff: true,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: c6Bonus[`${eleKey}_dmg_`],\r\n              }],\r\n            }]))\r\n          },\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        canShow: greaterEq(input.asc, 1, unequal(target.charKey, characterKey, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: asc1,\r\n          }, {\r\n            // TODO: uncomment after `target` bug is fixed\r\n            // canShow: data => data.get(asc1Condition).value,\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(target.charKey, characterKey, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: asc4,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\"),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\"),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.total.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press1: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit1, \"skill\")),\r\n    press2: prod(sum(percent(1), nodeC4), dmgNode(\"atk\", datamine.skill.hit2, \"skill\")),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay_WR'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],//x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],//x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: 10,\r\n    cd: 18\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: 10,\r\n    cd: 15,\r\n    cost: 60\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_), 1, { key: 'normal_dmg_' })\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })\r\nconst atk_ = unequal(input.activeCharKey, characterKey, sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = uiData => uiData.get(input.constellation).value >= 6 && uiData.get(condSkill).value === 'skill'\r\nconst canShowA4 = uiData => uiData.get(input.asc).value >= 4\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) =>\r\n  [i, prod(normal_dmgMult, dmgNode(\"atk\", arr, \"normal\", { hit: { ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\")) } }))])\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, prod(percent(datamine.constellation6.dmg_), node))])\r\n\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(`auto.fields.plunging`),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          },\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: tr(\"skill.name\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [\r\n                {\r\n                  node: pyro_dmg_\r\n                },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive1.duration,\r\n                  unit: \"s\"\r\n                }\r\n              ]\r\n\r\n            }]))\r\n        }\r\n      ),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: canShowA4,\r\n        node: infoMut(atk_, { key: `char_${characterKey}_gen:passive2.name` })\r\n      }, {\r\n        canShow: canShowA4,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive2.duration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: charTr(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [\r\n              {\r\n                node: c2pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation2.duration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"atk\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\n// import Albedo from './Albedo'\r\n// import Aloy from './Aloy'\r\n// import Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\n// import Barbara from './Barbara'\r\n// import Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\n// import Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\n// import Diona from './Diona'\r\nimport Eula from './Eula'\r\n// import Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\n// import Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\n// import Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\n// import Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport Keqing from './Keqing'\r\n// import Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\n// import Lisa from './Lisa'\r\nimport Mona from './Mona'\r\n// import Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\n// import Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\n// import Razor from './Razor'\r\n// import Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\n// import Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\n// import Tartaglia from './Tartaglia'\r\n// import Thoma from './Thoma'\r\n// import Traveler from './Traveler'\r\n// import Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\n// import Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\n// import Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\n// import Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  // Albedo,\r\n  // Aloy,\r\n  // Amber,\r\n  AratakiItto,\r\n  // Barbara,\r\n  // Beidou,\r\n  Bennett,\r\n  // Chongyun,\r\n  Diluc,\r\n  // Diona,\r\n  Eula,\r\n  // Fischl,\r\n  Ganyu,\r\n  // Gorou,\r\n  HuTao,\r\n  // Jean,\r\n  KaedeharaKazuha,\r\n  // Kaeya,\r\n  KamisatoAyaka,\r\n  Keqing,\r\n  // Klee,\r\n  KujouSara,\r\n  // Lisa,\r\n  Mona,\r\n  // Ningguang,\r\n  Noelle,\r\n  // Qiqi,\r\n  RaidenShogun,\r\n  // Razor,\r\n  // Rosaria,\r\n  SangonomiyaKokomi,\r\n  // Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  // Tartaglia,\r\n  // Thoma,\r\n  // Traveler,\r\n  // Venti,\r\n  Xiangling,\r\n  // Xiao,\r\n  Xingqiu,\r\n  // Xinyan,\r\n  YaeMiko,\r\n  // Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n"],"names":["key","data_gen","data_gen_src","trans","tr","trm","datamine","normal","hitArr","skillParam_gen","charged","sSlash","akSlash","akFinal","stam","plunging","dmg","low","high","ss","duration","skill","hp","ss_cd","cd","burst","atkSpd","defConv","resDec","cost","passive1","maxStacks","atkSPD_","passive2","def_","constellation4","atk_","constellation6","charged_critDMG_","cond","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","prod","subscript","input","nodeBurstAtk","equal","nodeBurstAtkSpd","allNodeBurstRes","Object","fromEntries","allElementsWithPhy","ele","nodeBurstInfusion","equalStr","nodeA4Bonus","greaterEq","percent","nodeP1AtkSpd","lookup","range","map","i","constant","nodeC4Atk","nodeC4Def","nodeC6CritDMG","dmgFormulas","arr","dmgNode","customDmgNode","sum","entries","name","nodeC3","nodeC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","atk","infusion","sheet","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","weaponTypeKey","gender","constellationName","title","talent","sheets","auto","img","normalSrc","sections","text","fields","_","node","infoMut","value","unit","variant","talentTemplate","path","states","on","st","values","undefined","canShow","count","passive3","constellation1","c1","constellation2","c2","constellation3","c3","c4","header","conditionalHeader","description","sgt","constellation5","c5","c6","CharacterSheet","a","s","b","dmg1","stamina","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","enerCost","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","c1Atk","atkIncRatio","condInAreaPath","condInArea","inArea","inAreaAtk","inAreaA4","c6AndCorrectWep","target","inAreaC6PyroDmg","inAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","regen","healNodeTalent","atkInc","addlATK","pyro_dmg_","team","enerRech_","percentArr","calculateSkillCD","get","color","skillCD","cdFactor","result","p1","p2","c2i","c6i","spinningDmg","finalDmg","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","atkSpdInc","maxStack","condC1Path","condC1","condC2Path","condC2","condC6Path","condC6","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","skill_dmg_","hit","thirdHit","secondHitBoost","thirdHitBoost","all_dmg_","normal_dmg_","conditional","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","unknown","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","cryo_enemyRes_","physical_enemyRes_","physical_dmg_","lightSwordAdditional","burst_dmg_","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","textSuffix","aimed","aimedCharged","frostflake","frostflakeBloom","inheritedHp","critRateInc","cryoDmgBonus","opCryoRes","enerRegen","condA1Path","condA1","condA4Path","condA4","cryo_dmg_","naught","critRate_","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","min","critRateTeam_1","unequal","condA2Path","condA2","critRateTeam_2","ele_res_s","lessThan","dmgC2","customHealNode","total","dmg2","cdHold","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","charged_dmg_","plunging_dmg_","staminaSprintDec_","eleMas","eleKey","c2p","swirl","sp","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","condAfterBurstPath","condAfterBurst","afterBurst","cutting","bloom","enemyDefRed_","afterSprint","afterSkill","afterApplySprint","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_","x","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","Math","abs","maxDmgBonus","hydro_dmg_","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","shieldDef","healDef","healChance","shieldDuration","skillDmg","shieldFlat","healFlat","burstDmg","defToAtk","hpThreshold","shield","cooldown","healingChance","chargeStamina","chargeDmg_","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","shieldNodeTalent","heal","devotionShield","shieldNode","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","heal_","nBonus_","cBonus_","sBonus_","p","heal_ratio_","hp_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","normal_dmgInc","charged_dmgInc","skill_dmgInc","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1","condAsc4Path","condAsc4","nodeAsc4","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","characterKey","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Condition","asc1","c6Base","c6Bonus","slice","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","pyro_enemyRes_","dmgRed_","hydro_enemyRes_","skill_duration","nodeA4","condSkillPath","condSkill","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","nodeC6","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","cdRed","chance","const3TalentInc","const5TalentInc","normal_dmgMult","matchFull","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","uiData","canShowA4","normalEntries","kindlingEntries","dataObj","includes","shield_","triggerNum","normalInc","allElements","tally","toFixed","stele","resonance","pressCD","holdDMG","shileDuration","holdCD","skill_","burst_","nodesSkill","objectKeyValueMap","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","burst_dmgInc","fixed","AratakiItto","Bennett","Diluc","Eula","Ganyu","HuTao","KaedeharaKazuha","KamisatoAyaka","Keqing","KujouSara","Mona","Noelle","RaidenShogun","SangonomiyaKokomi","Shenhe","Sucrose","Xiangling","Xingqiu","YaeMiko","Yoimiya","YunJin","Zhongli","strKey","ns","key18","customStringRead","subKey","typeKey"],"sourceRoot":""}