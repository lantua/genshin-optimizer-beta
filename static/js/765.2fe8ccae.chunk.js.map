{"version":3,"file":"static/js/765.2fe8ccae.chunk.js","mappings":"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","sources":["Assets/Assets.ts","Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/CloseButton.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/Image/ImgIcon.tsx","Components/ModalWrapper.tsx","Components/SolidToggleButtonGroup.tsx","Components/SqBadge.tsx","Components/StarDisplay.tsx","Components/StatIcon.tsx","Data/Characters/CharacterSheet.tsx","Data/Characters/dataUtil.tsx","Formula/uiData.tsx","Formula/api.tsx","Formula/index.ts","Formula/internal.ts","Formula/optimization.ts","Formula/reaction.ts","Formula/utils.ts","ReactHooks/useForceUpdate.tsx","ReactHooks/usePromise.tsx"],"sourcesContent":["import bow from './icon_bow.png'\r\nimport catalyst from './icon_catalyst.png'\r\nimport claymore from './icon_claymore.png'\r\nimport polearm from './icon_polearm.png'\r\nimport sword from './icon_sword.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Close } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\ntype CloseButtonProps = ButtonProps & {\r\n  large?: boolean\r\n}\r\nexport default function CloseButton({ large = false, ...props }: CloseButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  if (large)\r\n    return <Button color=\"error\" startIcon={<Close />} {...props} >{t`close`}</Button>\r\n  return <Button color=\"error\" sx={{ p: 1, minWidth: 0 }} {...props} >\r\n    <Close />\r\n  </Button>\r\n}","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\"\r\ninterface ImgIconProps {\r\n  size?: number;\r\n}\r\nconst ImgIcon = styled(\"img\", {\r\n  name: 'ImgIcon',\r\n  slot: 'Root',\r\n})<ImgIconProps>(({ size = 1 }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `${size * 1.2}em`,\r\n  verticalAlign: \"text-bottom\"\r\n}))\r\n\r\nexport default ImgIcon","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import { ButtonProps, styled, ToggleButtonGroup, ToggleButtonGroupProps } from \"@mui/material\";\r\n\r\nexport type SolidToggleButtonGroupProps = SolidToggleButtonGroupPropsPartial & ToggleButtonGroupProps\r\ntype SolidToggleButtonGroupPropsPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\n\r\nconst SolidToggleButtonGroup = styled(ToggleButtonGroup, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidToggleButtonGroupPropsPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '& .MuiToggleButtonGroup-grouped': {\r\n    '&': {\r\n      backgroundColor: theme.palette[baseColor].main,\r\n      color: theme.palette[baseColor].contrastText,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette[selectedColor].main,\r\n      color: theme.palette[selectedColor].contrastText,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n    '&.Mui-disabled': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected.Mui-disabled': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default SolidToggleButtonGroup","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Typography } from '@mui/material'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) =>\r\n  <Typography color={colored ? \"warning.main\" : undefined} component=\"span\">\r\n    {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n  </Typography>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { faDiceD20 } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\nimport { faAnemo, faAtk, faCdReduction, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRecharge, faGeo, faHealingBonus, faHp, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\n\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  hp_: <FontAwesomeIcon icon={faHp as any} />,\r\n  hp: <FontAwesomeIcon icon={faHp as any} />,\r\n\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faDiceD20 as any} />,\r\n  enerRech_: <FontAwesomeIcon icon={faEnergyRecharge as any} />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <FontAwesomeIcon icon={faCdReduction as any} />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [\r\n    [`${ele}_dmg_`, coloredEleIcon[ele]],\r\n    [`${ele}_res_`, coloredEleIcon[ele]],\r\n    [`${ele}_critDMG_`, coloredEleIcon[ele]],\r\n    [`${ele}_dmgInc`, coloredEleIcon[ele]],\r\n    [`${ele}_enemyRes_`, coloredEleIcon[ele]]\r\n  ]))\r\n}\r\n\r\nexport default StatIcon\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { ascensionMaxLevel } from \"../LevelData\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { TalentSheet, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character_WR\";\r\nimport { CharacterKey, ElementKey, Rarity, WeaponTypeKey } from \"../../Types/consts\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport IConditional from \"../../Types/IConditional_WR\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay_WR\";\r\n\r\nconst characterSheets = import('.').then(imp => imp.default)\r\n\r\ninterface ICharacterSheetBase {\r\n  name: Displayable\r\n  cardImg: string\r\n  thumbImg: string\r\n  thumbImgSide: string\r\n  barImg?: string\r\n  bannerImg?: string\r\n  rarity: Rarity\r\n  weaponTypeKey: WeaponTypeKey\r\n  gender: string\r\n  constellationName: Displayable\r\n  title: Displayable\r\n}\r\ninterface ICharacterSheetTalent extends ICharacterSheetBase {\r\n  elementKey: ElementKey\r\n  talent: TalentSheet\r\n}\r\ninterface ICharacterSheetTalents extends ICharacterSheetBase {\r\n  talents: Dict<ElementKey, TalentSheet>\r\n}\r\nexport type ICharacterSheet = ICharacterSheetTalent | ICharacterSheetTalents\r\n\r\nexport default class CharacterSheet {\r\n  sheet: ICharacterSheet;\r\n  data: Data;\r\n  constructor(charSheet: ICharacterSheet, data: Data) {\r\n    this.sheet = charSheet\r\n    this.data = data\r\n  }\r\n  static get = (charKey: CharacterKey | \"\"): Promise<CharacterSheet> | undefined => charKey ? characterSheets.then(c => c[charKey]) : undefined\r\n  static get getAll() { return characterSheets }\r\n  get name() { return this.sheet.name }\r\n  get nameWIthIcon() { return <span><ImgIcon src={this.thumbImgSide} sx={{ height: \"2em\", marginTop: \"-2em\", marginLeft: \"-0.5em\" }} /> {this.name}</span> }\r\n  get cardImg() { return this.sheet.cardImg }\r\n  get thumbImg() { return this.sheet.thumbImg }\r\n  get thumbImgSide() { return this.sheet.thumbImgSide }\r\n  get bannerImg() { return this.sheet.bannerImg }\r\n  get rarity() { return this.sheet.rarity }\r\n  get elementKey() { return \"elementKey\" in this.sheet ? this.sheet.elementKey : undefined }\r\n  get weaponTypeKey() { return this.sheet.weaponTypeKey }\r\n  get constellationName() { return this.sheet.constellationName }\r\n\r\n  isMelee = () => {\r\n    const weaponTypeKey = this.sheet.weaponTypeKey\r\n    return weaponTypeKey === \"sword\" || weaponTypeKey === \"polearm\" || weaponTypeKey === \"claymore\"\r\n  }\r\n  get isTraveler() {\r\n    return \"talents\" in this.sheet\r\n  }\r\n  getTalent = (eleKey: ElementKey = \"anemo\"): TalentSheet | undefined => {\r\n    if (\"talent\" in this.sheet) return this.sheet.talent\r\n    else return this.sheet.talents[eleKey]\r\n  }\r\n  getTalentOfKey = (talentKey: TalentSheetElementKey, eleKey: ElementKey = \"anemo\") => this.getTalent(eleKey)?.sheets[talentKey]\r\n\r\n  static getLevelString = (level: number, ascension: number): string =>\r\n    `${level}/${ascensionMaxLevel[ascension]}`\r\n}\r\n\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [{\r\n    text: tr(`${talentKey}.description`),\r\n    fields,\r\n    conditional: conditional\r\n      ? !conditional.header\r\n        ? { ...conditional, header: conditionalHeader(talentKey, tr, img), description: tr(`${talentKey}.description`) }\r\n        : conditional\r\n      : undefined,\r\n  }],\r\n})\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, equalStr, infoMut, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, allSubstats, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([...allSubstats, \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nconst inferredHitEle = stringPrio(\r\n  // Inferred Element\r\n  equalStr(input.weaponType, \"catalyst\", input.charEle),\r\n  equalStr(input.hit.move, \"skill\", input.charEle),\r\n  equalStr(input.hit.move, \"burst\", input.charEle),\r\n  input.infusion,\r\n  input.team.infusion,\r\n  \"physical\",\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { uiInput } from \".\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport KeyMap, { KeyMapPrefix, Unit, valueString } from \"../KeyMap\"\r\nimport { assertUnreachable, crawlObject, layeredAssignment, objPathValue } from \"../Util/Util\"\r\nimport { allOperations } from \"./optimization\"\r\nimport { ComputeNode, Data, DataNode, DisplaySub, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode, ThresholdNode, UIInput, Variant } from \"./type\"\r\n\r\nconst shouldWrap = true\r\nexport interface NodeDisplay<V = number> {\r\n  /** Leave this here to make sure one can use `crawlObject` on hierarchy of `NodeDisplay` */\r\n  operation: true\r\n  prefix?: KeyMapPrefix\r\n  key?: string\r\n  value: V\r\n  /** Whether the node fails the conditional test (`threshold_add`, `match`, etc.) or consists solely of empty nodes */\r\n  isEmpty: boolean\r\n  unit: Unit\r\n  variant?: Variant\r\n  formula?: Displayable\r\n  formulas: Displayable[]\r\n}\r\n\r\nexport class UIData {\r\n  origin: UIData\r\n  children = new Map<Data, UIData>()\r\n\r\n  data: Data[]\r\n  nodes = new Map<NumNode | StrNode, ContextNodeDisplay<number | string | undefined>>()\r\n  processed = new Map<NumNode | StrNode, NodeDisplay<number | string | undefined>>()\r\n\r\n  display: any = undefined\r\n  teamBuff: any = undefined\r\n\r\n  constructor(data: Data, parent: UIData | undefined) {\r\n    if (data === undefined) {\r\n      // Secret *origin* initializer\r\n      this.data = []\r\n      this.origin = this\r\n    } else {\r\n      if (!parent)\r\n        parent = new UIData(undefined as any, undefined)\r\n\r\n      this.data = [data, ...parent.data]\r\n      this.origin = parent.origin\r\n    }\r\n  }\r\n\r\n  getDisplay(): {\r\n    [key: string]: DisplaySub<NodeDisplay>\r\n  } {\r\n    if (!this.display) this.display = this.getAll([\"display\"])\r\n    return this.display\r\n  }\r\n  getTeamBuff(): UIInput<NodeDisplay, NodeDisplay<string>> {\r\n    if (!this.teamBuff) {\r\n      const calculated = this.getAll([\"teamBuff\"]), result = {} as any\r\n      // Convert `input` to `uiInput`\r\n      crawlObject(uiInput, [], (x: any) => x.operation, (x: ReadNode<number> | ReadNode<string>, path: string[]) => {\r\n        const node = objPathValue(calculated, x.path) as NumNode | undefined\r\n        if (node) layeredAssignment(result, path, node)\r\n      })\r\n      this.teamBuff = result\r\n    }\r\n    return this.teamBuff\r\n  }\r\n  getAll(prefix: string[]): any {\r\n    const result = {}\r\n    for (const data of this.data) {\r\n      crawlObject(objPathValue(data, prefix) ?? {}, [], (x: any) => x.operation,\r\n        (x: NumNode, key: string[]) => layeredAssignment(result, key, this.get(x)))\r\n    }\r\n    return result\r\n  }\r\n  get(node: NumNode): NodeDisplay\r\n  get(node: StrNode): NodeDisplay<string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined> {\r\n    if (node === undefined) {\r\n      console.trace(\"Please report this bug with this trace\")\r\n      return { operation: true, value: undefined, isEmpty: true, unit: \"flat\", formulas: [] }\r\n    }\r\n    const old = this.processed.get(node)\r\n    if (old) return old\r\n\r\n    const result = computeNodeDisplay(this.computeNode(node))\r\n    this.processed.set(node, result)\r\n    return result\r\n  }\r\n  private computeNode(node: NumNode): ContextNodeDisplay\r\n  private computeNode(node: StrNode): ContextNodeDisplay<string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined> {\r\n    const old = this.nodes.get(node)\r\n    if (old) return old\r\n\r\n    const { operation, info } = node\r\n    let result: ContextNodeDisplay<number | string | undefined>\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        result = this._compute(node); break\r\n      case \"threshold\": result = this._threshold(node); break\r\n      case \"const\": result = this._constant(node.value); break\r\n      case \"subscript\": result = this._subscript(node); break\r\n      case \"read\": result = this._read(node); break\r\n      case \"data\": result = this._data(node); break\r\n      case \"match\": result = this._match(node); break\r\n      case \"lookup\": result = this._lookup(node); break\r\n      case \"prio\": result = this._prio(node.operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (info) {\r\n      const { key, prefix, source, variant, asConst, fixed } = info\r\n      let { pivot } = info\r\n      result = { ...result }\r\n\r\n      // Pivot all keyed nodes for debugging\r\n      // if (key) pivot = true\r\n\r\n      if (key) result.key = key\r\n      if (prefix) result.prefix = prefix\r\n      if (source) result.source = source\r\n      if (variant) result.variant = variant\r\n      if (pivot) result.pivot = pivot\r\n      if (fixed) result.fixed = fixed\r\n\r\n      if (asConst) {\r\n        delete result.formula\r\n        delete result.assignment\r\n        result.dependencies = new Set()\r\n      }\r\n      if (result.pivot || !result.formula)\r\n        result.mayNeedWrapping = false\r\n    }\r\n    createDisplay(result)\r\n\r\n    this.nodes.set(node, result)\r\n    return result\r\n  }\r\n\r\n  private prereadAll(path: readonly string[]): (NumNode | StrNode)[] {\r\n    return this.data.map(x => objPathValue(x, path) as NumNode | StrNode).filter(x => x)\r\n  }\r\n  private readAll(path: readonly string[]): ContextNodeDisplay<number | string | undefined>[] {\r\n    return this.prereadAll(path).map(x => this.computeNode(x))\r\n  }\r\n  private readFirst(path: readonly string[]): ContextNodeDisplay<number | string | undefined> | undefined {\r\n    const data = this.data.map(x => objPathValue(x, path) as NumNode | StrNode).find(x => x)\r\n    return data && this.computeNode(data)\r\n  }\r\n\r\n  private _prio(nodes: readonly StrNode[]): ContextNodeDisplay<string | undefined> {\r\n    const first = nodes.find(node => this.computeNode(node).value !== undefined)\r\n    return first ? this.computeNode(first) : illformedStr\r\n  }\r\n  private _read(node: ReadNode<number | string | undefined>): ContextNodeDisplay<number | string | undefined> {\r\n    const { path } = node\r\n    const result = (node.accu === undefined)\r\n      ? this.readFirst(path) ?? (node.type === \"string\" ? illformedStr : illformed)\r\n      : node.accu === \"prio\"\r\n        ? this._prio(this.prereadAll(path) as StrNode[])\r\n        : this._accumulate(node.accu, this.readAll(path) as ContextNodeDisplay[])\r\n    return result\r\n  }\r\n  private _lookup(node: LookupNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const key = this.computeNode(node.operands[0]).value\r\n    const selected = node.table[key!] ?? node.operands[1]\r\n    if (!selected)\r\n      throw new Error(`Lookup Fail with key ${key}`)\r\n    return this.computeNode(selected)\r\n  }\r\n  private _match(node: MatchNode<StrNode | NumNode, StrNode | NumNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [v1Node, v2Node, matchNode, unmatchNode] = node.operands\r\n    const v1 = this.computeNode(v1Node), v2 = this.computeNode(v2Node)\r\n    const matching = v1.value === v2.value\r\n    let result = this.computeNode(matching ? matchNode : unmatchNode)\r\n    return ((matching && node.emptyOn === \"match\") || (!matching && node.emptyOn === \"unmatch\"))\r\n      ? makeEmpty(result.value) : result\r\n  }\r\n  private _threshold(node: ThresholdNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [valueNode, thresholdNode, pass, fail] = node.operands\r\n    const value = this.computeNode(valueNode), threshold = this.computeNode(thresholdNode)\r\n    const result = value.value >= threshold.value ? this.computeNode(pass) : this.computeNode(fail)\r\n    return (value.value >= threshold.value)\r\n      ? (node.emptyOn === \"ge\" ? makeEmpty(result.value) : result)\r\n      : (node.emptyOn === \"l\" ? makeEmpty(result.value) : result)\r\n  }\r\n  private _data(node: DataNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    let child = this.children.get(node.data)\r\n    if (!child) {\r\n      child = new UIData(node.data, node.reset ? this.origin : this)\r\n      this.children.set(node.data, child)\r\n    }\r\n    return child.computeNode(node.operands[0])\r\n  }\r\n  private _compute(node: ComputeNode): ContextNodeDisplay {\r\n    const { operation, operands } = node\r\n    return this._accumulate(operation, operands.map(x => this.computeNode(x)))\r\n  }\r\n  private _subscript(node: SubscriptNode<number>): ContextNodeDisplay {\r\n    const operand = this.computeNode(node.operands[0])\r\n    const value = node.list[operand.value] ?? NaN\r\n    return this._constant(value)\r\n  }\r\n  private _constant<V>(value: V): ContextNodeDisplay<V> {\r\n    return {\r\n      value, pivot: false,\r\n      empty: false,\r\n      mayNeedWrapping: false,\r\n      dependencies: new Set(),\r\n    }\r\n  }\r\n  private _accumulate(operation: ComputeNode[\"operation\"], operands: ContextNodeDisplay[]): ContextNodeDisplay {\r\n    let variant: Variant | undefined\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        variant = mergeVariants(operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n        const identity = allOperations[operation]([])\r\n        if (process.env.NODE_ENV !== \"development\")\r\n          operands = operands.filter(operand => operand.value !== identity)\r\n        if (!operands.length)\r\n          return variant ? { ...this._constant(identity), variant } : this._constant(identity)\r\n    }\r\n\r\n    let formula: { display: Displayable, dependencies: Displayable[] }\r\n    let mayNeedWrapping = false\r\n    switch (operation) {\r\n      case \"max\": formula = fStr`Max( ${{ operands }} )`; break\r\n      case \"min\": formula = fStr`Min( ${{ operands }} )`; break\r\n      case \"add\": formula = fStr`${{ operands, separator: ' + ' }}`; break\r\n      case \"mul\": formula = fStr`${{ operands, separator: ' * ', shouldWrap }}`; break\r\n      case \"sum_frac\": formula = fStr`${{ operands: [operands[0]], shouldWrap }} / ( ${{ operands, separator: ' + ' }} )`; break\r\n      case \"res\": {\r\n        const base = operands[0].value\r\n        if (base < 0) {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }} / 2`\r\n          mayNeedWrapping = true\r\n        }\r\n        else if (base >= 0.75) formula = fStr`100% / ( ${{ operands, shouldWrap }} * 4 + 100% )`\r\n        else {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }}`\r\n          mayNeedWrapping = true\r\n        }\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\":\r\n        if (operands.length <= 1) mayNeedWrapping = operands[0]?.mayNeedWrapping ?? true\r\n        else if (operation === \"add\") mayNeedWrapping = true\r\n    }\r\n\r\n    const value = allOperations[operation](operands.map(x => x.value))\r\n    const dependencies = new Set([...operands.flatMap(x =>\r\n      x.pivot && x.assignment\r\n        ? [x.assignment, ...x.dependencies]\r\n        : [...x.dependencies])])\r\n    const result: ContextNodeDisplay = {\r\n      formula: formula.display,\r\n      empty: operands.every(x => x.empty),\r\n      value, mayNeedWrapping,\r\n      pivot: false, dependencies,\r\n    }\r\n    if (variant) result.variant = variant\r\n    return result\r\n  }\r\n}\r\ntype ContextNodeDisplayList = { operands: ContextNodeDisplay[], separator?: string, shouldWrap?: boolean }\r\nfunction fStr(strings: TemplateStringsArray, ...list: ContextNodeDisplayList[]): { display: Displayable, dependencies: Displayable[] } {\r\n  const dependencies = new Set<Displayable>()\r\n  const predisplay: Displayable[] = []\r\n\r\n  strings.forEach((string, i) => {\r\n    predisplay.push(string)\r\n\r\n    const key = list[i]\r\n    if (key) {\r\n      const { operands, shouldWrap, separator = \", \" } = key\r\n      operands.forEach((item, i, array) => {\r\n        let itemFormula: Displayable\r\n        if (!item.pivot && item.formula) itemFormula = item.formula\r\n        else itemFormula = createFormulaComponent(item)\r\n\r\n        if (shouldWrap && item.mayNeedWrapping) {\r\n          predisplay.push(\"( \")\r\n          predisplay.push(itemFormula)\r\n          predisplay.push(\" )\")\r\n        } else {\r\n          predisplay.push(itemFormula)\r\n        }\r\n        if (i + 1 < array.length) predisplay.push(separator)\r\n        item.dependencies.forEach(x => dependencies.add(x))\r\n      })\r\n    }\r\n  })\r\n  return { display: mergeFormulaComponents(predisplay), dependencies: [...dependencies] }\r\n}\r\nfunction mergeVariants<V>(operands: ContextNodeDisplay<V>[]): ContextNodeDisplay<V>[\"variant\"] {\r\n  const unique = new Set(operands.map(x => x.variant))\r\n  if (unique.size > 1) unique.delete(undefined)\r\n  if (unique.size > 1) unique.delete(\"physical\")\r\n  // Prefer reactions\r\n  if (unique.has(\"melt\")) return \"melt\"\r\n  if (unique.has(\"vaporize\")) return \"vaporize\"\r\n  return unique.values().next().value\r\n}\r\nfunction computeNodeDisplay<V>(node: ContextNodeDisplay<V>): NodeDisplay<V> {\r\n  const { key, prefix, dependencies, value, variant, formula, assignment, empty } = node\r\n  return {\r\n    operation: true,\r\n    key, value, variant, prefix,\r\n    isEmpty: empty,\r\n    unit: (key && KeyMap.unit(key)) || \"flat\",\r\n    formula, formulas: [...(assignment ? [assignment] : []), ...dependencies]\r\n  }\r\n}\r\n\r\n//* Comment/uncomment this line to toggle between string formulas and JSX formulas\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant, fixed } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = <ColorText color=\"info\">{valueString(value, key ? KeyMap.unit(key) : \"flat\", fixed)}</ColorText>\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? <>{KeyMap.getPrefixStr(prefix)} </> : <></>\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? <ColorText color=\"secondary\"> ({source})</ColorText> : null\r\n    node.name = <><ColorText color={variant}>{prefixDisplay}{KeyMap.getNoUnit(key!)}</ColorText>{sourceDisplay}</>\r\n\r\n    if (formula)\r\n      node.assignment = <div id=\"formula\">{node.name} {node.valueDisplay} = {formula}</div>\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  //TODO: change formula size in the formula display element instead\r\n  return name ? <><span style={{ fontSize: \"85%\" }}>{name}</span> {valueDisplay}</> : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return <>{components.map((x, i) => <span key={i}>{x}</span>)}</>\r\n}\r\n/*/\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant, fixed } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = valueString(value, key ? KeyMap.unit(key) : \"flat\", fixed)\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? `${KeyMap.getPrefixStr(prefix)} ` : \"\"\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? ` ${source}` : \"\"\r\n    node.name = `${prefixDisplay}${KeyMap.getNoUnit(key!)}${sourceDisplay}`\r\n\r\n    if (formula)\r\n      node.assignment = `${node.name} ${node.valueDisplay} = ${formula}`\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  return name ? `${name} ${valueDisplay}` : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return (components as string[]).join(\"\")\r\n}\r\n//*/\r\n\r\ninterface ContextNodeDisplay<V = number> {\r\n  key?: Info[\"key\"]\r\n  prefix?: Info[\"prefix\"]\r\n  source?: Info[\"source\"]\r\n  variant?: Info[\"variant\"]\r\n  fixed?: Info[\"fixed\"]\r\n\r\n  pivot: boolean\r\n  empty: boolean\r\n\r\n  value: V\r\n\r\n  dependencies: Set<Displayable>\r\n\r\n  mayNeedWrapping: boolean\r\n\r\n  // Don't set these manually outside of `UIData.computeNode`\r\n  name?: Displayable\r\n  valueDisplay?: Displayable\r\n  formula?: Displayable\r\n  assignment?: Displayable\r\n}\r\n\r\nconst illformed: ContextNodeDisplay = {\r\n  value: NaN, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nconst illformedStr: ContextNodeDisplay<string | undefined> = {\r\n  value: undefined, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nfunction makeEmpty(emptyValue: number): ContextNodeDisplay<number>\r\nfunction makeEmpty(emptyValue: string | undefined): ContextNodeDisplay<string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined> {\r\n  return {\r\n    value: emptyValue, pivot: false, empty: true, dependencies: new Set(), mayNeedWrapping: false\r\n  }\r\n}\r\n","import Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character_WR\";\r\nimport { allElementsWithPhy, ArtifactSetKey, CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon\";\r\nimport { crawlObject, deepClone, layeredAssignment, objectKeyMap, objPathValue } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { reactions } from \"./reaction\";\r\nimport { Data, DisplaySub, Info, Input, NumNode, ReadNode, StrNode } from \"./type\";\r\nimport { NodeDisplay, UIData } from \"./uiData\";\r\nimport { constant, customRead, percent, resetData, setReadNodeKeys } from \"./utils\";\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nfunction inferInfoMut(data: Data, source?: Info[\"source\"]): Data {\r\n  crawlObject(data, [], (x: any) => x.operation, (x: NumNode, path: string[]) => {\r\n    if (path[0] === \"teamBuff\") path = path.slice(1)\r\n    const reference = objPathValue(input, path) as ReadNode<number> | undefined\r\n    if (reference)\r\n      x.info = { ...reference.info, prefix: undefined, source }\r\n    else if (path[0] !== \"tally\")\r\n      console.error(`Detect ${source} buff into non-existant key path ${path}`)\r\n  })\r\n\r\n  return data\r\n}\r\nfunction dataObjForArtifact(art: ICachedArtifact, mainStatAssumptionLevel: number = 0): Data {\r\n  const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n  const stats: [ArtifactSetKey | MainStatKey | SubstatKey, number][] = []\r\n  stats.push([art.mainStatKey, mainStatVal])\r\n  art.substats.forEach(({ key, accurateValue }) => key && stats.push([key, accurateValue]))\r\n  return {\r\n    art: {\r\n      ...Object.fromEntries(stats.map(([key, value]) =>\r\n        key.endsWith(\"_\") ? [key, percent(value / 100)] : [key, constant(value)])),\r\n      [art.slotKey]: {\r\n        id: constant(art.id), set: constant(art.setKey)\r\n      },\r\n    },\r\n    artSet: {\r\n      [art.setKey]: constant(1),\r\n    },\r\n  }\r\n}\r\nfunction dataObjForCharacter(char: ICachedCharacter): Data {\r\n  const result: Data = {\r\n    lvl: constant(char.level),\r\n    constellation: constant(char.constellation),\r\n    asc: constant(char.ascension),\r\n\r\n    premod: {\r\n      auto: constant(char.talent.auto),\r\n      skill: constant(char.talent.skill),\r\n      burst: constant(char.talent.burst),\r\n    },\r\n    enemy: {\r\n      ...objectKeyMap(allElementsWithPhy.map(ele => `${ele}_res_`), ele =>\r\n        percent((char.enemyOverride[`${ele.slice(0, -5)}_enemyRes_`] ?? 10) / 100)),\r\n      level: constant(char.enemyOverride.enemyLevel ?? char.level),\r\n    },\r\n    hit: {\r\n      hitMode: constant(char.hitMode),\r\n      reaction: constant(char.reactionMode),\r\n    },\r\n    customBonus: {},\r\n  }\r\n\r\n  for (const [key, value] of Object.entries(char.bonusStats))\r\n    result.customBonus![key] = key.endsWith('_') ? percent(value / 100) : constant(value)\r\n\r\n  if (char.enemyOverride.enemyDefRed_)\r\n    result.premod!.enemyDefRed_ = percent(char.enemyOverride.enemyDefRed_ / 100)\r\n  if (char.enemyOverride.enemyDefIgn_)\r\n    result.enemy!.defIgn = percent(char.enemyOverride.enemyDefIgn_ / 100)\r\n  if (char.elementKey) {\r\n    result.charEle = constant(char.elementKey)\r\n    result.display = {\r\n      basic: { [`${char.elementKey}_dmg_`]: input.total[`${char.elementKey}_dmg_`] },\r\n      reaction: reactions[char.elementKey]\r\n    }\r\n    layeredAssignment(result, [\"teamBuff\", \"tally\", char.elementKey], constant(1))\r\n  }\r\n\r\n  crawlObject(char.conditional, [\"conditional\"], (x: any) => typeof x === \"string\", (x: string, keys: string[]) =>\r\n    layeredAssignment(result, keys, constant(x)))\r\n  return result\r\n}\r\nfunction dataObjForWeapon(weapon: ICachedWeapon): Data {\r\n  return {\r\n    weapon: {\r\n      lvl: constant(weapon.level),\r\n      asc: constant(weapon.ascension),\r\n      refinement: constant(weapon.refinement),\r\n      refineIndex: constant(weapon.refinement - 1)\r\n    },\r\n  }\r\n}\r\n/** These read nodes are very context-specific, and cannot be used anywhere else outside of `uiDataForTeam` */\r\nconst teamBuff = setReadNodeKeys(deepClone(input), [\"teamBuff\"]); // Use ONLY by dataObjForTeam\r\nfunction uiDataForTeam(teamData: Dict<CharacterKey, Data[]>, activeCharKey?: CharacterKey): Dict<CharacterKey, { target: UIData, buffs: Dict<CharacterKey, UIData> }> {\r\n  // May the goddess of wisdom bless any and all souls courageous\r\n  // enough to attempt for the understanding of this abomination.\r\n\r\n  const mergedData = Object.entries(teamData).map(([key, data]) => [key, { ...mergeData(data) }] as [CharacterKey, Data])\r\n  const result = Object.fromEntries(mergedData.map(([key]) =>\r\n    [key, { targetRef: {} as Data, buffs: [] as Data[], calcs: {} as Dict<CharacterKey, Data> }]))\r\n\r\n  const customReadNodes = {}\r\n  function getReadNode(path: readonly string[]): ReadNode<number> {\r\n    const base = (path[0] === \"teamBuff\")\r\n      ? objPathValue(teamBuff, path.slice(1))\r\n      : objPathValue(input, path)\r\n    if (base) return base\r\n    const custom = objPathValue(customReadNodes, path)\r\n    if (custom) return custom\r\n    const newNode = customRead(path)\r\n    if (path[0] === \"teamBuff\" && path[1] === \"tally\") newNode.accu = \"add\"\r\n    layeredAssignment(customReadNodes, path, newNode)\r\n    return newNode\r\n  }\r\n\r\n  Object.values(result).forEach(({ targetRef, buffs, calcs }) =>\r\n    mergedData.forEach(([sourceKey, source]) => {\r\n      const sourceBuff = source.teamBuff\r\n      // Create new copy of `calc` as we're mutating it later\r\n      const buff: Data = {}, calc: Data = deepClone({ teamBuff: sourceBuff })\r\n      buffs.push(buff)\r\n      calcs[sourceKey] = calc\r\n\r\n      // This construction creates a `Data` representing buff\r\n      // from `source` applying to `target`. It has 3 data:\r\n      // - `target` contains the reference for the final\r\n      //   data. It is not populated at this stage,\r\n      // - `calc` contains the calculation of the buffs,\r\n      // - `buff` contains read nodes that point to the\r\n      //   calculation in `calc`.\r\n\r\n      crawlObject(sourceBuff, [], (x: any) => x.operation, (x: NumNode | StrNode, path: string[]) => {\r\n        const info: Info = { ...objPathValue(input, path), source: sourceKey, prefix: undefined, asConst }\r\n        layeredAssignment(buff, path, resetData(getReadNode([\"teamBuff\", ...path]), calc, info))\r\n\r\n        crawlObject(x, [], (x: any) => x?.operation === \"read\", (x: ReadNode<number | string>) => {\r\n          if (x.path[0] === \"targetBuff\") return // Ignore teamBuff access\r\n\r\n          let readNode: ReadNode<number | string> | undefined, data: Data\r\n          if (x.path[0] === \"target\") { // Link the node to target data\r\n            readNode = getReadNode(x.path.slice(1))\r\n            data = targetRef\r\n          } else { // Link the node to source data\r\n            readNode = x\r\n            data = result[sourceKey].targetRef\r\n          }\r\n          layeredAssignment(calc, x.path, resetData(readNode, data))\r\n        })\r\n      })\r\n    })\r\n  )\r\n  mergedData.forEach(([targetKey, data]) => {\r\n    delete data.teamBuff\r\n    const { targetRef, buffs } = result[targetKey]\r\n    const buff = mergeData(buffs)\r\n    crawlObject(buff ?? {}, [], (x => x.operation), (x: NumNode, path: string[]) => {\r\n      // CAUTION\r\n      // This is safe only because `buff` is created using only `resetData`\r\n      // and `mergeData`. So every node here is created from either of the\r\n      // two functions, so the mutation wont't affect existing nodes.\r\n      x.info = { ...(objPathValue(teamBuff, path) as ReadNode<number> | undefined)?.info, prefix: \"teamBuff\", pivot }\r\n    })\r\n    Object.assign(targetRef, mergeData([data, buff, { teamBuff: buff, activeCharKey: constant(activeCharKey) }]))\r\n    targetRef[\"target\"] = targetRef\r\n  })\r\n  const origin = new UIData(undefined as any, undefined)\r\n  return Object.fromEntries(Object.entries(result).map(([key, value]) =>\r\n    [key, {\r\n      target: new UIData(value.targetRef, origin),\r\n      buffs: Object.fromEntries(Object.entries(value.calcs).map(([key, value]) =>\r\n        [key, new UIData(value, origin)]))\r\n    }]))\r\n}\r\nfunction mergeData(data: Data[]): Data {\r\n  function internal(data: any[], path: string[]): any {\r\n    if (data.length <= 1) return data[0]\r\n    if (data[0].operation) {\r\n      if (path[0] === \"teamBuff\") path = path.slice(1)\r\n      const accu = path[0] === \"tally\"\r\n        ? \"add\" : (objPathValue(input, path) as ReadNode<number> | undefined)?.accu\r\n      if (accu === undefined) {\r\n        if (data.length !== 1)\r\n          throw new Error(`Multiple entries when merging \\`unique\\` for key ${path}`)\r\n        return data[0]\r\n      }\r\n      const result: NumNode = { operation: accu, operands: data }\r\n      return result\r\n    } else {\r\n      return Object.fromEntries([...new Set(data.flatMap(x => Object.keys(x) as string[]))]\r\n        .map(key => [key, internal(data.map(x => x[key]).filter(x => x), [...path, key])]))\r\n    }\r\n  }\r\n  return data.length ? internal(data, []) : {}\r\n}\r\n\r\nfunction computeUIData(data: Data[]): UIData {\r\n  return new UIData(mergeData(data), undefined)\r\n}\r\ntype ComparedNodeDisplay<V = number> = NodeDisplay<V> & { diff: V }\r\nfunction compareTeamBuffUIData(uiData1: UIData, uiData2: UIData): Input<ComparedNodeDisplay, ComparedNodeDisplay<string>> {\r\n  return compareInternal(uiData1.getTeamBuff(), uiData2.getTeamBuff())\r\n}\r\nfunction compareDisplayUIData(uiData1: UIData, uiData2: UIData): { [key: string]: DisplaySub<ComparedNodeDisplay> } {\r\n  return compareInternal(uiData1.getDisplay(), uiData2.getDisplay())\r\n}\r\nfunction compareInternal(data1: any | undefined, data2: any | undefined): any {\r\n  if (data1?.operation || data2?.operation) {\r\n    const d1 = data1 as NodeDisplay | undefined\r\n    const d2 = data2 as NodeDisplay | undefined\r\n\r\n    if ((d1 && !d1.operation) || (d2 && !d2.operation))\r\n      throw new Error(\"Unmatched structure when comparing UIData\")\r\n\r\n    const result: ComparedNodeDisplay = {\r\n      operation: true,\r\n      value: 0,\r\n      isEmpty: true,\r\n      unit: d2?.unit!,\r\n      formulas: [],\r\n      ...d1,\r\n      diff: (d2?.value ?? 0) - (d1?.value ?? 0)\r\n    }\r\n    if (typeof d1?.value === \"string\" || typeof d2?.value === \"string\") {\r\n      // In case `string` got involved, just use the other value\r\n      result.value = d1?.value ?? \"\" as any\r\n      result.diff = d2?.value ?? \"\" as any\r\n    }\r\n    return result\r\n  }\r\n\r\n  if (data1 || data2) {\r\n    const keys = new Set([...Object.keys(data1 ?? {}), ...Object.keys(data2 ?? {})])\r\n    return Object.fromEntries([...keys].map(key => [key, compareInternal(data1?.[key], data2?.[key])]))\r\n  }\r\n}\r\n\r\nexport type { NodeDisplay, UIData };\r\nexport {\r\n  dataObjForArtifact, dataObjForCharacter, dataObjForWeapon,\r\n  mergeData, computeUIData, inferInfoMut,\r\n  uiDataForTeam, compareTeamBuffUIData, compareDisplayUIData\r\n};\r\n","import { allEleEnemyResKeys } from \"../KeyMap\"\r\nimport { allArtifactSets, allElementsWithPhy, allRegions, allSlotKeys } from \"../Types/consts\"\r\nimport { crawlObject, deepClone, objectKeyMap, objectKeyValueMap } from \"../Util/Util\"\r\nimport { Data, Info, NumNode, ReadNode, StrNode } from \"./type\"\r\nimport { constant, equalStr, frac, infoMut, lookup, max, min, naught, percent, prod, read, res, setReadNodeKeys, stringRead, sum, unit } from \"./utils\"\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nconst allElements = allElementsWithPhy\r\nconst allTalents = [\"auto\", \"skill\", \"burst\"] as const\r\nconst allMoves = [\"normal\", \"charged\", \"plunging\", \"skill\", \"burst\", \"elemental\"] as const\r\nconst allArtModStats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\"] as const\r\nconst allArtNonModStats = [\"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nconst allTransformative = [\"overloaded\", \"shattered\", \"electrocharged\", \"superconduct\", \"swirl\"] as const\r\nconst allAmplifying = [\"vaporize\", \"melt\"] as const\r\nconst allMisc = [\r\n  \"stamina\", \"staminaDec_\", \"staminaSprintDec_\", \"staminaGlidingDec_\", \"staminaChargedDec_\",\r\n  \"incHeal_\", \"shield_\", \"cdRed_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\", \"dmgRed_\"\r\n] as const\r\n\r\nconst allModStats = [\r\n  ...allArtModStats,\r\n  ...([\"all\", \"burning\", ...allTransformative, ...allAmplifying, ...allMoves] as const).map(x => `${x}_dmg_` as const),\r\n]\r\nconst allNonModStats = [\r\n  ...allArtNonModStats,\r\n  ...allElements.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_res_` as const]),\r\n  ...allMoves.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_critRate_` as const]),\r\n  \"all_dmgInc\" as const,\r\n  ...allEleEnemyResKeys,\r\n  \"enemyDefRed_\" as const,\r\n  ...allMisc,\r\n]\r\n\r\nconst talent = objectKeyMap(allTalents, _ => read())\r\nconst allModStatNodes = objectKeyMap(allModStats, key => read(undefined, { key }))\r\nconst allNonModStatNodes = objectKeyMap(allNonModStats, key => read(undefined, { key }))\r\n\r\nfor (const ele of allElements) {\r\n  allNonModStatNodes[`${ele}_res_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_enemyRes_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_critDMG_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmg_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmgInc`].info!.variant = ele\r\n}\r\nfor (const reaction of [...allTransformative, ...allAmplifying]) {\r\n  allModStatNodes[`${reaction}_dmg_`].info!.variant = reaction\r\n}\r\n\r\nfunction withDefaultInfo<T>(info: Info, value: T): T {\r\n  value = deepClone(value)\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => x.info = { ...info, ...x.info, })\r\n  return value\r\n}\r\nfunction markAccu<T>(accu: ReadNode<number>[\"accu\"], value: T): void {\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => {\r\n    if (x.operation === \"read\" && x.type === \"number\") x.accu = accu\r\n  })\r\n}\r\n\r\n/** All read nodes */\r\nconst input = setReadNodeKeys(deepClone({\r\n  activeCharKey: stringRead(),\r\n  charKey: stringRead(), charEle: stringRead(), infusion: stringRead(), weaponType: stringRead(),\r\n  lvl: read(undefined, { key: \"level\", prefix: \"char\" }), constellation: read(), asc: read(), special: read(),\r\n\r\n  base: objectKeyMap(['atk', 'hp', 'def'], key => read(\"add\", { key })),\r\n  customBonus: withDefaultInfo({ prefix: \"custom\", pivot }, {\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n  }),\r\n  bonus: { ...talent },\r\n  premod: { ...talent, ...allModStatNodes, ...allNonModStatNodes },\r\n  total: withDefaultInfo({ prefix: \"total\", pivot }, {\r\n    ...talent, ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, read()]),\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n    /** Total Crit Rate capped to [0%, 100%] */\r\n    cappedCritRate: read(undefined, { key: \"critRate_\" }),\r\n  }),\r\n\r\n  art: withDefaultInfo({ prefix: \"art\", asConst }, {\r\n    ...objectKeyMap(allArtModStats, key => allModStatNodes[key]),\r\n    ...objectKeyMap(allArtNonModStats, key => allNonModStatNodes[key]),\r\n    ...objectKeyMap(allSlotKeys, _ => ({ id: stringRead(), set: stringRead() })),\r\n  }),\r\n  artSet: objectKeyMap(allArtifactSets, set => read(\"add\", { key: set })),\r\n\r\n  weapon: withDefaultInfo({ prefix: \"weapon\", asConst }, {\r\n    key: stringRead(), type: stringRead(),\r\n\r\n    lvl: read(), asc: read(), refinement: read(), refineIndex: read(),\r\n    main: read(), sub: read(), sub2: read(),\r\n  }),\r\n\r\n  team: { infusion: stringRead(\"prio\") },\r\n\r\n  enemy: {\r\n    def: read(\"add\", { key: \"enemyDef_multi\", pivot }),\r\n    ...objectKeyMap(allElements.map(ele => `${ele}_resMulti` as const), _ => read()),\r\n\r\n    level: read(undefined, { key: \"enemyLevel\" }),\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_res_`, read(undefined)]),\r\n    defRed: read(undefined),\r\n    defIgn: read(\"add\", { key: \"enemyDefIgn_\", pivot }),\r\n  },\r\n\r\n  hit: {\r\n    ele: stringRead(), reaction: stringRead(), move: stringRead(), hitMode: stringRead(),\r\n    base: read(\"add\", { key: \"base\" }),\r\n\r\n    dmgBonus: read(\"add\", { key: \"dmg_\", pivot }),\r\n    dmgInc: read(\"add\", { key: \"dmgInc\", pivot }),\r\n    dmg: read(),\r\n  },\r\n}))\r\n\r\nconst { base, bonus, customBonus, premod, total, art, hit, enemy } = input\r\n\r\n// Adjust `info` for printing\r\nmarkAccu('add', {\r\n  bonus, customBonus, premod, art,\r\n  total: objectKeyMap(allModStats, stat => total[stat]),\r\n})\r\nbonus.auto.info = { key: \"autoBoost\" }\r\nbonus.skill.info = { key: \"skillBoost\" }\r\nbonus.burst.info = { key: \"burstBoost\" }\r\nbase.atk.info = { key: \"atk\", prefix: \"base\", pivot }\r\ndelete total.critRate_.info!.pivot\r\ntotal.critRate_.info!.prefix = \"uncapped\"\r\n\r\n// Nodes that are not used anywhere else but `common` below\r\n\r\n/** Base Amplifying Bonus */\r\nconst baseAmpBonus = sum(unit, prod(25 / 9, frac(total.eleMas, 1400)))\r\n/** Effective reaction, taking into account the hit's element */\r\nexport const effectiveReaction = lookup(hit.ele, {\r\n  pyro: lookup(hit.reaction, { pyro_vaporize: constant(\"vaporize\"), pyro_melt: constant(\"melt\") }, undefined),\r\n  hydro: equalStr(hit.reaction, \"hydro_vaporize\", \"vaporize\"),\r\n  cryo: equalStr(hit.reaction, \"cryo_melt\", \"melt\"),\r\n}, undefined)\r\n\r\nconst common: Data = {\r\n  premod: {\r\n    ...objectKeyMap(allTalents, talent => bonus[talent]),\r\n    ...objectKeyMap(allNonModStats, key => customBonus[key]),\r\n    ...objectKeyMap([...allModStats, ...allArtNonModStats] as const, key => {\r\n      const operands: NumNode[] = []\r\n      switch (key) {\r\n        case \"atk\": case \"def\": case \"hp\":\r\n          operands.push(prod(base[key], sum(unit, premod[`${key}_`])))\r\n          break\r\n        case \"critRate_\":\r\n          operands.push(percent(0.05, { key, prefix: \"default\" }),\r\n            lookup(hit.move, objectKeyMap(allMoves, move => premod[`${move}_critRate_`]), 0))\r\n          break\r\n        case \"critDMG_\":\r\n          operands.push(percent(0.5, { key, prefix: \"default\" }),\r\n            lookup(hit.ele, objectKeyMap(allElements, ele => premod[`${ele}_critDMG_`]), 0),\r\n            lookup(hit.move, objectKeyMap(allMoves, ele => premod[`${ele}_critDMG_`]), 0))\r\n          break\r\n        case \"enerRech_\":\r\n          operands.push(percent(1, { key, prefix: \"default\" }))\r\n          break\r\n      }\r\n      return sum(...[...operands, art[key], customBonus[key]].filter(x => x))\r\n    }),\r\n  },\r\n  total: {\r\n    ...objectKeyMap(allTalents, talent => premod[talent]),\r\n    ...objectKeyMap(allModStats, key => premod[key]),\r\n    ...objectKeyMap(allNonModStats, key => premod[key]),\r\n    ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, sum(total[talent], -1)]),\r\n    stamina: sum(constant(100, { key: \"stamina\", prefix: \"default\" }), customBonus.stamina),\r\n\r\n    cappedCritRate: max(min(total.critRate_, unit), naught),\r\n  },\r\n\r\n  hit: {\r\n    dmgBonus: sum(\r\n      total.all_dmg_,\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmg_`]), naught),\r\n      lookup(hit.ele, objectKeyMap(allElements, ele => total[`${ele}_dmg_`]), naught)\r\n    ),\r\n    dmgInc: sum(\r\n      total.all_dmgInc,\r\n      lookup(hit.ele, objectKeyMap(allElements, element => total[`${element}_dmgInc`]), NaN),\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmgInc`]), NaN)\r\n    ),\r\n    dmg: prod(\r\n      sum(hit.base, hit.dmgInc),\r\n      sum(unit, hit.dmgBonus),\r\n      lookup(hit.hitMode, {\r\n        hit: unit,\r\n        critHit: sum(unit, total.critDMG_),\r\n        avgHit: sum(unit, prod(total.cappedCritRate, total.critDMG_)),\r\n      }, NaN),\r\n      enemy.def,\r\n      lookup(hit.ele,\r\n        objectKeyMap(allElements, ele => enemy[`${ele}_resMulti` as const]), NaN),\r\n      lookup(effectiveReaction, {\r\n        melt: lookup(hit.ele, {\r\n          pyro: prod(2, sum(baseAmpBonus, total.melt_dmg_)),\r\n          cryo: prod(1.5, sum(baseAmpBonus, total.melt_dmg_)),\r\n        }, 1, { key: \"melt_dmg_\" }),\r\n        vaporize: lookup(hit.ele, {\r\n          hydro: prod(2, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n          pyro: prod(1.5, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n        }, 1, { key: \"vaporize_dmg_\" }),\r\n      }, 1),\r\n    ),\r\n  },\r\n\r\n  enemy: {\r\n    // TODO: shred cap of 90%\r\n    def: frac(sum(input.lvl, 100), prod(sum(enemy.level, 100), sum(unit, prod(-1, enemy.defRed)), sum(unit, prod(-1, enemy.defIgn)))),\r\n    defRed: total.enemyDefRed_,\r\n    ...objectKeyValueMap(allElements, ele =>\r\n      [`${ele}_resMulti`, res(infoMut(sum(enemy[`${ele}_res_`], total[`${ele}_enemyRes_`]), { key: `${ele}_res_`, variant: ele }))]),\r\n  },\r\n}\r\n\r\nconst target = setReadNodeKeys(deepClone(input), [\"target\"])\r\nconst tally = setReadNodeKeys(objectKeyMap([...allElements, ...allRegions], _ => read(\"add\")), [\"tally\"])\r\n\r\n/**\r\n * List of `input` nodes, rearranged to conform to the needs of the\r\n * UI code. This is a separate list so that the evolution of the UIs\r\n * does not rely on the structure of `input`. So the UI code can rearrange\r\n * nodes as it sees fit without requiring updates to data sheets, which\r\n * pertains ~90% of all `input`-related code, and so are very sensitive\r\n * to any changes to `input`. For zero overhead, use the nodes directly\r\n * from `input` instead of a copy.\r\n */\r\nconst uiInput = input\r\n\r\nexport {\r\n  input, uiInput, common, customBonus,\r\n\r\n  target, tally,\r\n}\r\n","import { AnyNode, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\r\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\r\n\r\n  function traverse(formula: (NumNode | StrNode)) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\r\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\r\n  const visiting = new Set<(NumNode | StrNode)>()\r\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n\r\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    let topDown = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual(result, formulas) ? formulas : result\r\n}\r\n\r\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\r\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\r\n  const visiting = new Set<AnyNode>()\r\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n\r\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\r\n    let topDownMapping = topDownByContext.get(parentContextId)\r\n    if (!topDownMapping) {\r\n      topDownMapping = new Map()\r\n      topDownByContext.set(parentContextId, topDownMapping)\r\n    }\r\n\r\n    let topDown = topDownMapping.get(formula)\r\n    if (topDown) return topDown\r\n    let topDownContextId: number\r\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n\r\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\r\n    if (!bottomUpMapping) {\r\n      bottomUpMapping = new Map()\r\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\r\n    }\r\n\r\n    let bottomUp = bottomUpMapping.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    visiting.add(topDown)\r\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\r\n    visiting.delete(topDown)\r\n\r\n    bottomUpMapping.set(topDown, bottomUp)\r\n    topDownMapping.set(formula, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\r\n    const operands = formula.operands.map(f => check(f, contextId))\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(f => check(f, baseContextId))\r\n  return arrayEqual(formulas, result) ? formulas : result\r\n}\r\n\r\ntype ContextID = number\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { forEachNodes, mapFormulas } from \"./internal\"\r\nimport { constant } from \"./utils\"\r\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  formulas = constantFold(formulas, topLevelData, shouldFold)\r\n  formulas = flatten(formulas)\r\n  formulas = deduplicate(formulas)\r\n  return formulas\r\n}\r\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): (values: Dict<string, number>) => number[] {\r\n  // TODO: Use min-cut to minimize the size of interim array\r\n  type Reference = string | number | { ins: Reference[] }\r\n\r\n  const uniqueReadStrings = new Set<string>()\r\n  const uniqueNumbers = new Set<number>()\r\n  const mapping = new Map<NumNode, Reference>()\r\n\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\r\n          throw new Error(`Unsupported ${operation} node in precompute`)\r\n        const name = binding(f)\r\n        uniqueReadStrings.add(name)\r\n        mapping.set(f, name)\r\n        break\r\n      case \"add\": case \"min\": case \"max\": case \"mul\":\r\n      case \"threshold\": case \"res\": case \"sum_frac\":\r\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\r\n        break\r\n      case \"const\":\r\n        if (typeof f.value !== \"number\")\r\n          throw new Error(\"Found string constant while precomputing\")\r\n        const value = f.value\r\n        uniqueNumbers.add(value)\r\n        mapping.set(f as ConstantNode<number>, value)\r\n        break\r\n      case \"match\": case \"lookup\": case \"subscript\":\r\n      case \"prio\":\r\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  /**\r\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\r\n   *\r\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\r\n   * in the same order as formulas even when they are duplicated. Inputs\r\n   * are arranged in the same order as the read strings, even when they\r\n   * overlap with outputs. If an output is a constant or a compute node,\r\n   * only put the data in the output region.\r\n   */\r\n  const locations = new Map<NumNode | number | string, number>()\r\n\r\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\r\n  const constValues = [...uniqueNumbers]\r\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\r\n\r\n  formulas.forEach((f, i) => {\r\n    locations.set(f, i)\r\n    if (f.operation === \"const\") locations.set(f.value, i)\r\n  })\r\n  // After this line, if some outputs are also read node, `locations`\r\n  // will point to the one in the read node portion instead.\r\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\r\n  let offset = formulas.length + readStrings.length\r\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\r\n\r\n  // `locations` is stable from this point on. We now only append new values.\r\n  // There is no change to existing values.\r\n  //\r\n  // DO NOT read from `location` prior to this line.\r\n  mapping.forEach((ref, node) => {\r\n    if (typeof ref !== \"object\") {\r\n      locations.set(node, locations.get(ref)!)\r\n      return\r\n    }\r\n    if (!locations.has(node)) locations.set(node, offset++)\r\n    computations.push({\r\n      out: locations.get(node)!,\r\n      ins: node.operands.map(op => locations.get(op)!),\r\n      op: allOperations[node.operation],\r\n      buff: Array(node.operands.length).fill(0),\r\n    })\r\n  })\r\n\r\n  const buffer = Array(offset).fill(0)\r\n  buffer.forEach((_, i, array) => array[i] = NaN)\r\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\r\n\r\n  // Copy target for when some outputs are duplicated\r\n  const copyList = formulas.map((node, i) => {\r\n    const src = locations.get(node)!\r\n    return src !== i ? [src, i] : undefined!\r\n  }).filter(x => x)\r\n  const copyFormula = copyList.length ? () => {\r\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\r\n  } : undefined\r\n\r\n  return values => {\r\n    readStrings.forEach((id, i) => buffer[readOffset + i] = values[id] ?? 0)\r\n    computations.forEach(({ out, ins, op, buff }) => {\r\n      ins.forEach((i, j) => buff[j] = buffer[i])\r\n      buffer[out] = op(buff)\r\n    })\r\n    copyFormula?.()\r\n    return buffer\r\n  }\r\n}\r\n\r\nfunction flatten(formulas: NumNode[]): NumNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\r\n      const formula = _formula as ComputeNode\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<NumNode, number>(),\r\n      formulas: new Set<NumNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula as NumNode)) {\r\n        const formula = _formula as ComputeNode\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<NumNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  function fold(formula: StrNode, context: Context): StrNode\r\n  function fold(formula: NumNode, context: Context): NumNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\r\n    const old = context.processed.get(formula)\r\n    if (old) return old\r\n\r\n    const { operation } = formula\r\n    let result: NumNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": return formula\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = fold(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = fold(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        if (!first)\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = fold(first, context)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\r\n        if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const [index] = formula.operands.map(x => fold(x, context))\r\n        result = (index.operation === \"const\")\r\n          ? constant(formula.list[index.value])\r\n          : { ...formula, operands: [index] }\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined || accu === \"prio\")\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined)\r\n          result = fold(operands[operands.length - 1], context)\r\n        else\r\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\r\n        break\r\n      }\r\n      case \"data\":\r\n        if (formula.reset) context = origin\r\n        const map = nextContextMap.get(context)!\r\n        let nextContext = map.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          map.set(formula.data, nextContext)\r\n        }\r\n        result = fold(formula.operands[0], nextContext)\r\n        break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    context.processed.set(formula, result)\r\n    return result\r\n  }\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return formulas.map(x => fold(x, context))\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","import { absorbableEle } from \"../Data/Characters/dataUtil\";\r\nimport { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../StatConstants\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\r\n\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype Any = Num | Str\r\n\r\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\r\nexport const unit = percent(1), naught = percent(0)\r\n\r\nexport function constant(value: number, info?: Info): NumNode\r\nexport function constant(value: string | undefined, info?: Info): StrNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\r\n  return { operation: \"const\", operands: [], value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): NumNode {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { key: \"_\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\r\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\r\n  return { operation: \"lookup\", operands, table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Num[]): NumNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Num[]): NumNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Num[]): NumNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Num[]): NumNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Num, c: Num): NumNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Num): NumNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\r\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\r\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: Any[]): AnyNode[]\r\nfunction intoOps(values: Any[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: Num | Str): NumNode | StrNode\r\nfunction intoV(value: Any): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\n\r\ntype _NodeList = {\r\n  [key: string]: NodeList\r\n} & {\r\n  operation?: never\r\n}\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n\r\n/*\r\n * Deprecated\r\n */\r\n\r\n/**\r\n * value >= threshold ? value : emptyValue\r\n * @deprecated Use `greaterEq`, `lessEq`, or `greaterEqStr` instead\r\n */\r\nexport function threshold(value: Num, threshold: Num, pass: Str, fail: Str, info?: Info): StrNode\r\nexport function threshold(value: Num, threshold: Num, pass: Num, fail: Num, info?: Info): NumNode\r\nexport function threshold(value: Num, threshold: Num, pass: Num | Str, fail: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(value), intoV(threshold), intoV(pass), intoV(fail)] as any\r\n  return { operation: \"threshold\", operands, info }\r\n}\r\n/**\r\n * value >= threshold ? addition : 0\r\n * @deprecated Use `greaterEq` or `lessEq` instead\r\n */\r\nexport function threshold_add(value: Num, thres: Num, addition: Num, info?: Info): NumNode {\r\n  return threshold(value, thres, addition, 0, info)\r\n}\r\n\r\n/**\r\n * `v1` === `v2` ? `match` : 0\r\n * @deprecated Use `equal` instead\r\n */\r\nexport function match(v1: Str, v2: Str, match: Num, info?: Info): NumNode {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/**\r\n * `v1` === `v2` ? 0 : `unmatch`\r\n * @deprecated Use `unequal` instead\r\n */\r\nexport function unmatch(v1: Str, v2: Str, unmatch: Num, info?: Info): NumNode {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(unmatch)], info, emptyOn: \"match\" }\r\n}\r\n/**\r\n * `v1` === `v2` ? `match` : `unmatch`\r\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\r\n */\r\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport default function usePromise<T>(promise: Promise<T> | undefined, dependencies: any[]): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    promise?.then(res => pending && setRes(() => res), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res\r\n}"],"names":["Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","CloseButton","large","props","t","useTranslation","color","startIcon","sx","p","minWidth","DropdownButton","title","children","id","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","ImgIcon","name","slot","size","display","verticalAlign","ScrollModal","Modal","overflow","paddingTop","spacing","paddingBottom","ModalContainer","Container","padding","minHeight","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","variant","SolidToggleButtonGroup","ToggleButtonGroup","shouldForwardProp","prop","baseColor","selectedColor","contrastText","dark","SqBadge","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","borderRadius","StarIcon","icon","faStar","Stars","stars","colored","component","Array","keys","map","_","i","uncoloredEleIcons","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","coloredEleIcon","objectKeyMap","Object","key","StatIcon","hp_","faHp","hp","atk_","faAtk","atk","def_","faDef","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faDiceD20","enerRech_","faEnergyRecharge","heal_","faHealingBonus","cdRed_","faCdReduction","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","characterSheets","then","imp","default","CharacterSheet","charSheet","data","sheet","isMelee","weaponTypeKey","getTalent","eleKey","talent","talents","getTalentOfKey","talentKey","sheets","this","src","thumbImgSide","marginTop","marginLeft","cardImg","thumbImg","bannerImg","rarity","elementKey","constellationName","get","charKey","c","getLevelString","level","ascension","ascensionMaxLevel","talentTemplate","tr","img","fields","conditional","sections","text","header","conditionalHeader","description","talentStrMap","auto","skill","burst","passive","passive1","passive2","passive3","sprint","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","m","action","normalSrc","weaponKey","absorbableEle","charCurves","objectMap","_charCurves","value","values","commonBasic","allSubstats","input","inferredHitEle","stringPrio","equalStr","getTalentType","move","customDmgNode","base","additional","mergeData","hit","constant","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","healNodeTalent","dataObjForCharacterSheet","element","region","gen","curve","lvlCurve","basic","foundSpecial","weaponType","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","NaN","length","result","infoMut","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","shouldWrap","UIData","parent","origin","Map","nodes","processed","getAll","calculated","crawlObject","uiInput","operation","path","node","objPathValue","console","trace","isEmpty","formulas","old","dependencies","formula","assignment","empty","KeyMap","computeNodeDisplay","computeNode","set","_compute","_threshold","_constant","_subscript","_read","_data","_match","_lookup","_prio","operands","assertUnreachable","source","fixed","pivot","Set","mayNeedWrapping","valueDisplay","valueString","prefixDisplay","sourceDisplay","createDisplay","filter","prereadAll","find","first","illformedStr","accu","readFirst","type","illformed","_accumulate","readAll","selected","table","v1Node","v2Node","matchNode","unmatchNode","v1","v2","matching","emptyOn","makeEmpty","valueNode","thresholdNode","pass","fail","threshold","child","reset","operand","unique","delete","has","next","mergeVariants","identity","allOperations","fStr","separator","every","strings","predisplay","forEach","string","item","array","itemFormula","createFormulaComponent","add","mergeFormulaComponents","style","components","emptyValue","reference","error","dataObjForArtifact","art","mainStatAssumptionLevel","mainStatVal","Artifact","mainStatKey","Math","max","min","stats","substats","accurateValue","slotKey","setKey","artSet","dataObjForCharacter","char","lvl","constellation","asc","enemy","allElementsWithPhy","enemyOverride","enemyLevel","hitMode","reactionMode","customBonus","entries","bonusStats","enemyDefRed_","enemyDefIgn_","defIgn","dataObjForWeapon","weapon","refinement","refineIndex","setReadNodeKeys","deepClone","uiDataForTeam","teamData","activeCharKey","mergedData","targetRef","buffs","calcs","customReadNodes","getReadNode","custom","newNode","customRead","sourceKey","sourceBuff","buff","calc","resetData","readNode","targetKey","assign","target","internal","computeUIData","allElements","allTalents","allMoves","allArtModStats","allArtNonModStats","allTransformative","allAmplifying","allModStats","allNonModStats","allEleEnemyResKeys","read","allModStatNodes","allNonModStatNodes","withDefaultInfo","stringRead","infusion","bonus","total","objectKeyValueMap","cappedCritRate","allSlotKeys","allArtifactSets","sub","sub2","team","defRed","dmgBonus","dmgInc","dmg","baseAmpBonus","frac","effectiveReaction","lookup","pyro_vaporize","pyro_melt","common","naught","all_dmg_","all_dmgInc","critHit","avgHit","melt","melt_dmg_","vaporize","vaporize_dmg_","res","allRegions","forEachNodes","topDown","bottomUp","visiting","visited","traverse","mapFormulas","topDownMap","bottomUpMap","topDownMapped","bottomUpMapped","check","arrayEqual","a","b","allCommutativeMonoidOperations","reduce","mul","sum_frac","commutativeMonoidOperationSet","optimize","topLevelData","shouldFold","_formula","deduplicate","flatten","constantFold","f","flattened","dep","elementCounts","wrap","counts","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","dependency","currentCount","commonCount","candidates","candidate","candidateCounts","candidateCount","clear","nextContextMap","fold","context","numericOperands","formulaOperands","folded","numericValue","isFinite","index","op","match","unmatch","nextContext","crystallizeMulti1","crystallizeLevelMultipliers","crystallizeElemas","crystallizeHit","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","transformativeReactions","multi","variants","swirl","electroSwirl","pyroSwirl","cryoSwirl","hydroSwirl","shattered","crystallize","e","overloaded","electrocharged","superconduct","Number","MAX_VALUE","Infinity","defaultV","intoV","intoOps","equal","unequal","greaterEq","greaterEqStr","lessThan","nodeList","customStringRead","matchFull","useForceUpdate","stateDirty","update","usePromise","promise","setRes","useEffect","pending"],"sourceRoot":""}